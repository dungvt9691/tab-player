(function(H) {
    H.tabPro = H.tabPro || {};
    H.tabPro.model = H.tabPro.model || {};
    var p = {},
        l = function() {
            return h.Boot.__string_rec(this, "")
        };

    function v(Z, q) {
        function W() {}
        W.prototype = Z;
        var Y = new W();
        for (var X in q) {
            Y[X] = q[X]
        }
        if (q.toString !== Object.prototype.toString) {
            Y.toString = q.toString
        }
        return Y
    }
    var n = function() {};
    p.DateTools = n;
    n.__name__ = ["DateTools"];
    n.delta = function(Y, q) {
        var W = Y.getTime() + q;
        var X = new Date();
        X.setTime(W);
        return X
    };
    var K = function(W, q) {
        q = q.split("u").join("");
        this.r = new RegExp(W, q)
    };
    p.EReg = K;
    K.__name__ = ["EReg"];
    K.prototype = {
        match: function(q) {
            if (this.r.global) {
                this.r.lastIndex = 0
            }
            this.r.m = this.r.exec(q);
            this.r.s = q;
            return this.r.m != null
        },
        matched: function(q) {
            if (this.r.m != null && q >= 0 && q < this.r.m.length) {
                return this.r.m[q]
            } else {
                throw "EReg::matched"
            }
        },
        replace: function(q, W) {
            return q.replace(this.r, W)
        },
        __class__: K
    };
    var B = function() {};
    p.HxOverrides = B;
    B.__name__ = ["HxOverrides"];
    B.cca = function(X, W) {
        var q = X.charCodeAt(W);
        if (q != q) {
            return undefined
        }
        return q
    };
    B.substr = function(W, X, q) {
        if (X != null && X != 0 && q != null && q < 0) {
            return ""
        }
        if (q == null) {
            q = W.length
        }
        if (X < 0) {
            X = W.length + X;
            if (X < 0) {
                X = 0
            }
        } else {
            if (q < 0) {
                q = W.length + q - X
            }
        }
        return W.substr(X, q)
    };
    B.indexOf = function(W, Y, X) {
        var q = W.length;
        if (X < 0) {
            X += q;
            if (X < 0) {
                X = 0
            }
        }
        while (X < q) {
            if (W[X] === Y) {
                return X
            }
            X++
        }
        return -1
    };
    B.remove = function(q, X) {
        var W = B.indexOf(q, X, 0);
        if (W == -1) {
            return false
        }
        q.splice(W, 1);
        return true
    };
    B.iter = function(q) {
        return {
            cur: 0,
            arr: q,
            hasNext: function() {
                return this.cur < this.arr.length
            },
            next: function() {
                return this.arr[this.cur++]
            }
        }
    };
    var y = function() {};
    p.Lambda = y;
    y.__name__ = ["Lambda"];
    y.has = function(X, W) {
        var Y = I(X)();
        while (Y.hasNext()) {
            var q = Y.next();
            if (q == W) {
                return true
            }
        }
        return false
    };
    y.filter = function(X, Z) {
        var W = new t();
        var Y = I(X)();
        while (Y.hasNext()) {
            var q = Y.next();
            if (Z(q)) {
                W.add(q)
            }
        }
        return W
    };
    y.indexOf = function(X, q) {
        var W = 0;
        var Y = I(X)();
        while (Y.hasNext()) {
            var Z = Y.next();
            if (q == Z) {
                return W
            }
            W++
        }
        return -1
    };
    var t = function() {
        this.length = 0
    };
    p.List = t;
    t.__name__ = ["List"];
    t.prototype = {
        add: function(W) {
            var q = [W];
            if (this.h == null) {
                this.h = q
            } else {
                this.q[1] = q
            }
            this.q = q;
            this.length++
        },
        pop: function() {
            if (this.h == null) {
                return null
            }
            var q = this.h[0];
            this.h = this.h[1];
            if (this.h == null) {
                this.q = null
            }
            this.length--;
            return q
        },
        isEmpty: function() {
            return this.h == null
        },
        remove: function(W) {
            var X = null;
            var q = this.h;
            while (q != null) {
                if (q[0] == W) {
                    if (X == null) {
                        this.h = q[1]
                    } else {
                        X[1] = q[1]
                    }
                    if (this.q == q) {
                        this.q = X
                    }
                    this.length--;
                    return true
                }
                X = q;
                q = q[1]
            }
            return false
        },
        iterator: function() {
            return {
                h: this.h,
                hasNext: function() {
                    return this.h != null
                },
                next: function() {
                    if (this.h == null) {
                        return null
                    }
                    var q = this.h[0];
                    this.h = this.h[1];
                    return q
                }
            }
        },
        __class__: t
    };
    var j = function() {};
    p.IMap = j;
    j.__name__ = ["IMap"];
    j.prototype = {
        __class__: j
    };
    Math.__name__ = ["Math"];
    var D = function() {};
    p.Reflect = D;
    D.__name__ = ["Reflect"];
    D.field = function(X, W) {
        try {
            return X[W]
        } catch (q) {
            return null
        }
    };
    D.setField = function(X, W, q) {
        X[W] = q
    };
    D.getProperty = function(X, W) {
        var q;
        if (X == null) {
            return null
        } else {
            if (X.__properties__ && (q = X.__properties__["get_" + W])) {
                return X[q]()
            } else {
                return X[W]
            }
        }
    };
    D.callMethod = function(X, W, q) {
        return W.apply(X, q)
    };
    D.isFunction = function(q) {
        return typeof(q) == "function" && !(q.__name__ || q.__ename__)
    };
    D.compare = function(W, q) {
        if (W == q) {
            return 0
        } else {
            if (W > q) {
                return 1
            } else {
                return -1
            }
        }
    };
    D.isEnumValue = function(q) {
        return q != null && q.__enum__ != null
    };
    var A = function() {};
    p.Std = A;
    A.__name__ = ["Std"];
    A.string = function(q) {
        return h.Boot.__string_rec(q, "")
    };
    A["int"] = function(q) {
        return q | 0
    };
    A.parseInt = function(q) {
        var W = parseInt(q, 10);
        if (W == 0 && (B.cca(q, 1) == 120 || B.cca(q, 1) == 88)) {
            W = parseInt(q)
        }
        if (isNaN(W)) {
            return null
        }
        return W
    };
    A.parseFloat = function(q) {
        return parseFloat(q)
    };
    var g = function() {
        this.b = ""
    };
    p.StringBuf = g;
    g.__name__ = ["StringBuf"];
    g.prototype = {
        add: function(q) {
            this.b += A.string(q)
        },
        addSub: function(W, X, q) {
            if (q == null) {
                this.b += B.substr(W, X, null)
            } else {
                this.b += B.substr(W, X, q)
            }
        },
        __class__: g
    };
    var O = function() {};
    p.StringTools = O;
    O.__name__ = ["StringTools"];
    O.urlDecode = function(q) {
        var W = "";
        try {
            W = decodeURIComponent(q.split("+").join(" "))
        } catch (X) {}
        return W
    };
    O.htmlEscape = function(W, q) {
        W = W.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
        if (q) {
            return W.split('"').join("&quot;").split("'").join("&#039;")
        } else {
            return W
        }
    };
    O.endsWith = function(X, q) {
        var W = q.length;
        var Y = X.length;
        return Y >= W && B.substr(X, Y - W, W) == q
    };
    O.isSpace = function(q, X) {
        var W = B.cca(q, X);
        return W > 8 && W < 14 || W == 32
    };
    O.ltrim = function(W) {
        var q = W.length;
        var X = 0;
        while (X < q && O.isSpace(W, X)) {
            X++
        }
        if (X > 0) {
            return B.substr(W, X, q - X)
        } else {
            return W
        }
    };
    O.rtrim = function(W) {
        var q = W.length;
        var X = 0;
        while (X < q && O.isSpace(W, q - X - 1)) {
            X++
        }
        if (X > 0) {
            return B.substr(W, 0, q - X)
        } else {
            return W
        }
    };
    O.trim = function(q) {
        return O.ltrim(O.rtrim(q))
    };
    O.replace = function(W, q, X) {
        return W.split(q).join(X)
    };
    O.hex = function(Y, W) {
        var q = "";
        var X = "0123456789ABCDEF";
        do {
            q = X.charAt(Y & 15) + q;
            Y >>>= 4
        } while (Y > 0);
        if (W != null) {
            while (q.length < W) {
                q = "0" + q
            }
        }
        return q
    };
    O.fastCodeAt = function(W, q) {
        return W.charCodeAt(q)
    };
    var F = H.TabProPlayer = function() {};
    p.TabProPlayer = F;
    F.__name__ = ["TabProPlayer"];
    F.main = function() {
        if (P.net.BrowserTools.isIE() && typeof window.execScript != "undefined") {
            window.execScript('\nFunction VbAjaxLoader(method, fileName)\nDim xhr\nSet xhr = CreateObject("Microsoft.XMLHTTP")\nxhr.Open method, fileName, False\nxhr.setRequestHeader "Accept-Charset", "x-user-defined"\nxhr.send\nDim byteArray()\nif xhr.Status = 200 Then\nDim byteString\nDim i\nbyteString=xhr.responseBody\nReDim byteArray(LenB(byteString))\nFor i = 1 To LenB(byteString)\nbyteArray(i - 1) = AscB(MidB(byteString, i, 1))\nNext\nEnd If\nVbAjaxLoader = byteArray\nEnd Function', "vbscript")
        }
        var W = 0;
        var X = ["ms", "moz", "webkit", "o"];
        for (var q = 0; q < X.length && !window.requestAnimationFrame; ++q) {
            window.requestAnimationFrame = window[X[q] + "RequestAnimationFrame"];
            window.cancelAnimationFrame = window[X[q] + "CancelAnimationFrame"] || window[X[q] + "CancelRequestAnimationFrame"]
        }
        if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = function(ac, Z) {
                var Y = new Date().getTime();
                var aa = Math.max(0, 16 - (Y - W));
                var ab = window.setTimeout(function() {
                    ac(Y + aa)
                }, aa);
                W = Y + aa;
                return ab
            }
        }
        if (!window.cancelAnimationFrame) {
            window.cancelAnimationFrame = function(Y) {
                clearTimeout(Y)
            }
        }
    };
    F.init = function(X, W) {
        var q = U.AppFacade.getInstance();
        q.sendNotification("Startup", {
            params: X,
            setts: W
        });
        q.sendNotification("InitNotesPlayer")
    };
    F.loadTab = function(q) {
        U.AppFacade.getInstance().sendNotification("LoadSong", q)
    };
    F.play = function() {
        U.AppFacade.getInstance().sendNotification("IntentTogglePlay")
    };
    F.changeTrack = function(q) {
        U.AppFacade.getInstance().sendNotification("ChangeTrack", q)
    };
    F.resize = function() {
        U.AppFacade.getInstance().sendNotification("ResizeWindow")
    };
    F.moveToFirstNotEmptyMeasure = function() {
        U.AppFacade.getInstance().sendNotification("MoveToFirstNotEmptyMeasure")
    };
    F.moveToTabPosition = function(q, W, X) {
        U.AppFacade.getInstance().moveToTabPosition(q, W, X)
    };
    F.getVersion = function() {
        return F.CURRENT_VERSION
    };
    F.setTrackSolo = function(q, X) {
        var W = {
            trackNumber: q,
            value: X
        };
        U.AppFacade.getInstance().sendNotification("SetTrackSolo", W)
    };
    F.print = function() {
        U.AppFacade.getInstance().sendNotification("IntentPrint")
    };
    F.setBeginnerMode = function(q) {
        U.AppFacade.getInstance().sendNotification("SetBeginnerMode", q)
    };
    F.toggleFretboard = function(W, q, X) {
        if (q == null) {
            q = true
        }
        U.AppFacade.getInstance().sendNotification("IntentToggleFretboard", {
            active: W,
            withAnimation: q,
            callback: X
        })
    };
    F.setTemp = function(q) {
        U.AppFacade.getInstance().sendNotification("IntentChangeTemp", q)
    };
    F.toggleSettings = function(q) {
        U.AppFacade.getInstance().sendNotification("IntentToggleSettings", q)
    };
    F.toggleEqualizer = function(q) {
        U.AppFacade.getInstance().sendNotification("ToggleEqualizer", q)
    };
    F.changePitch = function(q) {
        U.AppFacade.getInstance().sendNotification("IntentChangePitch", q)
    };
    F.getTablature = function() {
        return U.AppFacade.getInstance().getTablature()
    };
    F.getFretboard = function() {
        return U.AppFacade.getInstance().getFretboard()
    };
    F.isPlaying = function() {
        return U.AppFacade.getInstance().isPlaying()
    };
    var d = {
        __ename__: true,
        __constructs__: ["TNull", "TInt", "TFloat", "TBool", "TObject", "TFunction", "TClass", "TEnum", "TUnknown"]
    };
    d.TNull = ["TNull", 0];
    d.TNull.toString = l;
    d.TNull.__enum__ = d;
    d.TInt = ["TInt", 1];
    d.TInt.toString = l;
    d.TInt.__enum__ = d;
    d.TFloat = ["TFloat", 2];
    d.TFloat.toString = l;
    d.TFloat.__enum__ = d;
    d.TBool = ["TBool", 3];
    d.TBool.toString = l;
    d.TBool.__enum__ = d;
    d.TObject = ["TObject", 4];
    d.TObject.toString = l;
    d.TObject.__enum__ = d;
    d.TFunction = ["TFunction", 5];
    d.TFunction.toString = l;
    d.TFunction.__enum__ = d;
    d.TClass = function(W) {
        var q = ["TClass", 6, W];
        q.__enum__ = d;
        q.toString = l;
        return q
    };
    d.TEnum = function(W) {
        var q = ["TEnum", 7, W];
        q.__enum__ = d;
        q.toString = l;
        return q
    };
    d.TUnknown = ["TUnknown", 8];
    d.TUnknown.toString = l;
    d.TUnknown.__enum__ = d;
    var R = function() {};
    p.Type = R;
    R.__name__ = ["Type"];
    R.getClass = function(q) {
        if (q == null) {
            return null
        }
        if ((q instanceof Array) && q.__enum__ == null) {
            return Array
        } else {
            return q.__class__
        }
    };
    R.getClassName = function(W) {
        var q = W.__name__;
        return q.join(".")
    };
    R.resolveClass = function(W) {
        var q = p[W];
        if (q == null || !q.__name__) {
            return null
        }
        return q
    };
    R.createInstance = function(q, W) {
        var X = W.length;
        switch (X) {
            case 0:
                return new q();
            case 1:
                return new q(W[0]);
            case 2:
                return new q(W[0], W[1]);
            case 3:
                return new q(W[0], W[1], W[2]);
            case 4:
                return new q(W[0], W[1], W[2], W[3]);
            case 5:
                return new q(W[0], W[1], W[2], W[3], W[4]);
            case 6:
                return new q(W[0], W[1], W[2], W[3], W[4], W[5]);
            case 7:
                return new q(W[0], W[1], W[2], W[3], W[4], W[5], W[6]);
            case 8:
                return new q(W[0], W[1], W[2], W[3], W[4], W[5], W[6], W[7]);
            default:
                throw "Too many arguments"
        }
        return null
    };
    R.createEmptyInstance = function(q) {
        function W() {}
        W.prototype = q.prototype;
        return new W()
    };
    R.createEnum = function(X, q, Y) {
        var W = D.field(X, q);
        if (W == null) {
            throw "No such constructor " + q
        }
        if (D.isFunction(W)) {
            if (Y == null) {
                throw "Constructor " + q + " need parameters"
            }
            return W.apply(X, Y)
        }
        if (Y != null && Y.length != 0) {
            throw "Constructor " + q + " does not need parameters"
        }
        return W
    };
    R.createEnumIndex = function(W, q, X) {
        var Y = W.__constructs__[q];
        if (Y == null) {
            throw q + " is not a valid enum constructor index"
        }
        return R.createEnum(W, Y, X)
    };
    R.getEnumConstructs = function(W) {
        var q = W.__constructs__;
        return q.slice()
    };
    R["typeof"] = function(q) {
        var X = typeof(q);
        switch (X) {
            case "boolean":
                return d.TBool;
            case "string":
                return d.TClass(String);
            case "number":
                if (Math.ceil(q) == q % 2147483648) {
                    return d.TInt
                }
                return d.TFloat;
            case "object":
                if (q == null) {
                    return d.TNull
                }
                var W = q.__enum__;
                if (W != null) {
                    return d.TEnum(W)
                }
                var Y;
                if ((q instanceof Array) && q.__enum__ == null) {
                    Y = Array
                } else {
                    Y = q.__class__
                }
                if (Y != null) {
                    return d.TClass(Y)
                }
                return d.TObject;
            case "function":
                if (q.__name__ || q.__ename__) {
                    return d.TObject
                }
                return d.TFunction;
            case "undefined":
                return d.TNull;
            default:
                return d.TUnknown
        }
    };
    R.enumEq = function(W, q) {
        if (W == q) {
            return true
        }
        try {
            if (W[0] != q[0]) {
                return false
            }
            var Y = 2;
            var ab = W.length;
            while (Y < ab) {
                var X = Y++;
                if (!R.enumEq(W[X], q[X])) {
                    return false
                }
            }
            var Z = W.__enum__;
            if (Z != q.__enum__ || Z == null) {
                return false
            }
        } catch (aa) {
            return false
        }
        return true
    };
    var J = {
        __ename__: true,
        __constructs__: []
    };
    var e = function() {};
    p.Xml = e;
    e.__name__ = ["Xml"];
    e.parse = function(q) {
        return m.xml.Parser.parse(q)
    };
    e.createElement = function(q) {
        var W = new e();
        W.nodeType = e.Element;
        W._children = new Array();
        W._attributes = new m.ds.StringMap();
        W.set_nodeName(q);
        return W
    };
    e.createPCData = function(W) {
        var q = new e();
        q.nodeType = e.PCData;
        q.set_nodeValue(W);
        return q
    };
    e.createCData = function(W) {
        var q = new e();
        q.nodeType = e.CData;
        q.set_nodeValue(W);
        return q
    };
    e.createComment = function(W) {
        var q = new e();
        q.nodeType = e.Comment;
        q.set_nodeValue(W);
        return q
    };
    e.createDocType = function(W) {
        var q = new e();
        q.nodeType = e.DocType;
        q.set_nodeValue(W);
        return q
    };
    e.createProcessingInstruction = function(W) {
        var q = new e();
        q.nodeType = e.ProcessingInstruction;
        q.set_nodeValue(W);
        return q
    };
    e.createDocument = function() {
        var q = new e();
        q.nodeType = e.Document;
        q._children = new Array();
        return q
    };
    e.prototype = {
        get_nodeName: function() {
            if (this.nodeType != e.Element) {
                throw "bad nodeType"
            }
            return this._nodeName
        },
        set_nodeName: function(q) {
            if (this.nodeType != e.Element) {
                throw "bad nodeType"
            }
            return this._nodeName = q
        },
        get_nodeValue: function() {
            if (this.nodeType == e.Element || this.nodeType == e.Document) {
                throw "bad nodeType"
            }
            return this._nodeValue
        },
        set_nodeValue: function(q) {
            if (this.nodeType == e.Element || this.nodeType == e.Document) {
                throw "bad nodeType"
            }
            return this._nodeValue = q
        },
        get: function(q) {
            if (this.nodeType != e.Element) {
                throw "bad nodeType"
            }
            return this._attributes.get(q)
        },
        set: function(q, W) {
            if (this.nodeType != e.Element) {
                throw "bad nodeType"
            }
            this._attributes.set(q, W)
        },
        exists: function(q) {
            if (this.nodeType != e.Element) {
                throw "bad nodeType"
            }
            return this._attributes.exists(q)
        },
        iterator: function() {
            if (this._children == null) {
                throw "bad nodetype"
            }
            return {
                cur: 0,
                x: this._children,
                hasNext: function() {
                    return this.cur < this.x.length
                },
                next: function() {
                    return this.x[this.cur++]
                }
            }
        },
        elements: function() {
            if (this._children == null) {
                throw "bad nodetype"
            }
            return {
                cur: 0,
                x: this._children,
                hasNext: function() {
                    var W = this.cur;
                    var q = this.x.length;
                    while (W < q) {
                        if (this.x[W].nodeType == e.Element) {
                            break
                        }
                        W += 1
                    }
                    this.cur = W;
                    return W < q
                },
                next: function() {
                    var X = this.cur;
                    var q = this.x.length;
                    while (X < q) {
                        var W = this.x[X];
                        X += 1;
                        if (W.nodeType == e.Element) {
                            this.cur = X;
                            return W
                        }
                    }
                    return null
                }
            }
        },
        elementsNamed: function(q) {
            if (this._children == null) {
                throw "bad nodetype"
            }
            return {
                cur: 0,
                x: this._children,
                hasNext: function() {
                    var X = this.cur;
                    var W = this.x.length;
                    while (X < W) {
                        var Y = this.x[X];
                        if (Y.nodeType == e.Element && Y._nodeName == q) {
                            break
                        }
                        X++
                    }
                    this.cur = X;
                    return X < W
                },
                next: function() {
                    var Y = this.cur;
                    var W = this.x.length;
                    while (Y < W) {
                        var X = this.x[Y];
                        Y++;
                        if (X.nodeType == e.Element && X._nodeName == q) {
                            this.cur = Y;
                            return X
                        }
                    }
                    return null
                }
            }
        },
        firstElement: function() {
            if (this._children == null) {
                throw "bad nodetype"
            }
            var W = 0;
            var q = this._children.length;
            while (W < q) {
                var X = this._children[W];
                if (X.nodeType == e.Element) {
                    return X
                }
                W++
            }
            return null
        },
        addChild: function(q) {
            if (this._children == null) {
                throw "bad nodetype"
            }
            if (q._parent != null) {
                B.remove(q._parent._children, q)
            }
            q._parent = this;
            this._children.push(q)
        },
        toString: function() {
            if (this.nodeType == e.PCData) {
                return O.htmlEscape(this._nodeValue)
            }
            if (this.nodeType == e.CData) {
                return "<![CDATA[" + this._nodeValue + "]]>"
            }
            if (this.nodeType == e.Comment) {
                return "<!--" + this._nodeValue + "-->"
            }
            if (this.nodeType == e.DocType) {
                return "<!DOCTYPE " + this._nodeValue + ">"
            }
            if (this.nodeType == e.ProcessingInstruction) {
                return "<?" + this._nodeValue + "?>"
            }
            var X = new g();
            if (this.nodeType == e.Element) {
                X.b += "<";
                X.b += A.string(this._nodeName);
                var Z = this._attributes.keys();
                while (Z.hasNext()) {
                    var W = Z.next();
                    X.b += " ";
                    if (W == null) {
                        X.b += "null"
                    } else {
                        X.b += "" + W
                    }
                    X.b += '="';
                    X.add(this._attributes.get(W));
                    X.b += '"'
                }
                if (this._children.length == 0) {
                    X.b += "/>";
                    return X.b
                }
                X.b += ">"
            }
            var Y = this.iterator();
            while (Y.hasNext()) {
                var q = Y.next();
                X.add(q.toString())
            }
            if (this.nodeType == e.Element) {
                X.b += "</";
                X.b += A.string(this._nodeName);
                X.b += ">"
            }
            return X.b
        },
        __class__: e,
        __properties__: {
            set_nodeValue: "set_nodeValue",
            get_nodeValue: "get_nodeValue",
            set_nodeName: "set_nodeName",
            get_nodeName: "get_nodeName"
        }
    };
    var V = {};
    V.ISongReader = function() {};
    p["songModel.ISongReader"] = V.ISongReader;
    V.ISongReader.__name__ = ["songModel", "ISongReader"];
    V.ISongReader.prototype = {
        __class__: V.ISongReader
    };
    var b = {};
    b.AlphaTexParser = function() {};
    p["alphaTex.AlphaTexParser"] = b.AlphaTexParser;
    b.AlphaTexParser.__name__ = ["alphaTex", "AlphaTexParser"];
    b.AlphaTexParser.__interfaces__ = [V.ISongReader];
    b.AlphaTexParser.isLetter = function(q) {
        var W = B.cca(q, 0);
        return !b.AlphaTexParser.isTerminal(q) && (W >= 33 && W <= 47 || W >= 58 && W <= 126 || W > 128)
    };
    b.AlphaTexParser.isTerminal = function(q) {
        return q == "." || q == "{" || q == "}" || q == "[" || q == "]" || q == "(" || q == ")" || q == "|" || q == "'" || q == '"' || q == "\\"
    };
    b.AlphaTexParser.prototype = {
        readSong: function(af, X, ai) {
            var ad = af.readString();
            var ag;
            try {
                ag = JSON.parse(ad)
            } catch (Z) {
                throw new V.FormatException("Error in json parsing phase: " + A.string(Z))
            }
            var q = X.newSong();
            q.title = ag.title;
            q.subtitle = ag.subtitle;
            q.artist = ag.artist;
            q.album = ag.album;
            q.copyright = ag.copyright;
            q.instructions = ag.instructions;
            q.music = ag.music;
            q.notice = ag.notice;
            q.tab = ag.tab;
            q.words = ag.words;
            q.tempo = ag.bpm;
            this._currentDuration = 4;
            this._currentTempo = q.tempo;
            if (ag.lyrics != null) {
                q.lyrics = X.newLyrics();
                var W = ag.lyrics;
                var Y = 0;
                while (Y < W.length) {
                    var ae = W[Y];
                    ++Y;
                    var ah = X.newLyricLine();
                    ah.lyrics = ae;
                    q.lyrics.lines.push(ah)
                }
            }
            var aa = ag.tracks;
            var ac = 0;
            while (ac < aa.length) {
                var ab = aa[ac];
                ++ac;
                this.readTrack(ab, q, X)
            }
            return q
        },
        readTrack: function(ae, Y, aa) {
            var X = Y.newTrack();
            X.number = ae.trackId;
            X.offset = ae.capo;
            var Z = ae.instrument;
            if (((Z | 0) === Z)) {
                X.channel.instrument(Z)
            } else {
                X.channel.instrument(Q.GeneralMidi.getValue(h.Boot.__cast(Z, String)))
            }
            if (ae.tuning != null) {
                var af = ae.tuning.split(" ");
                X.strings = new Array();
                af.reverse();
                var ab = 0;
                while (ab < af.length) {
                    var ag = af[ab];
                    ++ab;
                    if (ag != "") {
                        var ad = new V.GuitarString(X.strings.length + 1, this.parseTuning(ag));
                        X.strings.push(ad)
                    }
                }
            }
            if (ae.percussion) {
                X.isPercussionTrack = true
            }
            if (ae.volume) {
                X.channel.volume = ae.volume
            }
            if (ae.balance) {
                X.channel.balance = ae.balance
            }
            if (ae.chorus) {
                X.channel.chorus = ae.chorus
            }
            var q = ae.measures;
            var ac = 0;
            while (ac < q.length) {
                var W = q[ac];
                ++ac;
                this.parseMeasure(W, X, aa)
            }
            return X
        },
        error: function(X, W, q) {
            if (q == null) {
                q = true
            }
            if (q) {
                throw new V.FormatException(A.string(this._curChPos) + ": Error on block " + X + ", expected a " + A.string(W) + " found a " + A.string(this._sy))
            } else {
                throw new V.FormatException(A.string(this._curChPos) + ": Error on block " + X + ", invalid value:" + A.string(this._syData))
            }
        },
        parseMeasure: function(W, Y, aa) {
            var Z = Y.song;
            var ac;
            var ab;
            var X = Y.measures.length;
            if (X >= Z.measureHeaders.length) {
                ac = aa.newTempo();
                ac.value = this._currentTempo;
                ab = aa.newMeasureHeader();
                ab.number = X + 1;
                if (X == 0) {
                    ab.start = V.ModelConstants.QUARTER_TIME
                } else {
                    ab.start = Y.measures[X - 1].start() + Y.measures[X - 1].length()
                }
                ab.tempo.copy(ac);
                Z.addMeasureHeader(ab)
            } else {
                ab = Z.measureHeaders[X];
                ac = ab.tempo
            }
            var q = aa.newMeasure(ab);
            if (X > 0) {
                var ad = Y.measures[X - 1];
                var ae = ad.header;
                q.clef = ad.clef;
                ab.keySignature = ae.keySignature;
                ab.keySignatureType = ae.keySignatureType;
                ab.timeSignature.copyFrom(ae.timeSignature)
            }
            this._data = W;
            this._curChPos = 0;
            this.nextChar();
            this.newSy();
            this.measureMeta(q);
            this._currentTempo = ab.tempo.value;
            Y.addMeasure(q);
            while (this._sy != b.AlphaTexSymbols.Eof) {
                this.parseBeat(q, aa)
            }
        },
        measureMeta: function(q) {
            var W = q.header;
            while (this._sy == b.AlphaTexSymbols.MetaCommand) {
                if (this._syData == "ts") {
                    this.newSy();
                    if (this._sy != b.AlphaTexSymbols.Number) {
                        this.error("timesignature-numerator", b.AlphaTexSymbols.Number)
                    }
                    W.timeSignature.numerator = this._syData;
                    this.newSy();
                    if (this._sy != b.AlphaTexSymbols.Number) {
                        this.error("timesignature-denominator", b.AlphaTexSymbols.Number)
                    }
                    W.timeSignature.denominator.value = this._syData
                } else {
                    if (this._syData == "ro") {
                        W.isRepeatOpen = true
                    } else {
                        if (this._syData == "rc") {
                            this.newSy();
                            if (this._sy != b.AlphaTexSymbols.Number) {
                                this.error("repeatclose", b.AlphaTexSymbols.Number)
                            }
                            W.repeatClose = A.parseInt(this._syData)
                        } else {
                            if (this._syData == "alter") {
                                this.newSy();
                                if (this._sy != b.AlphaTexSymbols.Number) {
                                    this.error("alternative end", b.AlphaTexSymbols.Number)
                                }
                                W.repeatAlternative = A.parseInt(this._syData)
                            } else {
                                if (this._syData == "ks") {
                                    this.newSy();
                                    if (this._sy != b.AlphaTexSymbols.String) {
                                        this.error("keysignature", b.AlphaTexSymbols.String)
                                    }
                                    W.keySignature = V.SongIo.toKeySignature(V.SongIo.parseKeySignature(this._syData))
                                } else {
                                    if (this._syData == "clef") {
                                        this.newSy();
                                        if (this._sy != b.AlphaTexSymbols.String) {
                                            this.error("clef", b.AlphaTexSymbols.String)
                                        }
                                        q.clef = this.parseClef(this._syData)
                                    } else {
                                        if (this._syData == "bpm") {
                                            this.newSy();
                                            if (this._sy != b.AlphaTexSymbols.Number) {
                                                this.error("bpm", b.AlphaTexSymbols.Number)
                                            }
                                            W.tempo.value = this._syData
                                        } else {
                                            this.error("measure-effects", b.AlphaTexSymbols.String, false)
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                this.newSy()
            }
        },
        parseBeat: function(X, q) {
            if (this._sy == b.AlphaTexSymbols.DoubleDot) {
                this.newSy();
                if (this._sy != b.AlphaTexSymbols.Number) {
                    this.error("duration", b.AlphaTexSymbols.Number)
                }
                if (this._syData == 1 || this._syData == 2 || this._syData == 4 || this._syData == 8 || this._syData == 16 || this._syData == 32 || this._syData == 64) {
                    this._currentDuration = this._syData
                } else {
                    this.error("duration", b.AlphaTexSymbols.Number, false)
                }
                this.newSy();
                return
            }
            var Y = q.newBeat();
            Y.start = 0;
            if (X.beatCount() == 0) {
                Y.start = X.start()
            } else {
                var W = X.beats.length - 1;
                Y.start = X.beats[W].start + X.beats[W].voices[0].duration.time()
            }
            X.addBeat(Y);
            var Z = Y.voices[0];
            Z.isEmpty = false;
            if (this._sy == b.AlphaTexSymbols.LParensis) {
                this.newSy();
                Z.addNote(this.parseNote(Y, q));
                while (this._sy != b.AlphaTexSymbols.RParensis && this._sy != b.AlphaTexSymbols.Eof) {
                    Z.addNote(this.parseNote(Y, q))
                }
                if (this._sy != b.AlphaTexSymbols.RParensis) {
                    this.error("note-list", b.AlphaTexSymbols.RParensis)
                }
                this.newSy()
            } else {
                if (this._sy == b.AlphaTexSymbols.String && A.string(this._syData).toLowerCase() == "r") {
                    this.newSy()
                } else {
                    Z.addNote(this.parseNote(Y, q))
                }
            }
            if (this._sy == b.AlphaTexSymbols.Dot) {
                this.newSy();
                if (this._sy != b.AlphaTexSymbols.Number) {
                    this.error("duration", b.AlphaTexSymbols.Number)
                }
                if (this._syData == 1 || this._syData == 2 || this._syData == 4 || this._syData == 8 || this._syData == 16 || this._syData == 32 || this._syData == 64) {
                    Z.duration.value = this._syData
                } else {
                    this.error("duration", b.AlphaTexSymbols.Number, false)
                }
                this.newSy()
            } else {
                Z.duration.value = this._currentDuration
            }
            this.beatEffects(Y, q)
        },
        beatEffects: function(W, q) {
            if (this._sy != b.AlphaTexSymbols.LBrace) {
                return
            }
            this.newSy();
            while (this._sy == b.AlphaTexSymbols.String) {
                this._syData = A.string(this._syData).toLowerCase();
                if (!this.applyBeatEffect(W, q)) {
                    this.error("beat-effects", b.AlphaTexSymbols.String, false)
                }
            }
            if (this._sy != b.AlphaTexSymbols.RBrace) {
                this.error("beat-effects", b.AlphaTexSymbols.RBrace)
            }
            this.newSy()
        },
        applyBeatEffect: function(ac, Y) {
            if (this._syData == "f") {
                ac.effect.fadeIn = true;
                this.newSy();
                return true
            } else {
                if (this._syData == "v") {
                    ac.effect.vibrato = true;
                    this.newSy();
                    return true
                } else {
                    if (this._syData == "t") {
                        ac.effect.tapping = true;
                        this.newSy();
                        return true
                    } else {
                        if (this._syData == "s") {
                            ac.effect.slapping = true;
                            this.newSy();
                            return true
                        } else {
                            if (this._syData == "p") {
                                ac.effect.popping = true;
                                this.newSy();
                                return true
                            } else {
                                if (this._syData == "dd") {
                                    ac.voices[0].duration.isDoubleDotted = true;
                                    this.newSy();
                                    return true
                                } else {
                                    if (this._syData == "d") {
                                        ac.voices[0].duration.isDotted = true;
                                        this.newSy();
                                        return true
                                    } else {
                                        if (this._syData == "su") {
                                            ac.effect.stroke.direction = V.BeatStrokeDirection.Up;
                                            this.newSy();
                                            if (this._sy == b.AlphaTexSymbols.Number) {
                                                if (this._syData == 4 || this._syData == 8 || this._syData == 16 || this._syData == 32 || this._syData == 64) {
                                                    ac.effect.stroke.value = this._syData
                                                } else {
                                                    ac.effect.stroke.value = 8
                                                }
                                                this.newSy()
                                            } else {
                                                ac.effect.stroke.value = 8
                                            }
                                            return true
                                        } else {
                                            if (this._syData == "sd") {
                                                ac.effect.stroke.direction = V.BeatStrokeDirection.Down;
                                                this.newSy();
                                                if (this._sy == b.AlphaTexSymbols.Number) {
                                                    if (this._syData == 4 || this._syData == 8 || this._syData == 16 || this._syData == 32 || this._syData == 64) {
                                                        ac.effect.stroke.value = this._syData
                                                    } else {
                                                        ac.effect.stroke.value = 8
                                                    }
                                                    this.newSy()
                                                } else {
                                                    ac.effect.stroke.value = 8
                                                }
                                                return true
                                            } else {
                                                if (this._syData == "tu") {
                                                    this.newSy();
                                                    if (this._sy != b.AlphaTexSymbols.Number) {
                                                        this.error("tuplet", b.AlphaTexSymbols.Number);
                                                        return false
                                                    }
                                                    var Z = this._syData;
                                                    var W = ac.voices[0].duration;
                                                    switch (Z) {
                                                        case 3:
                                                            W.tuplet.enters = 3;
                                                            W.tuplet.times = 2;
                                                            break;
                                                        case 5:
                                                            W.tuplet.enters = 5;
                                                            W.tuplet.times = 4;
                                                            break;
                                                        case 6:
                                                            W.tuplet.enters = 6;
                                                            W.tuplet.times = 4;
                                                            break;
                                                        case 7:
                                                            W.tuplet.enters = 7;
                                                            W.tuplet.times = 4;
                                                            break;
                                                        case 9:
                                                            W.tuplet.enters = 9;
                                                            W.tuplet.times = 8;
                                                            break;
                                                        case 10:
                                                            W.tuplet.enters = 10;
                                                            W.tuplet.times = 8;
                                                            break;
                                                        case 11:
                                                            W.tuplet.enters = 11;
                                                            W.tuplet.times = 8;
                                                            break;
                                                        case 12:
                                                            W.tuplet.enters = 12;
                                                            W.tuplet.times = 8;
                                                            break
                                                    }
                                                    this.newSy();
                                                    return true
                                                } else {
                                                    if (this._syData == "tb") {
                                                        this.newSy();
                                                        if (this._sy != b.AlphaTexSymbols.LParensis) {
                                                            this.error("tremolobar-effect", b.AlphaTexSymbols.LParensis);
                                                            return false
                                                        }
                                                        this._allowNegatives = true;
                                                        this.newSy();
                                                        var ad = new Array();
                                                        while (this._sy != b.AlphaTexSymbols.RParensis && this._sy != b.AlphaTexSymbols.Eof) {
                                                            if (this._sy != b.AlphaTexSymbols.Number) {
                                                                this.error("tremolobar-effect", b.AlphaTexSymbols.Number);
                                                                return false
                                                            }
                                                            ad.push(new V.effects.BendPoint(0, this._syData, false));
                                                            this.newSy()
                                                        }
                                                        if (ad.length > 12) {
                                                            ad = ad.slice(0, 12)
                                                        }
                                                        var ab = ad.length;
                                                        var q = Math.floor(12 / ab);
                                                        var X = 0;
                                                        var aa = Y.newBendEffect();
                                                        while (X < ab) {
                                                            ad[X].position = Math.floor(Math.min(12, X * q));
                                                            aa.points.push(ad[X]);
                                                            X++
                                                        }
                                                        ac.effect.tremoloBar = aa;
                                                        this._allowNegatives = false;
                                                        if (this._sy != b.AlphaTexSymbols.RParensis) {
                                                            this.error("tremolobar-effect", b.AlphaTexSymbols.RParensis);
                                                            return false
                                                        }
                                                        this.newSy();
                                                        return true
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return false
        },
        parseNote: function(aa, Y) {
            var q = aa.measure.track;
            if (this._sy != b.AlphaTexSymbols.Number && !(this._sy == b.AlphaTexSymbols.String && (A.string(this._syData).toLowerCase() == "x" || A.string(this._syData).toLowerCase() == "-"))) {
                this.error("note-fret", b.AlphaTexSymbols.Number)
            }
            var X = A.string(this._syData).toLowerCase() == "x";
            var W = A.string(this._syData).toLowerCase() == "-";
            var ac;
            if (X || W) {
                ac = 0
            } else {
                ac = this._syData
            }
            this.newSy();
            if (this._sy != b.AlphaTexSymbols.Dot) {
                this.error("note", b.AlphaTexSymbols.Dot)
            }
            this.newSy();
            if (this._sy != b.AlphaTexSymbols.Number) {
                this.error("note-string", b.AlphaTexSymbols.Number)
            }
            var Z = this._syData;
            if (Z < 1 || Z > q.stringCount()) {
                this.error("note-string", b.AlphaTexSymbols.Number, false)
            }
            this.newSy();
            var ad = Y.newNoteEffect();
            this.noteEffects(aa, ad, Y);
            var ab = Y.newNote();
            ab.string = Z;
            ab.effect = ad;
            ab.effect.deadNote = X;
            ab.isTiedNote = W;
            if (W) {
                ab.value = this.getTiedNoteValue(Z, q)
            } else {
                ab.value = ac
            }
            return ab
        },
        getTiedNoteValue: function(am, aj) {
            var Z = aj.measureCount();
            if (Z > 0) {
                var Y = 0;
                while (Y < Z) {
                    var W = Y++;
                    var al = Z - 1 - W;
                    var aa = aj.measures[al];
                    var ah = 0;
                    var ai = aa.beatCount();
                    while (ah < ai) {
                        var ab = ah++;
                        var an = aa.beatCount() - 1 - ab;
                        var q = aa.beats[an];
                        var af = 0;
                        var ag = q.voices.length;
                        while (af < ag) {
                            var ae = af++;
                            var ao = q.voices[ae];
                            if (!ao.isEmpty) {
                                var ac = 0;
                                var ad = ao.notes.length;
                                while (ac < ad) {
                                    var ak = ac++;
                                    var X = ao.notes[ak];
                                    if (X.string == am) {
                                        return X.value
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return -1
        },
        noteEffects: function(q, aj, ab) {
            if (this._sy != b.AlphaTexSymbols.LBrace) {
                return
            }
            this.newSy();
            while (this._sy == b.AlphaTexSymbols.String) {
                this._syData = A.string(this._syData).toLowerCase();
                if (this._syData == "b") {
                    this.newSy();
                    if (this._sy != b.AlphaTexSymbols.LParensis) {
                        this.error("bend-effect", b.AlphaTexSymbols.LParensis)
                    }
                    this.newSy();
                    var ap = new Array();
                    while (this._sy != b.AlphaTexSymbols.RParensis && this._sy != b.AlphaTexSymbols.Eof) {
                        if (this._sy != b.AlphaTexSymbols.Number) {
                            this.error("bend-effect-value", b.AlphaTexSymbols.Number)
                        }
                        ap.push(new V.effects.BendPoint(0, Math.abs(this._syData), false));
                        this.newSy()
                    }
                    if (ap.length > 12) {
                        ap = ap.slice(0, 12)
                    }
                    var ae = ap.length;
                    var ac = Math.floor(12 / ae);
                    var aq = 0;
                    var Z = ab.newBendEffect();
                    while (aq < ae) {
                        ap[aq].position = Math.floor(Math.min(12, aq * ac));
                        Z.points.push(ap[aq]);
                        aq++
                    }
                    aj.set_bend(Z);
                    if (this._sy != b.AlphaTexSymbols.RParensis) {
                        this.error("bend-effect", b.AlphaTexSymbols.RParensis)
                    }
                    this.newSy()
                } else {
                    if (this._syData == "nh") {
                        var ao = ab.newHarmonicEffect();
                        ao.type = V.effects.HarmonicType.Natural;
                        aj.set_harmonic(ao);
                        this.newSy()
                    } else {
                        if (this._syData == "ah") {
                            var am = ab.newHarmonicEffect();
                            am.type = V.effects.HarmonicType.Artificial;
                            aj.set_harmonic(am);
                            this.newSy()
                        } else {
                            if (this._syData == "th") {
                                var al = ab.newHarmonicEffect();
                                al.type = V.effects.HarmonicType.Tapped;
                                aj.set_harmonic(al);
                                this.newSy()
                            } else {
                                if (this._syData == "ph") {
                                    var ak = ab.newHarmonicEffect();
                                    ak.type = V.effects.HarmonicType.Pinch;
                                    aj.set_harmonic(ak);
                                    this.newSy()
                                } else {
                                    if (this._syData == "sh") {
                                        var ah = ab.newHarmonicEffect();
                                        ah.type = V.effects.HarmonicType.Semi;
                                        aj.set_harmonic(ah);
                                        this.newSy()
                                    } else {
                                        if (this._syData == "gr") {
                                            this.newSy();
                                            if (this._sy != b.AlphaTexSymbols.Number && !(this._sy == b.AlphaTexSymbols.String && A.string(this._syData).toLowerCase() == "x")) {
                                                this.error("grace-effect-fret", b.AlphaTexSymbols.Number)
                                            }
                                            var an = A.string(this._syData).toLowerCase() == "x";
                                            var Y;
                                            if (an) {
                                                Y = 0
                                            } else {
                                                Y = this._syData
                                            }
                                            this.newSy();
                                            var W = 16;
                                            if (this._sy == b.AlphaTexSymbols.Number) {
                                                if (this._syData != 16 && this._syData != 32 && this._syData != 64) {
                                                    this._syData = 16
                                                }
                                                W = this._syData;
                                                this.newSy()
                                            }
                                            var ar = V.effects.GraceEffectTransition.None;
                                            if (this._sy == b.AlphaTexSymbols.String) {
                                                if (this._syData == "s") {
                                                    ar = V.effects.GraceEffectTransition.Slide;
                                                    this.newSy()
                                                } else {
                                                    if (this._syData == "b") {
                                                        ar = V.effects.GraceEffectTransition.Bend;
                                                        this.newSy()
                                                    } else {
                                                        if (this._syData == "h") {
                                                            ar = V.effects.GraceEffectTransition.Hammer;
                                                            this.newSy()
                                                        }
                                                    }
                                                }
                                            }
                                            var ai = ab.newGraceEffect();
                                            ai.duration = W;
                                            ai.fret = Y;
                                            ai.isDead = an;
                                            ai.transition = ar;
                                            ai.velocity = V.Velocities.FORTE;
                                            aj.set_grace(ai)
                                        } else {
                                            if (this._syData == "tr") {
                                                this.newSy();
                                                if (this._sy != b.AlphaTexSymbols.Number) {
                                                    this.error("trill-effect", b.AlphaTexSymbols.Number)
                                                }
                                                var aa = this._syData;
                                                this.newSy();
                                                var ag = 16;
                                                if (this._sy == b.AlphaTexSymbols.Number) {
                                                    if (this._syData != 16 && this._syData != 32 && this._syData != 64) {
                                                        this._syData = 16
                                                    }
                                                    ag = this._syData;
                                                    this.newSy()
                                                }
                                                var ad = ab.newTrillEffect();
                                                ad.duration.value = ag;
                                                ad.fret = aa;
                                                aj.trill = ad
                                            } else {
                                                if (this._syData == "tp") {
                                                    this.newSy();
                                                    var af = 8;
                                                    if (this._sy == b.AlphaTexSymbols.Number) {
                                                        if (this._syData != 8 && this._syData != 16 && this._syData != 32) {
                                                            this._syData = 8
                                                        }
                                                        af = this._syData;
                                                        this.newSy()
                                                    }
                                                    var X = ab.newTremoloPickingEffect();
                                                    X.duration.value = af;
                                                    aj.tremoloPicking = X
                                                } else {
                                                    if (this._syData == "v") {
                                                        this.newSy();
                                                        aj.vibrato = true
                                                    } else {
                                                        if (this._syData == "sl") {
                                                            this.newSy();
                                                            aj.slide = true;
                                                            aj.slideType = V.effects.SlideType.FastSlideTo
                                                        } else {
                                                            if (this._syData == "sf") {
                                                                this.newSy();
                                                                aj.slide = true;
                                                                aj.slideType = V.effects.SlideType.SlowSlideTo
                                                            } else {
                                                                if (this._syData == "ss") {
                                                                    this.newSy();
                                                                    aj.slide = true;
                                                                    aj.slideType = V.effects.SlideType.SlowSlideTo
                                                                } else {
                                                                    if (this._syData == "h") {
                                                                        this.newSy();
                                                                        aj.hammer = true
                                                                    } else {
                                                                        if (this._syData == "g") {
                                                                            this.newSy();
                                                                            aj.ghostNote = true
                                                                        } else {
                                                                            if (this._syData == "ac") {
                                                                                this.newSy();
                                                                                aj.accentuatedNote = true
                                                                            } else {
                                                                                if (this._syData == "hac") {
                                                                                    this.newSy();
                                                                                    aj.heavyAccentuatedNote = true
                                                                                } else {
                                                                                    if (this._syData == "pm") {
                                                                                        this.newSy();
                                                                                        aj.palmMute = true
                                                                                    } else {
                                                                                        if (this._syData == "st") {
                                                                                            this.newSy();
                                                                                            aj.staccato = true
                                                                                        } else {
                                                                                            if (this._syData == "lr") {
                                                                                                this.newSy();
                                                                                                aj.letRing = true
                                                                                            } else {
                                                                                                if (this.applyBeatEffect(q, ab)) {} else {
                                                                                                    this.error(this._syData, b.AlphaTexSymbols.String, false)
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (this._sy != b.AlphaTexSymbols.RBrace) {
                this.error("note-effect", b.AlphaTexSymbols.RBrace, false)
            }
            this.newSy()
        },
        parseClef: function(W) {
            var q = W.toLowerCase();
            switch (q) {
                case "treble":
                    return V.MeasureClef.Treble;
                case "bass":
                    return V.MeasureClef.Bass;
                case "tenor":
                    return V.MeasureClef.Tenor;
                case "alto":
                    return V.MeasureClef.Alto;
                default:
                    return V.MeasureClef.Treble
            }
        },
        parseTuning: function(W) {
            var q = V.Tuning.getTuningForText(W);
            if (q < 0) {
                this.error("tuning-value", b.AlphaTexSymbols.String, false)
            }
            return q
        },
        nextChar: function() {
            if (this._curChPos < this._data.length) {
                this._ch = this._data.charAt(this._curChPos)
            } else {
                this._ch = b.AlphaTexParser.EOL
            }
            this._curChPos++
        },
        newSy: function() {
            this._sy = b.AlphaTexSymbols.No;
            do {
                if (this._ch == b.AlphaTexParser.EOL) {
                    this._sy = b.AlphaTexSymbols.Eof
                } else {
                    if (this._ch == " " || this._ch == "\n" || this._ch == "\r" || this._ch == "\t") {
                        this.nextChar()
                    } else {
                        if (this._ch == '"' || this._ch == "'") {
                            this.nextChar();
                            this._syData = "";
                            this._sy = b.AlphaTexSymbols.String;
                            while (this._ch != '"' && this._ch != "'" && this._ch != b.AlphaTexParser.EOL) {
                                this._syData += this._ch;
                                this.nextChar()
                            }
                            this.nextChar()
                        } else {
                            if (this._ch == "-") {
                                if (this._allowNegatives && i.ParseUtils.isDigit(this._ch, true)) {
                                    var X = this.readNumber();
                                    this._sy = b.AlphaTexSymbols.Number;
                                    this._syData = X
                                } else {
                                    this._sy = b.AlphaTexSymbols.String;
                                    this._syData = this.readName()
                                }
                            } else {
                                if (this._ch == ".") {
                                    this._sy = b.AlphaTexSymbols.Dot;
                                    this.nextChar()
                                } else {
                                    if (this._ch == ":") {
                                        this._sy = b.AlphaTexSymbols.DoubleDot;
                                        this.nextChar()
                                    } else {
                                        if (this._ch == "(") {
                                            this._sy = b.AlphaTexSymbols.LParensis;
                                            this.nextChar()
                                        } else {
                                            if (this._ch == "@") {
                                                this.nextChar();
                                                var W = this.readName();
                                                this._sy = b.AlphaTexSymbols.MetaCommand;
                                                this._syData = W
                                            } else {
                                                if (this._ch == ")") {
                                                    this._sy = b.AlphaTexSymbols.RParensis;
                                                    this.nextChar()
                                                } else {
                                                    if (this._ch == "{") {
                                                        this._sy = b.AlphaTexSymbols.LBrace;
                                                        this.nextChar()
                                                    } else {
                                                        if (this._ch == "}") {
                                                            this._sy = b.AlphaTexSymbols.RBrace;
                                                            this.nextChar()
                                                        } else {
                                                            if (this._ch == "|") {
                                                                this._sy = b.AlphaTexSymbols.Pipe;
                                                                this.nextChar()
                                                            } else {
                                                                if (i.ParseUtils.isDigit(this._ch, null)) {
                                                                    var q = this.readNumber();
                                                                    this._sy = b.AlphaTexSymbols.Number;
                                                                    this._syData = q
                                                                } else {
                                                                    if (b.AlphaTexParser.isLetter(this._ch)) {
                                                                        var Y = this.readName();
                                                                        if (V.Tuning.isTuning(Y)) {
                                                                            this._sy = b.AlphaTexSymbols.Tuning;
                                                                            this._syData = Y.toLowerCase()
                                                                        } else {
                                                                            this._sy = b.AlphaTexSymbols.String;
                                                                            this._syData = Y
                                                                        }
                                                                    } else {
                                                                        this.error("symbol", b.AlphaTexSymbols.String, false)
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            } while (this._sy == b.AlphaTexSymbols.No)
        },
        readName: function() {
            var q = "";
            do {
                q += this._ch;
                this.nextChar()
            } while (b.AlphaTexParser.isLetter(this._ch) || i.ParseUtils.isDigit(this._ch, null));
            return q
        },
        readNumber: function() {
            var q = "";
            do {
                q += this._ch;
                this.nextChar()
            } while (i.ParseUtils.isDigit(this._ch, null));
            return A.parseInt(q)
        },
        __class__: b.AlphaTexParser
    };
    b.AlphaTexSymbols = {
        __ename__: true,
        __constructs__: ["No", "Eof", "Number", "DoubleDot", "Dot", "String", "Tuning", "LParensis", "RParensis", "LBrace", "RBrace", "Pipe", "MetaCommand"]
    };
    b.AlphaTexSymbols.No = ["No", 0];
    b.AlphaTexSymbols.No.toString = l;
    b.AlphaTexSymbols.No.__enum__ = b.AlphaTexSymbols;
    b.AlphaTexSymbols.Eof = ["Eof", 1];
    b.AlphaTexSymbols.Eof.toString = l;
    b.AlphaTexSymbols.Eof.__enum__ = b.AlphaTexSymbols;
    b.AlphaTexSymbols.Number = ["Number", 2];
    b.AlphaTexSymbols.Number.toString = l;
    b.AlphaTexSymbols.Number.__enum__ = b.AlphaTexSymbols;
    b.AlphaTexSymbols.DoubleDot = ["DoubleDot", 3];
    b.AlphaTexSymbols.DoubleDot.toString = l;
    b.AlphaTexSymbols.DoubleDot.__enum__ = b.AlphaTexSymbols;
    b.AlphaTexSymbols.Dot = ["Dot", 4];
    b.AlphaTexSymbols.Dot.toString = l;
    b.AlphaTexSymbols.Dot.__enum__ = b.AlphaTexSymbols;
    b.AlphaTexSymbols.String = ["String", 5];
    b.AlphaTexSymbols.String.toString = l;
    b.AlphaTexSymbols.String.__enum__ = b.AlphaTexSymbols;
    b.AlphaTexSymbols.Tuning = ["Tuning", 6];
    b.AlphaTexSymbols.Tuning.toString = l;
    b.AlphaTexSymbols.Tuning.__enum__ = b.AlphaTexSymbols;
    b.AlphaTexSymbols.LParensis = ["LParensis", 7];
    b.AlphaTexSymbols.LParensis.toString = l;
    b.AlphaTexSymbols.LParensis.__enum__ = b.AlphaTexSymbols;
    b.AlphaTexSymbols.RParensis = ["RParensis", 8];
    b.AlphaTexSymbols.RParensis.toString = l;
    b.AlphaTexSymbols.RParensis.__enum__ = b.AlphaTexSymbols;
    b.AlphaTexSymbols.LBrace = ["LBrace", 9];
    b.AlphaTexSymbols.LBrace.toString = l;
    b.AlphaTexSymbols.LBrace.__enum__ = b.AlphaTexSymbols;
    b.AlphaTexSymbols.RBrace = ["RBrace", 10];
    b.AlphaTexSymbols.RBrace.toString = l;
    b.AlphaTexSymbols.RBrace.__enum__ = b.AlphaTexSymbols;
    b.AlphaTexSymbols.Pipe = ["Pipe", 11];
    b.AlphaTexSymbols.Pipe.toString = l;
    b.AlphaTexSymbols.Pipe.__enum__ = b.AlphaTexSymbols;
    b.AlphaTexSymbols.MetaCommand = ["MetaCommand", 12];
    b.AlphaTexSymbols.MetaCommand.toString = l;
    b.AlphaTexSymbols.MetaCommand.__enum__ = b.AlphaTexSymbols;
    var N = {};
    N.Ascii2Beat = function(W, q, X) {
        this._writer = W;
        this._beat = q;
        this._beatLength = X;
        this.buildAsciiNotes();
        this.finish()
    };
    p["ascii.Ascii2Beat"] = N.Ascii2Beat;
    N.Ascii2Beat.__name__ = ["ascii", "Ascii2Beat"];
    N.Ascii2Beat.prototype = {
        buildAsciiNotes: function() {
            this._asciiNotes = this._writer.buildAsciiNotes(this._beat, this._beatLength)
        },
        finish: function() {
            var q = this.getMaxLengthOfNoteText();
            var X = this._asciiNotes.iterator();
            while (X.hasNext()) {
                var W = X.next();
                this._writer.finishAsciiNote(W, q)
            }
        },
        getMaxLengthOfNoteText: function() {
            var q = 0;
            var X = this._asciiNotes.iterator();
            while (X.hasNext()) {
                var W = X.next();
                if (W.getLength() > q) {
                    q = W.getLength()
                }
            }
            return q
        },
        getNoteText: function(q) {
            return this._asciiNotes.get(q).getNoteText()
        },
        __class__: N.Ascii2Beat
    };
    N.Ascii2Helper = function() {};
    p["ascii.Ascii2Helper"] = N.Ascii2Helper;
    N.Ascii2Helper.__name__ = ["ascii", "Ascii2Helper"];
    N.Ascii2Helper.getBeatJq = function(W) {
        var q = N.Ascii2Helper.getMeasureJqByIndex(W.measure.getIndex());
        return q.find('span[id="' + N.Ascii2Writer.BEAT_HTML_CLASS_NAME + "-" + W.measure.getIndex() + "-" + W.index + '"]')
    };
    N.Ascii2Helper.getMeasureJqByIndex = function(q) {
        return new h.JQuery("#" + N.Ascii2Writer.MEASURE_HTML_CLASS_NAME + "-" + q)
    };
    N.Ascii2Helper.plainText = function(q) {
        return ((function(Y) {
            var W;
            var X = "<div>" + A.string(q) + "</div>";
            W = new h.JQuery(X);
            return W
        }(this))).text()
    };
    N.Ascii2Note = function(W, q, X) {
        this._noteText = W;
        this._length = N.Ascii2Helper.plainText(W).length;
        this._atStart = q;
        this._closedSymbol = X
    };
    p["ascii.Ascii2Note"] = N.Ascii2Note;
    N.Ascii2Note.__name__ = ["ascii", "Ascii2Note"];
    N.Ascii2Note.prototype = {
        getNoteText: function() {
            return this._noteText
        },
        setNoteText: function(q) {
            this._noteText = q
        },
        getLength: function() {
            return this._length
        },
        getAtStart: function() {
            return this._atStart
        },
        getClosedSymbol: function() {
            return this._closedSymbol
        },
        __class__: N.Ascii2Note
    };
    N.Ascii2Writer = function(W, q) {
        this._maxNumberOfSymbolsInAsciiLine = q;
        this._song = W
    };
    p["ascii.Ascii2Writer"] = N.Ascii2Writer;
    N.Ascii2Writer.__name__ = ["ascii", "Ascii2Writer"];
    N.Ascii2Writer.StrToBytes = function(X) {
        var W = new Array();
        var q = 0;
        while (q < X.length) {
            W.push(B.cca(X, q) & 255);
            q++
        }
        return m.io.Bytes.ofData(W)
    };
    N.Ascii2Writer.prototype = {
        write: function(X) {
            this._headNode = this.newHeadNode();
            var W = this.writeTab(X);
            var q = this.writeScore(0, W);
            this.writeTuning(0, this._song.tracks[X].strings, q);
            this.writeMeasures(X, q);
            return this._headNode.html()
        },
        writeTab: function(q) {
            var W = this.newTabNode(q);
            W.appendTo(this._headNode);
            return W
        },
        writeScore: function(q, X) {
            var W = this.newScoreNode(q);
            W.appendTo(X);
            return W
        },
        writeTuning: function(ab, af, ae) {
            var q = this.newTuningNode(ab);
            q.appendTo(ae);
            var Y = 0;
            while (Y < af.length) {
                var aa = af[Y];
                ++Y;
                var W = this.newGuitarStringNode(aa.number);
                var Z = V.Tuning.getTextForTuning(aa.value, false);
                var ac = 0;
                var ad = 2 - Z.length;
                while (ac < ad) {
                    var X = ac++;
                    Z += " "
                }
                Z += N.Ascii2Writer.MEASURE_END_SYMBOL;
                W.html(Z);
                W.appendTo(q)
            }
            this.findStringNode(q).after(N.Ascii2Writer.LINE_WRAP);
            return q
        },
        writeMeasures: function(ab, W) {
            var q = this._song.tracks[ab];
            var X = 0;
            var aa = 0;
            var Z = q.measures;
            while (aa < Z.length) {
                var Y = Z[aa];
                ++aa;
                this.writeMeasure(X++, Y, W)
            }
        },
        writeMeasure: function(Z, q, ac) {
            var ad = this.getBeatLengthMapForMeasure(q);
            var W = this.newMeasureNode(Z);
            W.appendTo(ac);
            var aa = this.buildAsciiBeats(q.beats, ad);
            var X = 0;
            var ab = q.track.strings;
            while (X < ab.length) {
                var Y = ab[X];
                ++X;
                this.writeString(Y.number, q, aa, W)
            }
            this.findStringNode(W).after(N.Ascii2Writer.LINE_WRAP);
            return W
        },
        writeString: function(X, q, ah, ag) {
            var Y = this.newGuitarStringNode(X);
            var ad = "";
            if (q != null && ah != null) {
                var ai = 0;
                var ac = N.Ascii2Writer.MEASURE_OFFSET_LEFT;
                while (ai < ac) {
                    var ab = ai++;
                    ad += N.Ascii2Writer.SINGLE_SYMBOL
                }
                var af = 0;
                while (af < ah.length) {
                    var W = ah[af];
                    ++af;
                    ad += W.getNoteText(X)
                }
            } else {
                var aa = 0;
                var ae = N.Ascii2Writer.MIN_COUNT_SYMBOLS_PER_MEASURE;
                while (aa < ae) {
                    var Z = aa++;
                    ad += N.Ascii2Writer.SINGLE_SYMBOL
                }
            }
            ad += N.Ascii2Writer.MEASURE_END_SYMBOL + "</div>";
            Y.html(ad);
            if (ag != null) {
                Y.appendTo(ag)
            }
            return Y
        },
        buildAsciiBeats: function(W, Z) {
            var q = new Array();
            var Y = 0;
            while (Y < W.length) {
                var X = W[Y];
                ++Y;
                q.push(new N.Ascii2Beat(this, X, Z.get(X.voices[N.Ascii2Writer.PRIMARY_INDEX_OF_VOICE].duration.value)))
            }
            return q
        },
        buildAsciiNotes: function(Y, ad) {
            var q = new m.ds.IntMap();
            var ab = 1;
            var X = Y.measure.track.stringCount() + 1;
            while (ab < X) {
                var af = ab++;
                var ae = this.buildAsciiNote(Y, null, ad);
                q.set(af, ae)
            }
            var Z = 0;
            var W = Y.voices[N.Ascii2Writer.PRIMARY_INDEX_OF_VOICE].notes;
            while (Z < W.length) {
                var aa = W[Z];
                ++Z;
                var ac = this.buildAsciiNote(Y, aa, ad);
                q.set(aa.string, ac)
            }
            return q
        },
        buildAsciiNote: function(ac, ae, W) {
            var af = B.indexOf(ac.measure.track.measures, ac.measure, 0);
            var Z = "";
            var ab = "";
            var Y = N.Ascii2Writer.SINGLE_SYMBOL;
            var q = true;
            if (ae != null) {
                if (ae.value == null) {
                    Z = "null"
                } else {
                    Z = "" + ae.value
                }
                if (ae.effect.deadNote) {
                    Z = "x"
                }
                ab = "%coreNoteText%" + Z + "%coreNoteText%";
                if (ae.effect.staccato) {
                    ab = "." + ab
                }
                if (ae.effect.isTrill()) {
                    ab += "tr"
                }
                if (ae.effect.slide && ae.getSlideTarget() != null) {
                    q = false;
                    if (ae.getSlideTarget().value < ae.value) {
                        ab += "\\"
                    } else {
                        ab += "/"
                    }
                }
                if (ae.effect.vibrato) {
                    Y = "~"
                }
                if (ae.effect.isHarmonic()) {
                    ab = "<" + ab + ">"
                }
                if (ae.effect.isTremoloPicking()) {
                    ab += "TP"
                }
            } else {
                if (ac.isRestBeat()) {
                    Z = N.Ascii2Writer.SINGLE_SYMBOL;
                    ab = "%coreNoteText%" + Z + "%coreNoteText%"
                } else {
                    Z = ab = N.Ascii2Writer.SINGLE_SYMBOL
                }
            }
            ab = O.replace(ab, "%coreNoteText%" + Z + "%coreNoteText%", '<span id="' + N.Ascii2Writer.BEAT_HTML_CLASS_NAME + "-" + af + "-" + ac.index + '" class="' + N.Ascii2Writer.BEAT_HTML_CLASS_NAME + '">' + Z + "</span>");
            var ad = 0;
            var aa = W - N.Ascii2Helper.plainText(ab).length;
            while (ad < aa) {
                var X = ad++;
                if (q) {
                    ab = ab + Y
                } else {
                    ab = Y + ab
                }
            }
            return new N.Ascii2Note(ab, q, Y)
        },
        finishAsciiNote: function(Z, X) {
            var q = Z.getNoteText();
            if (Z.getLength() < X) {
                var Y = 0;
                var aa = X - N.Ascii2Helper.plainText(q).length;
                while (Y < aa) {
                    var W = Y++;
                    if (Z.getAtStart()) {
                        q = q + Z.getClosedSymbol()
                    } else {
                        q = Z.getClosedSymbol() + q
                    }
                }
            }
            Z.setNoteText(q)
        },
        replaceCoreNoteText: function(q, W) {
            var X = new K("%coreNoteText%(.+)%coreNoteText%", "");
            return X.replace(q, "%coreNoteText%>$1%coreNoteText%")
        },
        setTagForAsciiNote: function(W, q) {
            var X = new K("%coreNoteText%(.+)%coreNoteText%", "");
            return X.replace(q, '<span id="' + N.Ascii2Writer.BEAT_HTML_CLASS_NAME + "-" + W.voice.beat.measure.getIndex() + "-" + W.voice.beat.index + '" class="' + N.Ascii2Writer.BEAT_HTML_CLASS_NAME + '">$1</span>')
        },
        getMeasureLength: function(W) {
            var Z = this.getBeatLengthListForMeasure(W);
            var X = N.Ascii2Writer.MEASURE_OFFSET_LEFT;
            var Y = 0;
            while (Y < Z.length) {
                var q = Z[Y];
                ++Y;
                X += q
            }
            return X
        },
        getBeatLengthListForMeasure: function(W) {
            var q = this.getBeatDurationValueListForMeasure(W, false);
            var aa = new Array();
            var Z = this.getBeatLengthMapForMeasure(W);
            var Y = 0;
            while (Y < q.length) {
                var X = q[Y];
                ++Y;
                aa.push(Z.get(X))
            }
            return aa
        },
        getMinBeatDurationValueForMeasure: function(W) {
            var q = this.getBeatDurationValueListForMeasure(W);
            return q[q.length - 1]
        },
        getMaxBeatDurationValueForMeasure: function(W) {
            var q = this.getBeatDurationValueListForMeasure(W);
            return q[0]
        },
        getBeatDurationValueListForMeasure: function(X, q) {
            if (q == null) {
                q = true
            }
            var W = new Array();
            var ac = 0;
            var aa = X.beats;
            while (ac < aa.length) {
                var Y = aa[ac];
                ++ac;
                var Z = Y.voices[N.Ascii2Writer.PRIMARY_INDEX_OF_VOICE];
                var ab = Z.duration;
                W.push(ab.value)
            }
            if (q) {
                W.sort(function(ae, ad) {
                    if (ae == ad) {
                        return 0
                    }
                    if (ae > ad) {
                        return 1
                    } else {
                        return -1
                    }
                })
            }
            return W
        },
        getBeatLengthMapForMeasure: function(X) {
            var q = this.getBeatDurationValueListForMeasure(X);
            q.reverse();
            var Z = new m.ds.IntMap();
            var Y = q[0];
            var W = N.Ascii2Writer.MIN_COUNT_SYMBOLS_PER_BEAT;
            Z.set(Y, W);
            var ab = 0;
            while (ab < q.length) {
                var aa = q[ab];
                ++ab;
                if (Y == aa) {
                    continue
                }
                Y = aa;
                W += 1;
                Z.set(Y, W)
            }
            return Z
        },
        findStringNode: function(q) {
            return q.find("." + N.Ascii2Writer.STRING_HTML_CLASS_NAME)
        },
        newHeadNode: function() {
            return new h.JQuery("<div></div>")
        },
        newTabNode: function(q) {
            return new h.JQuery('<div id="' + N.Ascii2Writer.TAB_HTML_CLASS_NAME + "-" + q + '" class="' + N.Ascii2Writer.TAB_HTML_CLASS_NAME + '"></div>')
        },
        newScoreNode: function(q) {
            return new h.JQuery('<div id="' + N.Ascii2Writer.SCORE_HTML_CLASS_NAME + "-" + q + '" class="' + N.Ascii2Writer.SCORE_HTML_CLASS_NAME + '"></div>')
        },
        newTuningNode: function(q) {
            return new h.JQuery('<div id="' + N.Ascii2Writer.TUNING_HTML_CLASS_NAME + "-" + q + '" class="' + N.Ascii2Writer.TUNING_HTML_CLASS_NAME + '"></div>')
        },
        newMeasureNode: function(q) {
            return new h.JQuery('<div id="' + N.Ascii2Writer.MEASURE_HTML_CLASS_NAME + "-" + q + '" class="' + N.Ascii2Writer.MEASURE_HTML_CLASS_NAME + '"></div>')
        },
        newGuitarStringNode: function(q) {
            return new h.JQuery('<div id="' + N.Ascii2Writer.STRING_HTML_CLASS_NAME + "-" + q + '" class="' + N.Ascii2Writer.STRING_HTML_CLASS_NAME + '"></div>')
        },
        __class__: N.Ascii2Writer
    };
    var C = {};
    C.IFretBoard = function() {};
    p["fretBoard.IFretBoard"] = C.IFretBoard;
    C.IFretBoard.__name__ = ["fretBoard", "IFretBoard"];
    C.IFretBoard.prototype = {
        __class__: C.IFretBoard
    };
    C.FretBoard = function(W, q) {
        if (q == null) {
            q = "images"
        }
        if (q.length > 0 && q.charAt(q.length - 1) != "/") {
            q += "/"
        }
        this._fretboardUrl = q;
        this._onLoadComplete = W;
        this._fretPositions = new Array();
        this._fretCount = 24;
        this._stringCount = 6;
        this._lowNutWidth = 14;
        this._scaleX = 1;
        this._scaleY = 1;
        this._baseHeight = 97;
        this._baseWidth = 832;
        this._capo = 0
    };
    p["fretBoard.FretBoard"] = C.FretBoard;
    C.FretBoard.__name__ = ["fretBoard", "FretBoard"];
    C.FretBoard.__interfaces__ = [C.IFretBoard];
    C.FretBoard.prototype = {
        configure: function(q) {
            if (q != null) {
                this._fretboardConf = q
            }
            this.loadResources(this._onLoadComplete)
        },
        loadResources: function(q) {
            var Z = this;
            var af = C.FretBoard.IMG_COUNT + 8;
            var Y = 0;
            var ag = function() {
                Y++;
                if (Y >= af) {
                    Z._width = Z._fretBaseImg.get_width();
                    Z._height = Z._fretBaseImg.get_height();
                    Z._fretPositions = Z.defaultFretPositions();
                    Z._stringPositions = Z.defaultStringPositions();
                    Z._dotPositions = Z.defaultDotPositions();
                    if (q != null) {
                        q(new P.net.LoaderStatus(P.net.LoaderStatus.OK))
                    }
                }
            };
            var ae = function(ah) {
                return function(aj, ai) {
                    Z._stringImages[ah - 1] = aj;
                    ag()
                }
            };
            P.net.JsImageLoader.load(this._fretboardUrl + C.FretBoard.FRETBOARD_IMG, function(ah, ai) {
                Z._fretBaseImg = ah;
                Z._baseHeight = Z._fretBaseImg.get_height();
                Z._baseWidth = Z._fretBaseImg.get_width();
                ag()
            });
            P.net.JsImageLoader.load(this._fretboardUrl + this._fretboardConf.capoImage, function(ai, ah) {
                Z._capoImg = ai;
                ag()
            });
            P.net.JsImageLoader.load(this._fretboardUrl + C.FretBoard.FRET_NUT_IMG, function(ai, ah) {
                Z._fretNutImg = ai;
                ag()
            });
            this._stringImages = new Array();
            var ad = 1;
            var ac = 9;
            while (ad < ac) {
                var W = ad++;
                this._stringImages.push(null)
            }
            var X = 1;
            var aa = 9;
            while (X < aa) {
                var ab = X++;
                P.net.JsImageLoader.load(this._fretboardUrl + C.FretBoard.STRING_IMG + "-" + (ab > 6 ? 6 : ab) + "-full.png", ae(ab))
            }
        },
        render: function(W, X, Y) {
            if (X == null) {
                X = false
            }
            var Z = this;
            if (W != null) {
                this._canvas = W
            }
            if (this._timer != null) {
                this._timer.stop()
            }
            if (X) {
                var q = Math.ceil(Y / 50);
                this._playingStringsAlpha = C.FretBoard.PLAYING_STRINGS_DEFAULT_ALPHA;
                this._notesAlpha = C.FretBoard.NOTES_DEFAULT_ALPHA;
                this._timer = new m.Timer(50);
                this._timer.run = function() {
                    Z._notesAlpha -= C.FretBoard.NOTES_DEFAULT_ALPHA / q;
                    if (Z._notesAlpha <= 0) {
                        Z._notesAlpha = 0
                    } else {
                        Z._notesAlpha = Z._notesAlpha
                    }
                    Z._notesAlpha = Math.round(Z._notesAlpha * 1000) / 1000;
                    Z._playingStringsAlpha -= C.FretBoard.PLAYING_STRINGS_DEFAULT_ALPHA / q;
                    if (Z._playingStringsAlpha <= 0) {
                        Z._playingStringsAlpha = 0
                    } else {
                        Z._playingStringsAlpha = Z._playingStringsAlpha
                    }
                    Z._playingStringsAlpha = Math.round(Z._playingStringsAlpha * 1000) / 1000;
                    Z.draw(W, C.FretBoard.WITH_GLOW);
                    if (Z._notesAlpha == 0) {
                        Z._timer.stop()
                    }
                };
                this.draw(W, C.FretBoard.WITH_GLOW)
            } else {
                this._notesAlpha = C.FretBoard.NOTES_DEFAULT_ALPHA;
                this._playingStringsAlpha = C.FretBoard.PLAYING_STRINGS_DEFAULT_ALPHA;
                this.draw(W)
            }
        },
        draw: function(q, W) {
            if (W == null) {
                W = false
            }
            if (h.Boot.__instanceof(q, P.graphics.HtmlCanvas)) {
                (h.Boot.__cast(q, P.graphics.HtmlCanvas)).set_globalAlpha(1)
            }
            if (q == null) {
                q = this._canvas
            }
            q.clear();
            if (this._canvasCache != null && this._canvasCache.getType() != q.getType()) {
                this._canvasCache.dispose();
                this._canvasCache = null
            }
            if (this._canvasCache == null) {
                this._canvasCache = q.createChild();
                this.drawFretboard(this._canvasCache)
            }
            q.setWidth(this._baseWidth * this._scaleX + 60);
            q.setHeight(this._baseHeight * this._scaleY);
            q.scale(this._scaleX, this._scaleY);
            q.draw(this._canvasCache, 30, 0);
            if (this._onceHideNotes) {
                q.flush();
                return
            }
            this.renderCapo(q);
            if (C.FretBoard.DISPLAY_FUTURE_NOTES) {
                this.renderNotes(q, this._futureFrets, this._futureStrings, C.FretBoard.FUTURE_NOTES)
            }
            if (h.Boot.__instanceof(q, P.graphics.HtmlCanvas)) {
                if (W) {
                    (h.Boot.__cast(q, P.graphics.HtmlCanvas)).set_shadowBlur(2);
                    (h.Boot.__cast(q, P.graphics.HtmlCanvas)).set_shadowColor(16777215)
                }
            }
            this.renderPlayingStrings(q, this._activeFrets, this._activeStrings);
            q.flush();
            if (h.Boot.__instanceof(q, P.graphics.HtmlCanvas)) {}
            this.renderNotes(q, this._activeFrets, this._activeStrings, C.FretBoard.CURRENT_NOTES);
            q.flush();
            if (h.Boot.__instanceof(q, P.graphics.HtmlCanvas)) {
                (h.Boot.__cast(q, P.graphics.HtmlCanvas)).set_shadowBlur(0)
            }
        },
        drawFretboard: function(q) {
            q.setWidth(this._baseWidth);
            q.setHeight(this._baseHeight);
            q.drawImage(this._fretBaseImg, new P.geom.Rectangle(0, 0, this._baseWidth, this._baseHeight));
            this.renderDots(q);
            this.renderFrets(q);
            this.renderStrings(q)
        },
        renderFrets: function(X) {
            var Y = 0;
            var Z = this._fretPositions.length;
            while (Y < Z) {
                var W = Y++;
                var aa = 0;
                var q = this._fretPositions[W] - this._fretNutImg.get_width() / 2;
                X.drawImage(this._fretNutImg, new P.geom.Rectangle(q, aa, this._fretNutImg.get_width(), this._fretNutImg.get_height()))
            }
        },
        renderStrings: function(Y) {
            var Z = 0;
            var aa = this._stringCount;
            while (Z < aa) {
                var W = Z++;
                var X = W + 6 - this._stringCount;
                if (X < 0) {
                    X = 0
                } else {
                    X = X
                }
                var q = this._stringImages[X];
                Y.drawImage(q, new P.geom.Rectangle(0, this._stringPositions[W] - Math.floor(q.get_height() / 2), q.get_width(), q.get_height()))
            }
        },
        renderDots: function(Y) {
            var Z = 0;
            var aa = this._dotPositions.length;
            while (Z < aa) {
                var X = Z++;
                var W = this._dotPositions[X];
                var q = W.x;
                var ab = W.y;
                Y.setLineThickness(0);
                Y.beginFill(C.FretBoard.DOT_COLOR);
                Y.drawCircle(q, ab, C.FretBoard.DOT_RADIUS);
                Y.endFill()
            }
        },
        renderPlayingStrings: function(X, Y, q) {
            if (Y != null && q != null && Y.length == q.length) {
                var Z = 0;
                var aa = Y.length;
                while (Z < aa) {
                    var W = Z++;
                    this.renderPlayingString(X, Y[W], q[W])
                }
            }
        },
        renderPlayingString: function(X, Y, W) {
            var q = this.getFretCenter(Y + this._capo) + 30;
            var Z = this._stringPositions[W - 1] - this._stringImages[W - 1].get_height() % 2;
            if (Y == 0) {
                if (this._capo > 0) {
                    q = q + this._capoImg.get_width() / 2
                } else {
                    q = 30
                }
            } else {
                q += C.FretBoard.NOTE_RADIUS - 1
            }
            X.setAlpha(this._playingStringsAlpha);
            X.setLineThickness(this._stringImages[W - 1].get_height());
            X.setLineColor(this._fretboardConf.primaryColor);
            X.moveTo(q, Z);
            X.lineTo(30 + this._baseWidth, Z);
            X.flush();
            X.setAlpha(1)
        },
        renderNotes: function(Y, Z, W, q) {
            if (Z != null && W != null && Z.length == W.length) {
                var aa = 0;
                var ab = Z.length;
                while (aa < ab) {
                    var X = aa++;
                    this.renderNote(Y, Z[X], W[X], q)
                }
            }
        },
        renderNote: function(Y, aa, X, W) {
            if (aa > 0) {
                var Z = Y.createChild();
                var q = this.getFretCenter(aa + this._capo) + 30;
                var ab = this.getStringOffset(X);
                Y.setLineThickness(W == C.FretBoard.CURRENT_NOTES ? this._fretboardConf.noteBorderWidth : 2);
                Y.setLineColor(W == C.FretBoard.FUTURE_NOTES ? this._fretboardConf.primaryColor : 16777215);
                if (W == C.FretBoard.CURRENT_NOTES) {
                    Y.beginFill(this._fretboardConf.primaryColor, this._notesAlpha)
                }
                Y.drawCircle(q, ab, C.FretBoard.NOTE_RADIUS);
                if (W == C.FretBoard.CURRENT_NOTES) {
                    Y.endFill()
                }
            } else {
                if (this._fretboardConf.drawZeroFretNote && this._capo == 0 && W == C.FretBoard.CURRENT_NOTES) {
                    Y.setAlpha(this._notesAlpha);
                    Y.setLineThickness(this._fretboardConf.noteBorderWidth);
                    Y.setLineColor(this._fretboardConf.openStringColor);
                    Y.drawCircle(30 - C.FretBoard.NOTE_RADIUS * 2 + 2, this.getStringOffset(X), C.FretBoard.NOTE_RADIUS);
                    Y.setAlpha(1)
                }
            }
        },
        renderCapo: function(W) {
            if (this._capo > 0) {
                var q = this.getFretCenter(this._capo) - this._capoImg.get_width() / 2 + 30;
                var X = (this._baseHeight - this._capoImg.get_height()) / 2;
                W.drawImage(this._capoImg, new P.geom.Rectangle(q, X, this._capoImg.get_width(), this._capoImg.get_height()))
            }
        },
        defaultFretPositions: function() {
            var q = new Array();
            var ab = this._baseWidth;
            var Y = Math.pow(2, -this._fretCount / 12);
            var X = ab * (Y / (1 - Y));
            var aa = 1;
            var ac = this._fretCount;
            while (aa < ac) {
                var W = aa++;
                var Z = Math.pow(2, -W / 12);
                q.push(ab - Z * (ab + X) + X)
            }
            return q
        },
        defaultStringPositions: function() {
            var q = new Array();
            var ab = 10;
            var Y = Math.round((this._baseHeight - ab * 2) / (this._stringCount - 1));
            var Z = 0;
            var aa = this._stringCount;
            while (Z < aa) {
                var X = Z++;
                var W = this._stringImages[X];
                q.push(ab);
                ab += Y
            }
            return q
        },
        defaultDotPositions: function() {
            var q = new Array();
            q.push(this.calcDot(3));
            q.push(this.calcDot(5));
            q.push(this.calcDot(7));
            q.push(this.calcDot(9));
            q.push(this.calcDot(12, 1));
            q.push(this.calcDot(12, 2));
            q.push(this.calcDot(15));
            q.push(this.calcDot(17));
            q.push(this.calcDot(19));
            q.push(this.calcDot(21));
            q.push(this.calcDot(24, 1));
            q.push(this.calcDot(24, 2));
            return q
        },
        calcDot: function(X, W) {
            if (W == null) {
                W = 0
            }
            var q = this.getFretOffset(X - 1);
            q += (this.getFretOffset(X) - q) / 2;
            var Y = [0, 0, 0, 0, 1, 2, 1, 3, 2];
            var Z = Math.floor(this._height - C.FretBoard.DOT_RADIUS) / 2 + Y[this._stringCount];
            if (W == 1) {
                Z -= 15
            } else {
                if (W == 2) {
                    Z += 15
                }
            }
            return new P.geom.Point(q, Z)
        },
        setHeight: function(q) {
            this._height = q;
            this._scaleY = this._height / this._baseHeight;
            this._scaleX = this._scaleY
        },
        setWidth: function(q) {
            this._width = q;
            this._scaleX = this._width / this._baseWidth;
            this._scaleY = this._scaleX
        },
        getFretOffset: function(q) {
            if (q - 1 >= this._fretPositions.length) {
                return this._baseWidth
            }
            if (q - 1 < 0) {
                return this._lowNutWidth
            }
            return this._fretPositions[q - 1]
        },
        getStringOffset: function(q) {
            if (q - 1 >= this._stringPositions.length) {
                return this._baseHeight
            }
            return this._stringPositions[q - 1]
        },
        getFretCenter: function(X) {
            var W = this.getFretOffset(X);
            var q = this.getFretOffset(X - 1);
            return q + (W - q) / 2
        },
        pickStrings: function(W, q) {
            this._activeFrets = W;
            this._activeStrings = q
        },
        futureStrings: function(W, q) {
            this._futureFrets = W;
            this._futureStrings = q
        },
        setStringCount: function(q) {
            this._stringCount = q;
            this._stringPositions = this.defaultStringPositions();
            this._dotPositions = this.defaultDotPositions();
            if (this._canvasCache != null) {
                this.drawFretboard(this._canvasCache)
            }
        },
        setCapo: function(q) {
            this._capo = q
        },
        setFretBoardUrl: function(q) {
            this._fretboardUrl = q
        },
        hideNotes: function() {
            this._onceHideNotes = true;
            this.render(this._canvas);
            this._onceHideNotes = false
        },
        getFretPositions: function() {
            return this._fretPositions
        },
        getContents: function() {
            var q = "";
            if (h.Boot.__instanceof(this._canvasCache, P.graphics.HtmlCanvas)) {
                q = (h.Boot.__cast(this._canvasCache, P.graphics.HtmlCanvas)).toDataURL()
            }
            return q
        },
        onMousemove: function(q, ab) {
            if (this._fretboardConf.drawZeroFretNote && this._capo == 0) {
                var X = false;
                if (q < 30 && q >= 30 - C.FretBoard.NOTE_RADIUS * 2 - 4) {
                    var Y = 0;
                    var aa = this._activeFrets.length;
                    while (Y < aa) {
                        var W = Y++;
                        if (this._activeFrets[W] == 0 && ab >= this.getStringOffset(this._activeStrings[W]) - C.FretBoard.NOTE_RADIUS && ab <= this.getStringOffset(this._activeStrings[W]) + C.FretBoard.NOTE_RADIUS) {
                            X = true;
                            break
                        }
                    }
                }
                if (X) {
                    this._openStringTipShown = true;
                    this.render(this._canvas);
                    this._canvas.setLineThickness(0);
                    this._canvas.beginFill(0);
                    this._canvas.drawRect(q + 12, ab, 66, 20);
                    this._canvas.endFill();
                    var Z = new P.graphics.TextFormat();
                    Z.size = 11;
                    Z.fontName = "Sans-serif";
                    Z.leading = 0;
                    Z.leftMargin = 0;
                    Z.color = 16777215;
                    this._canvas.drawText("Open string", Z, q + 14, ab + 2)
                } else {
                    if (this._openStringTipShown) {
                        this._openStringTipShown = false;
                        this.render(this._canvas)
                    }
                }
            }
        },
        getOffset: function() {
            return 30
        },
        __class__: C.FretBoard
    };
    var c = {};
    c.GpReaderBase = function() {};
    p["guitarpro.GpReaderBase"] = c.GpReaderBase;
    c.GpReaderBase.__name__ = ["guitarpro", "GpReaderBase"];
    c.GpReaderBase.__interfaces__ = [V.ISongReader];
    c.GpReaderBase.toChannelShort = function(X) {
        var q = X * 8 - 1;
        var W;
        if (q < -32768) {
            W = -32768
        } else {
            if (q > 32767) {
                W = 32767
            } else {
                W = q
            }
        }
        return W
    };
    c.GpReaderBase.prototype = {
        readSong: function(X, q, W) {
            this.version = null;
            this._factory = q;
            this._data = X;
            this._data.bigEndian = false;
            if (!this.readVersion()) {
                throw new V.FormatException("Unsupported Version")
            }
            if (W != null) {
                this._options = W
            } else {
                this._options = {}
            }
            return q.newSong()
        },
        initVersions: function(q) {
            this._supportedVersions = q
        },
        skip: function(q) {
            this._data.skip(q)
        },
        readByteSizeString: function(q, W) {
            if (W == null) {
                W = "UTF-8"
            }
            return this.readString(q, this._data.readByte(), W)
        },
        readString: function(W, q, Z) {
            if (Z == null) {
                Z = "UTF-8"
            }
            if (q == null) {
                q = -2
            }
            if (q == -2) {
                q = W
            }
            var Y;
            if (W > 0) {
                Y = W
            } else {
                Y = q
            }
            var X = this.readStringInternal(Y);
            return B.substr(X, 0, q >= 0 ? q : W)
        },
        readStringInternal: function(W) {
            var Y = "";
            if (W > this._data.length() - this._data.position()) {
                W = this._data.length() - this._data.position()
            }
            var X = 0;
            while (X < W) {
                var q = X++;
                Y += String.fromCharCode(this._data.readByte())
            }
            return Y
        },
        readIntSizeCheckByteString: function(W) {
            if (W == null) {
                W = "UTF-8"
            }
            var q = this._data.readInt() - 1;
            if (q > 2000) {
                console.log("very long string: " + q + " likely it`s pipec!")
            }
            return this.readByteSizeString(q, W)
        },
        readByteSizeCheckByteString: function(q) {
            if (q == null) {
                q = "UTF-8"
            }
            return this.readByteSizeString(this._data.readByte() - 1, q)
        },
        readIntSizeString: function(q) {
            if (q == null) {
                q = "UTF-8"
            }
            return this.readString(this._data.readInt(), -2, q)
        },
        readVersion: function() {
            try {
                if (this.version == null) {
                    this.version = this.readByteSizeString(30, "UTF-8")
                }
                var W = 0;
                var Z = this._supportedVersions.length;
                while (W < Z) {
                    var q = W++;
                    var Y = this._supportedVersions[q];
                    if (this.version == Y) {
                        this._versionIndex = q;
                        return true
                    }
                }
            } catch (X) {
                this.version = "Not Supported"
            }
            return false
        },
        getTiedNoteValue: function(am, aj) {
            var Z = aj.measureCount();
            if (Z > 0) {
                var Y = 0;
                while (Y < Z) {
                    var W = Y++;
                    var al = Z - 1 - W;
                    var aa = aj.measures[al];
                    var ah = 0;
                    var ai = aa.beatCount();
                    while (ah < ai) {
                        var ab = ah++;
                        var an = aa.beatCount() - 1 - ab;
                        var q = aa.beats[an];
                        var af = 0;
                        var ag = q.voices.length;
                        while (af < ag) {
                            var ae = af++;
                            var ao = q.voices[ae];
                            if (!ao.isEmpty) {
                                var ac = 0;
                                var ad = ao.notes.length;
                                while (ac < ad) {
                                    var ak = ac++;
                                    var X = ao.notes[ak];
                                    if (X.string == am) {
                                        return X.value
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return -1
        },
        __class__: c.GpReaderBase
    };
    c.Gp3Reader = function() {
        c.GpReaderBase.call(this);
        this.initVersions(["FICHIER GUITAR PRO v3.00"])
    };
    p["guitarpro.Gp3Reader"] = c.Gp3Reader;
    c.Gp3Reader.__name__ = ["guitarpro", "Gp3Reader"];
    c.Gp3Reader.toStrokeValue = function(q) {
        switch (q) {
            case 1:
                return V.Duration.SIXTY_FOURTH;
            case 2:
                return V.Duration.SIXTY_FOURTH;
            case 3:
                return V.Duration.THIRTY_SECOND;
            case 4:
                return V.Duration.SIXTEENTH;
            case 5:
                return V.Duration.EIGHTH;
            case 6:
                return V.Duration.QUARTER;
            default:
                return V.Duration.SIXTY_FOURTH
        }
    };
    c.Gp3Reader.__super__ = c.GpReaderBase;
    c.Gp3Reader.prototype = v(c.GpReaderBase.prototype, {
        readSong: function(Y, q, W) {
            var X = c.GpReaderBase.prototype.readSong.call(this, Y, q, W);
            this.readSongImpl(X);
            return X
        },
        readSongImpl: function(Y) {
            this.readInfo(Y);
            if (this._data.readBool()) {
                this._tripletFeel = V.TripletFeel.Eighth
            } else {
                this._tripletFeel = V.TripletFeel.None
            }
            Y.tempoName = "";
            Y.tempo = this._data.readInt();
            Y.hideTempo = false;
            Y.key = this._data.readInt();
            Y.octave = 0;
            var q = this.readChannelPresets();
            var X = this._data.readInt();
            var W = this._data.readInt();
            this.readMeasureHeaders(Y, X);
            this.readTracks(Y, W, q);
            this.readMeasures(Y);
            return
        },
        readMeasures: function(Y) {
            var ac = this._factory.newTempo();
            ac.value = Y.tempo;
            var W = V.ModelConstants.QUARTER_TIME;
            var af = 0;
            var aa = Y.measureHeaders.length;
            while (af < aa) {
                var ab = af++;
                var Z = Y.measureHeaders[ab];
                Z.start = W;
                var ad = 0;
                var ae = Y.tracks.length;
                while (ad < ae) {
                    var ag = ad++;
                    var X = Y.tracks[ag];
                    var q = this._factory.newMeasure(Z);
                    Z.tempo.copy(ac);
                    X.addMeasure(q);
                    this.readMeasure(q, X);
                    ac.copy(Z.tempo)
                }
                W += Z.length()
            }
        },
        readMeasure: function(X, q) {
            var aa = X.start();
            var W = this._data.readInt();
            var Z = 0;
            while (Z < W) {
                var Y = Z++;
                aa += this.readBeat(aa, X, q, 0)
            }
            X.clef = this._defaultClef[q.number - 1]
        },
        readBeat: function(X, q, Y, ai) {
            var Z = this._data.readByte();
            var ag = this.getBeat(q, X);
            var aj = ag.voices[ai];
            if ((Z & 64) != 0) {
                var ak = this._data.readByte()
            }
            var ab = this.readDuration(Z);
            var al = this._factory.newNoteEffect();
            if ((Z & 2) != 0) {
                this.readChord(Y.stringCount(), ag)
            }
            if ((Z & 4) != 0) {
                this.readText(ag)
            }
            if ((Z & 8) != 0) {
                this.readBeatEffects(ag, al)
            }
            if ((Z & 16) != 0) {
                var ae = this.readEffectTable(q);
                ag.effect.effectTable = ae
            }
            var aa = this._data.readByte();
            var af = 0;
            while (af < 7) {
                var ac = af++;
                var ad = 6 - ac;
                if ((aa & 1 << ad) != 0 && 6 - ad < Y.stringCount()) {
                    var W = Y.strings[6 - ad].clone(this._factory);
                    var ah = this.readNote(W, Y, al.clone(this._factory));
                    aj.addNote(ah)
                }
                ab.copy(aj.duration)
            }
            aj.isEmpty = false;
            return ab.time()
        },
        readNote: function(ac, W, Z) {
            var q = this._data.readByte();
            var Y = this._factory.newNote();
            Y.string = ac.number;
            Y.effect = Z;
            Y.effect.ghostNote = (q & 4) != 0;
            if ((q & 32) != 0) {
                var ab = this._data.readByte();
                Y.isTiedNote = ab == 2;
                Y.effect.deadNote = ab == 3
            }
            if ((q & 1) != 0) {
                Y.duration = this._data.readSignedByte();
                Y.tuplet = this._data.readSignedByte()
            }
            if ((q & 16) != 0) {
                Y.velocity = V.Velocities.MIN_VELOCITY + V.Velocities.VELOCITY_INCREMENT * this._data.readSignedByte() - V.Velocities.VELOCITY_INCREMENT
            }
            if ((q & 32) != 0) {
                var X = this._data.readSignedByte();
                var aa;
                if (Y.isTiedNote) {
                    aa = this.getTiedNoteValue(ac.number, W)
                } else {
                    aa = X
                }
                if (aa >= 0 && aa < 100) {
                    Y.value = aa
                } else {
                    Y.value = 0
                }
            }
            if ((q & 128) != 0) {
                Y.effect.set_leftHandFinger(this._data.readSignedByte());
                Y.effect.set_rightHandFinger(this._data.readSignedByte());
                Y.effect.set_isFingering(true)
            }
            if ((q & 8) != 0) {
                this.readNoteEffects(Y.effect)
            }
            return Y
        },
        readNoteEffects: function(X, W, Y) {
            var q = this._data.readByte();
            X.slide = (q & 4) != 0;
            X.hammer = (q & 2) != 0;
            X.letRing = (q & 8) != 0;
            if ((q & 1) != 0) {
                this.readBend(X)
            }
            if ((q & 16) != 0) {
                this.readGrace(X)
            }
        },
        readGrace: function(Y) {
            var q = this._data.readByte();
            var X = this._data.readByte();
            var aa = this._data.readSignedByte();
            var Z = this._data.readByte();
            var W = this._factory.newGraceEffect();
            W.fret = q;
            W.velocity = V.Velocities.MIN_VELOCITY + V.Velocities.VELOCITY_INCREMENT * X - V.Velocities.VELOCITY_INCREMENT;
            switch (Z) {
                case 1:
                    W.duration = V.Duration.THIRTY_SECOND;
                    break;
                case 2:
                    W.duration = V.Duration.SIXTEENTH;
                    break;
                case 3:
                    W.duration = V.Duration.EIGHTH;
                    break;
                default:
                    W.duration = V.Duration.SIXTY_FOURTH
            }
            W.isDead = q == 255;
            W.isOnBeat = false;
            switch (aa) {
                case 0:
                    W.transition = V.effects.GraceEffectTransition.None;
                    break;
                case 1:
                    W.transition = V.effects.GraceEffectTransition.Slide;
                    break;
                case 2:
                    W.transition = V.effects.GraceEffectTransition.Bend;
                    break;
                case 3:
                    W.transition = V.effects.GraceEffectTransition.Hammer;
                    break
            }
            Y.set_grace(W)
        },
        readBend: function(Y) {
            var W = this._factory.newBendEffect();
            W.type = this._data.readSignedByte();
            W.value = this._data.readInt();
            var aa = this._data.readInt();
            var Z = 0;
            while (Z < aa) {
                var X = Z++;
                var ac = Math.round(this._data.readInt() * V.effects.BendEffect.MAX_POSITION / 60);
                var ab = Math.round(this._data.readInt() * V.effects.BendEffect.SEMITONE_LENGTH / 25);
                var q = this._data.readBool();
                W.points.push(new V.effects.BendPoint(ac, ab, q))
            }
            if (aa > 0) {
                Y.set_bend(W)
            }
        },
        readEffectTable: function(W) {
            var q = new V.EffectTable();
            q.instrument.value = this._data.readSignedByte();
            q.volume.value = this._data.readSignedByte();
            q.balance.value = this._data.readSignedByte();
            q.chorus.value = this._data.readSignedByte();
            q.reverb.value = this._data.readSignedByte();
            q.phaser.value = this._data.readSignedByte();
            q.tremolo.value = this._data.readSignedByte();
            q.tempoName = "";
            q.tempo.value = this._data.readInt();
            if (q.instrument.value < 0) {
                q.instrument = null
            }
            if (q.volume.value >= 0) {
                q.volume.duration = this._data.readSignedByte()
            } else {
                q.volume = null
            }
            if (q.balance.value >= 0) {
                q.balance.duration = this._data.readSignedByte()
            } else {
                q.balance = null
            }
            if (q.chorus.value >= 0) {
                q.chorus.duration = this._data.readSignedByte()
            } else {
                q.chorus = null
            }
            if (q.reverb.value >= 0) {
                q.reverb.duration = this._data.readSignedByte()
            } else {
                q.reverb = null
            }
            if (q.phaser.value >= 0) {
                q.phaser.duration = this._data.readSignedByte()
            } else {
                q.phaser = null
            }
            if (q.tremolo.value >= 0) {
                q.tremolo.duration = this._data.readSignedByte()
            } else {
                q.tremolo = null
            }
            if (q.tempo.value >= 0) {
                q.tempo.duration = this._data.readSignedByte();
                W.tempo().value = q.tempo.value;
                q.hideTempo = false
            } else {
                q.tempo = null
            }
            return q
        },
        readBeatEffects: function(ac, Z) {
            var W = this._data.readByte();
            ac.effect.fadeIn = (W & 16) != 0;
            Z.vibrato = (W & 2) != 0 || (W & 1) != 0;
            if ((W & 32) != 0) {
                var ab = this._data.readByte();
                if (ab == 0) {
                    this.readTremoloBar(ac.effect)
                } else {
                    ac.effect.tapping = ab == 1;
                    ac.effect.slapping = ab == 2;
                    ac.effect.popping = ab == 3;
                    this._data.readInt()
                }
            }
            if ((W & 64) != 0) {
                var q = this._data.readSignedByte();
                var Y = this._data.readSignedByte();
                if (Y > 0) {
                    ac.effect.stroke.direction = V.BeatStrokeDirection.Up;
                    ac.effect.stroke.value = c.Gp3Reader.toStrokeValue(Y)
                } else {
                    if (q > 0) {
                        ac.effect.stroke.direction = V.BeatStrokeDirection.Down;
                        ac.effect.stroke.value = c.Gp3Reader.toStrokeValue(q)
                    }
                }
            }
            if ((W & 4) != 0) {
                var X = this._factory.newHarmonicEffect();
                X.type = V.effects.HarmonicType.Natural;
                Z.set_harmonic(X)
            }
            if ((W & 8) != 0) {
                var aa = this._factory.newHarmonicEffect();
                aa.type = V.effects.HarmonicType.Artificial;
                aa.data = 0;
                Z.set_harmonic(aa)
            }
        },
        readTremoloBar: function(W) {
            var q = this._factory.newBendEffect();
            q.value = this._data.readInt();
            q.points.push(new V.effects.BendPoint(0, 0, false));
            q.points.push(new V.effects.BendPoint(Math.round(V.effects.BendEffect.MAX_POSITION / 2), Math.round(q.value / 50), false));
            q.points.push(new V.effects.BendPoint(V.effects.BendEffect.MAX_POSITION, 0, false));
            W.tremoloBar = q
        },
        readText: function(q) {
            var W = this.readIntSizeCheckByteString();
            q.setText(W)
        },
        readChord: function(aa, Z) {
            var W = this._factory.newChord(aa);
            if ((this._data.readByte() & 1) == 0) {
                W.name = this.readIntSizeCheckByteString();
                W.firstFret = this._data.readInt();
                if (W.firstFret != 0) {
                    var Y = 0;
                    while (Y < 6) {
                        var X = Y++;
                        var ad = this._data.readInt();
                        if (X < W.strings.length) {
                            W.strings[X] = ad
                        }
                    }
                }
            } else {
                this.skip(25);
                W.name = this.readByteSizeString(34);
                W.firstFret = this._data.readInt();
                var ab = 0;
                while (ab < 6) {
                    var q = ab++;
                    var ac = this._data.readInt();
                    if (q < W.strings.length) {
                        W.strings[q] = ac
                    }
                }
                this.skip(36)
            }
            if (W.noteCount() > 0) {
                Z.setChord(W)
            }
        },
        readDuration: function(W) {
            var Y = this._factory.newDuration();
            var q = this._data.readSignedByte();
            Y.value = Math.round(Math.pow(2, q + 4) / 4);
            Y.isDotted = (W & 1) != 0;
            if ((W & 32) != 0) {
                var X = this._data.readInt();
                switch (X) {
                    case 3:
                        Y.tuplet.enters = 3;
                        Y.tuplet.times = 2;
                        break;
                    case 5:
                        Y.tuplet.enters = 5;
                        Y.tuplet.times = 4;
                        break;
                    case 6:
                        Y.tuplet.enters = 6;
                        Y.tuplet.times = 4;
                        break;
                    case 7:
                        Y.tuplet.enters = 7;
                        Y.tuplet.times = 4;
                        break;
                    case 9:
                        Y.tuplet.enters = 9;
                        Y.tuplet.times = 8;
                        break;
                    case 10:
                        Y.tuplet.enters = 10;
                        Y.tuplet.times = 8;
                        break;
                    case 11:
                        Y.tuplet.enters = 11;
                        Y.tuplet.times = 8;
                        break;
                    case 12:
                        Y.tuplet.enters = 12;
                        Y.tuplet.times = 8;
                        break
                }
            }
            return Y
        },
        getBeat: function(X, ab) {
            var Z = 0;
            var aa = X.beats.length;
            while (Z < aa) {
                var q = Z++;
                var Y = X.beats[q];
                if (Y.start == ab) {
                    return Y
                }
            }
            var W = this._factory.newBeat();
            W.start = ab;
            X.addBeat(W);
            return W
        },
        readTracks: function(aa, W, q) {
            this._defaultClef = new Array();
            var Y = 1;
            var Z = W + 1;
            while (Y < Z) {
                var X = Y++;
                aa.addTrack(this.readTrack(X, q))
            }
        },
        readTrack: function(Y, ab) {
            var X = this._data.readByte();
            var W = this._factory.newTrack();
            W.isPercussionTrack = (X & 1) != 0;
            W.is12StringedGuitarTrack = (X & 2) != 0;
            W.isBanjoTrack = (X & 4) != 0;
            W.number = Y;
            W.name = this.readByteSizeString(40);
            var ac = this._data.readInt();
            var aa = 0;
            while (aa < 7) {
                var Z = aa++;
                var ad = this._data.readInt();
                if (ac > Z) {
                    var q = this._factory.newString();
                    q.number = Z + 1;
                    q.value = ad;
                    W.strings.push(q)
                }
            }
            this._defaultClef[W.number - 1] = W.detectClef();
            W.port = this._data.readInt();
            this.readChannel(W.channel, ab);
            if (W.channel.channel == 9) {
                W.isPercussionTrack = true;
                W.channel.instrument(0)
            }
            W.fretCount = this._data.readInt();
            W.offset = this._data.readInt();
            W.color = this.readColor();
            return W
        },
        readChannel: function(W, q) {
            var X = this._data.readInt() - 1;
            var Y = this._data.readInt() - 1;
            if (X >= 0 && X < q.length) {
                q[X].copy(W);
                if (W.instrument() < 0) {
                    W.instrument(0)
                }
                if (!W.isPercussionChannel()) {
                    W.effectChannel = Y
                }
            }
        },
        readMeasureHeaders: function(Z, W) {
            var Y = this._factory.newTimeSignature();
            var X = 0;
            while (X < W) {
                var q = X++;
                Z.addMeasureHeader(this.readMeasureHeader(q, Y, Z))
            }
        },
        readMeasureHeader: function(W, Y, X) {
            var q = this._data.readByte();
            var Z = this._factory.newMeasureHeader();
            Z.number = W + 1;
            Z.start = 0;
            Z.tempo.value = X.tempo;
            Z.tripletFeel = this._tripletFeel;
            if ((q & 1) != 0) {
                Y.numerator = this._data.readSignedByte()
            }
            if ((q & 2) != 0) {
                Y.denominator.value = this._data.readSignedByte()
            }
            Z.isRepeatOpen = (q & 4) != 0;
            Z.timeSignature.numerator = Y.numerator;
            Z.timeSignature.denominator.value = Y.denominator.value;
            if ((q & 8) != 0) {
                Z.repeatClose = this._data.readSignedByte() + 1
            }
            if ((q & 16) != 0) {
                Z.repeatAlternative = this.parseRepeatAlternative(X, Z.number, this._data.readByte())
            }
            if ((q & 32) != 0) {
                this.readMarker(Z)
            }
            if ((q & 64) != 0) {
                Z.keySignature = V.SongIo.toKeySignature(this._data.readSignedByte());
                Z.keySignatureType = this._data.readSignedByte()
            } else {
                if (Z.number > 1) {
                    Z.keySignature = X.measureHeaders[W - 1].keySignature;
                    Z.keySignatureType = X.measureHeaders[W - 1].keySignatureType
                }
            }
            Z.hasDoubleBar = (q & 128) != 0;
            return Z
        },
        parseRepeatAlternative: function(X, q, ad) {
            var af = 0;
            var ae = 0;
            var ac = 0;
            var aa = X.measureHeaders.length;
            while (ac < aa) {
                var Y = ac++;
                var Z = X.measureHeaders[Y];
                if (Z.number == q) {
                    break
                }
                if (Z.isRepeatOpen) {
                    ae = 0
                }
                ae |= Z.repeatAlternative
            }
            var ab = 0;
            while (ab < 8) {
                var W = ab++;
                if (ad > W && (ae & 1 << W) == 0) {
                    af |= 1 << W
                }
            }
            return af
        },
        readMarker: function(W) {
            var q = new V.MeasureText();
            q.measureHeader = W;
            q.title = this.readIntSizeCheckByteString();
            q.color = this.readColor();
            W.text = q;
            return q
        },
        readColor: function() {
            this.skip(1);
            var X = this._data.readByte();
            var W = this._data.readByte();
            var q = this._data.readByte();
            return V.Color.fromRgb(X, W, q)
        },
        readChannelPresets: function() {
            var q = new Array();
            var Y = 0;
            while (Y < 64) {
                var X = Y++;
                var W = this._factory.newChannelPresets();
                W.channel = X;
                W.effectChannel = X;
                W.instrument(this._data.readInt());
                W.volume = c.GpReaderBase.toChannelShort(this._data.readSignedByte());
                W.balance = c.GpReaderBase.toChannelShort(this._data.readSignedByte());
                W.chorus = c.GpReaderBase.toChannelShort(this._data.readSignedByte());
                W.reverb = c.GpReaderBase.toChannelShort(this._data.readSignedByte());
                W.phaser = c.GpReaderBase.toChannelShort(this._data.readSignedByte());
                W.tremolo = c.GpReaderBase.toChannelShort(this._data.readSignedByte());
                q.push(W);
                this.skip(2)
            }
            return q
        },
        readInfo: function(Y) {
            Y.title = this.readIntSizeCheckByteString();
            Y.subtitle = this.readIntSizeCheckByteString();
            Y.artist = this.readIntSizeCheckByteString();
            Y.album = this.readIntSizeCheckByteString();
            Y.words = this.readIntSizeCheckByteString();
            Y.music = Y.words;
            Y.copyright = this.readIntSizeCheckByteString();
            Y.tab = this.readIntSizeCheckByteString();
            Y.instructions = this.readIntSizeCheckByteString();
            var W = this._data.readInt();
            Y.notice = "";
            var X = 0;
            while (X < W) {
                var q = X++;
                Y.notice += this.readIntSizeCheckByteString() + "\n"
            }
        },
        __class__: c.Gp3Reader
    });
    c.Gp4Reader = function() {
        c.Gp3Reader.call(this);
        this.initVersions(["FICHIER GUITAR PRO v4.00", "FICHIER GUITAR PRO v4.06", "FICHIER GUITAR PRO L4.06"])
    };
    p["guitarpro.Gp4Reader"] = c.Gp4Reader;
    c.Gp4Reader.__name__ = ["guitarpro", "Gp4Reader"];
    c.Gp4Reader.__super__ = c.Gp3Reader;
    c.Gp4Reader.prototype = v(c.Gp3Reader.prototype, {
        readSongImpl: function(Y) {
            this.readInfo(Y);
            if (this._data.readBool()) {
                this._tripletFeel = V.TripletFeel.Eighth
            } else {
                this._tripletFeel = V.TripletFeel.None
            }
            this.readLyrics(Y);
            Y.tempoName = "";
            Y.tempo = this._data.readInt();
            Y.hideTempo = false;
            Y.key = this._data.readInt();
            Y.octave = this._data.readSignedByte();
            var q = this.readChannelPresets();
            var X = this._data.readInt();
            var W = this._data.readInt();
            this.readMeasureHeaders(Y, X);
            this.readTracks(Y, W, q);
            this.readMeasures(Y)
        },
        readLyrics: function(Y) {
            Y.lyrics = this._factory.newLyrics();
            Y.lyrics.trackChoice = this._data.readInt();
            var X = 0;
            while (X < 5) {
                var W = X++;
                var q = this._factory.newLyricLine();
                q.startingMeasure = this._data.readInt();
                q.lyrics = this.readIntSizeString();
                Y.lyrics.lines.push(q)
            }
        },
        readBeat: function(X, q, Y, ai) {
            var Z = this._data.readSignedByte();
            var ag = this.getBeat(q, X);
            var aj = ag.voices[ai];
            if ((Z & 64) != 0) {
                var ak = this._data.readSignedByte()
            }
            var ab = this.readDuration(Z);
            if ((Z & 2) != 0) {
                this.readChord(Y.stringCount(), ag)
            }
            if ((Z & 4) != 0) {
                this.readText(ag)
            }
            if ((Z & 8) != 0) {
                this.readBeatEffects(ag, null)
            }
            if ((Z & 16) != 0) {
                var ae = this.readEffectTable(q);
                ag.effect.effectTable = ae
            }
            var aa = this._data.readSignedByte();
            var af = 0;
            while (af < 7) {
                var ac = af++;
                var ad = 6 - ac;
                if ((aa & 1 << ad) != 0 && 6 - ad < Y.stringCount()) {
                    var W = Y.strings[6 - ad].clone(this._factory);
                    var ah = this.readNote(W, Y, this._factory.newNoteEffect());
                    aj.addNote(ah)
                }
                ab.copy(aj.duration)
            }
            aj.isEmpty = false;
            return ab.time()
        },
        readNoteEffects: function(Z, Y, aa) {
            var W = this._data.readSignedByte();
            var q = this._data.readSignedByte();
            if ((W & 1) != 0) {
                this.readBend(Z)
            }
            if ((W & 16) != 0) {
                this.readGrace(Z)
            }
            if ((q & 4) != 0) {
                this.readTremoloPicking(Z)
            }
            if ((q & 8) != 0) {
                Z.slide = true;
                var X = this._data.readSignedByte();
                switch (X) {
                    case 1:
                        Z.slideType = V.effects.SlideType.FastSlideTo;
                        break;
                    case 2:
                        Z.slideType = V.effects.SlideType.SlowSlideTo;
                        break;
                    case 4:
                        Z.slideType = V.effects.SlideType.OutDownWards;
                        break;
                    case 8:
                        Z.slideType = V.effects.SlideType.OutUpWards;
                        break;
                    case 16:
                        Z.slideType = V.effects.SlideType.IntoFromBelow;
                        break;
                    case 32:
                        Z.slideType = V.effects.SlideType.IntoFromAbove;
                        break
                }
            }
            if ((q & 16) != 0) {
                this.readArtificialHarmonic(Z)
            }
            if ((q & 32) != 0) {
                this.readTrill(Z)
            }
            Z.letRing = (W & 8) != 0;
            Z.hammer = (W & 2) != 0;
            Z.accentuatedNote = (W & 64) != 0;
            Z.vibrato = (q & 64) != 0 || Z.vibrato;
            Z.palmMute = (q & 2) != 0;
            Z.staccato = (q & 1) != 0
        },
        readTrill: function(W) {
            var q = this._data.readSignedByte();
            var Y = this._data.readSignedByte();
            var X = this._factory.newTrillEffect();
            X.fret = q;
            switch (Y) {
                case 1:
                    X.duration.value = V.Duration.SIXTEENTH;
                    W.trill = X;
                    break;
                case 2:
                    X.duration.value = V.Duration.THIRTY_SECOND;
                    W.trill = X;
                    break;
                case 3:
                    X.duration.value = V.Duration.SIXTY_FOURTH;
                    W.trill = X;
                    break
            }
        },
        readArtificialHarmonic: function(X) {
            var q = this._data.readSignedByte();
            var W = this._factory.newHarmonicEffect();
            W.data = 0;
            switch (q) {
                case 1:
                    W.type = V.effects.HarmonicType.Natural;
                    X.set_harmonic(W);
                    break;
                case 3:
                    W.type = V.effects.HarmonicType.Tapped;
                    X.set_harmonic(W);
                    break;
                case 4:
                    W.type = V.effects.HarmonicType.Pinch;
                    X.set_harmonic(W);
                    break;
                case 5:
                    W.type = V.effects.HarmonicType.Semi;
                    X.set_harmonic(W);
                    break;
                case 15:
                    W.data = 2;
                    W.type = V.effects.HarmonicType.Artificial;
                    X.set_harmonic(W);
                    break;
                case 17:
                    W.data = 3;
                    W.type = V.effects.HarmonicType.Artificial;
                    X.set_harmonic(W);
                    break;
                case 22:
                    W.data = 0;
                    W.type = V.effects.HarmonicType.Artificial;
                    X.set_harmonic(W);
                    break
            }
        },
        readTremoloPicking: function(q) {
            var W = this._data.readSignedByte();
            var X = this._factory.newTremoloPickingEffect();
            switch (W) {
                case 1:
                    X.duration.value = V.Duration.EIGHTH;
                    q.tremoloPicking = X;
                    break;
                case 2:
                    X.duration.value = V.Duration.SIXTEENTH;
                    q.tremoloPicking = X;
                    break;
                case 3:
                    X.duration.value = V.Duration.THIRTY_SECOND;
                    q.tremoloPicking = X;
                    break
            }
        },
        readEffectTable: function(W) {
            var q = new V.EffectTable();
            q.instrument.value = this._data.readSignedByte();
            q.volume.value = this._data.readSignedByte();
            q.balance.value = this._data.readSignedByte();
            q.chorus.value = this._data.readSignedByte();
            q.reverb.value = this._data.readSignedByte();
            q.phaser.value = this._data.readSignedByte();
            q.tremolo.value = this._data.readSignedByte();
            q.tempoName = "";
            q.tempo.value = this._data.readInt();
            if (q.instrument.value < 0) {
                q.instrument = null
            }
            if (q.volume.value >= 0) {
                q.volume.duration = this._data.readSignedByte()
            } else {
                q.volume = null
            }
            if (q.balance.value >= 0) {
                q.balance.duration = this._data.readSignedByte()
            } else {
                q.balance = null
            }
            if (q.chorus.value >= 0) {
                q.chorus.duration = this._data.readSignedByte()
            } else {
                q.chorus = null
            }
            if (q.reverb.value >= 0) {
                q.reverb.duration = this._data.readSignedByte()
            } else {
                q.reverb = null
            }
            if (q.phaser.value >= 0) {
                q.phaser.duration = this._data.readSignedByte()
            } else {
                q.phaser = null
            }
            if (q.tremolo.value >= 0) {
                q.tremolo.duration = this._data.readSignedByte()
            } else {
                q.tremolo = null
            }
            if (q.tempo.value >= 0) {
                q.tempo.duration = this._data.readSignedByte();
                W.tempo().value = q.tempo.value;
                q.hideTempo = false
            } else {
                q.tempo = null
            }
            var X = this._data.readSignedByte();
            if (q.volume != null) {
                q.volume.allTracks = (X & 1) != 0
            }
            if (q.balance != null) {
                q.balance.allTracks = (X & 2) != 0
            }
            if (q.chorus != null) {
                q.chorus.allTracks = (X & 4) != 0
            }
            if (q.reverb != null) {
                q.reverb.allTracks = (X & 8) != 0
            }
            if (q.phaser != null) {
                q.phaser.allTracks = (X & 16) != 0
            }
            if (q.tremolo != null) {
                q.tremolo.allTracks = (X & 32) != 0
            }
            if (q.tempo != null) {
                q.tempo.allTracks = true
            }
            return q
        },
        readBeatEffects: function(ab, Z) {
            var X = this._data.readSignedByte();
            var W = this._data.readSignedByte();
            ab.effect.fadeIn = (X & 16) != 0;
            ab.effect.vibrato = (X & 2) != 0 || ab.effect.vibrato;
            if ((X & 32) != 0) {
                var aa = this._data.readSignedByte();
                ab.effect.tapping = aa == 1;
                ab.effect.slapping = aa == 2;
                ab.effect.popping = aa == 3
            }
            if ((W & 4) != 0) {
                this.readTremoloBar(ab.effect)
            }
            if ((X & 64) != 0) {
                var q = this._data.readSignedByte();
                var Y = this._data.readSignedByte();
                if (Y > 0) {
                    ab.effect.stroke.direction = V.BeatStrokeDirection.Up;
                    ab.effect.stroke.value = c.Gp3Reader.toStrokeValue(Y)
                } else {
                    if (q > 0) {
                        ab.effect.stroke.direction = V.BeatStrokeDirection.Down;
                        ab.effect.stroke.value = c.Gp3Reader.toStrokeValue(q)
                    }
                }
            }
            ab.effect.hasRasgueado = (W & 1) != 0;
            if ((W & 2) != 0) {
                ab.effect.pickStroke = this._data.readSignedByte();
                ab.effect.hasPickStroke = true
            }
        },
        readTremoloBar: function(ac) {
            var ad = this._factory.newBendEffect();
            ad.type = this._data.readSignedByte();
            ad.value = this._data.readInt();
            var Z = this._data.readInt();
            var Y = 0;
            while (Y < Z) {
                var X = Y++;
                var ab = Math.round(this._data.readInt() * V.effects.BendEffect.MAX_POSITION / 60);
                var W = this._data.readInt();
                var q = Math.round(W / 50);
                var aa = this._data.readBool();
                ad.points.push(new V.effects.BendPoint(ab, q, aa))
            }
            if (Z > 0) {
                ac.tremoloBar = ad
            }
        },
        readTracks: function(X, Z, ab) {
            c.Gp3Reader.prototype.readTracks.call(this, X, Z, ab);
            var aa = 0;
            var ae = X.tracks;
            while (aa < ae.length) {
                var W = ae[aa];
                ++aa;
                if (W.number == X.lyrics.trackChoice) {
                    var ad = 0;
                    var ac = X.lyrics.lines;
                    while (ad < ac.length) {
                        var ag = ac[ad];
                        ++ad;
                        W.lyricLines.push(ag)
                    }
                } else {
                    var q = 0;
                    while (q < 5) {
                        var Y = q++;
                        var af = this._factory.newLyricLine();
                        af.startingMeasure = 1;
                        af.lyrics = "";
                        W.lyricLines.push(af)
                    }
                }
            }
        },
        readChord: function(aa, Z) {
            var W = this._factory.newChord(aa);
            if ((this._data.readSignedByte() & 1) == 0) {
                W.name = this.readIntSizeCheckByteString();
                W.firstFret = this._data.readInt();
                if (W.firstFret != 0) {
                    var Y = 0;
                    while (Y < 6) {
                        var X = Y++;
                        var ad = this._data.readInt();
                        if (X < W.strings.length) {
                            W.strings[X] = ad
                        }
                    }
                }
            } else {
                this.skip(16);
                W.name = this.readByteSizeString(21);
                this.skip(4);
                W.firstFret = this._data.readInt();
                var ab = 0;
                while (ab < 7) {
                    var q = ab++;
                    var ac = this._data.readInt();
                    if (q < W.strings.length) {
                        W.strings[q] = ac
                    }
                }
                this.skip(32)
            }
            if (W.noteCount() > 0) {
                Z.setChord(W)
            }
        },
        readColor: function() {
            var X = this._data.readByte();
            var W = this._data.readByte();
            var q = this._data.readByte();
            this.skip(1);
            return V.Color.fromRgb(X, W, q)
        },
        __class__: c.Gp4Reader
    });
    c.Gp5Reader = function() {
        c.Gp4Reader.call(this);
        this.initVersions(["FICHIER GUITAR PRO v5.00", "FICHIER GUITAR PRO v5.10"])
    };
    p["guitarpro.Gp5Reader"] = c.Gp5Reader;
    c.Gp5Reader.__name__ = ["guitarpro", "Gp5Reader"];
    c.Gp5Reader.__super__ = c.Gp4Reader;
    c.Gp5Reader.prototype = v(c.Gp4Reader.prototype, {
        readSongImpl: function(Y) {
            this.readInfo(Y);
            this.readLyrics(Y);
            this.readPageSetup(Y);
            Y.tempoName = this.readIntSizeCheckByteString();
            Y.tempo = this._data.readInt();
            if (this._versionIndex > 0) {
                Y.hideTempo = this._data.readBool()
            }
            Y.key = this._data.readByte();
            Y.octave = this._data.readInt();
            var q = this.readChannelPresets();
            this.skip(42);
            var X = this._data.readInt();
            var W = this._data.readInt();
            this.readMeasureHeaders(Y, X);
            this.readTracks(Y, W, q);
            this.readMeasures(Y);
            return
        },
        readMeasure: function(q, X) {
            var ab = 0;
            var Y = V.Beat.MAX_VOICES;
            while (ab < Y) {
                var ac = ab++;
                var W = q.start();
                var ad = this._data.readInt();
                var aa = 0;
                while (aa < ad) {
                    var Z = aa++;
                    W += this.readBeat(W, q, X, ac)
                }
            }
            q.validateBeats();
            q.makeRestIfEmpty();
            q.clef = this._defaultClef[X.number - 1];
            this.skip(1)
        },
        readBeat: function(Y, q, Z, aj) {
            var aa = this._data.readByte();
            var ah = this.getBeat(q, Y);
            var ak = ah.voices[aj];
            if ((aa & 64) != 0) {
                var al = this._data.readByte();
                ak.isEmpty = (al & 2) == 0
            }
            var ac = this.readDuration(aa);
            if ((aa & 2) != 0) {
                this.readChord(Z.stringCount(), ah)
            }
            if ((aa & 4) != 0) {
                this.readText(ah)
            }
            if ((aa & 8) != 0) {
                this.readBeatEffects(ah, null)
            }
            if ((aa & 16) != 0) {
                var af = this.readEffectTable(q);
                ah.effect.effectTable = af
            }
            var ab = this._data.readByte();
            var ag = 0;
            while (ag < 7) {
                var ad = ag++;
                var ae = 6 - ad;
                if ((ab & 1 << ae) != 0 && 6 - ae < Z.stringCount()) {
                    var X = Z.strings[6 - ae].clone(this._factory);
                    var ai = this.readNote(X, Z, this._factory.newNoteEffect());
                    ak.addNote(ai)
                }
                ac.copy(ak.duration)
            }
            this.skip(1);
            var W = this._data.readByte();
            if ((W & 8) != 0) {
                this.skip(1)
            }
            if (!ak.isEmpty) {
                return ac.time()
            } else {
                return 0
            }
        },
        readBeatEffects: function(ab, Z) {
            var X = this._data.readSignedByte();
            var W = this._data.readSignedByte();
            ab.effect.fadeIn = (X & 16) != 0;
            ab.effect.vibrato = (X & 2) != 0 || ab.effect.vibrato;
            if ((X & 32) != 0) {
                var aa = this._data.readSignedByte();
                ab.effect.tapping = aa == 1;
                ab.effect.slapping = aa == 2;
                ab.effect.popping = aa == 3
            }
            if ((W & 4) != 0) {
                this.readTremoloBar(ab.effect)
            }
            if ((X & 64) != 0) {
                var Y = this._data.readSignedByte();
                var q = this._data.readSignedByte();
                if (Y > 0) {
                    ab.effect.stroke.direction = V.BeatStrokeDirection.Up;
                    ab.effect.stroke.value = c.Gp3Reader.toStrokeValue(Y)
                } else {
                    if (q > 0) {
                        ab.effect.stroke.direction = V.BeatStrokeDirection.Down;
                        ab.effect.stroke.value = c.Gp3Reader.toStrokeValue(q)
                    }
                }
            }
            ab.effect.hasRasgueado = (W & 1) != 0;
            if ((W & 2) != 0) {
                ab.effect.pickStroke = this._data.readSignedByte();
                ab.effect.hasPickStroke = true
            }
        },
        readNote: function(ac, W, Z) {
            var q = this._data.readByte();
            var Y = this._factory.newNote();
            Y.string = ac.number;
            Y.effect.accentuatedNote = (q & 64) != 0;
            Y.effect.heavyAccentuatedNote = (q & 2) != 0;
            Y.effect.ghostNote = (q & 4) != 0;
            if ((q & 32) != 0) {
                var ab = this._data.readByte();
                Y.isTiedNote = ab == 2;
                Y.effect.deadNote = ab == 3
            }
            if ((q & 16) != 0) {
                Y.velocity = V.Velocities.MIN_VELOCITY + V.Velocities.VELOCITY_INCREMENT * this._data.readSignedByte() - V.Velocities.VELOCITY_INCREMENT
            }
            if ((q & 32) != 0) {
                var X = this._data.readSignedByte();
                var aa;
                if (Y.isTiedNote) {
                    aa = this.getTiedNoteValue(ac.number, W)
                } else {
                    aa = X
                }
                if (aa >= 0 && aa < 100) {
                    Y.value = aa
                } else {
                    Y.value = 0
                }
            }
            if ((q & 128) != 0) {
                Y.effect.set_leftHandFinger(this._data.readSignedByte());
                Y.effect.set_rightHandFinger(this._data.readSignedByte());
                Y.effect.set_isFingering(true)
            }
            if ((q & 1) != 0) {
                Y.durationPercent = this._data.readDouble()
            }
            this.skip(1);
            if ((q & 8) != 0) {
                this.readNoteEffects(Y.effect, Y, ac)
            }
            return Y
        },
        readNoteEffects: function(Z, Y, aa) {
            var W = this._data.readByte();
            var q = this._data.readByte();
            if ((W & 1) != 0) {
                this.readBend(Z)
            }
            if ((W & 16) != 0) {
                this.readGrace(Z)
            }
            if ((q & 4) != 0) {
                this.readTremoloPicking(Z)
            }
            if ((q & 8) != 0) {
                Z.slide = true;
                var X = this._data.readByte();
                switch (X) {
                    case 1:
                        Z.slideType = V.effects.SlideType.FastSlideTo;
                        break;
                    case 2:
                        Z.slideType = V.effects.SlideType.SlowSlideTo;
                        break;
                    case 4:
                        Z.slideType = V.effects.SlideType.OutDownWards;
                        break;
                    case 8:
                        Z.slideType = V.effects.SlideType.OutUpWards;
                        break;
                    case 16:
                        Z.slideType = V.effects.SlideType.IntoFromBelow;
                        break;
                    case 32:
                        Z.slideType = V.effects.SlideType.IntoFromAbove;
                        break
                }
            }
            if ((q & 16) != 0) {
                this.readHarmonic(Z, Y, aa)
            }
            if ((q & 32) != 0) {
                this.readTrill(Z)
            }
            Z.letRing = (W & 8) != 0;
            Z.hammer = (W & 2) != 0;
            Z.vibrato = (q & 64) != 0 || Z.vibrato;
            Z.palmMute = (q & 2) != 0;
            Z.staccato = (q & 1) != 0
        },
        readHarmonic: function(Z, ac, W) {
            var ad = this._data.readByte();
            var Y = this._factory.newHarmonicEffect();
            Y.data = 0;
            switch (ad) {
                case 1:
                    Y.type = V.effects.HarmonicType.Natural;
                    Y.data = 12;
                    Z.set_harmonic(Y);
                    break;
                case 2:
                    var q = W.value + ac.value;
                    var X = Math.floor(q / 12);
                    var ae = this._data.readByte() + this._data.readByte();
                    var aa = X + this._data.readByte();
                    var ab = aa * 12 + ae - q;
                    switch (ab) {
                        case 12:
                            Y.data = 12;
                            break;
                        case 19:
                            Y.data = 7;
                            break;
                        case 24:
                            Y.data = 5;
                            break;
                        case 28:
                            Y.data = 4;
                            break;
                        case 31:
                            Y.data = 3.2;
                            break;
                        case 34:
                            Y.data = 2.7;
                            break;
                        case 36:
                            Y.data = 2.4;
                            break;
                        default:
                            Y.data = 12
                    }
                    Y.type = V.effects.HarmonicType.Artificial;
                    Z.set_harmonic(Y);
                    break;
                case 3:
                    this.skip(1);
                    Y.type = V.effects.HarmonicType.Tapped;
                    Z.set_harmonic(Y);
                    break;
                case 4:
                    Y.type = V.effects.HarmonicType.Pinch;
                    Z.set_harmonic(Y);
                    break;
                case 5:
                    Y.type = V.effects.HarmonicType.Semi;
                    Z.set_harmonic(Y);
                    break
            }
        },
        readGrace: function(Z) {
            var W = this._data.readByte();
            var Y = this._data.readByte();
            var ab = this._data.readByte();
            var aa = this._data.readByte();
            var q = this._data.readByte();
            var X = this._factory.newGraceEffect();
            X.fret = W;
            X.velocity = V.Velocities.MIN_VELOCITY + V.Velocities.VELOCITY_INCREMENT * Y - V.Velocities.VELOCITY_INCREMENT;
            switch (aa) {
                case 1:
                    X.duration = V.Duration.THIRTY_SECOND;
                    break;
                case 2:
                    X.duration = V.Duration.SIXTEENTH;
                    break;
                case 3:
                    X.duration = V.Duration.EIGHTH;
                    break;
                default:
                    X.duration = V.Duration.SIXTY_FOURTH
            }
            X.isDead = (q & 1) != 0;
            X.isOnBeat = (q & 2) != 0;
            switch (ab) {
                case 0:
                    X.transition = V.effects.GraceEffectTransition.None;
                    break;
                case 1:
                    X.transition = V.effects.GraceEffectTransition.Slide;
                    break;
                case 2:
                    X.transition = V.effects.GraceEffectTransition.Bend;
                    break;
                case 3:
                    X.transition = V.effects.GraceEffectTransition.Hammer;
                    break
            }
            Z.set_grace(X)
        },
        readEffectTable: function(W) {
            var q = new V.EffectTable();
            q.instrument.value = this._data.readSignedByte();
            this.skip(16);
            q.volume.value = this._data.readSignedByte();
            q.balance.value = this._data.readSignedByte();
            q.chorus.value = this._data.readSignedByte();
            q.reverb.value = this._data.readSignedByte();
            q.phaser.value = this._data.readSignedByte();
            q.tremolo.value = this._data.readSignedByte();
            q.tempoName = this.readIntSizeCheckByteString();
            q.tempo.value = this._data.readInt();
            if (q.instrument.value < 0) {
                q.instrument = null
            }
            if (q.volume.value >= 0) {
                q.volume.duration = this._data.readSignedByte()
            } else {
                q.volume = null
            }
            if (q.balance.value >= 0) {
                q.balance.duration = this._data.readSignedByte()
            } else {
                q.balance = null
            }
            if (q.chorus.value >= 0) {
                q.chorus.duration = this._data.readSignedByte()
            } else {
                q.chorus = null
            }
            if (q.reverb.value >= 0) {
                q.reverb.duration = this._data.readSignedByte()
            } else {
                q.reverb = null
            }
            if (q.phaser.value >= 0) {
                q.phaser.duration = this._data.readSignedByte()
            } else {
                q.phaser = null
            }
            if (q.tremolo.value >= 0) {
                q.tremolo.duration = this._data.readSignedByte()
            } else {
                q.tremolo = null
            }
            if (q.tempo.value >= 0) {
                q.tempo.duration = this._data.readSignedByte();
                W.tempo().value = q.tempo.value;
                q.hideTempo = this._versionIndex > 0 && this._data.readBool()
            } else {
                q.tempo = null
            }
            var X = this._data.readByte();
            if (q.volume != null) {
                q.volume.allTracks = (X & 1) != 0
            }
            if (q.balance != null) {
                q.balance.allTracks = (X & 2) != 0
            }
            if (q.chorus != null) {
                q.chorus.allTracks = (X & 4) != 0
            }
            if (q.reverb != null) {
                q.reverb.allTracks = (X & 8) != 0
            }
            if (q.phaser != null) {
                q.phaser.allTracks = (X & 16) != 0
            }
            if (q.tremolo != null) {
                q.tremolo.allTracks = (X & 32) != 0
            }
            if (q.tempo != null) {
                q.tempo.allTracks = true
            }
            this.skip(1);
            if (this._versionIndex > 0) {
                this.readIntSizeCheckByteString();
                this.readIntSizeCheckByteString()
            }
            return q
        },
        readChord: function(aa, X) {
            var Z = this._factory.newChord(aa);
            this.skip(17);
            Z.name = this.readByteSizeString(21);
            this.skip(4);
            Z.firstFret = this._data.readInt();
            var Y = 0;
            while (Y < 7) {
                var q = Y++;
                var W = this._data.readInt();
                if (q < Z.strings.length) {
                    Z.strings[q] = W
                }
            }
            this.skip(32);
            X.setChord(Z)
        },
        readTracks: function(X, W, q) {
            c.Gp4Reader.prototype.readTracks.call(this, X, W, q);
            this.skip(this._versionIndex == 0 ? 2 : 1)
        },
        readTrack: function(Y, ab) {
            var X = this._data.readByte();
            if (Y == 1 || this._versionIndex == 0) {
                this.skip(1)
            }
            var W = this._factory.newTrack();
            W.isPercussionTrack = (X & 1) != 0;
            W.is12StringedGuitarTrack = (X & 2) != 0;
            W.isBanjoTrack = (X & 4) != 0;
            W.number = Y;
            W.name = this.readByteSizeString(40);
            var ac = this._data.readInt();
            var aa = 0;
            while (aa < 7) {
                var Z = aa++;
                var ad = this._data.readInt();
                if (ac > Z) {
                    var q = this._factory.newString();
                    q.number = Z + 1;
                    q.value = ad;
                    W.strings.push(q)
                }
            }
            W.port = this._data.readInt();
            this.readChannel(W.channel, ab);
            if (W.channel.channel == 9) {
                W.isPercussionTrack = true;
                W.channel.instrument(0)
            }
            W.fretCount = this._data.readInt();
            W.offset = this._data.readInt();
            W.color = this.readColor();
            this.skip(this._versionIndex > 0 ? 49 : 44);
            if (this._versionIndex > 0) {
                this.readIntSizeCheckByteString();
                this.readIntSizeCheckByteString()
            }
            return W
        },
        readMeasureHeader: function(W, Y, X) {
            if (W > 0) {
                this.skip(1)
            }
            var q = this._data.readByte();
            var aa = this._factory.newMeasureHeader();
            aa.number = W + 1;
            aa.start = 0;
            aa.tempo.value = X.tempo;
            if ((q & 1) != 0) {
                Y.numerator = this._data.readByte()
            }
            if ((q & 2) != 0) {
                Y.denominator.value = this._data.readByte()
            }
            aa.isRepeatOpen = (q & 4) != 0;
            aa.timeSignature.numerator = Y.numerator;
            aa.timeSignature.denominator.value = Y.denominator.value;
            if ((q & 8) != 0) {
                aa.repeatClose = this._data.readByte()
            }
            if ((q & 32) != 0) {
                this.readMarker(aa)
            }
            if ((q & 16) != 0) {
                aa.repeatAlternative = this._data.readByte()
            }
            if ((q & 64) != 0) {
                aa.keySignature = V.SongIo.toKeySignature(this._data.readSignedByte());
                aa.keySignatureType = this._data.readByte()
            } else {
                if (aa.number > 1) {
                    aa.keySignature = X.measureHeaders[W - 1].keySignature;
                    aa.keySignatureType = X.measureHeaders[W - 1].keySignatureType
                }
            }
            aa.hasDoubleBar = (q & 128) != 0;
            if ((q & 3) != 0) {
                this.skip(4)
            }
            if ((q & 16) == 0) {
                this.skip(1)
            }
            var Z = this._data.readByte();
            switch (Z) {
                case 1:
                    aa.tripletFeel = V.TripletFeel.Eighth;
                    break;
                case 2:
                    aa.tripletFeel = V.TripletFeel.Sixteenth;
                    break;
                default:
                    aa.tripletFeel = V.TripletFeel.None
            }
            return aa
        },
        readPageSetup: function(ab) {
            var W = new c.PageSetup();
            if (this._versionIndex > 0) {
                this.skip(19)
            }
            W.pageSize = new c.Point(this._data.readInt(), this._data.readInt());
            var X = this._data.readInt();
            var aa = this._data.readInt();
            var Z = this._data.readInt();
            var q = this._data.readInt();
            W.pageMargin = new c.Padding(X, Z, aa, q);
            W.scoreSizeProportion = this._data.readInt() / 100;
            W.headerAndFooter = this._data.readByte();
            var Y = this._data.readByte();
            if ((Y & 1) != 0) {
                W.headerAndFooter |= 256
            }
            W.title = this.readIntSizeCheckByteString();
            W.subtitle = this.readIntSizeCheckByteString();
            W.artist = this.readIntSizeCheckByteString();
            W.album = this.readIntSizeCheckByteString();
            W.words = this.readIntSizeCheckByteString();
            W.music = this.readIntSizeCheckByteString();
            W.wordsAndMusic = this.readIntSizeCheckByteString();
            W.copyright = this.readIntSizeCheckByteString() + "\n" + this.readIntSizeCheckByteString();
            W.pageNumber = this.readIntSizeCheckByteString()
        },
        readInfo: function(Y) {
            Y.title = this.readIntSizeCheckByteString();
            Y.subtitle = this.readIntSizeCheckByteString();
            Y.artist = this.readIntSizeCheckByteString();
            Y.album = this.readIntSizeCheckByteString();
            Y.words = this.readIntSizeCheckByteString();
            Y.music = this.readIntSizeCheckByteString();
            Y.copyright = this.readIntSizeCheckByteString();
            Y.tab = this.readIntSizeCheckByteString();
            Y.instructions = this.readIntSizeCheckByteString();
            var W = this._data.readInt();
            Y.notice = "";
            var X = 0;
            while (X < W) {
                var q = X++;
                Y.notice += this.readIntSizeCheckByteString() + "\n"
            }
        },
        __class__: c.Gp5Reader
    });
    c.HeaderFooterElements = function() {};
    p["guitarpro.HeaderFooterElements"] = c.HeaderFooterElements;
    c.HeaderFooterElements.__name__ = ["guitarpro", "HeaderFooterElements"];
    c.Padding = function(W, Y, X, q) {
        this.right = W;
        this.top = Y;
        this.left = X;
        this.bottom = q
    };
    p["guitarpro.Padding"] = c.Padding;
    c.Padding.__name__ = ["guitarpro", "Padding"];
    c.Padding.prototype = {
        getHorizontal: function() {
            return this.left + this.right
        },
        getVertical: function() {
            return this.top + this.bottom
        },
        __class__: c.Padding
    };
    c.PageSetup = function() {
        this.pageSize = new c.Point(210, 297);
        this.pageMargin = new c.Padding(10, 15, 10, 10);
        this.scoreSizeProportion = 1;
        this.headerAndFooter = 511;
        this.title = "%TITLE%";
        this.subtitle = "%SUBTITLE%";
        this.artist = "%ARTIST%";
        this.album = "%ALBUM%";
        this.words = "Words by %WORDS%";
        this.music = "Music by %MUSIC%";
        this.wordsAndMusic = "Words & Music by %WORDSMUSIC%";
        this.copyright = "Copyright %COPYRIGHT%\nAll Rights Reserved - International Copyright Secured";
        this.pageNumber = "Page %N%/%P%"
    };
    p["guitarpro.PageSetup"] = c.PageSetup;
    c.PageSetup.__name__ = ["guitarpro", "PageSetup"];
    c.PageSetup.prototype = {
        __class__: c.PageSetup
    };
    c.Point = function(q, W) {
        this.x = q;
        this.y = W
    };
    p["guitarpro.Point"] = c.Point;
    c.Point.__name__ = ["guitarpro", "Point"];
    c.Point.prototype = {
        __class__: c.Point
    };
    c.gpx = {};
    c.gpx.DocumentParser = function(W, q) {
        this._factory = W;
        this._document = q
    };
    p["guitarpro.gpx.DocumentParser"] = c.gpx.DocumentParser;
    c.gpx.DocumentParser.__name__ = ["guitarpro", "gpx", "DocumentParser"];
    c.gpx.DocumentParser.toStrokeValue = function(q) {
        return [V.Duration.SIXTY_FOURTH, V.Duration.THIRTY_SECOND, V.Duration.SIXTEENTH, V.Duration.EIGHTH, V.Duration.QUARTER][Math.round(Math.log(q / 30) / Math.log(2))]
    };
    c.gpx.DocumentParser.prototype = {
        parse: function() {
            var q = this._factory.newSong();
            q.tempo = 120;
            q.tempoName = "";
            q.hideTempo = false;
            this.parseScore(q);
            this.parseMasterVolumeAutomations(q);
            this.parseTracks(q);
            this.parseMasterBars(q);
            return q
        },
        parseScore: function(q) {
            q.title = this._document.score.title;
            q.artist = this._document.score.artist;
            q.album = this._document.score.album;
            q.words = this._document.score.wordsAndMusic;
            q.music = this._document.score.wordsAndMusic;
            q.copyright = this._document.score.copyright;
            q.tab = this._document.score.tabber;
            q.notice = this._document.score.notices
        },
        parseMasterVolumeAutomations: function(q) {
            q.masterVolumeAutomations = this._document.masterVolumeAutomations.slice()
        },
        parseTracks: function(X) {
            var Y = 0;
            var Z = 0;
            var ad = this._document.tracks;
            while (Z < ad.length) {
                var q = ad[Z];
                ++Z;
                var W = this._factory.newTrack();
                W.number = Y + 1;
                W.name = q.name;
                W.offset = q.offset;
                W.channel.instrument(q.gmProgram);
                W.channel.channel = q.gmChannel1;
                W.channel.effectChannel = q.gmChannel2;
                if (q.balance != -1) {
                    W.channel.balance = Math.floor(q.balance * 127)
                } else {
                    W.channel.balance = W.channel.balance
                }
                if (q.volume != -1) {
                    W.channel.volume = Math.floor(q.volume * 127)
                } else {
                    W.channel.volume = W.channel.volume
                }
                W.isPercussionTrack = q.isPercussionTrack;
                W.volumeAutomations = q.volumeAutomations.slice();
                if (q.tunningPitches != null) {
                    var af = 1;
                    while (af <= q.tunningPitches.length) {
                        W.strings.push(this.newString(af, q.tunningPitches[q.tunningPitches.length - af]));
                        af++
                    }
                } else {
                    if (W.isPercussionTrack) {
                        W.strings.push(this.newString(1, 0));
                        W.strings.push(this.newString(2, 0));
                        W.strings.push(this.newString(3, 0));
                        W.strings.push(this.newString(4, 0));
                        W.strings.push(this.newString(5, 0));
                        W.strings.push(this.newString(6, 0))
                    } else {
                        if (q.staffCount == 2) {
                            W.strings.push(this.newString(1, 64));
                            W.strings.push(this.newString(2, 59));
                            W.strings.push(this.newString(3, 55));
                            W.strings.push(this.newString(4, 50));
                            W.strings.push(this.newString(5, 45));
                            W.strings.push(this.newString(6, 40));
                            W.strings.push(this.newString(7, 35));
                            if (q.staff == 2) {
                                W.strings.push(this.newString(8, 31))
                            }
                        } else {
                            W.strings.push(this.newString(1, 64));
                            W.strings.push(this.newString(2, 59));
                            W.strings.push(this.newString(3, 55));
                            W.strings.push(this.newString(4, 50));
                            W.strings.push(this.newString(5, 45));
                            W.strings.push(this.newString(6, 40))
                        }
                    }
                }
                if (q.color != null && q.color.length == 3) {
                    W.color.r = q.color[0];
                    W.color.g = q.color[1];
                    W.color.b = q.color[2]
                }
                var ab = 0;
                var aa = q.lyricLines;
                while (ab < aa.length) {
                    var ac = aa[ab];
                    ++ab;
                    var ae = this._factory.newLyricLine();
                    ae.startingMeasure = ac.startingMeasure + 1;
                    ae.lyrics = ac.lyrics;
                    W.lyricLines.push(ae)
                }
                X.addTrack(W);
                Y++
            }
        },
        parseMasterBars: function(ad) {
            var Y = V.ModelConstants.QUARTER_TIME;
            var af = 0;
            var ah = 0;
            var aj = this._document.masterBars;
            while (ah < aj.length) {
                var ab = aj[ah];
                ++ah;
                var ae = this._document.getAutomation("Tempo", af);
                var Z = this._factory.newMeasureHeader();
                Z.start = Y;
                Z.number = af + 1;
                Z.isRepeatOpen = ab.repeatStart;
                Z.repeatClose = ab.repeatCount;
                Z.repeatAlternative = ab.repeatAlternative;
                if (ab.text != null && ab.text.length > 0) {
                    Z.setText(ab.text)
                }
                if (ab.time != null && ab.time.length == 2) {
                    Z.timeSignature.numerator = ab.time[0];
                    Z.timeSignature.denominator.value = ab.time[1]
                }
                if (ae != null && ae.reference > 0) {
                    var ag = ae.value;
                    if (ae.reference == 1) {
                        ag = Math.floor(ag / 2)
                    } else {
                        if (ae.reference == 3) {
                            ag = Math.floor(ag + ag / 2)
                        } else {
                            if (ae.reference == 4) {
                                ag = Math.floor(ag * 2)
                            } else {
                                if (ae.reference == 5) {
                                    ag = Math.floor(ag + ag * 2)
                                }
                            }
                        }
                    }
                    Z.tempo.value = Math.round(ag)
                }
                ad.addMeasureHeader(Z);
                var al = 0;
                while (al < ad.tracks.length) {
                    var aa = ad.tracks[al];
                    var W = this._document.tracks[al];
                    var X = this._factory.newMeasure(Z);
                    aa.addMeasure(X);
                    var ak = af;
                    var ac = this._document.getBar(ab.barIds[al]);
                    while (ac != null && ac.simileMark != null) {
                        var ai = ac.simileMark;
                        if (ai == "Simple") {
                            ak = ak - 1
                        } else {
                            if (ai == "FirstOfDouble" || ai == "SecondOfDouble") {
                                ak = ak - 2
                            }
                        }
                        if (ak >= 0) {
                            var q = this._document.masterBars[ak];
                            if (al < q.barIds.length) {
                                ac = this._document.getBar(q.barIds[al])
                            } else {
                                ac = null
                            }
                        } else {
                            ac = null
                        }
                    }
                    if (ac != null) {
                        this.parseBar(ac, X, W)
                    }
                    X.validateBeats();
                    X.makeRestIfEmpty();
                    al++
                }
                Y += Z.length();
                af++
            }
        },
        parseBar: function(an, X, ab) {
            var ag = this;
            var am = an.voiceIds;
            var ae = 0;
            while (ae < 1) {
                if (am.length > ae) {
                    if (am[ae] >= 0) {
                        var al = this._document.getVoice(am[ae]);
                        if (al != null) {
                            var Z = X.start();
                            var aq = -1;
                            var Y = [null];
                            var ao = null;
                            var ah = 0;
                            var W = al.beatIds.length;
                            while (ah < W) {
                                var aa = ah++;
                                var ap = this._document.getBeat(al.beatIds[aa]);
                                if (ap == null) {
                                    continue
                                }
                                if (ap.graceType != "") {
                                    Y[0] = ap;
                                    ao = al;
                                    continue
                                }
                                var ad = this._document.getRhythm(ap.rhythmId);
                                var q = [this.getBeat(X, Z)];
                                q[0].text = ap.freeText;
                                if (ap.chordId >= 0) {
                                    if (ab.chordTable.exists(ap.chordId)) {
                                        var ak = ab.chordTable.get(ap.chordId);
                                        if (ak != null) {
                                            q[0].setChord(ak.clone())
                                        }
                                    }
                                }
                                var at = q[0].voices[ae % q[0].voices.length];
                                at.isEmpty = false;
                                q[0].effect.fadeIn = ap.effectFadeIn;
                                q[0].effect.fadeOut = ap.effectFadeOut;
                                q[0].effect.popping = ap.effectPopping;
                                q[0].effect.slapping = ap.effectSlapping;
                                if (ap.effectStrokeDirection != "") {
                                    if (ap.effectStrokeDirection == "Up") {
                                        q[0].effect.stroke.direction = V.BeatStrokeDirection.Up
                                    } else {
                                        q[0].effect.stroke.direction = V.BeatStrokeDirection.Down
                                    }
                                    q[0].effect.stroke.value = c.gpx.DocumentParser.toStrokeValue(ap.effectStrokeValue)
                                }
                                if (ap.effectPickStrokeDirection != "") {
                                    q[0].effect.hasPickStroke = true;
                                    if (ap.effectPickStrokeDirection == "Up") {
                                        q[0].effect.pickStroke = 1
                                    } else {
                                        q[0].effect.pickStroke = 2
                                    }
                                }
                                this.parseRhythm(ad, at.duration);
                                if (ap.noteIds != null) {
                                    var ac = this.parseDynamic(ap);
                                    var aj = 0;
                                    while (aj < ap.noteIds.length) {
                                        var ar = this._document.getNote(ap.noteIds[aj]);
                                        if (ar != null) {
                                            this.parseNote(ar, at, ac)
                                        }
                                        aj++
                                    }
                                }
                                Z += at.duration.time();
                                if (ap.tremoloSpeed != -1) {
                                    var af = [new V.effects.TremoloPickingEffect(this._factory)];
                                    af[0].duration.value = ap.tremoloSpeed;
                                    q[0].forAllNotes((function(au) {
                                        return function(av) {
                                            av.effect.tremoloPicking = au[0]
                                        }
                                    })(af))
                                }
                                if (Y[0] != null && Y[0].noteIds.length == 1 && q[0].voices[0].notes.length > 0) {
                                    var ai = [this._document.getNote(Y[0].noteIds[0])];
                                    q[0].forAllNotes((function(au, av, aw) {
                                        return function(ax) {
                                            if (ax.string == av[0].measure.track.stringCount() - au[0].string) {
                                                var az = ag._factory.newDuration();
                                                ag.parseRhythm(ag._document.getRhythm(aw[0].rhythmId), az);
                                                var ay = ag._factory.newGraceEffect();
                                                ay.fret = au[0].fret;
                                                ay.duration = az.value;
                                                ay.isOnBeat = aw[0].graceType == "OnBeat";
                                                if (au[0].hammer) {
                                                    ay.transition = V.effects.GraceEffectTransition.Hammer
                                                } else {
                                                    if (au[0].isBended) {
                                                        ay.transition = V.effects.GraceEffectTransition.Bend
                                                    } else {
                                                        if (au[0].slide) {
                                                            ay.transition = V.effects.GraceEffectTransition.Slide
                                                        }
                                                    }
                                                }
                                                ay.isDead = au[0].fret == 255;
                                                ax.effect.set_grace(ay)
                                            }
                                        }
                                    })(ai, q, Y));
                                    Y[0] = null;
                                    ao = null
                                }
                            }
                        }
                    }
                }
                ae++
            }
        },
        parseNote: function(ae, ac, W) {
            var ad = -1;
            var Y = -1;
            if (ae.string >= 0 && ae.fret >= 0) {
                ad = ae.fret;
                Y = ac.beat.measure.track.stringCount() - ae.string
            } else {
                var q = -1;
                if (ae.midiNumber >= 0) {
                    q = ae.midiNumber
                } else {
                    if (ae.tone >= 0 && ae.octave >= 0) {
                        q = ae.tone + 12 * ae.octave
                    } else {
                        if (ae.element >= 0) {
                            var X = 0;
                            while (X < c.gpx.score.GpxDrumkit.get_Drumkits().length) {
                                if (c.gpx.score.GpxDrumkit.get_Drumkits()[X].element == ae.element && c.gpx.score.GpxDrumkit.get_Drumkits()[X].variation == ae.variation) {
                                    q = c.gpx.score.GpxDrumkit.get_Drumkits()[X].midiValue
                                }
                                X++
                            }
                        }
                    }
                }
                if (q >= 0) {
                    var af = this.getStringFor(ac.beat, q);
                    if (af != null) {
                        ad = q - af.value;
                        Y = af.number
                    }
                }
            }
            if (ad >= 0 && Y > 0) {
                var aa = this._factory.newNote();
                aa.value = ad;
                aa.string = Y;
                aa.isTiedNote = ae.tieDestination;
                aa.velocity = W;
                aa.effect.vibrato = ae.vibrato;
                aa.effect.staccato = ae.staccato;
                aa.effect.hammer = ae.hammer;
                aa.effect.letRing = ae.letRing;
                aa.effect.slide = ae.slide;
                aa.effect.slideType = ae.slideType;
                aa.effect.deadNote = ae.mutedEnabled;
                aa.effect.palmMute = ae.palmMutedEnabled;
                aa.effect.ghostNote = ae.isGhost;
                aa.effect.accentuatedNote = ae.effectAccentuatedNote;
                aa.effect.heavyAccentuatedNote = ae.effectHeavyAccentuatedNote;
                if (ae.trillValue != -1) {
                    var ab = new V.effects.TrillEffect(this._factory);
                    ab.fret = ae.trillValue - ac.beat.measure.track.strings[aa.string - 1].value;
                    ab.duration.value = ae.trillSpeed;
                    aa.effect.trill = ab
                }
                if (ae.harmonicType != V.effects.HarmonicType.None) {
                    var Z = this._factory.newHarmonicEffect();
                    Z.type = ae.harmonicType;
                    Z.data = ae.harmonicValue;
                    aa.effect.set_harmonic(Z)
                }
                if (ae.isBended) {
                    aa.effect.set_bend(new V.effects.BendEffect());
                    aa.effect.bend.points = ae.bendPoints;
                    aa.effect.bend.finalize()
                }
                ac.addNote(aa);
                ac.beat.effect.tapping = ae.effectTapping
            }
        },
        parseRhythm: function(q, W) {
            W.isDotted = q.augmentationDotCount == 1;
            W.isDoubleDotted = q.augmentationDotCount == 2;
            W.tuplet.times = q.primaryTupletDen;
            W.tuplet.enters = q.primaryTupletNum;
            if (q.noteValue == "Whole") {
                W.value = V.Duration.WHOLE
            } else {
                if (q.noteValue == "Half") {
                    W.value = V.Duration.HALF
                } else {
                    if (q.noteValue == "Quarter") {
                        W.value = V.Duration.QUARTER
                    } else {
                        if (q.noteValue == "Eighth") {
                            W.value = V.Duration.EIGHTH
                        } else {
                            if (q.noteValue == "16th") {
                                W.value = V.Duration.SIXTEENTH
                            } else {
                                if (q.noteValue == "32nd") {
                                    W.value = V.Duration.THIRTY_SECOND
                                } else {
                                    if (q.noteValue == "64th") {
                                        W.value = V.Duration.SIXTY_FOURTH
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        parseDynamic: function(W) {
            var q = V.Velocities.DEFAULT;
            if (W.dyn != null) {
                if (W.dyn == "PPP") {
                    q = V.Velocities.PIANO_PIANISSIMO
                } else {
                    if (W.dyn == "PP") {
                        q = V.Velocities.PIANISSIMO
                    } else {
                        if (W.dyn == "P") {
                            q = V.Velocities.PIANO
                        } else {
                            if (W.dyn == "MP") {
                                q = V.Velocities.MEZZO_PIANO
                            } else {
                                if (W.dyn == "MF") {
                                    q = V.Velocities.MEZZO_FORTE
                                } else {
                                    if (W.dyn == "F") {
                                        q = V.Velocities.FORTE
                                    } else {
                                        if (W.dyn == "FF") {
                                            q = V.Velocities.FORTISSIMO
                                        } else {
                                            if (W.dyn == "FFF") {
                                                q = V.Velocities.FORTE_FORTISSIMO
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return q
        },
        getBeat: function(Y, aa) {
            var Z = Y.beatCount();
            var X = 0;
            while (X < Z) {
                var W = Y.beats[X];
                if (W.start == aa) {
                    return W
                }
                X++
            }
            var q = this._factory.newBeat();
            q.start = aa;
            Y.addBeat(q);
            return q
        },
        getStringFor: function(aa, af) {
            var ah = aa.measure.track.strings;
            var W = 0;
            while (W < ah.length) {
                var Y = ah[W];
                if (af >= Y.value) {
                    var q = true;
                    var ag = 0;
                    var X = 0;
                    var ad = aa.voices;
                    while (X < ad.length) {
                        var ae = ad[X];
                        ++X;
                        var ab = 0;
                        var Z = ae.notes;
                        while (ab < Z.length) {
                            var ac = Z[ab];
                            ++ab;
                            if (ac.string == Y.number) {
                                q = false;
                                break
                            }
                        }
                    }
                    if (q) {
                        return Y
                    }
                }
                W++
            }
            return null
        },
        newString: function(q, X) {
            var W = this._factory.newString();
            W.number = q;
            W.value = X;
            return W
        },
        __class__: c.gpx.DocumentParser
    };
    c.gpx.DocumentReader = function(W) {
        var q = W.readString();
        this._xmlDocument = e.parse(q);
        this._dom = new m.xml.Fast(this._xmlDocument.firstElement());
        this._gpxDocument = new c.gpx.score.GpxDocument()
    };
    p["guitarpro.gpx.DocumentReader"] = c.gpx.DocumentReader;
    c.gpx.DocumentReader.__name__ = ["guitarpro", "gpx", "DocumentReader"];
    c.gpx.DocumentReader.prototype = {
        read: function() {
            if (this._xmlDocument != null) {
                this.readScore();
                this.readAutomations();
                this.readTracks();
                this.readMasterBars();
                this.readBars();
                this.readVoices();
                this.readBeats();
                this.readNotes();
                this.readRhythms()
            }
            return this._gpxDocument
        },
        readScore: function() {
            if (this._dom.hasNode.resolve("Score")) {
                var q = this._dom.node.resolve("Score");
                this._gpxDocument.score.title = q.node.resolve("Title").get_innerData();
                this._gpxDocument.score.subTitle = q.node.resolve("SubTitle").get_innerData();
                this._gpxDocument.score.artist = q.node.resolve("Artist").get_innerData();
                this._gpxDocument.score.album = q.node.resolve("Album").get_innerData();
                this._gpxDocument.score.words = q.node.resolve("Words").get_innerData();
                this._gpxDocument.score.music = q.node.resolve("Music").get_innerData();
                this._gpxDocument.score.wordsAndMusic = q.node.resolve("WordsAndMusic").get_innerData();
                this._gpxDocument.score.copyright = q.node.resolve("Copyright").get_innerData();
                this._gpxDocument.score.tabber = q.node.resolve("Tabber").get_innerData();
                this._gpxDocument.score.instructions = q.node.resolve("Instructions").get_innerData();
                this._gpxDocument.score.notices = q.node.resolve("Notices").get_innerData();
                this._gpxDocument.score.pageSetup.width = A.parseInt(q.node.resolve("PageSetup").node.resolve("Width").get_innerData());
                this._gpxDocument.score.pageSetup.height = A.parseInt(q.node.resolve("PageSetup").node.resolve("Height").get_innerData());
                this._gpxDocument.score.pageSetup.orientation = q.node.resolve("PageSetup").node.resolve("Orientation").get_innerData();
                this._gpxDocument.score.pageSetup.margin = new c.Padding(A.parseInt(q.node.resolve("PageSetup").node.resolve("RightMargin").get_innerData()), A.parseInt(q.node.resolve("PageSetup").node.resolve("TopMargin").get_innerData()), A.parseInt(q.node.resolve("PageSetup").node.resolve("LeftMargin").get_innerData()), A.parseInt(q.node.resolve("PageSetup").node.resolve("BottomMargin").get_innerData()));
                this._gpxDocument.score.pageSetup.scale = A.parseFloat(q.node.resolve("PageSetup").node.resolve("Scale").get_innerData())
            }
        },
        readAutomations: function() {
            this.readMasterTrackAutomations();
            this.readMasterVolumeAutomations()
        },
        readMasterTrackAutomations: function() {
            if (this._dom.hasNode.resolve("MasterTrack") && this._dom.node.resolve("MasterTrack").hasNode.resolve("Automations")) {
                var W = this._dom.node.resolve("MasterTrack").node.resolve("Automations").nodes.resolve("Automation").iterator();
                while (W.hasNext()) {
                    var X = W.next();
                    var q = this.prepareAutomation(X);
                    this._gpxDocument.tempoAutomations.push(q)
                }
            }
        },
        readMasterVolumeAutomations: function() {
            if (this._dom.hasNode.resolve("MasterTrack") && this._dom.node.resolve("MasterTrack").hasNode.resolve("RSE") && this._dom.node.resolve("MasterTrack").node.resolve("RSE").hasNode.resolve("Master")) {
                var Y = this._dom.node.resolve("MasterTrack").node.resolve("RSE").node.resolve("Master").nodes.resolve("Effect").iterator();
                while (Y.hasNext()) {
                    var W = Y.next();
                    if (W.has.resolve("id") && W.att.resolve("id") == "I01_VolumeAndPan") {
                        if (W.hasNode.resolve("Automations")) {
                            var X = W.node.resolve("Automations").nodes.resolve("Automation").iterator();
                            while (X.hasNext()) {
                                var Z = X.next();
                                if (Z.node.resolve("Type").get_innerData() == "DSPParam_00") {
                                    var q = this.prepareAutomation(Z);
                                    q.type = "Volume";
                                    this._gpxDocument.masterVolumeAutomations.push(q)
                                }
                            }
                        }
                    }
                }
            }
        },
        prepareAutomation: function(X) {
            var q = new V.Automation();
            q.type = X.node.resolve("Type").get_innerData();
            q.barId = A.parseInt(X.node.resolve("Bar").get_innerData());
            var W = A.string(X.node.resolve("Value").get_innerData()).split(" ");
            q.value = A.parseFloat(W[0]);
            if (W.length > 1) {
                q.reference = A.parseInt(W[1])
            }
            q.linear = this.toBool(X.node.resolve("Linear").get_innerData());
            q.position = A.parseFloat(X.node.resolve("Position").get_innerData());
            q.visible = this.toBool(X.node.resolve("Visible").get_innerData());
            return q
        },
        getValue: function(Y) {
            if (Y.nodeType == e.Element || Y.nodeType == e.Document) {
                var q = new g();
                var W = Y.iterator();
                while (W.hasNext()) {
                    var X = W.next();
                    q.add(this.getValue(X))
                }
                return O.trim(q.b)
            } else {
                return Y.get_nodeValue()
            }
        },
        findChildElement: function(W, q) {
            var X = W.iterator();
            while (X.hasNext()) {
                var Y = X.next();
                if (Y.nodeType == e.Element) {
                    if (Y.get_nodeName() == q) {
                        return Y
                    }
                }
            }
            return null
        },
        toBool: function(q) {
            return q.toLowerCase() == "true"
        },
        toIntArray: function(q) {
            return this.toIntArray2(q, " ")
        },
        toIntArray2: function(aa, X) {
            var q = new Array();
            var Z = 0;
            var Y = aa.split(X);
            while (Z < Y.length) {
                var W = Y[Z];
                ++Z;
                q.push(A.parseInt(W))
            }
            return q
        },
        readTracks: function() {
            if (this._dom.hasNode.resolve("Tracks")) {
                var am = this._dom.node.resolve("Tracks").nodes.resolve("Track").iterator();
                while (am.hasNext()) {
                    var an = am.next();
                    var W = new c.gpx.score.GpxTrack();
                    var q = new c.gpx.score.GpxTrack();
                    W.id = A.parseInt(an.att.resolve("id"));
                    q.id = A.parseInt(an.att.resolve("id"));
                    W.name = an.node.resolve("Name").get_innerData();
                    q.name = an.node.resolve("Name").get_innerData();
                    W.color = this.toIntArray(an.node.resolve("Color").get_innerData());
                    q.color = this.toIntArray(an.node.resolve("Color").get_innerData());
                    if (an.hasNode.resolve("GeneralMidi")) {
                        var ag = an.node.resolve("GeneralMidi");
                        W.gmProgram = A.parseInt(ag.node.resolve("Program").get_innerData());
                        q.gmProgram = A.parseInt(ag.node.resolve("Program").get_innerData());
                        W.gmChannel1 = A.parseInt(ag.node.resolve("PrimaryChannel").get_innerData());
                        q.gmChannel1 = A.parseInt(ag.node.resolve("PrimaryChannel").get_innerData());
                        W.gmChannel2 = A.parseInt(ag.node.resolve("SecondaryChannel").get_innerData());
                        q.gmChannel2 = A.parseInt(ag.node.resolve("SecondaryChannel").get_innerData());
                        W.isPercussionTrack = ag.att.resolve("table") == "Percussion";
                        q.isPercussionTrack = ag.att.resolve("table") == "Percussion";
                        if (W.isPercussionTrack) {
                            W.gmProgram = 0;
                            q.gmProgram = 0
                        }
                    }
                    if (an.hasNode.resolve("Lyrics")) {
                        var al = an.node.resolve("Lyrics").nodes.resolve("Line").iterator();
                        while (al.hasNext()) {
                            var ab = al.next();
                            var ad = {
                                lyrics: ab.node.resolve("Text").get_innerData(),
                                startingMeasure: A.parseInt(ab.node.resolve("Offset").get_innerData())
                            };
                            W.lyricLines.push(ad);
                            q.lyricLines.push(ad)
                        }
                    }
                    if (an.hasNode.resolve("RSE") && an.node.resolve("RSE").hasNode.resolve("ChannelStrip")) {
                        if (an.node.resolve("RSE").node.resolve("ChannelStrip").hasNode.resolve("Parameters")) {
                            var Z = an.node.resolve("RSE").node.resolve("ChannelStrip").node.resolve("Parameters").get_innerData().split(" ");
                            W.balance = A.parseFloat(Z[11]);
                            q.balance = A.parseFloat(Z[11]);
                            W.volume = A.parseFloat(Z[12]);
                            q.volume = A.parseFloat(Z[12])
                        }
                        if (an.node.resolve("RSE").node.resolve("ChannelStrip").hasNode.resolve("Automations")) {
                            var ak = an.node.resolve("RSE").node.resolve("ChannelStrip").node.resolve("Automations").nodes.resolve("Automation").iterator();
                            while (ak.hasNext()) {
                                var ac = ak.next();
                                if (ac.node.resolve("Type").get_innerData() == "DSPParam_12") {
                                    var af = this.prepareAutomation(ac);
                                    af.type = "Volume";
                                    W.volumeAutomations.push(af);
                                    q.volumeAutomations.push(af)
                                }
                            }
                        }
                    }
                    if (an.hasNode.resolve("Instrument")) {
                        var Y = an.node.resolve("Instrument").att.resolve("ref");
                        if (O.endsWith(Y, "-gs") || O.endsWith(Y, "GrandStaff")) {
                            W.staffCount = 2;
                            q.staffCount = 2;
                            q.staff = 2
                        }
                    }
                    if (an.hasNode.resolve("Properties")) {
                        var ai = an.node.resolve("Properties").nodes.resolve("Property").iterator();
                        while (ai.hasNext()) {
                            var X = ai.next();
                            if (X.att.resolve("name") == "Tuning") {
                                W.tunningPitches = this.toIntArray(X.node.resolve("Pitches").get_innerData());
                                q.tunningPitches = this.toIntArray(X.node.resolve("Pitches").get_innerData())
                            } else {
                                if (X.att.resolve("name") == "CapoFret") {
                                    W.offset = A.parseInt(X.node.resolve("Fret").get_innerData());
                                    q.offset = A.parseInt(X.node.resolve("Fret").get_innerData())
                                } else {
                                    if (X.att.resolve("name") == "DiagramCollection" && X.hasNode.resolve("Items")) {
                                        var ae = X.node.resolve("Items").nodes.resolve("Item");
                                        var ah = ae.iterator();
                                        while (ah.hasNext()) {
                                            var aj = ah.next();
                                            var aa = this.readChord(aj);
                                            if (aa != null) {
                                                W.chordTable.set(aa.id, aa);
                                                q.chordTable.set(aa.id, aa)
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (W.staffCount == 2) {
                        W.name += " (Staff 1)";
                        q.name += " (Staff 2)"
                    }
                    this._gpxDocument.tracks.push(W);
                    if (W.staffCount == 2) {
                        this._gpxDocument.tracks.push(q)
                    }
                }
            }
        },
        readChord: function(ab) {
            if (ab.hasNode.resolve("Diagram")) {
                var q = ab.att.resolve("name");
                var Y = ab.node.resolve("Diagram");
                var W = A.parseInt(Y.att.resolve("stringCount"));
                var X = new V.Chord(W, q);
                X.id = A.parseInt(ab.att.resolve("id"));
                try {
                    X.firstFret = A.parseInt(Y.att.resolve("baseFret"))
                } catch (aa) {}
                var ae = Y.nodes.resolve("Fret");
                var ad = ae.iterator();
                while (ad.hasNext()) {
                    var ac = ad.next();
                    var Z = A.parseInt(ac.att.resolve("string"));
                    if (Z >= W) {
                        return null
                    }
                    X.strings[Z] = A.parseInt(ac.att.resolve("fret"))
                }
                X.strings.reverse();
                return X
            }
            return null
        },
        readMasterBars: function() {
            if (this._dom.hasNode.resolve("MasterBars")) {
                var W = this._dom.node.resolve("MasterBars").nodes.resolve("MasterBar");
                var af = W.iterator();
                while (af.hasNext()) {
                    var q = af.next();
                    var ae = new c.gpx.score.GpxMasterBar();
                    ae.barIds = this.toIntArray(q.node.resolve("Bars").get_innerData());
                    ae.time = this.toIntArray2(q.node.resolve("Time").get_innerData(), "/");
                    if (q.hasNode.resolve("Repeat")) {
                        var aa = q.node.resolve("Repeat");
                        ae.repeatStart = this.toBool(aa.att.resolve("start"));
                        if (this.toBool(aa.att.resolve("end"))) {
                            ae.repeatCount = A.parseInt(aa.att.resolve("count"))
                        }
                    }
                    if (q.hasNode.resolve("Section") && q.node.resolve("Section").hasNode.resolve("Text")) {
                        var ad = q.node.resolve("Section").node.resolve("Text");
                        ae.text = this.parseCdata(ad)
                    }
                    if (q.hasNode.resolve("AlternateEndings")) {
                        var ab = q.node.resolve("AlternateEndings").get_innerData().split(" ");
                        var Y = 0;
                        var ac = 0;
                        var Z = ab.length;
                        while (ac < Z) {
                            var X = ac++;
                            Y |= 1 << -1 + A.parseInt(ab[X])
                        }
                        ae.repeatAlternative = Y
                    }
                    this._gpxDocument.masterBars.push(ae)
                }
            }
        },
        parseCdata: function(W) {
            var q = new K("<!\\[CDATA\\[(.*?)\\]\\]>", "");
            if (q.match(W.get_innerHTML())) {
                return q.matched(1)
            }
            return ""
        },
        readBars: function() {
            if (this._dom.hasNode.resolve("Bars")) {
                var W = this._dom.node.resolve("Bars").nodes.resolve("Bar").iterator();
                while (W.hasNext()) {
                    var X = W.next();
                    var q = new c.gpx.score.GpxBar();
                    q.id = A.parseInt(X.att.resolve("id"));
                    q.voiceIds = this.toIntArray(X.node.resolve("Voices").get_innerData());
                    q.clef = X.node.resolve("Clef").get_innerData();
                    if (X.hasNode.resolve("SimileMark")) {
                        q.simileMark = X.node.resolve("SimileMark").get_innerData()
                    } else {
                        q.simileMark = null
                    }
                    this._gpxDocument.bars.push(q)
                }
            }
        },
        readVoices: function() {
            if (this._dom.hasNode.resolve("Voices")) {
                var X = this._dom.node.resolve("Voices").nodes.resolve("Voice").iterator();
                while (X.hasNext()) {
                    var q = X.next();
                    var W = new c.gpx.score.GpxVoice();
                    W.id = A.parseInt(q.att.resolve("id"));
                    W.beatIds = this.toIntArray(q.node.resolve("Beats").get_innerData());
                    this._gpxDocument.voices.push(W)
                }
            }
        },
        readBeats: function() {
            if (this._dom.hasNode.resolve("Beats")) {
                var ai = this._dom.node.resolve("Beats").nodes.resolve("Beat").iterator();
                while (ai.hasNext()) {
                    var Y = ai.next();
                    var ac = new c.gpx.score.GpxBeat();
                    ac.id = A.parseInt(Y.att.resolve("id"));
                    ac.dyn = Y.node.resolve("Dynamic").get_innerData();
                    ac.rhythmId = A.parseInt(Y.node.resolve("Rhythm").att.resolve("ref"));
                    if (Y.hasNode.resolve("GraceNotes")) {
                        ac.graceType = Y.node.resolve("GraceNotes").get_innerData()
                    }
                    if (Y.hasNode.resolve("FreeText")) {
                        ac.freeText = this.parseCdata(Y.node.resolve("FreeText"))
                    }
                    if (Y.hasNode.resolve("Notes")) {
                        ac.noteIds = this.toIntArray(Y.node.resolve("Notes").get_innerData())
                    } else {
                        ac.noteIds = []
                    }
                    if (Y.hasNode.resolve("Chord")) {
                        var X = Y.node.resolve("Chord");
                        ac.chordId = A.parseInt(this.parseCdata(X))
                    }
                    if (Y.hasNode.resolve("Tremolo")) {
                        var ah = Y.node.resolve("Tremolo");
                        var Z = this.getValue(ah.x);
                        switch (Z) {
                            case "1/2":
                                ac.tremoloSpeed = V.Duration.EIGHTH;
                                break;
                            case "1/4":
                                ac.tremoloSpeed = V.Duration.SIXTEENTH;
                                break;
                            case "1/8":
                                ac.tremoloSpeed = V.Duration.THIRTY_SECOND;
                                break
                        }
                    }
                    if (Y.hasNode.resolve("Fadding")) {
                        if (Y.node.resolve("Fadding").get_innerData() == "FadeIn") {
                            ac.effectFadeIn = true
                        } else {
                            ac.effectFadeIn = false
                        }
                        if (Y.node.resolve("Fadding").get_innerData() == "FadeOut") {
                            ac.effectFadeOut = true
                        } else {
                            ac.effectFadeOut = false
                        }
                    }
                    if (Y.hasNode.resolve("Properties")) {
                        var ab = Y.node.resolve("Properties").nodes.resolve("Property");
                        var ag = ab.iterator();
                        while (ag.hasNext()) {
                            var ad = ag.next();
                            var q = ad.att.resolve("name");
                            if (q == "Popped") {
                                ac.effectPopping = ad.hasNode.resolve("Enable")
                            } else {
                                if (q == "Slapped") {
                                    ac.effectSlapping = ad.hasNode.resolve("Enable")
                                } else {
                                    if (q == "Brush" || q == "Arpeggio") {
                                        ac.effectStrokeDirection = ad.node.resolve("Direction").get_innerData();
                                        if (Y.hasNode.resolve("XProperties")) {
                                            var af = Y.node.resolve("XProperties").nodes.resolve("XProperty");
                                            var ae = af.iterator();
                                            while (ae.hasNext()) {
                                                var aa = ae.next();
                                                var W = aa.att.resolve("id");
                                                if (W == "687935489") {
                                                    ac.effectStrokeValue = A.parseInt(aa.node.resolve("Int").get_innerData())
                                                }
                                            }
                                        }
                                    } else {
                                        if (q == "PickStroke") {
                                            ac.effectPickStrokeDirection = ad.node.resolve("Direction").get_innerData()
                                        }
                                    }
                                }
                            }
                        }
                    }
                    this._gpxDocument.beats.push(ac)
                }
            }
        },
        readNotes: function() {
            if (this._dom.hasNode.resolve("Notes")) {
                var ao = this._dom.node.resolve("Notes").nodes.resolve("Note").iterator();
                while (ao.hasNext()) {
                    var ak = ao.next();
                    var X = new c.gpx.score.GpxNote();
                    X.id = A.parseInt(ak.att.resolve("id"));
                    if (ak.hasNode.resolve("Tie")) {
                        X.tieDestination = this.toBool(ak.node.resolve("Tie").att.resolve("destination"))
                    } else {
                        X.tieDestination = false
                    }
                    X.vibrato = ak.hasNode.resolve("Vibrato");
                    if (ak.hasNode.resolve("Accent")) {
                        var ag = A.parseInt(ak.node.resolve("Accent").get_innerData());
                        X.staccato = (ag & 1) != 0;
                        X.effectAccentuatedNote = ag == 8;
                        X.effectHeavyAccentuatedNote = ag == 4
                    }
                    if (ak.hasNode.resolve("Trill")) {
                        X.trillValue = A.parseInt(ak.node.resolve("Trill").get_innerData());
                        X.trillSpeed = V.Duration.SIXTEENTH
                    }
                    if (ak.hasNode.resolve("LetRing")) {
                        X.letRing = true
                    }
                    if (ak.hasNode.resolve("AntiAccent")) {
                        if (ak.node.resolve("AntiAccent").get_innerData().toLowerCase() == "normal") {
                            X.isGhost = true
                        }
                    }
                    var aj = false;
                    var ah = null;
                    var q = null;
                    var af = null;
                    var ad = null;
                    var ap = null;
                    var am = ak.node.resolve("Properties").nodes.resolve("Property");
                    var an = am.iterator();
                    while (an.hasNext()) {
                        var aa = an.next();
                        var aq = aa.att.resolve("name");
                        if (aq == "String") {
                            X.string = A.parseInt(aa.node.resolve("String").get_innerData())
                        } else {
                            if (aq == "Fret") {
                                X.fret = A.parseInt(aa.node.resolve("Fret").get_innerData())
                            } else {
                                if (aq == "Midi") {
                                    X.midiNumber = A.parseInt(aa.node.resolve("Number").get_innerData())
                                } else {
                                    if (aq == "Tone") {
                                        X.tone = A.parseInt(aa.node.resolve("Step").get_innerData())
                                    } else {
                                        if (aq == "Octave") {
                                            X.octave = A.parseInt(aa.node.resolve("Number").get_innerData())
                                        } else {
                                            if (aq == "Bended") {
                                                aj = true
                                            } else {
                                                if (aq == "BendOriginValue") {
                                                    if (ah == null) {
                                                        ah = new V.effects.BendPoint()
                                                    }
                                                    ah.value = A["int"](A.parseFloat(aa.node.resolve("Float").get_innerData()) * 0.04)
                                                } else {
                                                    if (aq == "BendOriginOffset") {
                                                        if (ah == null) {
                                                            ah = new V.effects.BendPoint()
                                                        }
                                                        ah.position = A["int"](A.parseFloat(aa.node.resolve("Float").get_innerData()) * 0.6)
                                                    } else {
                                                        if (aq == "BendMiddleValue") {
                                                            q = A["int"](A.parseFloat(aa.node.resolve("Float").get_innerData()) * 0.04)
                                                        } else {
                                                            if (aq == "BendMiddleOffset1") {
                                                                af = A["int"](A.parseFloat(aa.node.resolve("Float").get_innerData()) * 0.6)
                                                            } else {
                                                                if (aq == "BendMiddleOffset2") {
                                                                    ad = A["int"](A.parseFloat(aa.node.resolve("Float").get_innerData()) * 0.6)
                                                                } else {
                                                                    if (aq == "BendDestinationValue") {
                                                                        if (ap == null) {
                                                                            ap = new V.effects.BendPoint(V.effects.BendEffect.MAX_POSITION)
                                                                        }
                                                                        ap.value = A["int"](A.parseFloat(aa.node.resolve("Float").get_innerData()) * 0.04)
                                                                    } else {
                                                                        if (aq == "BendDestinationValue") {
                                                                            if (ap == null) {
                                                                                ap = new V.effects.BendPoint()
                                                                            }
                                                                            ap.position = A["int"](A.parseFloat(aa.node.resolve("Float").get_innerData()) * 0.6)
                                                                        } else {
                                                                            if (aq == "HarmonicType") {
                                                                                var ae = this.findChildElement(aa.x, "HType");
                                                                                if (ae != null) {
                                                                                    var Y = this.getValue(ae);
                                                                                    switch (Y) {
                                                                                        case "NoHarmonic":
                                                                                            X.harmonicType = V.effects.HarmonicType.None;
                                                                                            break;
                                                                                        case "Natural":
                                                                                            X.harmonicType = V.effects.HarmonicType.Natural;
                                                                                            break;
                                                                                        case "Artificial":
                                                                                            X.harmonicType = V.effects.HarmonicType.Artificial;
                                                                                            break;
                                                                                        case "Pinch":
                                                                                            X.harmonicType = V.effects.HarmonicType.Pinch;
                                                                                            break;
                                                                                        case "Tap":
                                                                                            X.harmonicType = V.effects.HarmonicType.Tapped;
                                                                                            break;
                                                                                        case "Semi":
                                                                                            X.harmonicType = V.effects.HarmonicType.Semi;
                                                                                            break;
                                                                                        case "Feedback":
                                                                                            X.harmonicType = V.effects.HarmonicType.Feedback;
                                                                                            break
                                                                                    }
                                                                                }
                                                                            } else {
                                                                                if (aq == "HarmonicFret") {
                                                                                    var ac = this.findChildElement(aa.x, "HFret");
                                                                                    if (ac != null) {
                                                                                        X.harmonicValue = A.parseFloat(this.getValue(ac))
                                                                                    }
                                                                                } else {
                                                                                    if (aq == "Element") {
                                                                                        X.element = A.parseInt(aa.node.resolve("Element").get_innerData())
                                                                                    } else {
                                                                                        if (aq == "Variation") {
                                                                                            X.variation = A.parseInt(aa.node.resolve("Variation").get_innerData())
                                                                                        } else {
                                                                                            if (aq == "Muted") {
                                                                                                X.mutedEnabled = aa.hasNode.resolve("Enable")
                                                                                            } else {
                                                                                                if (aq == "PalmMuted") {
                                                                                                    X.palmMutedEnabled = aa.hasNode.resolve("Enable")
                                                                                                } else {
                                                                                                    if (aq == "Slide") {
                                                                                                        X.slide = true;
                                                                                                        var ab = this.findChildElement(aa.x, "Flags");
                                                                                                        if (ab != null) {
                                                                                                            var Z = A.parseInt(this.getValue(ab));
                                                                                                            switch (Z) {
                                                                                                                case 1:
                                                                                                                    X.slideType = V.effects.SlideType.FastSlideTo;
                                                                                                                    break;
                                                                                                                case 2:
                                                                                                                    X.slideType = V.effects.SlideType.SlowSlideTo;
                                                                                                                    break;
                                                                                                                case 4:
                                                                                                                    X.slideType = V.effects.SlideType.OutDownWards;
                                                                                                                    break;
                                                                                                                case 8:
                                                                                                                    X.slideType = V.effects.SlideType.OutUpWards;
                                                                                                                    break;
                                                                                                                case 16:
                                                                                                                    X.slideType = V.effects.SlideType.IntoFromBelow;
                                                                                                                    break;
                                                                                                                case 32:
                                                                                                                    X.slideType = V.effects.SlideType.IntoFromAbove;
                                                                                                                    break
                                                                                                            }
                                                                                                        }
                                                                                                    } else {
                                                                                                        if (aq == "LeftHandTapped") {
                                                                                                            var ai = aa.hasNode.resolve("Enable")
                                                                                                        } else {
                                                                                                            if (aq == "HopoOrigin") {
                                                                                                                X.hammer = aa.hasNode.resolve("Enable")
                                                                                                            } else {
                                                                                                                if (aq == "HopoDestination") {
                                                                                                                    var W = aa.hasNode.resolve("Enable")
                                                                                                                } else {
                                                                                                                    if (aq == "Tapped") {
                                                                                                                        X.effectTapping = aa.hasNode.resolve("Enable")
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (aj) {
                        X.isBended = true;
                        if (ah == null) {
                            ah = new V.effects.BendPoint()
                        }
                        if (ap == null) {
                            ap = new V.effects.BendPoint(V.effects.BendEffect.MAX_POSITION)
                        }
                        var al = new Array();
                        al.push(ah);
                        if (af != null && q != null) {
                            al.push(new V.effects.BendPoint(af, q))
                        }
                        if (ad != null && q != null) {
                            al.push(new V.effects.BendPoint(ad, q))
                        }
                        if (af == null && ad == null && q != null) {
                            al.push(new V.effects.BendPoint(V.effects.BendEffect.MAX_POSITION / 2 | 0, q))
                        }
                        al.push(ap);
                        X.bendPoints = al
                    }
                    this._gpxDocument.notes.push(X)
                }
            }
        },
        readRhythms: function() {
            if (this._dom.hasNode.resolve("Rhythms")) {
                var X = this._dom.node.resolve("Rhythms").nodes.resolve("Rhythm").iterator();
                while (X.hasNext()) {
                    var q = X.next();
                    var W = new c.gpx.score.GpxRhythm();
                    W.id = A.parseInt(q.att.resolve("id"));
                    W.noteValue = q.node.resolve("NoteValue").get_innerData();
                    if (q.hasNode.resolve("PrimaryTuplet")) {
                        W.primaryTupletDen = A.parseInt(q.node.resolve("PrimaryTuplet").att.resolve("den"));
                        W.primaryTupletNum = A.parseInt(q.node.resolve("PrimaryTuplet").att.resolve("num"))
                    } else {
                        W.primaryTupletDen = 1;
                        W.primaryTupletNum = 1
                    }
                    if (q.hasNode.resolve("AugmentationDot")) {
                        W.augmentationDotCount = A.parseInt(q.node.resolve("AugmentationDot").att.resolve("count"))
                    } else {
                        W.augmentationDotCount = 0
                    }
                    this._gpxDocument.rhythms.push(W)
                }
            }
        },
        __class__: c.gpx.DocumentReader
    };
    c.gpx.File = function(W, q) {
        this.fileName = W;
        this.fileContents = q
    };
    p["guitarpro.gpx.File"] = c.gpx.File;
    c.gpx.File.__name__ = ["guitarpro", "gpx", "File"];
    c.gpx.File.prototype = {
        __class__: c.gpx.File
    };
    c.gpx.FileSystem = function() {
        this._fileList = new Array()
    };
    p["guitarpro.gpx.FileSystem"] = c.gpx.FileSystem;
    c.gpx.FileSystem.__name__ = ["guitarpro", "gpx", "FileSystem"];
    c.gpx.FileSystem.prototype = {
        getFileNames: function() {
            var X = new Array();
            var Y = 0;
            var W = this._fileList;
            while (Y < W.length) {
                var q = W[Y];
                ++Y;
                X.push(q.fileName)
            }
            return X
        },
        getFileContents: function(Y) {
            var X = 0;
            var W = this._fileList;
            while (X < W.length) {
                var q = W[X];
                ++X;
                if (q.fileName == Y) {
                    return q.fileContents
                }
            }
            return null
        },
        load: function(W) {
            var q = new E.BitInputStream(W);
            var X = this.getInteger(q.readBytes(4), 0);
            this.load2(X, q)
        },
        load2: function(ar, q) {
            if (ar == 1397113666) {
                var ah = q.readBytes(q.length());
                var au = 4096;
                var aa = 0;
                while ((aa = aa + au) + 3 < ah.length) {
                    if (this.getInteger(ah, aa) == 2) {
                        var at = aa + 4;
                        var ae = aa + 140;
                        var aj = aa + 148;
                        var af = 0;
                        var aq = 0;
                        var ab = new Array();
                        while ((af = this.getInteger(ah, aj + 4 * aq++)) != 0) {
                            var al = this.getBytes(ah, aa = af * au, au);
                            var Y = 0;
                            while (Y < al.length) {
                                var W = al[Y];
                                ++Y;
                                ab.push(W)
                            }
                        }
                        var ai = this.getInteger(ah, ae);
                        if (ab.length >= ai) {
                            var aw = ab.slice(0, ai);
                            this._fileList.push(new c.gpx.File(this.getString(ah, at, 127), aw))
                        }
                    }
                }
            } else {
                if (ar == 1514554178) {
                    var av = new Array();
                    var ad = this.getInteger(q.readBytes(4), 0);
                    while (!q.eof() && q.position() < ad) {
                        var ap = q.readBits(1);
                        if (ap == 1) {
                            var an = q.readBits(4);
                            var Z = q.readBitsReversed(an);
                            var ak = q.readBitsReversed(an);
                            var ac = av.length - Z;
                            var ao = 0;
                            while (ao < (ak > Z ? Z : ak)) {
                                av.push(av[ac + ao]);
                                ao++
                            }
                        } else {
                            var ag = q.readBitsReversed(2);
                            var am = 0;
                            while (am < ag && !q.eof()) {
                                av.push(q.readBits(8));
                                am++
                            }
                        }
                    }
                    var X = new E.DataInputStream(new E.MemoryInputStream(av));
                    this.load(X)
                } else {
                    throw new V.FormatException("This is not a GPX file")
                }
            }
        },
        getInteger: function(q, W) {
            return (q[W + 3] & 255) << 24 | (q[W + 2] & 255) << 16 | (q[W + 1] & 255) << 8 | q[W] & 255
        },
        getString: function(Y, ab, X) {
            var Z = 0;
            var W = 0;
            var aa = "";
            while (W < X) {
                var q = Y[ab + W] & 255;
                if (q == 0) {
                    break
                }
                aa += String.fromCharCode(q);
                W++
            }
            return aa
        },
        getBytes: function(X, Y, W) {
            var q = X.slice(Y, Y + W);
            return q
        },
        __class__: c.gpx.FileSystem
    };
    c.gpx.GpxReader = function() {};
    p["guitarpro.gpx.GpxReader"] = c.gpx.GpxReader;
    c.gpx.GpxReader.__name__ = ["guitarpro", "gpx", "GpxReader"];
    c.gpx.GpxReader.__interfaces__ = [V.ISongReader];
    c.gpx.GpxReader.prototype = {
        readSong: function(ad, W, ae) {
            this._fileSystem = new c.gpx.FileSystem();
            this._factory = W;
            this._data = ad;
            try {
                this._fileSystem.load(this._data);
                var ac = this._fileSystem.getFileContents("score.gpif");
                var ab = new E.DataInputStream(new E.MemoryInputStream(ac));
                var X = new c.gpx.DocumentReader(ab);
                var q = new c.gpx.DocumentParser(W, X.read());
                return q.parse()
            } catch (Z) {
                if (h.Boot.__instanceof(Z, V.FormatException)) {
                    var Y = Z;
                    throw Y
                } else {
                    var aa = Z;
                    throw new V.FormatException(A.string(aa))
                }
            }
        },
        __class__: c.gpx.GpxReader
    };
    c.gpx.score = {};
    c.gpx.score.GpxBar = function() {};
    p["guitarpro.gpx.score.GpxBar"] = c.gpx.score.GpxBar;
    c.gpx.score.GpxBar.__name__ = ["guitarpro", "gpx", "score", "GpxBar"];
    c.gpx.score.GpxBar.prototype = {
        __class__: c.gpx.score.GpxBar
    };
    c.gpx.score.GpxBeat = function() {
        this.chordId = -1;
        this.tremoloSpeed = -1;
        this.effectFadeIn = false;
        this.effectFadeOut = false;
        this.effectPopping = false;
        this.effectSlapping = false;
        this.effectStrokeDirection = "";
        this.effectStrokeValue = 60;
        this.effectPickStrokeDirection = "";
        this.graceType = ""
    };
    p["guitarpro.gpx.score.GpxBeat"] = c.gpx.score.GpxBeat;
    c.gpx.score.GpxBeat.__name__ = ["guitarpro", "gpx", "score", "GpxBeat"];
    c.gpx.score.GpxBeat.prototype = {
        __class__: c.gpx.score.GpxBeat
    };
    c.gpx.score.GpxDocument = function() {
        this.score = new c.gpx.score.GpxScore();
        this.tracks = new Array();
        this.masterBars = new Array();
        this.bars = new Array();
        this.voices = new Array();
        this.beats = new Array();
        this.notes = new Array();
        this.rhythms = new Array();
        this.tempoAutomations = new Array();
        this.masterVolumeAutomations = new Array()
    };
    p["guitarpro.gpx.score.GpxDocument"] = c.gpx.score.GpxDocument;
    c.gpx.score.GpxDocument.__name__ = ["guitarpro", "gpx", "score", "GpxDocument"];
    c.gpx.score.GpxDocument.prototype = {
        getBar: function(Y) {
            var X = 0;
            var W = this.bars;
            while (X < W.length) {
                var q = W[X];
                ++X;
                if (q.id == Y) {
                    return q
                }
            }
            return null
        },
        getVoice: function(Y) {
            var X = 0;
            var W = this.voices;
            while (X < W.length) {
                var q = W[X];
                ++X;
                if (q.id == Y) {
                    return q
                }
            }
            return null
        },
        getBeat: function(Y) {
            var X = 0;
            var W = this.beats;
            while (X < W.length) {
                var q = W[X];
                ++X;
                if (q.id == Y) {
                    return q
                }
            }
            return null
        },
        getNote: function(Y) {
            var X = 0;
            var W = this.notes;
            while (X < W.length) {
                var q = W[X];
                ++X;
                if (q.id == Y) {
                    return q
                }
            }
            return null
        },
        getRhythm: function(Y) {
            var X = 0;
            var W = this.rhythms;
            while (X < W.length) {
                var q = W[X];
                ++X;
                if (q.id == Y) {
                    return q
                }
            }
            return null
        },
        getAutomation: function(Y, X) {
            var W = null;
            var aa = 0;
            var Z = this.tempoAutomations;
            while (aa < Z.length) {
                var q = Z[aa];
                ++aa;
                if (q.type == Y && (q.barId <= X && (W == null || q.barId > W.barId))) {
                    W = q
                }
            }
            return W
        },
        __class__: c.gpx.score.GpxDocument
    };
    c.gpx.score.GpxDrumkit = function(q, X, W) {
        this.midiValue = q;
        this.element = X;
        this.variation = W
    };
    p["guitarpro.gpx.score.GpxDrumkit"] = c.gpx.score.GpxDrumkit;
    c.gpx.score.GpxDrumkit.__name__ = ["guitarpro", "gpx", "score", "GpxDrumkit"];
    c.gpx.score.GpxDrumkit.__properties__ = {
        get_Drumkits: "get_Drumkits"
    };
    c.gpx.score.GpxDrumkit.get_Drumkits = function() {
        if (c.gpx.score.GpxDrumkit.Kits == null) {
            c.gpx.score.GpxDrumkit.Kits = new Array();
            c.gpx.score.GpxDrumkit.Kits.push(new c.gpx.score.GpxDrumkit(36, 0, 0));
            c.gpx.score.GpxDrumkit.Kits.push(new c.gpx.score.GpxDrumkit(36, 0, 0));
            c.gpx.score.GpxDrumkit.Kits.push(new c.gpx.score.GpxDrumkit(37, 1, 2));
            c.gpx.score.GpxDrumkit.Kits.push(new c.gpx.score.GpxDrumkit(38, 1, 0));
            c.gpx.score.GpxDrumkit.Kits.push(new c.gpx.score.GpxDrumkit(41, 5, 0));
            c.gpx.score.GpxDrumkit.Kits.push(new c.gpx.score.GpxDrumkit(42, 10, 0));
            c.gpx.score.GpxDrumkit.Kits.push(new c.gpx.score.GpxDrumkit(43, 6, 0));
            c.gpx.score.GpxDrumkit.Kits.push(new c.gpx.score.GpxDrumkit(44, 11, 0));
            c.gpx.score.GpxDrumkit.Kits.push(new c.gpx.score.GpxDrumkit(45, 7, 0));
            c.gpx.score.GpxDrumkit.Kits.push(new c.gpx.score.GpxDrumkit(46, 10, 2));
            c.gpx.score.GpxDrumkit.Kits.push(new c.gpx.score.GpxDrumkit(47, 8, 0));
            c.gpx.score.GpxDrumkit.Kits.push(new c.gpx.score.GpxDrumkit(48, 9, 0));
            c.gpx.score.GpxDrumkit.Kits.push(new c.gpx.score.GpxDrumkit(49, 12, 0));
            c.gpx.score.GpxDrumkit.Kits.push(new c.gpx.score.GpxDrumkit(50, 9, 0));
            c.gpx.score.GpxDrumkit.Kits.push(new c.gpx.score.GpxDrumkit(51, 15, 0));
            c.gpx.score.GpxDrumkit.Kits.push(new c.gpx.score.GpxDrumkit(52, 16, 0));
            c.gpx.score.GpxDrumkit.Kits.push(new c.gpx.score.GpxDrumkit(53, 15, 2));
            c.gpx.score.GpxDrumkit.Kits.push(new c.gpx.score.GpxDrumkit(55, 14, 0));
            c.gpx.score.GpxDrumkit.Kits.push(new c.gpx.score.GpxDrumkit(56, 3, 0));
            c.gpx.score.GpxDrumkit.Kits.push(new c.gpx.score.GpxDrumkit(57, 13, 0));
            c.gpx.score.GpxDrumkit.Kits.push(new c.gpx.score.GpxDrumkit(59, 15, 1))
        }
        return c.gpx.score.GpxDrumkit.Kits
    };
    c.gpx.score.GpxDrumkit.prototype = {
        __class__: c.gpx.score.GpxDrumkit
    };
    c.gpx.score.GpxMasterBar = function() {
        this.repeatAlternative = 0
    };
    p["guitarpro.gpx.score.GpxMasterBar"] = c.gpx.score.GpxMasterBar;
    c.gpx.score.GpxMasterBar.__name__ = ["guitarpro", "gpx", "score", "GpxMasterBar"];
    c.gpx.score.GpxMasterBar.prototype = {
        __class__: c.gpx.score.GpxMasterBar
    };
    c.gpx.score.GpxNote = function() {
        this.id = -1;
        this.fret = -1;
        this.string = -1;
        this.tone = -1;
        this.octave = -1;
        this.element = -1;
        this.variation = -1;
        this.midiNumber = -1;
        this.trillValue = -1;
        this.trillSpeed = -1;
        this.harmonicType = -1;
        this.harmonicValue = 0;
        this.isBended = false;
        this.effectTapping = false;
        this.effectAccentuatedNote = false;
        this.effectHeavyAccentuatedNote = false;
        this.slide = false
    };
    p["guitarpro.gpx.score.GpxNote"] = c.gpx.score.GpxNote;
    c.gpx.score.GpxNote.__name__ = ["guitarpro", "gpx", "score", "GpxNote"];
    c.gpx.score.GpxNote.prototype = {
        __class__: c.gpx.score.GpxNote
    };
    c.gpx.score.GpxPageSetup = function() {};
    p["guitarpro.gpx.score.GpxPageSetup"] = c.gpx.score.GpxPageSetup;
    c.gpx.score.GpxPageSetup.__name__ = ["guitarpro", "gpx", "score", "GpxPageSetup"];
    c.gpx.score.GpxPageSetup.prototype = {
        __class__: c.gpx.score.GpxPageSetup
    };
    c.gpx.score.GpxRhythm = function() {};
    p["guitarpro.gpx.score.GpxRhythm"] = c.gpx.score.GpxRhythm;
    c.gpx.score.GpxRhythm.__name__ = ["guitarpro", "gpx", "score", "GpxRhythm"];
    c.gpx.score.GpxRhythm.prototype = {
        __class__: c.gpx.score.GpxRhythm
    };
    c.gpx.score.GpxScore = function() {
        this.pageSetup = new c.gpx.score.GpxPageSetup()
    };
    p["guitarpro.gpx.score.GpxScore"] = c.gpx.score.GpxScore;
    c.gpx.score.GpxScore.__name__ = ["guitarpro", "gpx", "score", "GpxScore"];
    c.gpx.score.GpxScore.prototype = {
        __class__: c.gpx.score.GpxScore
    };
    c.gpx.score.GpxTrack = function() {
        this.offset = 0;
        this.chordTable = new m.ds.IntMap();
        this.isPercussionTrack = false;
        this.volume = -1;
        this.balance = -1;
        this.staff = 1;
        this.staffCount = 1;
        this.lyricLines = new Array();
        this.volumeAutomations = new Array()
    };
    p["guitarpro.gpx.score.GpxTrack"] = c.gpx.score.GpxTrack;
    c.gpx.score.GpxTrack.__name__ = ["guitarpro", "gpx", "score", "GpxTrack"];
    c.gpx.score.GpxTrack.prototype = {
        __class__: c.gpx.score.GpxTrack
    };
    c.gpx.score.GpxVoice = function() {};
    p["guitarpro.gpx.score.GpxVoice"] = c.gpx.score.GpxVoice;
    c.gpx.score.GpxVoice.__name__ = ["guitarpro", "gpx", "score", "GpxVoice"];
    c.gpx.score.GpxVoice.prototype = {
        __class__: c.gpx.score.GpxVoice
    };
    var m = {};
    m.Timer = function(q) {
        var W = this;
        this.id = setInterval(function() {
            W.run()
        }, q)
    };
    p["haxe.Timer"] = m.Timer;
    m.Timer.__name__ = ["haxe", "Timer"];
    m.Timer.delay = function(X, q) {
        var W = new m.Timer(q);
        W.run = function() {
            W.stop();
            X()
        };
        return W
    };
    m.Timer.stamp = function() {
        return new Date().getTime() / 1000
    };
    m.Timer.prototype = {
        stop: function() {
            if (this.id == null) {
                return
            }
            clearInterval(this.id);
            this.id = null
        },
        run: function() {},
        __class__: m.Timer
    };
    m.crypto = {};
    m.crypto.Sha1 = function() {};
    p["haxe.crypto.Sha1"] = m.crypto.Sha1;
    m.crypto.Sha1.__name__ = ["haxe", "crypto", "Sha1"];
    m.crypto.Sha1.encode = function(X) {
        var q = new m.crypto.Sha1();
        var W = q.doEncode(m.crypto.Sha1.str2blks(X));
        return q.hex(W)
    };
    m.crypto.Sha1.str2blks = function(ag) {
        var Y = (ag.length + 8 >> 6) + 1;
        var ad = new Array();
        var ae = 0;
        var ab = Y * 16;
        while (ae < ab) {
            var Z = ae++;
            ad[Z] = 0
        }
        var aa = 0;
        var ac = ag.length;
        while (aa < ac) {
            var X = aa++;
            var q = X >> 2;
            ad[q] |= B.cca(ag, X) << 24 - ((X & 3) << 3)
        }
        var W = ag.length;
        var af = W >> 2;
        ad[af] |= 128 << 24 - ((W & 3) << 3);
        ad[Y * 16 - 1] = ag.length * 8;
        return ad
    };
    m.crypto.Sha1.prototype = {
        doEncode: function(ah) {
            var ai = new Array();
            var ag = 1732584193;
            var af = -271733879;
            var ae = -1732584194;
            var ad = 271733878;
            var ac = -1009589776;
            var Z = 0;
            while (Z < ah.length) {
                var ab = ag;
                var aa = af;
                var Y = ae;
                var X = ad;
                var q = ac;
                var W = 0;
                while (W < 80) {
                    if (W < 16) {
                        ai[W] = ah[Z + W]
                    } else {
                        ai[W] = this.rol(ai[W - 3] ^ ai[W - 8] ^ ai[W - 14] ^ ai[W - 16], 1)
                    }
                    var aj = (ag << 5 | ag >>> 27) + this.ft(W, af, ae, ad) + ac + ai[W] + this.kt(W);
                    ac = ad;
                    ad = ae;
                    ae = af << 30 | af >>> 2;
                    af = ag;
                    ag = aj;
                    W++
                }
                ag += ab;
                af += aa;
                ae += Y;
                ad += X;
                ac += q;
                Z += 16
            }
            return [ag, af, ae, ad, ac]
        },
        rol: function(q, W) {
            return q << W | q >>> 32 - W
        },
        ft: function(W, q, Y, X) {
            if (W < 20) {
                return q & Y | ~q & X
            }
            if (W < 40) {
                return q ^ Y ^ X
            }
            if (W < 60) {
                return q & Y | q & X | Y & X
            }
            return q ^ Y ^ X
        },
        kt: function(q) {
            if (q < 20) {
                return 1518500249
            }
            if (q < 40) {
                return 1859775393
            }
            if (q < 60) {
                return -1894007588
            }
            return -899497514
        },
        hex: function(q) {
            var aa = "";
            var Y = "0123456789abcdef";
            var Z = 0;
            while (Z < q.length) {
                var X = q[Z];
                ++Z;
                var W = 7;
                while (W >= 0) {
                    aa += Y.charAt(X >>> (W << 2) & 15);
                    W--
                }
            }
            return aa
        },
        __class__: m.crypto.Sha1
    };
    m.ds = {};
    m.ds.BalancedTree = function() {};
    p["haxe.ds.BalancedTree"] = m.ds.BalancedTree;
    m.ds.BalancedTree.__name__ = ["haxe", "ds", "BalancedTree"];
    m.ds.BalancedTree.prototype = {
        set: function(q, W) {
            this.root = this.setLoop(q, W, this.root)
        },
        get: function(q) {
            var W = this.root;
            while (W != null) {
                var X = this.compare(q, W.key);
                if (X == 0) {
                    return W.value
                }
                if (X < 0) {
                    W = W.left
                } else {
                    W = W.right
                }
            }
            return null
        },
        keys: function() {
            var q = [];
            this.keysLoop(this.root, q);
            return B.iter(q)
        },
        setLoop: function(X, W, Z) {
            if (Z == null) {
                return new m.ds.TreeNode(null, X, W, null)
            }
            var aa = this.compare(X, Z.key);
            if (aa == 0) {
                return new m.ds.TreeNode(Z.left, X, W, Z.right, Z == null ? 0 : Z._height)
            } else {
                if (aa < 0) {
                    var q = this.setLoop(X, W, Z.left);
                    return this.balance(q, Z.key, Z.value, Z.right)
                } else {
                    var Y = this.setLoop(X, W, Z.right);
                    return this.balance(Z.left, Z.key, Z.value, Y)
                }
            }
        },
        keysLoop: function(q, W) {
            if (q != null) {
                this.keysLoop(q.left, W);
                W.push(q.key);
                this.keysLoop(q.right, W)
            }
        },
        balance: function(W, Y, X, aa) {
            var q;
            if (W == null) {
                q = 0
            } else {
                q = W._height
            }
            var Z;
            if (aa == null) {
                Z = 0
            } else {
                Z = aa._height
            }
            if (q > Z + 2) {
                if ((function(ac) {
                        var ab;
                        var ad = W.left;
                        ab = ad == null ? 0 : ad._height;
                        return ab
                    }(this)) >= (function(ad) {
                        var ab;
                        var ac = W.right;
                        ab = ac == null ? 0 : ac._height;
                        return ab
                    }(this))) {
                    return new m.ds.TreeNode(W.left, W.key, W.value, new m.ds.TreeNode(W.right, Y, X, aa))
                } else {
                    return new m.ds.TreeNode(new m.ds.TreeNode(W.left, W.key, W.value, W.right.left), W.right.key, W.right.value, new m.ds.TreeNode(W.right.right, Y, X, aa))
                }
            } else {
                if (Z > q + 2) {
                    if ((function(ad) {
                            var ab;
                            var ac = aa.right;
                            ab = ac == null ? 0 : ac._height;
                            return ab
                        }(this)) > (function(ad) {
                            var ab;
                            var ac = aa.left;
                            ab = ac == null ? 0 : ac._height;
                            return ab
                        }(this))) {
                        return new m.ds.TreeNode(new m.ds.TreeNode(W, Y, X, aa.left), aa.key, aa.value, aa.right)
                    } else {
                        return new m.ds.TreeNode(new m.ds.TreeNode(W, Y, X, aa.left.left), aa.left.key, aa.left.value, new m.ds.TreeNode(aa.left.right, aa.key, aa.value, aa.right))
                    }
                } else {
                    return new m.ds.TreeNode(W, Y, X, aa, (q > Z ? q : Z) + 1)
                }
            }
        },
        compare: function(W, q) {
            return D.compare(W, q)
        },
        __class__: m.ds.BalancedTree
    };
    m.ds.TreeNode = function(q, X, W, Z, Y) {
        if (Y == null) {
            Y = -1
        }
        this.left = q;
        this.key = X;
        this.value = W;
        this.right = Z;
        if (Y == -1) {
            this._height = ((function(ab) {
                var aa;
                var ac = ab.left;
                aa = ac == null ? 0 : ac._height;
                return aa
            }(this)) > (function(ac) {
                var aa;
                var ab = ac.right;
                aa = ab == null ? 0 : ab._height;
                return aa
            }(this)) ? (function(ac) {
                var aa;
                var ab = ac.left;
                aa = ab == null ? 0 : ab._height;
                return aa
            }(this)) : (function(ac) {
                var aa;
                var ab = ac.right;
                aa = ab == null ? 0 : ab._height;
                return aa
            }(this))) + 1
        } else {
            this._height = Y
        }
    };
    p["haxe.ds.TreeNode"] = m.ds.TreeNode;
    m.ds.TreeNode.__name__ = ["haxe", "ds", "TreeNode"];
    m.ds.TreeNode.prototype = {
        __class__: m.ds.TreeNode
    };
    m.ds.EnumValueMap = function() {
        m.ds.BalancedTree.call(this)
    };
    p["haxe.ds.EnumValueMap"] = m.ds.EnumValueMap;
    m.ds.EnumValueMap.__name__ = ["haxe", "ds", "EnumValueMap"];
    m.ds.EnumValueMap.__interfaces__ = [j];
    m.ds.EnumValueMap.__super__ = m.ds.BalancedTree;
    m.ds.EnumValueMap.prototype = v(m.ds.BalancedTree.prototype, {
        compare: function(Z, Y) {
            var X = Z[1] - Y[1];
            if (X != 0) {
                return X
            }
            var W = Z.slice(2);
            var q = Y.slice(2);
            if (W.length == 0 && q.length == 0) {
                return 0
            }
            return this.compareArgs(W, q)
        },
        compareArgs: function(W, q) {
            var Y = W.length - q.length;
            if (Y != 0) {
                return Y
            }
            var Z = 0;
            var ab = W.length;
            while (Z < ab) {
                var X = Z++;
                var aa = this.compareArg(W[X], q[X]);
                if (aa != 0) {
                    return aa
                }
            }
            return 0
        },
        compareArg: function(W, q) {
            if (D.isEnumValue(W) && D.isEnumValue(q)) {
                return this.compare(W, q)
            } else {
                if ((W instanceof Array) && W.__enum__ == null && ((q instanceof Array) && q.__enum__ == null)) {
                    return this.compareArgs(W, q)
                } else {
                    return D.compare(W, q)
                }
            }
        },
        __class__: m.ds.EnumValueMap
    });
    m.ds.IntMap = function() {
        this.h = {}
    };
    p["haxe.ds.IntMap"] = m.ds.IntMap;
    m.ds.IntMap.__name__ = ["haxe", "ds", "IntMap"];
    m.ds.IntMap.__interfaces__ = [j];
    m.ds.IntMap.prototype = {
        set: function(q, W) {
            this.h[q] = W
        },
        get: function(q) {
            return this.h[q]
        },
        exists: function(q) {
            return this.h.hasOwnProperty(q)
        },
        keys: function() {
            var q = [];
            for (var W in this.h) {
                if (this.h.hasOwnProperty(W)) {
                    q.push(W | 0)
                }
            }
            return B.iter(q)
        },
        iterator: function() {
            return {
                ref: this.h,
                it: this.keys(),
                hasNext: function() {
                    return this.it.hasNext()
                },
                next: function() {
                    var q = this.it.next();
                    return this.ref[q]
                }
            }
        },
        __class__: m.ds.IntMap
    };
    m.ds.StringMap = function() {
        this.h = {}
    };
    p["haxe.ds.StringMap"] = m.ds.StringMap;
    m.ds.StringMap.__name__ = ["haxe", "ds", "StringMap"];
    m.ds.StringMap.__interfaces__ = [j];
    m.ds.StringMap.prototype = {
        set: function(q, W) {
            this.h["$" + q] = W
        },
        get: function(q) {
            return this.h["$" + q]
        },
        exists: function(q) {
            return this.h.hasOwnProperty("$" + q)
        },
        remove: function(q) {
            q = "$" + q;
            if (!this.h.hasOwnProperty(q)) {
                return false
            }
            delete(this.h[q]);
            return true
        },
        keys: function() {
            var q = [];
            for (var W in this.h) {
                if (this.h.hasOwnProperty(W)) {
                    q.push(W.substr(1))
                }
            }
            return B.iter(q)
        },
        __class__: m.ds.StringMap
    };
    m.io = {};
    m.io.Bytes = function(W, q) {
        this.length = W;
        this.b = q
    };
    p["haxe.io.Bytes"] = m.io.Bytes;
    m.io.Bytes.__name__ = ["haxe", "io", "Bytes"];
    m.io.Bytes.ofString = function(X) {
        var q = new Array();
        var W = 0;
        while (W < X.length) {
            var Y = O.fastCodeAt(X, W++);
            if (55296 <= Y && Y <= 56319) {
                Y = Y - 55232 << 10 | O.fastCodeAt(X, W++) & 1023
            }
            if (Y <= 127) {
                q.push(Y)
            } else {
                if (Y <= 2047) {
                    q.push(192 | Y >> 6);
                    q.push(128 | Y & 63)
                } else {
                    if (Y <= 65535) {
                        q.push(224 | Y >> 12);
                        q.push(128 | Y >> 6 & 63);
                        q.push(128 | Y & 63)
                    } else {
                        q.push(240 | Y >> 18);
                        q.push(128 | Y >> 12 & 63);
                        q.push(128 | Y >> 6 & 63);
                        q.push(128 | Y & 63)
                    }
                }
            }
        }
        return new m.io.Bytes(q.length, q)
    };
    m.io.Bytes.ofData = function(q) {
        return new m.io.Bytes(q.length, q)
    };
    m.io.Bytes.prototype = {
        __class__: m.io.Bytes
    };
    m.io.BytesBuffer = function() {
        this.b = new Array()
    };
    p["haxe.io.BytesBuffer"] = m.io.BytesBuffer;
    m.io.BytesBuffer.__name__ = ["haxe", "io", "BytesBuffer"];
    m.io.BytesBuffer.prototype = {
        getBytes: function() {
            var q = new m.io.Bytes(this.b.length, this.b);
            this.b = null;
            return q
        },
        __class__: m.io.BytesBuffer
    };
    m.io.Eof = function() {};
    p["haxe.io.Eof"] = m.io.Eof;
    m.io.Eof.__name__ = ["haxe", "io", "Eof"];
    m.io.Eof.prototype = {
        toString: function() {
            return "Eof"
        },
        __class__: m.io.Eof
    };
    m.xml = {};
    m.xml._Fast = {};
    m.xml._Fast.NodeAccess = function(q) {
        this.__x = q
    };
    p["haxe.xml._Fast.NodeAccess"] = m.xml._Fast.NodeAccess;
    m.xml._Fast.NodeAccess.__name__ = ["haxe", "xml", "_Fast", "NodeAccess"];
    m.xml._Fast.NodeAccess.prototype = {
        resolve: function(W) {
            var q = this.__x.elementsNamed(W).next();
            if (q == null) {
                var X;
                if (this.__x.nodeType == e.Document) {
                    X = "Document"
                } else {
                    X = this.__x.get_nodeName()
                }
                throw X + " is missing element " + W
            }
            return new m.xml.Fast(q)
        },
        __class__: m.xml._Fast.NodeAccess
    };
    m.xml._Fast.AttribAccess = function(q) {
        this.__x = q
    };
    p["haxe.xml._Fast.AttribAccess"] = m.xml._Fast.AttribAccess;
    m.xml._Fast.AttribAccess.__name__ = ["haxe", "xml", "_Fast", "AttribAccess"];
    m.xml._Fast.AttribAccess.prototype = {
        resolve: function(W) {
            if (this.__x.nodeType == e.Document) {
                throw "Cannot access document attribute " + W
            }
            var q = this.__x.get(W);
            if (q == null) {
                throw this.__x.get_nodeName() + " is missing attribute " + W
            }
            return q
        },
        __class__: m.xml._Fast.AttribAccess
    };
    m.xml._Fast.HasAttribAccess = function(q) {
        this.__x = q
    };
    p["haxe.xml._Fast.HasAttribAccess"] = m.xml._Fast.HasAttribAccess;
    m.xml._Fast.HasAttribAccess.__name__ = ["haxe", "xml", "_Fast", "HasAttribAccess"];
    m.xml._Fast.HasAttribAccess.prototype = {
        resolve: function(q) {
            if (this.__x.nodeType == e.Document) {
                throw "Cannot access document attribute " + q
            }
            return this.__x.exists(q)
        },
        __class__: m.xml._Fast.HasAttribAccess
    };
    m.xml._Fast.HasNodeAccess = function(q) {
        this.__x = q
    };
    p["haxe.xml._Fast.HasNodeAccess"] = m.xml._Fast.HasNodeAccess;
    m.xml._Fast.HasNodeAccess.__name__ = ["haxe", "xml", "_Fast", "HasNodeAccess"];
    m.xml._Fast.HasNodeAccess.prototype = {
        resolve: function(q) {
            return this.__x.elementsNamed(q).hasNext()
        },
        __class__: m.xml._Fast.HasNodeAccess
    };
    m.xml._Fast.NodeListAccess = function(q) {
        this.__x = q
    };
    p["haxe.xml._Fast.NodeListAccess"] = m.xml._Fast.NodeListAccess;
    m.xml._Fast.NodeListAccess.__name__ = ["haxe", "xml", "_Fast", "NodeListAccess"];
    m.xml._Fast.NodeListAccess.prototype = {
        resolve: function(X) {
            var W = new t();
            var Y = this.__x.elementsNamed(X);
            while (Y.hasNext()) {
                var q = Y.next();
                W.add(new m.xml.Fast(q))
            }
            return W
        },
        __class__: m.xml._Fast.NodeListAccess
    };
    m.xml.Fast = function(q) {
        if (q.nodeType != e.Document && q.nodeType != e.Element) {
            throw "Invalid nodeType " + A.string(q.nodeType)
        }
        this.x = q;
        this.node = new m.xml._Fast.NodeAccess(q);
        this.nodes = new m.xml._Fast.NodeListAccess(q);
        this.att = new m.xml._Fast.AttribAccess(q);
        this.has = new m.xml._Fast.HasAttribAccess(q);
        this.hasNode = new m.xml._Fast.HasNodeAccess(q)
    };
    p["haxe.xml.Fast"] = m.xml.Fast;
    m.xml.Fast.__name__ = ["haxe", "xml", "Fast"];
    m.xml.Fast.prototype = {
        get_name: function() {
            if (this.x.nodeType == e.Document) {
                return "Document"
            } else {
                return this.x.get_nodeName()
            }
        },
        get_innerData: function() {
            var X = this.x.iterator();
            if (!X.hasNext()) {
                throw this.get_name() + " does not have data"
            }
            var q = X.next();
            var Y = X.next();
            if (Y != null) {
                if (q.nodeType == e.PCData && Y.nodeType == e.CData && O.trim(q.get_nodeValue()) == "") {
                    var W = X.next();
                    if (W == null || W.nodeType == e.PCData && O.trim(W.get_nodeValue()) == "" && X.next() == null) {
                        return Y.get_nodeValue()
                    }
                }
                throw this.get_name() + " does not only have data"
            }
            if (q.nodeType != e.PCData && q.nodeType != e.CData) {
                throw this.get_name() + " does not have data"
            }
            return q.get_nodeValue()
        },
        get_innerHTML: function() {
            var W = new g();
            var X = this.x.iterator();
            while (X.hasNext()) {
                var q = X.next();
                W.add(q.toString())
            }
            return W.b
        },
        get_elements: function() {
            var q = this.x.elements();
            return {
                hasNext: s(q, q.hasNext),
                next: function() {
                    var W = q.next();
                    if (W == null) {
                        return null
                    }
                    return new m.xml.Fast(W)
                }
            }
        },
        __class__: m.xml.Fast,
        __properties__: {
            get_elements: "get_elements",
            get_innerHTML: "get_innerHTML",
            get_innerData: "get_innerData",
            get_name: "get_name"
        }
    };
    m.xml.Parser = function() {};
    p["haxe.xml.Parser"] = m.xml.Parser;
    m.xml.Parser.__name__ = ["haxe", "xml", "Parser"];
    m.xml.Parser.parse = function(W) {
        var q = e.createDocument();
        m.xml.Parser.doParse(W, 0, q);
        return q
    };
    m.xml.Parser.doParse = function(ai, ae, ab) {
        if (ae == null) {
            ae = 0
        }
        var W = null;
        var Y = 1;
        var ah = 1;
        var ak = null;
        var X = 0;
        var af = 0;
        var Z = 0;
        var am = ai.charCodeAt(ae);
        var al = new g();
        while (!(am != am)) {
            switch (Y) {
                case 0:
                    switch (am) {
                        case 10:
                        case 13:
                        case 9:
                        case 32:
                            break;
                        default:
                            Y = ah;
                            continue
                    }
                    break;
                case 1:
                    switch (am) {
                        case 60:
                            Y = 0;
                            ah = 2;
                            break;
                        default:
                            X = ae;
                            Y = 13;
                            continue
                    }
                    break;
                case 13:
                    if (am == 60) {
                        var aa = e.createPCData(al.b + B.substr(ai, X, ae - X));
                        al = new g();
                        ab.addChild(aa);
                        af++;
                        Y = 0;
                        ah = 2
                    } else {
                        if (am == 38) {
                            al.addSub(ai, X, ae - X);
                            Y = 18;
                            ah = 13;
                            X = ae + 1
                        }
                    }
                    break;
                case 17:
                    if (am == 93 && ai.charCodeAt(ae + 1) == 93 && ai.charCodeAt(ae + 2) == 62) {
                        var ag = e.createCData(B.substr(ai, X, ae - X));
                        ab.addChild(ag);
                        af++;
                        ae += 2;
                        Y = 1
                    }
                    break;
                case 2:
                    switch (am) {
                        case 33:
                            if (ai.charCodeAt(ae + 1) == 91) {
                                ae += 2;
                                if (B.substr(ai, ae, 6).toUpperCase() != "CDATA[") {
                                    throw "Expected <![CDATA["
                                }
                                ae += 5;
                                Y = 17;
                                X = ae + 1
                            } else {
                                if (ai.charCodeAt(ae + 1) == 68 || ai.charCodeAt(ae + 1) == 100) {
                                    if (B.substr(ai, ae + 2, 6).toUpperCase() != "OCTYPE") {
                                        throw "Expected <!DOCTYPE"
                                    }
                                    ae += 8;
                                    Y = 16;
                                    X = ae + 1
                                } else {
                                    if (ai.charCodeAt(ae + 1) != 45 || ai.charCodeAt(ae + 2) != 45) {
                                        throw "Expected <!--"
                                    } else {
                                        ae += 2;
                                        Y = 15;
                                        X = ae + 1
                                    }
                                }
                            }
                            break;
                        case 63:
                            Y = 14;
                            X = ae;
                            break;
                        case 47:
                            if (ab == null) {
                                throw "Expected node name"
                            }
                            X = ae + 1;
                            Y = 0;
                            ah = 10;
                            break;
                        default:
                            Y = 3;
                            X = ae;
                            continue
                    }
                    break;
                case 3:
                    if (!(am >= 97 && am <= 122 || am >= 65 && am <= 90 || am >= 48 && am <= 57 || am == 58 || am == 46 || am == 95 || am == 45)) {
                        if (ae == X) {
                            throw "Expected node name"
                        }
                        W = e.createElement(B.substr(ai, X, ae - X));
                        ab.addChild(W);
                        Y = 0;
                        ah = 4;
                        continue
                    }
                    break;
                case 4:
                    switch (am) {
                        case 47:
                            Y = 11;
                            af++;
                            break;
                        case 62:
                            Y = 9;
                            af++;
                            break;
                        default:
                            Y = 5;
                            X = ae;
                            continue
                    }
                    break;
                case 5:
                    if (!(am >= 97 && am <= 122 || am >= 65 && am <= 90 || am >= 48 && am <= 57 || am == 58 || am == 46 || am == 95 || am == 45)) {
                        var an;
                        if (X == ae) {
                            throw "Expected attribute name"
                        }
                        an = B.substr(ai, X, ae - X);
                        ak = an;
                        if (W.exists(ak)) {
                            throw "Duplicate attribute"
                        }
                        Y = 0;
                        ah = 6;
                        continue
                    }
                    break;
                case 6:
                    switch (am) {
                        case 61:
                            Y = 0;
                            ah = 7;
                            break;
                        default:
                            throw "Expected ="
                    }
                    break;
                case 7:
                    switch (am) {
                        case 34:
                        case 39:
                            Y = 8;
                            X = ae;
                            break;
                        default:
                            throw 'Expected "'
                    }
                    break;
                case 8:
                    if (am == ai.charCodeAt(X)) {
                        var ao = B.substr(ai, X + 1, ae - X - 1);
                        W.set(ak, ao);
                        Y = 0;
                        ah = 4
                    }
                    break;
                case 9:
                    ae = m.xml.Parser.doParse(ai, ae, W);
                    X = ae;
                    Y = 1;
                    break;
                case 11:
                    switch (am) {
                        case 62:
                            Y = 1;
                            break;
                        default:
                            throw "Expected >"
                    }
                    break;
                case 12:
                    switch (am) {
                        case 62:
                            if (af == 0) {
                                ab.addChild(e.createPCData(""))
                            }
                            return ae;
                        default:
                            throw "Expected >"
                    }
                    break;
                case 10:
                    if (!(am >= 97 && am <= 122 || am >= 65 && am <= 90 || am >= 48 && am <= 57 || am == 58 || am == 46 || am == 95 || am == 45)) {
                        if (X == ae) {
                            throw "Expected node name"
                        }
                        var ac = B.substr(ai, X, ae - X);
                        if (ac != ab.get_nodeName()) {
                            throw "Expected </" + ab.get_nodeName() + ">"
                        }
                        Y = 0;
                        ah = 12;
                        continue
                    }
                    break;
                case 15:
                    if (am == 45 && ai.charCodeAt(ae + 1) == 45 && ai.charCodeAt(ae + 2) == 62) {
                        ab.addChild(e.createComment(B.substr(ai, X, ae - X)));
                        ae += 2;
                        Y = 1
                    }
                    break;
                case 16:
                    if (am == 91) {
                        Z++
                    } else {
                        if (am == 93) {
                            Z--
                        } else {
                            if (am == 62 && Z == 0) {
                                ab.addChild(e.createDocType(B.substr(ai, X, ae - X)));
                                Y = 1
                            }
                        }
                    }
                    break;
                case 14:
                    if (am == 63 && ai.charCodeAt(ae + 1) == 62) {
                        ae++;
                        var q = B.substr(ai, X + 1, ae - X - 2);
                        ab.addChild(e.createProcessingInstruction(q));
                        Y = 1
                    }
                    break;
                case 18:
                    if (am == 59) {
                        var ad = B.substr(ai, X, ae - X);
                        if (ad.charCodeAt(0) == 35) {
                            var aj;
                            if (ad.charCodeAt(1) == 120) {
                                aj = A.parseInt("0" + B.substr(ad, 1, ad.length - 1))
                            } else {
                                aj = A.parseInt(B.substr(ad, 1, ad.length - 1))
                            }
                            al.add(String.fromCharCode(aj))
                        } else {
                            if (!m.xml.Parser.escapes.exists(ad)) {
                                al.b += A.string("&" + ad + ";")
                            } else {
                                al.add(m.xml.Parser.escapes.get(ad))
                            }
                        }
                        X = ae + 1;
                        Y = ah
                    }
                    break
            }
            am = O.fastCodeAt(ai, ++ae)
        }
        if (Y == 1) {
            X = ae;
            Y = 13
        }
        if (Y == 13) {
            if (ae != X || af == 0) {
                ab.addChild(e.createPCData(al.b + B.substr(ai, X, ae - X)))
            }
            return ae
        }
        throw "Unexpected end"
    };
    var P = {};
    P.geom = {};
    P.geom.Point = function(W, q) {
        if (W == null) {
            this.x = 0
        } else {
            this.x = W
        }
        if (q == null) {
            this.y = 0
        } else {
            this.y = q
        }
    };
    p["haxeLib.geom.Point"] = P.geom.Point;
    P.geom.Point.__name__ = ["haxeLib", "geom", "Point"];
    P.geom.Point.distance = function(Y, X) {
        var W = Y.x - X.x;
        var q = Y.y - X.y;
        return Math.sqrt(W * W + q * q)
    };
    P.geom.Point.interpolate = function(X, W, q) {
        return new P.geom.Point(W.x + q * (X.x - W.x), W.y + q * (X.y - W.y))
    };
    P.geom.Point.polar = function(q, W) {
        return new P.geom.Point(q * Math.cos(W), q * Math.sin(W))
    };
    P.geom.Point.prototype = {
        add: function(q) {
            return new P.geom.Point(q.x + this.x, q.y + this.y)
        },
        clone: function() {
            return new P.geom.Point(this.x, this.y)
        },
        equals: function(q) {
            return q.x == this.x && q.y == this.y
        },
        get_length: function() {
            return Math.sqrt(this.x * this.x + this.y * this.y)
        },
        normalize: function(W) {
            if (this.x == 0 && this.y == 0) {
                this.x = W
            } else {
                var q = W / Math.sqrt(this.x * this.x + this.y * this.y);
                this.x *= q;
                this.y *= q
            }
        },
        offset: function(W, q) {
            this.x += W;
            this.y += q
        },
        subtract: function(q) {
            return new P.geom.Point(this.x - q.x, this.y - q.y)
        },
        __class__: P.geom.Point,
        __properties__: {
            get_length: "get_length"
        }
    };
    P.geom.Rectangle = function(Y, X, q, W) {
        if (W == null) {
            W = 0
        }
        if (q == null) {
            q = 0
        }
        if (X == null) {
            X = 0
        }
        if (Y == null) {
            Y = 0
        }
        this.x = Y;
        this.y = X;
        this.width = q;
        this.height = W
    };
    p["haxeLib.geom.Rectangle"] = P.geom.Rectangle;
    P.geom.Rectangle.__name__ = ["haxeLib", "geom", "Rectangle"];
    P.geom.Rectangle.prototype = {
        get_left: function() {
            return this.x
        },
        set_left: function(q) {
            this.width -= q - this.x;
            this.x = q;
            return q
        },
        get_right: function() {
            return this.x + this.width
        },
        set_right: function(q) {
            this.width = q - this.x;
            return q
        },
        get_top: function() {
            return this.y
        },
        set_top: function(q) {
            this.height -= q - this.y;
            this.y = q;
            return q
        },
        get_bottom: function() {
            return this.y + this.height
        },
        set_bottom: function(q) {
            this.height = q - this.y;
            return q
        },
        get_topLeft: function() {
            return new P.geom.Point(this.x, this.y)
        },
        set_topLeft: function(q) {
            this.x = q.x;
            this.y = q.y;
            return q.clone()
        },
        get_size: function() {
            return new P.geom.Point(this.width, this.height)
        },
        set_size: function(q) {
            this.width = q.x;
            this.height = q.y;
            return q.clone()
        },
        get_bottomRight: function() {
            return new P.geom.Point(this.x + this.width, this.y + this.height)
        },
        set_bottomRight: function(q) {
            this.width = q.x - this.x;
            this.height = q.y - this.y;
            return q.clone()
        },
        clone: function() {
            return new P.geom.Rectangle(this.x, this.y, this.width, this.height)
        },
        contains: function(W, q) {
            return W >= this.x && q >= this.y && W < this.get_right() && q < this.get_bottom()
        },
        containsPoint: function(q) {
            return this.contains(q.x, q.y)
        },
        containsRect: function(q) {
            return this.contains(q.x, q.y) && this.containsPoint(q.get_bottomRight())
        },
        equals: function(q) {
            return this.x == q.x && this.y == q.y && this.width == q.width && this.height == q.height
        },
        inflate: function(W, q) {
            this.x -= W;
            this.width += W * 2;
            this.y -= q;
            this.height += q * 2
        },
        inflatePoint: function(q) {
            this.inflate(q.x, q.y)
        },
        intersection: function(q) {
            var X;
            if (this.x < q.x) {
                X = q.x
            } else {
                X = this.x
            }
            var W;
            if (this.get_right() > q.get_right()) {
                W = q.get_right()
            } else {
                W = this.get_right()
            }
            if (W <= X) {
                return new P.geom.Rectangle()
            }
            var Z;
            if (this.y < q.y) {
                Z = q.y
            } else {
                Z = this.y
            }
            var Y;
            if (this.get_bottom() > q.get_bottom()) {
                Y = q.get_bottom()
            } else {
                Y = this.get_bottom()
            }
            if (Y <= Z) {
                return new P.geom.Rectangle()
            }
            return new P.geom.Rectangle(X, Z, W - X, Y - Z)
        },
        intersects: function(q) {
            var X;
            if (this.x < q.x) {
                X = q.x
            } else {
                X = this.x
            }
            var W;
            if (this.get_right() > q.get_right()) {
                W = q.get_right()
            } else {
                W = this.get_right()
            }
            if (W <= X) {
                return false
            }
            var Z;
            if (this.y < q.y) {
                Z = q.y
            } else {
                Z = this.y
            }
            var Y;
            if (this.get_bottom() > q.get_bottom()) {
                Y = q.get_bottom()
            } else {
                Y = this.get_bottom()
            }
            return Y > Z
        },
        union: function(q) {
            var X;
            if (this.x > q.x) {
                X = q.x
            } else {
                X = this.x
            }
            var W;
            if (this.get_right() < q.get_right()) {
                W = q.get_right()
            } else {
                W = this.get_right()
            }
            var Z;
            if (this.y > q.y) {
                Z = q.y
            } else {
                Z = this.y
            }
            var Y;
            if (this.get_bottom() < q.get_bottom()) {
                Y = q.get_bottom()
            } else {
                Y = this.get_bottom()
            }
            return new P.geom.Rectangle(X, Z, W - X, Y - Z)
        },
        isEmpty: function() {
            return this.width == 0 && this.height == 0
        },
        offset: function(W, q) {
            this.x += W;
            this.y += q
        },
        offsetPoint: function(q) {
            this.x += q.x;
            this.y += q.y
        },
        setEmpty: function() {
            this.x = this.y = this.width = this.height = 0
        },
        extendBounds: function(X) {
            var W = this.x - X.x;
            if (W > 0) {
                this.x -= W;
                this.width += W
            }
            var q = this.y - X.y;
            if (q > 0) {
                this.y -= q;
                this.height += q
            }
            if (X.get_right() > this.get_right()) {
                this.set_right(X.get_right())
            }
            if (X.get_bottom() > this.get_bottom()) {
                this.set_bottom(X.get_bottom())
            }
        },
        __class__: P.geom.Rectangle,
        __properties__: {
            set_bottomRight: "set_bottomRight",
            get_bottomRight: "get_bottomRight",
            set_size: "set_size",
            get_size: "get_size",
            set_topLeft: "set_topLeft",
            get_topLeft: "get_topLeft",
            set_bottom: "set_bottom",
            get_bottom: "get_bottom",
            set_top: "set_top",
            get_top: "get_top",
            set_right: "set_right",
            get_right: "get_right",
            set_left: "set_left",
            get_left: "get_left"
        }
    };
    P.graphics = {};
    P.graphics.ICanvas = function() {};
    p["haxeLib.graphics.ICanvas"] = P.graphics.ICanvas;
    P.graphics.ICanvas.__name__ = ["haxeLib", "graphics", "ICanvas"];
    P.graphics.ICanvas.prototype = {
        __class__: P.graphics.ICanvas
    };
    P.graphics.HtmlCanvas = function(X, q) {
        this._childIdCount = 0;
        var W = window.document;
        this._canvas = W.createElement("canvas");
        if (X != null) {
            this._id = X;
            this._tag = W.getElementById(X);
            this._tag.appendChild(this._canvas)
        } else {
            if (q != null) {
                q.appendChild(this._canvas)
            }
        }
        this._context = this._canvas.getContext("2d");
        this._strokeStyle = this.constructColor(0);
        this._fillStyle = "rgba(255, 255, 255, 0)";
        this._lineWidth = 1;
        this._alpha = 1;
        this._x = 0;
        this._y = 0;
        this._context.lineWidth = this._lineWidth;
        this._context.fillStyle = this._fillStyle;
        this._context.strokeStyle = this._strokeStyle;
        this._context.beginPath()
    };
    p["haxeLib.graphics.HtmlCanvas"] = P.graphics.HtmlCanvas;
    P.graphics.HtmlCanvas.__name__ = ["haxeLib", "graphics", "HtmlCanvas"];
    P.graphics.HtmlCanvas.__interfaces__ = [P.graphics.ICanvas];
    P.graphics.HtmlCanvas.prototype = {
        getType: function() {
            return "HtmlCanvas"
        },
        setPosition: function(q) {
            this._x = q.x;
            this._y = q.y
        },
        getPosition: function() {
            return new P.geom.Point(this._x, this._y)
        },
        set_globalAlpha: function(q) {
            this._context.globalAlpha = q;
            return q
        },
        set_shadowBlur: function(q) {
            this._context.shadowBlur = q;
            return q
        },
        set_shadowColor: function(q) {
            this._context.shadowColor = this.constructColor(q, 1);
            return q
        },
        setLineColor: function(q) {
            this._context.stroke();
            this._color = q;
            this._strokeStyle = this.constructColor(this._color, this._alpha);
            this._context.strokeStyle = this._strokeStyle;
            this._context.beginPath()
        },
        setAlpha: function(q) {
            if (q == null) {
                q = 1
            }
            this._context.stroke();
            this._alpha = q;
            this._strokeStyle = this.constructColor(this._color, this._alpha);
            this._context.strokeStyle = this._strokeStyle;
            this._context.beginPath()
        },
        getLineThickness: function() {
            return this._lineWidth
        },
        setLineThickness: function(q) {
            this._context.stroke();
            this._lineWidth = q;
            if (this._lineWidth == 0) {
                this._context.lineWidth = 0.001
            } else {
                this._context.lineWidth = this._lineWidth
            }
            this._context.beginPath()
        },
        getWidth: function() {
            return this._canvas.width
        },
        getHeight: function() {
            return this._canvas.height
        },
        setWidth: function(q) {
            this._canvas.width = q;
            this._context = this._canvas.getContext("2d")
        },
        setHeight: function(q) {
            this._canvas.height = q;
            this._context = this._canvas.getContext("2d")
        },
        constructColor: function(W, Z) {
            if (Z == null) {
                Z = 1
            }
            if (W == null) {
                W = 0
            }
            var Y = W >> 16 & 255;
            var X = W >> 8 & 255;
            var q = W & 255;
            return "rgba(" + (Y == null ? "null" : "" + Y) + "," + (X == null ? "null" : "" + X) + "," + (q == null ? "null" : "" + q) + "," + (Z == null ? "null" : "" + Z) + ")"
        },
        beginFill: function(q, W) {
            if (W == null) {
                W = 1
            }
            if (q == null) {
                q = 0
            }
            this._context.stroke();
            this._fillStyle = this.constructColor(q, W);
            this._context.fillStyle = this._fillStyle;
            if (this._lineWidth == 0) {
                this._context.lineWidth = 0.001
            } else {
                this._context.lineWidth = this._lineWidth
            }
            this._context.strokeStyle = this.constructColor(this._color, W);
            this._context.beginPath()
        },
        endFill: function() {
            this._context.fill()
        },
        clear: function() {
            this._context.beginPath();
            this._context.clearRect(0, 0, this._canvas.width, this._canvas.height)
        },
        moveTo: function(q, Y) {
            var W = Math.floor(q) + this._getAntiAliasingOffset();
            var X = Math.floor(Y) + this._getAntiAliasingOffset();
            this._context.moveTo(W, X)
        },
        lineTo: function(q, Y) {
            var W = Math.floor(q) + this._getAntiAliasingOffset();
            var X = Math.floor(Y) + this._getAntiAliasingOffset();
            this._context.lineTo(W, X)
        },
        dasedLine: function(Y, ae, X, ad, ab) {
            if (ab == null) {
                ab = 5
            }
            this.moveTo(Y, ae);
            var aa = X - Y;
            var Z = ad - ae;
            var ac = Math.floor(Math.sqrt(aa * aa + Z * Z) / ab);
            var ag = aa / ac;
            var af = Z / ac;
            var W = 0;
            while (W++ < ac) {
                Y += ag;
                ae += af;
                if (W % 2 == 0) {
                    this.moveTo(Y, ae)
                } else {
                    this.lineTo(Y, ae)
                }
            }
            if (W % 2 == 0) {
                this.moveTo(X, ad)
            } else {
                this.lineTo(X, ad)
            }
        },
        curveTo: function(X, W, q, Y) {
            this._context.quadraticCurveTo(X, W, q, Y)
        },
        cubicCurveTo: function(X, W, Z, Y, q, aa) {
            this._context.bezierCurveTo(X, W, Z, Y, q, aa)
        },
        drawCircle: function(W, X, q) {
            this._context.stroke();
            this._context.beginPath();
            this._context.arc(W, X, q, 0, Math.PI * 2, true)
        },
        drawRect: function(q, Y, W, X) {
            this._context.rect(q, Y, W, X)
        },
        drawRoundRect: function(q, aa, W, X, Z, Y) {
            this._context.beginPath();
            this._context.moveTo(q + Z, aa);
            this._context.lineTo(q + W - Z, aa);
            this._context.quadraticCurveTo(q + W, aa, q + W, aa + Y);
            this._context.lineTo(q + W, aa + X - Y);
            this._context.quadraticCurveTo(q + W, aa + X, q + W - Z, aa + X);
            this._context.lineTo(q + Z, aa + X);
            this._context.quadraticCurveTo(q, aa + X, q, aa + X - Y);
            this._context.lineTo(q, aa + Y);
            this._context.quadraticCurveTo(q, aa, q + Z, aa);
            this._context.closePath()
        },
        getFont: function() {
            return this._context.font
        },
        setFont: function(q) {
            this._context.stroke();
            this._context.font = q;
            return this._context.font
        },
        getTextBaseline: function() {
            return this._context.textBaseline
        },
        setTextBaseline: function(q) {
            this._context.textBaseline = q;
            return this._context.textBaseLine
        },
        getTextAlign: function() {
            return this._context.textAlign
        },
        setTextAlign: function(q) {
            this._context.textAlign = q;
            return this._context.textAlign
        },
        applyTextFormat: function(q) {
            this._context.textBaseline = "top";
            this._context.textAlign = q.align;
            this._context.fillStyle = this._hexColor(q.color);
            if (q.font != null) {
                this._context.font = q.font
            } else {
                this._context.font = (q.italic ? "italic" : q.bold ? "bold" : "normal") + " " + q.size + "px " + q.fontName
            }
        },
        restoreTextFormat: function() {
            this._context.textBaseline = "top";
            this._context.textAlign = "left"
        },
        drawText: function(aa, Z, q, ab) {
            var Y = this.getTextBounds(aa, Z);
            this.applyTextFormat(Z);
            var W = Math.floor(q) + this._getAntiAliasingOffset();
            var X = Math.floor(ab) + this._getAntiAliasingOffset();
            if (Z.background) {
                this.drawTextBackground(aa, Z, W, X)
            }
            this._context.fillText(aa, W, X);
            this.restoreTextFormat();
            return Y
        },
        drawTextBackground: function(Y, X, q, Z) {
            var W = this.getTextBounds(Y, X);
            this._context.fillStyle = this._hexColor(X.backgroundColor);
            this._context.fillRect(q - (X.align == "center" ? W.width / 2 : 0) - X.backgroundOffset, Z + W.height / 2 - X.backgroundOffset, W.width + X.backgroundOffset * 2, X.backgroundOffset * 2);
            this._context.fillStyle = this._hexColor(X.color)
        },
        getTextBounds: function(X, W) {
            this._context.save();
            this.applyTextFormat(W);
            var q = this._context.measureText(X);
            this._context.restore();
            return new P.geom.Rectangle(0, 0, q.width, W.size * 1.1)
        },
        createChild: function() {
            this._childIdCount++;
            var q = new P.graphics.HtmlCanvas();
            return q
        },
        draw: function(X, q, Y) {
            var W = X;
            this._context.globalAlpha = this._alpha;
            this._context.drawImage(W._canvas, Math.floor(q), Math.floor(Y));
            this._context.globalAlpha = 1
        },
        drawImage: function(W, X) {
            var q = W;
            this._context.drawImage(q.image, Math.floor(X.x), Math.floor(X.y), X.width, X.height)
        },
        scale: function(W, q) {
            this._context.scale(W, q)
        },
        drawSvgPath: function(Z, q, aa, X, W) {
            if (W == null) {
                W = 1
            }
            if (X == null) {
                X = 1
            }
            var Y = new P.graphics.SvgPathPainter(Z, q, aa, X, W, this._getAntiAliasingOffset());
            Y.draw(this);
            Y = null
        },
        flush: function() {
            this._context.stroke()
        },
        dispose: function() {
            if (this._tag != null) {
                this._tag.innerHTML = "";
                if (this._removeTagOnDispose && this._tag.parentNode != null) {
                    this._tag.parentNode.removeChild(this._tag)
                }
            }
        },
        getContext: function() {
            return this._context
        },
        getElement: function() {
            return this._canvas
        },
        _hexColor: function(q) {
            return "#" + (function(X) {
                var W;
                var Y = O.hex(q, 8);
                W = B.substr(Y, 2, null);
                return W
            }(this))
        },
        _getAntiAliasingOffset: function() {
            if (this._context.lineWidth % 2 != 0) {
                return 0.5
            } else {
                return 0
            }
        },
        toDataURL: function() {
            return this._canvas.toDataURL()
        },
        __class__: P.graphics.HtmlCanvas,
        __properties__: {
            set_shadowColor: "set_shadowColor",
            set_shadowBlur: "set_shadowBlur",
            set_globalAlpha: "set_globalAlpha"
        }
    };
    P.graphics.IImage = function() {};
    p["haxeLib.graphics.IImage"] = P.graphics.IImage;
    P.graphics.IImage.__name__ = ["haxeLib", "graphics", "IImage"];
    P.graphics.IImage.prototype = {
        __class__: P.graphics.IImage
    };
    P.graphics.JsImage = function(q) {
        this.image = q
    };
    p["haxeLib.graphics.JsImage"] = P.graphics.JsImage;
    P.graphics.JsImage.__name__ = ["haxeLib", "graphics", "JsImage"];
    P.graphics.JsImage.__interfaces__ = [P.graphics.IImage];
    P.graphics.JsImage.prototype = {
        get_width: function() {
            return this.image.width
        },
        get_height: function() {
            return this.image.height
        },
        set_width: function(q) {
            this.image.width = q;
            return q
        },
        set_height: function(q) {
            this.image.height = q;
            return q
        },
        getUrl: function() {
            return this.image.src
        },
        __class__: P.graphics.JsImage,
        __properties__: {
            set_height: "set_height",
            get_height: "get_height",
            set_width: "set_width",
            get_width: "get_width"
        }
    };
    P.graphics.SvgCanvas = function(W) {
        var q = window.document;
        this._domElem = q.getElementById(W);
        this._root = e.createElement("svg");
        this._root.set("xmlns", "http://www.w3.org/2000/svg");
        this._currentPath = new P.utils.StringBuilder();
        this._currentPathIsEmpty = true;
        this._strokeStyle = "black";
        this._fillStyle = "none";
        this._lineWidth = 1;
        this._width = 0;
        this._height = 0;
        this._x = 0;
        this._y = 0;
        this._fontName = "sans-serif";
        this._textBaseline = "alphabetic";
        this._textAlign = "left";
        this._alpha = 1;
        this._scaleX = 1;
        this._scaleY = 1
    };
    p["haxeLib.graphics.SvgCanvas"] = P.graphics.SvgCanvas;
    P.graphics.SvgCanvas.__name__ = ["haxeLib", "graphics", "SvgCanvas"];
    P.graphics.SvgCanvas.__interfaces__ = [P.graphics.ICanvas];
    P.graphics.SvgCanvas.getElemBounds = function(W) {
        var q = W.getBBox();
        return new P.geom.Rectangle(q.x, q.y, q.width, q.height)
    };
    P.graphics.SvgCanvas.prototype = {
        getType: function() {
            return "SvgCanvas"
        },
        flushPath: function() {
            if (!this._currentPathIsEmpty) {
                var q = e.createElement("path");
                q.set("style", this.constructStyle().toString());
                q.set("transform", this.constructScale());
                q.set("d", this._currentPath._buffer.join(""));
                this._root.addChild(q);
                this._currentPath = new P.utils.StringBuilder();
                this._currentPathIsEmpty = true
            }
        },
        setLineColor: function(q) {
            this.flushPath();
            this._color = q;
            this._strokeStyle = "#" + (function(X) {
                var W;
                var Y = O.hex(q, 8);
                W = B.substr(Y, 2, null);
                return W
            }(this))
        },
        setAlpha: function(q) {
            if (q == null) {
                q = 1
            }
            this._alpha = q
        },
        getLineThickness: function() {
            return this._lineWidth
        },
        setLineThickness: function(q) {
            this.flushPath();
            this._lineWidth = q
        },
        clear: function() {
            this._root = e.createElement("svg");
            this._root.set("xmlns", "http://www.w3.org/2000/svg");
            this._root.set("width", A.string(this._width));
            this._root.set("height", A.string(this._height));
            this._currentPath = new P.utils.StringBuilder();
            this._currentPathIsEmpty = true
        },
        constructStyle: function() {
            var q = new P.utils.StringBuilder();
            q.add("fill:");
            q.add(this._fillStyle);
            if (this._alpha < 1) {
                q.add("; opacity: " + A.string(1 - this._alpha))
            }
            q.add("; stroke:");
            q.add(this._strokeStyle);
            q.add("; stroke-width:");
            q.add(this._lineWidth);
            q.add(";");
            return q
        },
        constructFont: function(X) {
            var q = new P.utils.StringBuilder();
            var W = "";
            if (X.font != null) {
                W = X.font
            } else {
                W = (X.italic ? "italic" : X.bold ? "bold" : "normal") + " " + X.size + "px " + X.fontName
            }
            q.add("font: " + W + ";");
            q.add("text-anchor: start;");
            q.add("fill: #" + (function(Z) {
                var Y;
                var aa = O.hex(X.color, 8);
                Y = B.substr(aa, 2, null);
                return Y
            }(this)));
            return q
        },
        constructScale: function() {
            return "scale(" + A.string(this._scaleX) + "," + A.string(this._scaleY) + ")"
        },
        closePath: function() {
            this._currentPath.add(" z")
        },
        moveTo: function(q, W) {
            if (q < 1) {
                q = 1
            } else {
                q = q
            }
            if (W < 1) {
                W = 1
            } else {
                W = W
            }
            this._currentPath.add(" M");
            this._currentPath.add(Math.floor(q));
            this._currentPath.add(",");
            this._currentPath.add(Math.floor(W))
        },
        lineTo: function(q, W) {
            if (q < 1) {
                q = 1
            } else {
                q = q
            }
            if (W < 1) {
                W = 1
            } else {
                W = W
            }
            this._currentPathIsEmpty = false;
            this._currentPath.add(" L");
            this._currentPath.add(Math.floor(q));
            this._currentPath.add(",");
            this._currentPath.add(Math.floor(W))
        },
        dasedLine: function(X, Z, W, Y, q) {
            if (q == null) {
                q = 5
            }
            this.moveTo(X, Z);
            this.lineTo(W, Y)
        },
        curveTo: function(X, W, q, Y) {
            this._currentPathIsEmpty = false;
            this._currentPath.add(" Q");
            this._currentPath.add(Math.floor(X));
            this._currentPath.add(",");
            this._currentPath.add(Math.floor(W));
            this._currentPath.add(",");
            this._currentPath.add(Math.floor(q));
            this._currentPath.add(",");
            this._currentPath.add(Math.floor(Y))
        },
        cubicCurveTo: function(X, W, Z, Y, q, aa) {
            this._currentPathIsEmpty = false;
            this._currentPath.add(" C");
            this._currentPath.add(X);
            this._currentPath.add(",");
            this._currentPath.add(W);
            this._currentPath.add(",");
            this._currentPath.add(Z);
            this._currentPath.add(",");
            this._currentPath.add(Y);
            this._currentPath.add(",");
            this._currentPath.add(q);
            this._currentPath.add(",");
            this._currentPath.add(aa)
        },
        drawCircle: function(W, X, q) {
            this._currentPathIsEmpty = false;
            this._currentPath.add(" M");
            this._currentPath.add(W - q);
            this._currentPath.add(",");
            this._currentPath.add(X);
            this._currentPath.add(" A1,1 0 0,0 ");
            this._currentPath.add(W + q);
            this._currentPath.add(",");
            this._currentPath.add(X);
            this._currentPath.add(" A1,1 0 0,0 ");
            this._currentPath.add(W - q);
            this._currentPath.add(",");
            this._currentPath.add(X);
            this._currentPath.add(" z")
        },
        drawRect: function(q, Y, W, X) {
            this._currentPathIsEmpty = false;
            this._currentPath.add(" M");
            this._currentPath.add(q);
            this._currentPath.add(",");
            this._currentPath.add(Y);
            this._currentPath.add(" L");
            this._currentPath.add(q + W);
            this._currentPath.add(",");
            this._currentPath.add(Y);
            this._currentPath.add(" ");
            this._currentPath.add(q + W);
            this._currentPath.add(",");
            this._currentPath.add(Y + X);
            this._currentPath.add(" ");
            this._currentPath.add(q);
            this._currentPath.add(",");
            this._currentPath.add(Y + X);
            this._currentPath.add(" z")
        },
        drawRoundRect: function(q, aa, W, X, Z, Y) {
            this.drawRect(q, aa, W, X)
        },
        beginFill: function(q, W) {
            if (W == null) {
                W = 1
            }
            if (q == null) {
                q = 0
            }
            this.flushPath();
            this._fillStyle = "#" + (function(Y) {
                var X;
                var Z = O.hex(q, 8);
                X = B.substr(Z, 2, null);
                return X
            }(this));
            this._fillColor = q;
            this._alpha = W
        },
        endFill: function() {
            this.flushPath();
            this._fillStyle = "none";
            this._alpha = 1
        },
        drawText: function(Z, X, q, aa) {
            this.flushPath();
            this._fontName = X.font;
            this._fontSize = X.size;
            var Y = this.createTextElement(Z, X);
            Y.set("x", q == null ? "null" : "" + q);
            Y.set("y", aa == null ? "null" : "" + aa);
            if (X.background) {
                var W = this.getTextBounds(Z, X);
                this.beginFill(X.backgroundColor, 1);
                this.setLineThickness(0);
                this.drawRect(q - (X.align == "center" ? W.width / 2 : 0) - X.backgroundOffset, aa + W.height / 2 - X.backgroundOffset, W.width + X.backgroundOffset * 2, X.backgroundOffset * 2);
                this.endFill()
            }
            this._root.addChild(Y);
            return this.getTextBounds(Z, X)
        },
        constructTranslate: function(q, W) {
            return "translate(" + A.string(Math.floor(q) + 0.5) + "," + A.string(Math.floor(W) + 0.5) + ")"
        },
        draw: function(X, q, Z) {
            this.flushPath();
            var W = e.createElement("g");
            W.set("transform", this.constructScale() + " " + this.constructTranslate(q, Z));
            var Y = X;
            Y._root.set("style", "opacity: " + A.string(this._alpha));
            W.addChild(Y._root);
            this._root.addChild(W)
        },
        drawSvgPath: function(aa, q, ab, Y, X) {
            if (X == null) {
                X = 1
            }
            if (Y == null) {
                Y = 1
            }
            this.flushPath();
            var Z = e.createElement("path");
            var W;
            W = "translate(" + (q == null ? "null" : "" + q) + ", " + (ab == null ? "null" : "" + ab) + ") ";
            W += "scale(" + (Y == null ? "null" : "" + Y) + "," + (X == null ? "null" : "" + X) + ")";
            Z.set("transform", W);
            Z.set("style", this.constructStyle().toString());
            Z.set("d", aa);
            this._root.addChild(Z)
        },
        drawImage: function(X, Y) {
            this.flushPath();
            var q = e.createElement("image");
            q.set("xlink:href", X.getUrl());
            q.set("x", Y.x == null ? "null" : "" + Y.x);
            q.set("y", Y.y == null ? "null" : "" + Y.y);
            q.set("width", Y.width == null ? "null" : "" + Y.width);
            q.set("height", Y.height == null ? "null" : "" + Y.height);
            var W = this.constructScale();
            q.set("transform", W);
            this._root.addChild(q)
        },
        scale: function(W, q) {
            this.flushPath();
            this._scaleX = W;
            this._scaleY = q
        },
        flush: function() {
            this.flushPath();
            if (this._domElem != null) {
                this._domElem.innerHTML = this._root.toString();
                P.graphics.SvgCanvas._tempSvg = null
            }
        },
        createTextElement: function(aa, X) {
            var q = this.constructFont(X);
            var Z = e.createElement("text");
            Z.set("style", q._buffer.join(""));
            Z.set("transform", this.constructScale());
            var W = e.createElement("tspan");
            W.set("dy", X.size == null ? "null" : "" + X.size);
            var Y = e.createCData(aa);
            W.addChild(Y);
            Z.addChild(W);
            return Z
        },
        getTextBounds: function(ab, aa) {
            var Z = window.document;
            var X = "http://www.w3.org/2000/svg";
            var W = "font-size: " + A.string(Math.floor(aa.size)) + "px;";
            if (P.graphics.SvgCanvas._tempSvg == null) {
                P.graphics.SvgCanvas._tempSvg = Z.createElementNS(X, "svg");
                this._domElem.appendChild(P.graphics.SvgCanvas._tempSvg)
            }
            var q = Z.createElementNS(X, "text");
            P.graphics.SvgCanvas._tempSvg.appendChild(q);
            if (aa.font != null && aa.font.length > 0) {
                W += "font-family: " + aa.font + ";"
            }
            q.setAttribute("style", W);
            q.textContent = ab;
            var Y = P.graphics.SvgCanvas.getElemBounds(q);
            P.graphics.SvgCanvas._tempSvg.removeChild(q);
            Y.height = aa.size * 1.1;
            return Y
        },
        setWidth: function(q) {
            this._width = q;
            this._root.set("width", this._width + "px")
        },
        setHeight: function(q) {
            this._height = q;
            this._root.set("height", this._height + "px")
        },
        getWidth: function() {
            return this._width
        },
        getHeight: function() {
            return this._height
        },
        dispose: function() {
            this._domElem.innerHTML = " ";
            P.graphics.SvgCanvas._tempSvg = null
        },
        createChild: function() {
            return new P.graphics.SvgCanvas(this._domElem.id)
        },
        setPosition: function(q) {
            this._x = q.x;
            this._y = q.y
        },
        getPosition: function() {
            return new P.geom.Point(this._x, this._y)
        },
        getHtml: function() {
            return this._domElem.innerHTML
        },
        __class__: P.graphics.SvgCanvas
    };
    P.graphics.SvgPathPainter = function(Z, q, aa, Y, X, W) {
        if (W == null) {
            W = 0
        }
        if (X == null) {
            X = 1
        }
        if (Y == null) {
            Y = 1
        }
        this._svg = Z;
        if (W != 0) {
            this._x = Math.floor(q) + W
        } else {
            this._x = q
        }
        if (W != 0) {
            this._y = Math.floor(aa) + W
        } else {
            this._y = aa
        }
        this._xScale = Y * 0.98;
        this._yScale = X * 0.98;
        this._currentPosition = new P.geom.Point(q, aa);
        Z = Z.split(",").join(" ");
        this._token = Z.split(" ");
        this._currentIndex = 0
    };
    p["haxeLib.graphics.SvgPathPainter"] = P.graphics.SvgPathPainter;
    P.graphics.SvgPathPainter.__name__ = ["haxeLib", "graphics", "SvgPathPainter"];
    P.graphics.SvgPathPainter.prototype = {
        draw: function(q) {
            while (this._currentIndex < this._token.length) {
                this.parseCommand(q)
            }
        },
        parseCommand: function(Z) {
            var aa = this.getString();
            switch (aa) {
                case "M":
                    this._currentPosition.x = this._x + this.getNumber() * this._xScale;
                    this._currentPosition.y = this._y + this.getNumber() * this._yScale;
                    Z.moveTo(this._currentPosition.x, this._currentPosition.y);
                    break;
                case "m":
                    this._currentPosition.x += this.getNumber() * this._xScale;
                    this._currentPosition.y += this.getNumber() * this._yScale;
                    Z.moveTo(this._currentPosition.x, this._currentPosition.y);
                    break;
                case "z":
                    break;
                case "Z":
                    break;
                case "L":
                    var ax = true;
                    do {
                        this._currentPosition.x = this._x + this.getNumber() * this._xScale;
                        this._currentPosition.y = this._y + this.getNumber() * this._yScale;
                        Z.lineTo(this._currentPosition.x, this._currentPosition.y);
                        ax = !this.isNextCommand()
                    } while (ax);
                    break;
                case "l":
                    var ar = true;
                    do {
                        this._currentPosition.x += this.getNumber() * this._xScale;
                        this._currentPosition.y += this.getNumber() * this._yScale;
                        Z.lineTo(this._currentPosition.x, this._currentPosition.y);
                        ar = !this.isNextCommand()
                    } while (ar);
                    break;
                case "C":
                    var ap = true;
                    do {
                        var an = this._x + this.getNumber() * this._xScale;
                        var Y = this._y + this.getNumber() * this._yScale;
                        var al = this._x + this.getNumber() * this._xScale;
                        var X = this._y + this.getNumber() * this._yScale;
                        var aj = this._x + this.getNumber() * this._xScale;
                        var W = this._y + this.getNumber() * this._yScale;
                        this._currentPosition.x = aj;
                        this._currentPosition.y = W;
                        Z.cubicCurveTo(an, Y, al, X, aj, W);
                        ap = !this.isNextCommand()
                    } while (ap);
                    break;
                case "c":
                    var ao = true;
                    do {
                        var q = this._currentPosition.x + this.getNumber() * this._xScale;
                        var ah = this._currentPosition.y + this.getNumber() * this._yScale;
                        var ae = this._currentPosition.x + this.getNumber() * this._xScale;
                        var au = this._currentPosition.y + this.getNumber() * this._yScale;
                        var ai = this._currentPosition.x + this.getNumber() * this._xScale;
                        var ab = this._currentPosition.y + this.getNumber() * this._yScale;
                        this._currentPosition.x = ai;
                        this._currentPosition.y = ab;
                        Z.cubicCurveTo(q, ah, ae, au, ai, ab);
                        ao = !this.isNextCommand()
                    } while (ao && this._currentIndex < this._token.length);
                    break;
                case "Q":
                    var am = true;
                    do {
                        var aw = this._x + this.getNumber() * this._xScale;
                        var ag = this._y + this.getNumber() * this._yScale;
                        var ad = this._x + this.getNumber() * this._xScale;
                        var at = this._y + this.getNumber() * this._yScale;
                        this._currentPosition.x = ad;
                        this._currentPosition.y = at;
                        Z.curveTo(aw, ag, ad, at);
                        am = !this.isNextCommand()
                    } while (am);
                    break;
                case "q":
                    var ak = true;
                    do {
                        var av = this._currentPosition.x + this.getNumber() * this._xScale;
                        var af = this._currentPosition.y + this.getNumber() * this._yScale;
                        var ac = this._currentPosition.x + this.getNumber() * this._xScale;
                        var aq = this._currentPosition.y + this.getNumber() * this._yScale;
                        this._currentPosition.x = ac;
                        this._currentPosition.y = aq;
                        Z.curveTo(av, af, ac, aq);
                        ak = !this.isNextCommand()
                    } while (ak && this._currentIndex < this._token.length);
                    break
            }
        },
        getNumber: function() {
            return A.parseFloat(this._token[this._currentIndex++])
        },
        isNextCommand: function() {
            var q = this.peekString();
            return q == "m" || q == "M" || q == "c" || q == "C" || q == "q" || q == "Q" || q == "l" || q == "L" || q == "z" || q == "Z"
        },
        peekString: function() {
            return this._token[this._currentIndex]
        },
        peekNumber: function() {
            return A.parseFloat(this._token[this._currentIndex])
        },
        getString: function() {
            return this._token[this._currentIndex++]
        },
        __class__: P.graphics.SvgPathPainter
    };
    P.graphics.TextFormat = function() {
        this.bold = false;
        this.italic = false;
        this.size = 10;
        this.fontName = "Arial";
        this.background = false;
        this.backgroundColor = 16777215;
        this.backgroundOffset = 0;
        this.align = "left"
    };
    p["haxeLib.graphics.TextFormat"] = P.graphics.TextFormat;
    P.graphics.TextFormat.__name__ = ["haxeLib", "graphics", "TextFormat"];
    P.graphics.TextFormat.prototype = {
        __class__: P.graphics.TextFormat
    };
    P.net = {};
    P.net.BrowserTools = function() {};
    p["haxeLib.net.BrowserTools"] = P.net.BrowserTools;
    P.net.BrowserTools.__name__ = ["haxeLib", "net", "BrowserTools"];
    P.net.BrowserTools.isIE = function() {
        var q = window.navigator.userAgent;
        return q.indexOf("MSIE ") > -1 || q.indexOf("Trident/") > -1
    };
    P.net.BrowserTools.isMac = function() {
        return window.navigator.platform.indexOf("Mac") > -1
    };
    P.net.JsBinaryLoader = function() {};
    p["haxeLib.net.JsBinaryLoader"] = P.net.JsBinaryLoader;
    P.net.JsBinaryLoader.__name__ = ["haxeLib", "net", "JsBinaryLoader"];
    P.net.JsBinaryLoader.StrToBytes = function(X) {
        var W = new Array();
        var q = 0;
        while (q < X.length) {
            W.push(B.cca(X, q) & 255);
            q++
        }
        return m.io.Bytes.ofData(W)
    };
    P.net.JsBinaryLoader.loadBinary = function(ac, Y, ab, X) {
        var aa = h.Browser.createXMLHttpRequest();
        if (typeof aa.overrideMimeType == "undefined") {
            if (P.net.BrowserTools.isIE()) {
                var W = VbAjaxLoader(ac, Y);
                var Z = W.toArray();
                var q = m.io.Bytes.ofData(Z);
                ab(q)
            }
        } else {
            aa.overrideMimeType("text/plain; charset=x-user-defined");
            aa.onreadystatechange = function(ae) {
                if (aa.readyState != 4) {
                    return
                }
                var ad = null;
                if (aa.status == 200) {
                    ab(P.net.JsBinaryLoader.StrToBytes(aa.responseText))
                } else {
                    if (aa.status == 0) {
                        X(new P.net.LoaderStatus(aa.status, "You are offline!!\n Please Check Your Network."))
                    } else {
                        if (aa.status == 404) {
                            X(new P.net.LoaderStatus(aa.status, "Requested URL not found."))
                        } else {
                            if (aa.status == 500) {
                                X(new P.net.LoaderStatus(aa.status, "Internel Server Error."))
                            } else {
                                if (aa.statusText == "parsererror") {
                                    X(new P.net.LoaderStatus(P.net.LoaderStatus.PARSE_ERROR, "Error.\nParsing JSON Request failed."))
                                } else {
                                    if (aa.statusText == "timeout") {
                                        X(new P.net.LoaderStatus(P.net.LoaderStatus.TIMEOUT, "Request Time out."))
                                    } else {
                                        X(new P.net.LoaderStatus(P.net.LoaderStatus.UNKNOWN, "Unknow Error: " + aa.responseText))
                                    }
                                }
                            }
                        }
                    }
                }
            };
            aa.open(ac, Y, true);
            aa.send(null)
        }
    };
    P.net.JsImageLoader = function() {};
    p["haxeLib.net.JsImageLoader"] = P.net.JsImageLoader;
    P.net.JsImageLoader.__name__ = ["haxeLib", "net", "JsImageLoader"];
    P.net.JsImageLoader.load = function(W, q) {
        var X = window.document.createElement("img");
        X.onload = function(Z) {
            var Y = new P.graphics.JsImage(X);
            if (q != null) {
                q(Y, new P.net.LoaderStatus(P.net.LoaderStatus.OK))
            }
        };
        X.src = W
    };
    P.net.JsImageLoader.prototype = {
        __class__: P.net.JsImageLoader
    };
    P.net.LoaderStatus = function(W, q) {
        this.code = W;
        this.message = q
    };
    p["haxeLib.net.LoaderStatus"] = P.net.LoaderStatus;
    P.net.LoaderStatus.__name__ = ["haxeLib", "net", "LoaderStatus"];
    P.net.LoaderStatus.prototype = {
        __class__: P.net.LoaderStatus
    };
    P.utils = {};
    P.utils.ArrayUtils = function() {};
    p["haxeLib.utils.ArrayUtils"] = P.utils.ArrayUtils;
    P.utils.ArrayUtils.__name__ = ["haxeLib", "utils", "ArrayUtils"];
    P.utils.ArrayUtils.min = function(Y) {
        var W = Y[0];
        var X = 0;
        while (X < Y.length) {
            var q = Y[X];
            ++X;
            if (q < W) {
                W = q
            }
        }
        return W
    };
    P.utils.ArrayUtils.max = function(Y) {
        var q = Y[0];
        var X = 0;
        while (X < Y.length) {
            var W = Y[X];
            ++X;
            if (W > q) {
                q = W
            }
        }
        return q
    };
    P.utils.ArrayUtils.indexesOf = function(Y, aa) {
        var X = new Array();
        var W = 0;
        var Z = 0;
        while (Z < aa.length) {
            var q = aa[Z];
            ++Z;
            if (q == Y) {
                X.push(W)
            }
            W++
        }
        return X
    };
    P.utils.ArrayUtils.cutByIndexes = function(Z, X) {
        var q = new Array();
        var Y = 0;
        while (Y < X.length) {
            var W = X[Y];
            ++Y;
            q.push(Z[W])
        }
        return q
    };
    P.utils.ArrayUtils.isEqual = function(W, q) {
        return W.join("_") == q.join("_")
    };
    P.utils.ArrayUtils.unique = function(q) {
        var W = [];
        var Y = 0;
        while (Y < q.length) {
            var X = q[Y];
            ++Y;
            if (B.indexOf(W, X, 0) == -1) {
                W.push(X)
            }
        }
        return W
    };
    P.utils.ILogger = function() {};
    p["haxeLib.utils.ILogger"] = P.utils.ILogger;
    P.utils.ILogger.__name__ = ["haxeLib", "utils", "ILogger"];
    P.utils.ILogger.prototype = {
        __class__: P.utils.ILogger
    };
    P.utils.TraceLogger = function() {
        this.activeSections = new Array()
    };
    p["haxeLib.utils.TraceLogger"] = P.utils.TraceLogger;
    P.utils.TraceLogger.__name__ = ["haxeLib", "utils", "TraceLogger"];
    P.utils.TraceLogger.__interfaces__ = [P.utils.ILogger];
    P.utils.TraceLogger.prototype = {
        startSection: function(q) {
            this.activeSections.push(q)
        },
        endSection: function() {
            this.activeSections.pop()
        },
        debug: function(q) {
            console.log("js debug: " + q)
        },
        info: function(q) {
            console.log("js info: " + q)
        },
        error: function(q) {
            console.log("js error: " + q)
        },
        sectionHeader: function() {
            return this.activeSections.join("/")
        },
        alert: function(q) {
            h.Lib.alert(this.sectionHeader() + "js alert: " + q)
        },
        log: function(q) {
            console.log(q)
        },
        __class__: P.utils.TraceLogger
    };
    P.utils.Logger = function() {};
    p["haxeLib.utils.Logger"] = P.utils.Logger;
    P.utils.Logger.__name__ = ["haxeLib", "utils", "Logger"];
    P.utils.Logger.debug = function(q) {};
    P.utils.Logger.info = function(q) {
        P.utils.Logger.defaultLogger.info(q)
    };
    P.utils.Logger.error = function(q) {
        P.utils.Logger.defaultLogger.error(q)
    };
    P.utils.Logger.alert = function(q) {
        P.utils.Logger.defaultLogger.alert(q)
    };
    P.utils.Logger.log = function(q) {
        P.utils.Logger.defaultLogger.log(q)
    };
    P.utils.MathUtils = function() {};
    p["haxeLib.utils.MathUtils"] = P.utils.MathUtils;
    P.utils.MathUtils.__name__ = ["haxeLib", "utils", "MathUtils"];
    P.utils.MathUtils.toFixed = function(W, q) {
        if (q == null) {
            q = 0
        }
        return Number(W).toFixed(q)
    };
    P.utils.StringBuilder = function() {
        this._buffer = new Array()
    };
    p["haxeLib.utils.StringBuilder"] = P.utils.StringBuilder;
    P.utils.StringBuilder.__name__ = ["haxeLib", "utils", "StringBuilder"];
    P.utils.StringBuilder.prototype = {
        add: function(q) {
            this._buffer.push(A.string(q))
        },
        addChar: function(q) {
            this._buffer.push(String.fromCharCode(q))
        },
        addSub: function(W, X, q) {
            this._buffer.push(B.substr(W, X, q))
        },
        toString: function() {
            return this._buffer.join("")
        },
        __class__: P.utils.StringBuilder
    };
    P.utils.Time = function(q) {
        if (q == null) {
            q = 0
        }
        this._value = q
    };
    p["haxeLib.utils.Time"] = P.utils.Time;
    P.utils.Time.__name__ = ["haxeLib", "utils", "Time"];
    P.utils.Time.fromMilliSeconds = function(q) {
        return new P.utils.Time(q)
    };
    P.utils.Time.zero = function() {
        return new P.utils.Time(0)
    };
    P.utils.Time.prototype = {
        toMilliSeconds: function() {
            return this._value
        },
        toSeconds: function() {
            return Math.floor(this._value / 1000)
        },
        seconds: function() {
            return this.toSeconds() % 60
        },
        minutes: function() {
            return Math.floor(this.toSeconds() / 60)
        },
        toString: function() {
            var W = A.string(this.minutes());
            if (W.length < 2) {
                W = "0" + W
            } else {
                W = W
            }
            var q = A.string(this.seconds());
            if (q.length < 2) {
                q = "0" + q
            } else {
                q = q
            }
            return W + ":" + q
        },
        addSeconds: function(q) {
            return P.utils.Time.fromMilliSeconds(this._value + q * 1000)
        },
        __class__: P.utils.Time
    };
    var E = {};
    E.InputStream = function() {};
    p["io.InputStream"] = E.InputStream;
    E.InputStream.__name__ = ["io", "InputStream"];
    E.InputStream.prototype = {
        readByte: function() {
            return 0
        },
        readChar: function() {
            return String.fromCharCode(this.readByte())
        },
        readSignedByte: function() {
            var q = this.readByte() & 255;
            if (q > 127) {
                return -256 + q
            } else {
                return q
            }
        },
        readBytes: function(X) {
            var q = new Array();
            var Y = 0;
            while (Y < X) {
                var W = Y++;
                q.push(this.readByte())
            }
            return q
        },
        eof: function() {
            return this.position() >= this.length()
        },
        length: function() {
            return 0
        },
        position: function() {
            return 0
        },
        canSeek: function() {
            return false
        },
        seek: function(q) {},
        skip: function(W) {
            var X = 0;
            while (X < W) {
                var q = X++;
                if (!this.eof()) {
                    this.readByte()
                }
            }
        },
        close: function() {},
        __class__: E.InputStream
    };
    E.DelegatedInputStream = function(q) {
        this._stream = q
    };
    p["io.DelegatedInputStream"] = E.DelegatedInputStream;
    E.DelegatedInputStream.__name__ = ["io", "DelegatedInputStream"];
    E.DelegatedInputStream.__super__ = E.InputStream;
    E.DelegatedInputStream.prototype = v(E.InputStream.prototype, {
        canSeek: function() {
            return this._stream.canSeek()
        },
        close: function() {
            this._stream.close()
        },
        eof: function() {
            return this._stream.eof()
        },
        length: function() {
            return this._stream.length()
        },
        position: function() {
            return this._stream.position()
        },
        readByte: function() {
            return this._stream.readByte()
        },
        readBytes: function(q) {
            return this._stream.readBytes(q)
        },
        readSignedByte: function() {
            return this._stream.readSignedByte()
        },
        readChar: function() {
            return this._stream.readChar()
        },
        seek: function(q) {
            this._stream.seek(q)
        },
        skip: function(q) {
            this._stream.skip(q)
        },
        __class__: E.DelegatedInputStream
    });
    E.BitInputStream = function(q) {
        E.DelegatedInputStream.call(this, q);
        this._position = E.BitInputStream.BYTE_SIZE
    };
    p["io.BitInputStream"] = E.BitInputStream;
    E.BitInputStream.__name__ = ["io", "BitInputStream"];
    E.BitInputStream.__super__ = E.DelegatedInputStream;
    E.BitInputStream.prototype = v(E.DelegatedInputStream.prototype, {
        readByte: function() {
            return this.readBits(8)
        },
        seek: function(q) {
            this._position = E.BitInputStream.BYTE_SIZE;
            this.seek(q)
        },
        readBits: function(W) {
            var X = 0;
            var q = W - 1;
            while (q >= 0) {
                X |= this.readBit() << q;
                q--
            }
            return X
        },
        readBitsReversed: function(W) {
            var X = 0;
            var q = 0;
            while (q < W) {
                X |= this.readBit() << q;
                q++
            }
            return X
        },
        readBit: function() {
            var W = -1;
            if (this._position >= E.BitInputStream.BYTE_SIZE) {
                this._currentByte = this._stream.readByte();
                this._position = 0
            }
            var q = this._currentByte >> E.BitInputStream.BYTE_SIZE - this._position - 1 & 1;
            this._position++;
            return q
        },
        __class__: E.BitInputStream
    });
    E.BytesInputStream = function(q) {
        this._buffer = q;
        this._pos = 0
    };
    p["io.BytesInputStream"] = E.BytesInputStream;
    E.BytesInputStream.__name__ = ["io", "BytesInputStream"];
    E.BytesInputStream.__super__ = E.InputStream;
    E.BytesInputStream.prototype = v(E.InputStream.prototype, {
        readByte: function() {
            var q = this._buffer.b[this._pos] & 255;
            this._pos++;
            return q
        },
        readChar: function() {
            return String.fromCharCode(this.readByte())
        },
        length: function() {
            return this._buffer.length
        },
        position: function() {
            return this._pos
        },
        seek: function(q) {
            this._pos = q
        },
        canSeek: function() {
            return true
        },
        __class__: E.BytesInputStream
    });
    E.OutputStream = function() {};
    p["io.OutputStream"] = E.OutputStream;
    E.OutputStream.__name__ = ["io", "OutputStream"];
    E.OutputStream.prototype = {
        writeByte: function(q) {},
        writeBytes: function(q) {
            var X = 0;
            while (X < q.length) {
                var W = q[X];
                ++X;
                this.writeByte(W)
            }
        },
        writeAsString: function(q) {
            var W;
            if (typeof(q) == "string") {
                W = q
            } else {
                W = A.string(q)
            }
            this.writeString(W)
        },
        writeString: function(Z) {
            var q = m.io.Bytes.ofString(Z);
            var X = 0;
            var Y = q.length;
            while (X < Y) {
                var W = X++;
                this.writeByte(q.b[W])
            }
        },
        flush: function() {},
        close: function() {},
        __class__: E.OutputStream
    };
    E.BytesOutputStream = function() {
        E.OutputStream.call(this);
        this._buff = new m.io.BytesBuffer()
    };
    p["io.BytesOutputStream"] = E.BytesOutputStream;
    E.BytesOutputStream.__name__ = ["io", "BytesOutputStream"];
    E.BytesOutputStream.__super__ = E.OutputStream;
    E.BytesOutputStream.prototype = v(E.OutputStream.prototype, {
        writeByte: function(q) {
            this._buff.b.push(q)
        },
        getBytes: function() {
            var q = this._buff.getBytes();
            return q
        },
        __class__: E.BytesOutputStream
    });
    E.DataInputStream = function(W, q) {
        if (q == null) {
            q = true
        }
        E.DelegatedInputStream.call(this, W);
        this.bigEndian = q;
        this.bitCount = 32;
        this.bitMask = 65535
    };
    p["io.DataInputStream"] = E.DataInputStream;
    E.DataInputStream.__name__ = ["io", "DataInputStream"];
    E.DataInputStream.createFromBytes = function(q) {
        return new E.DataInputStream(new E.BytesInputStream(q))
    };
    E.DataInputStream.__super__ = E.DelegatedInputStream;
    E.DataInputStream.prototype = v(E.DelegatedInputStream.prototype, {
        readEndianAwareBytes: function(W) {
            var q = this.readBytes(W);
            if (!this.bigEndian) {
                q.reverse()
            }
            return q
        },
        readBool: function() {
            return this.readByte() != 0
        },
        readShort: function() {
            var q = this.readEndianAwareBytes(2);
            var W = q[0] << 8 | q[1];
            if (W > 32767) {
                return -65536 + W
            } else {
                return W
            }
        },
        readInt: function() {
            var W = this.readEndianAwareBytes(4);
            var X = W[0] << 24 | W[1] << 16 | W[2] << 8 | W[3];
            var q = W[0] >> 7 & 1;
            if (q == 1) {
                X = (~X & 268435455) + 1;
                X = -1 * X
            }
            return X
        },
        readFloat: function() {
            var W = this.readEndianAwareBytes(4);
            var q = 1 - (W[0] >> 7 << 1);
            var Y = (W[0] << 1 & 255 | W[1] >> 7) - 127;
            var X = (W[1] & 127) << 16 | W[2] << 8 | W[3];
            if (X == 0 && Y == -127) {
                return 0
            }
            return q * (1 + Math.pow(2, -23) * X) * Math.pow(2, Y)
        },
        readDouble: function() {
            var W = this.readEndianAwareBytes(8);
            var q = 1 - (W[0] >> 7 << 1);
            var Y = (W[0] << 4 & 2047 | W[1] >> 4) - 1023;
            var X = this.getDoubleSig(W);
            if (X == 0 && Y == -1023) {
                return 0
            }
            return q * (1 + Math.pow(2, -52) * X) * Math.pow(2, Y)
        },
        getDoubleSig: function(q) {
            var W = parseInt((((q[1] & 15) << 16 | q[2] << 8 | q[3]) * Math.pow(2, 32)).toString(2), 2) + parseInt(((q[4] >> 7) * Math.pow(2, 31)).toString(2), 2) + parseInt(((q[4] & 127) << 24 | q[5] << 16 | q[6] << 8 | q[7]).toString(2), 2);
            return W
        },
        readString: function() {
            var q = new g();
            while (!this._stream.eof()) {
                q.add(this._stream.readChar())
            }
            return q.b
        },
        __class__: E.DataInputStream
    });
    E.MemoryInputStream = function(q) {
        this._buffer = q;
        this._pos = 0
    };
    p["io.MemoryInputStream"] = E.MemoryInputStream;
    E.MemoryInputStream.__name__ = ["io", "MemoryInputStream"];
    E.MemoryInputStream.__super__ = E.InputStream;
    E.MemoryInputStream.prototype = v(E.InputStream.prototype, {
        readByte: function() {
            if (this._pos >= this._buffer.length) {
                return -1
            }
            return this._buffer[this._pos++] & 255
        },
        length: function() {
            return this._buffer.length
        },
        position: function() {
            return this._pos
        },
        seek: function(q) {
            this._pos = q
        },
        canSeek: function() {
            return true
        },
        skip: function(q) {
            this._pos += q
        },
        __class__: E.MemoryInputStream
    });
    E.StringInputStream = function(q) {
        this._buffer = q;
        this._pos = 0
    };
    p["io.StringInputStream"] = E.StringInputStream;
    E.StringInputStream.__name__ = ["io", "StringInputStream"];
    E.StringInputStream.__super__ = E.InputStream;
    E.StringInputStream.prototype = v(E.InputStream.prototype, {
        readByte: function() {
            return (function(X) {
                var q;
                var W = X._pos++;
                q = B.cca(X._buffer, W);
                return q
            }(this)) & 255
        },
        readChar: function() {
            return this._buffer.charAt(this._pos++)
        },
        length: function() {
            return this._buffer.length
        },
        position: function() {
            return this._pos
        },
        seek: function(q) {
            this._pos = q
        },
        canSeek: function() {
            return true
        },
        __class__: E.StringInputStream
    });
    E.StringOutputStream = function() {
        E.OutputStream.call(this);
        this._buffer = new g()
    };
    p["io.StringOutputStream"] = E.StringOutputStream;
    E.StringOutputStream.__name__ = ["io", "StringOutputStream"];
    E.StringOutputStream.__super__ = E.OutputStream;
    E.StringOutputStream.prototype = v(E.OutputStream.prototype, {
        writeByte: function(q) {
            this._buffer.add(String.fromCharCode(q))
        },
        writeString: function(q) {
            if (q == null) {
                this._buffer.b += "null"
            } else {
                this._buffer.b += "" + q
            }
        },
        toString: function() {
            return this._buffer.b
        },
        __class__: E.StringOutputStream
    });
    var h = {};
    h.Boot = function() {};
    p["js.Boot"] = h.Boot;
    h.Boot.__name__ = ["js", "Boot"];
    h.Boot.getClass = function(q) {
        if ((q instanceof Array) && q.__enum__ == null) {
            return Array
        } else {
            return q.__class__
        }
    };
    h.Boot.__string_rec = function(ad, aa) {
        if (ad == null) {
            return "null"
        }
        if (aa.length >= 5) {
            return "<...>"
        }
        var Z = typeof(ad);
        if (Z == "function" && (ad.__name__ || ad.__ename__)) {
            Z = "object"
        }
        switch (Z) {
            case "object":
                if (ad instanceof Array) {
                    if (ad.__enum__) {
                        if (ad.length == 2) {
                            return ad[0]
                        }
                        var ae = ad[0] + "(";
                        aa += "\t";
                        var ac = 2;
                        var Y = ad.length;
                        while (ac < Y) {
                            var aj = ac++;
                            if (aj != 2) {
                                ae += "," + h.Boot.__string_rec(ad[aj], aa)
                            } else {
                                ae += h.Boot.__string_rec(ad[aj], aa)
                            }
                        }
                        return ae + ")"
                    }
                    var ah = ad.length;
                    var ag;
                    var W = "[";
                    aa += "\t";
                    var ab = 0;
                    while (ab < ah) {
                        var af = ab++;
                        W += (af > 0 ? "," : "") + h.Boot.__string_rec(ad[af], aa)
                    }
                    W += "]";
                    return W
                }
                var ak;
                try {
                    ak = ad.toString
                } catch (al) {
                    return "???"
                }
                if (ak != null && ak != Object.toString) {
                    var X = ad.toString();
                    if (X != "[object Object]") {
                        return X
                    }
                }
                var ai = null;
                var q = "{\n";
                aa += "\t";
                var am = ad.hasOwnProperty != null;
                for (var ai in ad) {
                    if (am && !ad.hasOwnProperty(ai)) {
                        continue
                    }
                    if (ai == "prototype" || ai == "__class__" || ai == "__super__" || ai == "__interfaces__" || ai == "__properties__") {
                        continue
                    }
                    if (q.length != 2) {
                        q += ", \n"
                    }
                    q += aa + ai + " : " + h.Boot.__string_rec(ad[ai], aa)
                }
                aa = aa.substring(1);
                q += "\n" + aa + "}";
                return q;
            case "function":
                return "<function>";
            case "string":
                return ad;
            default:
                return String(ad)
        }
    };
    h.Boot.__interfLoop = function(ab, W) {
        if (ab == null) {
            return false
        }
        if (ab == W) {
            return true
        }
        var q = ab.__interfaces__;
        if (q != null) {
            var Z = 0;
            var aa = q.length;
            while (Z < aa) {
                var X = Z++;
                var Y = q[X];
                if (Y == W || h.Boot.__interfLoop(Y, W)) {
                    return true
                }
            }
        }
        return h.Boot.__interfLoop(ab.__super__, W)
    };
    h.Boot.__instanceof = function(W, q) {
        if (q == null) {
            return false
        }
        switch (q) {
            case x:
                return (W | 0) === W;
            case z:
                return typeof(W) == "number";
            case T:
                return typeof(W) == "boolean";
            case String:
                return typeof(W) == "string";
            case Array:
                return (W instanceof Array) && W.__enum__ == null;
            case w:
                return true;
            default:
                if (W != null) {
                    if (typeof(q) == "function") {
                        if (W instanceof q) {
                            return true
                        }
                        if (h.Boot.__interfLoop(h.Boot.getClass(W), q)) {
                            return true
                        }
                    }
                } else {
                    return false
                }
                if (q == a && W.__name__ != null) {
                    return true
                }
                if (q == r && W.__ename__ != null) {
                    return true
                }
                return W.__enum__ == q
        }
    };
    h.Boot.__cast = function(W, q) {
        if (h.Boot.__instanceof(W, q)) {
            return W
        } else {
            throw "Cannot cast " + A.string(W) + " to " + A.string(q)
        }
    };
    h.Browser = function() {};
    p["js.Browser"] = h.Browser;
    h.Browser.__name__ = ["js", "Browser"];
    h.Browser.getLocalStorage = function() {
        try {
            var q = window.localStorage;
            q.getItem("");
            return q
        } catch (W) {
            return null
        }
    };
    h.Browser.createXMLHttpRequest = function() {
        if (typeof XMLHttpRequest != "undefined") {
            return new XMLHttpRequest()
        }
        if (typeof ActiveXObject != "undefined") {
            return new ActiveXObject("Microsoft.XMLHTTP")
        }
        throw "Unable to create XMLHttpRequest object."
    };
    h.Cookie = function() {};
    p["js.Cookie"] = h.Cookie;
    h.Cookie.__name__ = ["js", "Cookie"];
    h.Cookie.set = function(q, Y, ab, Z, X) {
        var W = q + "=" + encodeURIComponent(Y);
        if (ab != null) {
            var aa = n.delta(new Date(), ab * 1000);
            W += ";expires=" + aa.toGMTString()
        }
        if (Z != null) {
            W += ";path=" + Z
        }
        if (X != null) {
            W += ";domain=" + X
        }
        window.document.cookie = W
    };
    h.Cookie.all = function() {
        var X = new m.ds.StringMap();
        var q = window.document.cookie.split(";");
        var Z = 0;
        while (Z < q.length) {
            var Y = q[Z];
            ++Z;
            Y = O.ltrim(Y);
            var W = Y.split("=");
            if (W.length < 2) {
                continue
            }
            X.set(W[0], O.urlDecode(W[1]))
        }
        return X
    };
    h.Cookie.get = function(q) {
        return h.Cookie.all().get(q)
    };
    h.Cookie.remove = function(q, X, W) {
        h.Cookie.set(q, "", -10, X, W)
    };
    h.Lib = function() {};
    p["js.Lib"] = h.Lib;
    h.Lib.__name__ = ["js", "Lib"];
    h.Lib.alert = function(q) {
        alert(h.Boot.__string_rec(q, ""))
    };
    var M = {};
    M.EffectFlag = function() {};
    p["json.EffectFlag"] = M.EffectFlag;
    M.EffectFlag.__name__ = ["json", "EffectFlag"];
    M.JsonReader = function() {};
    p["json.JsonReader"] = M.JsonReader;
    M.JsonReader.__name__ = ["json", "JsonReader"];
    M.JsonReader.__interfaces__ = [V.ISongReader];
    M.JsonReader.prototype = {
        readSong: function(aa, q, W) {
            var Z = aa.readString();
            var X;
            try {
                X = JSON.parse(Z);
                return this.readJsonSong(X, q)
            } catch (Y) {
                throw new V.FormatException("JsonReader -> Error in json parsing phase: " + A.string(Y))
            }
        },
        readJsonSong: function(X, q) {
            if (q == null) {
                q = new V.SongFactory()
            } else {
                q = q
            }
            var aa = q.newSong();
            aa.title = X.name;
            aa.artist = X.artist;
            aa.tempo = X.tempo;
            this._currentBpm = aa.tempo;
            var W = X.tracks;
            var Z = 0;
            while (Z < W.length) {
                var Y = W[Z];
                ++Z;
                this.readTrack(Y, aa)
            }
            aa.validate();
            return aa
        },
        readTrack: function(X, ab) {
            var q = ab.newTrack();
            q.name = X.name;
            q.strings = this.readStrings(X.strings);
            q.channel.instrument(X.midiindex);
            if (X.percussion == 0) {
                q.isPercussionTrack = true;
                q.channel.channel = V.ChannelPresets.DEFAULT_PERCUSSION_CHANNEL
            }
            q.channel.volume = X.volume;
            q.offset = X.offset;
            var Y = X.measures;
            var Z = 0;
            var aa = Y.length;
            while (Z < aa) {
                var W = Z++;
                this.readMeasure(W, Y[W], q)
            }
            return q
        },
        readMeasure: function(Z, aa, W) {
            var ac;
            if (Z >= W.song.measureHeaders.length) {
                ac = W.song.newMeasureHeader();
                if (aa.tempo != null) {
                    this._currentBpm = aa.tempo
                }
                ac.tempo.value = this._currentBpm;
                if (aa.numerator != null) {
                    this._numerator = aa.numerator
                }
                if (aa.denominator != null) {
                    this._denominator = aa.denominator
                }
                if (aa.repeatopen != null) {
                    ac.isRepeatOpen = true
                }
                if (aa.repeatcount != null) {
                    ac.repeatClose = aa.repeatcount
                }
                if (aa.repeatalternative) {
                    ac.repeatAlternative = aa.repeatalternative
                }
                ac.timeSignature.numerator = this._numerator;
                ac.timeSignature.denominator.value = this._denominator
            } else {
                ac = W.song.measureHeaders[Z]
            }
            var Y = new V.Measure(ac);
            W.addMeasure(Y);
            var X = aa.beats;
            var ab = 0;
            while (ab < X.length) {
                var q = X[ab];
                ++ab;
                this.readBeat(q, Y)
            }
            return Y
        },
        readBeat: function(q, Y) {
            var Z = Y.newBeat();
            Z.start = q.start;
            var X = q.voices;
            var aa = 0;
            while (aa < 2) {
                var W = aa++;
                this.readVoice(X[W], Z.getVoice(W))
            }
            return Z
        },
        readVoice: function(Y, X) {
            X.duration.value = this.convertDuration(Y.duration);
            if (Y.dotted > 0) {
                if (Y.dotted == 1) {
                    X.duration.isDotted = true
                } else {
                    X.duration.isDotted = false
                }
                if (Y.dotted == 2) {
                    X.duration.isDoubleDotted = true
                } else {
                    X.duration.isDoubleDotted = false
                }
            }
            if (Y.tuplet) {
                X.duration.tuplet.enters = Y.tuplet
            }
            if (Y.epmty == 1) {
                X.isEmpty = true
            }
            if (Y.restvoice != 1) {
                var W = Y.notes;
                var Z = 0;
                while (Z < W.length) {
                    var q = W[Z];
                    ++Z;
                    X.addNote(this.readNote(q))
                }
            }
            return X
        },
        convertDuration: function(q) {
            if (q == 254) {
                return 1
            }
            if (q == 255) {
                return 2
            }
            return Math.floor(Math.pow(2, q + 2))
        },
        readNote: function(q) {
            var W = new V.Note();
            W.value = q.fret;
            W.string = q.string;
            this.readNoteEffects(q.effect, W);
            if (q.bend != null) {
                W.effect.set_bend(this.readBend(q.bend))
            }
            return W
        },
        readBend: function(Z) {
            var W = new V.effects.BendEffect();
            var X = Z;
            var Y = 0;
            while (Y < X.length) {
                var q = X[Y];
                ++Y;
                W.addPoint(q.X, q.Y)
            }
            return W
        },
        readNoteEffects: function(q, X) {
            var W = X.effect;
            W.vibrato = (q & M.EffectFlag.EFFECT_VIBRATO) > 0;
            W.deadNote = (q & M.EffectFlag.EFFECT_DEAD) > 0;
            W.ghostNote = (q & M.EffectFlag.EFFECT_GHOST) > 0;
            W.accentuatedNote = (q & M.EffectFlag.EFFECT_ACCENTUATED_1) > 0;
            W.heavyAccentuatedNote = (q & M.EffectFlag.EFFECT_ACCENTUATED_2) > 0;
            W.palmMute = (q & M.EffectFlag.EFFECT_PALM_MUTE) > 0;
            X.isTiedNote = (q & M.EffectFlag.EFFECT_TIE) > 0;
            W.slide = (q & M.EffectFlag.EFFECT_FUTURE_NOTE_EFFECT_1) > 0;
            W.hammer = (q & M.EffectFlag.EFFECT_FUTURE_NOTE_EFFECT_2) > 0
        },
        readStrings: function(q) {
            var X = new Array();
            var W = 1;
            var Z = 0;
            while (Z < q.length) {
                var Y = q[Z];
                ++Z;
                X.push(new V.GuitarString(W, A["int"](Y)));
                W++
            }
            return X
        },
        __class__: M.JsonReader
    };
    var Q = {};
    Q.GeneralMidi = function() {};
    p["midi.GeneralMidi"] = Q.GeneralMidi;
    Q.GeneralMidi.__name__ = ["midi", "GeneralMidi"];
    Q.GeneralMidi.getValue = function(q) {
        if (Q.GeneralMidi._values == null) {
            Q.GeneralMidi._values = new m.ds.StringMap();
            Q.GeneralMidi._values.set("acousticgrandpiano", 0);
            Q.GeneralMidi._values.set("brightacousticpiano", 1);
            Q.GeneralMidi._values.set("electricgrandpiano", 2);
            Q.GeneralMidi._values.set("honkytonkpiano", 3);
            Q.GeneralMidi._values.set("electricpiano1", 4);
            Q.GeneralMidi._values.set("electricpiano2", 5);
            Q.GeneralMidi._values.set("harpsichord", 6);
            Q.GeneralMidi._values.set("clavinet", 7);
            Q.GeneralMidi._values.set("celesta", 8);
            Q.GeneralMidi._values.set("glockenspiel", 9);
            Q.GeneralMidi._values.set("musicbox", 10);
            Q.GeneralMidi._values.set("vibraphone", 11);
            Q.GeneralMidi._values.set("marimba", 12);
            Q.GeneralMidi._values.set("xylophone", 13);
            Q.GeneralMidi._values.set("tubularbells", 14);
            Q.GeneralMidi._values.set("dulcimer", 15);
            Q.GeneralMidi._values.set("drawbarorgan", 16);
            Q.GeneralMidi._values.set("percussiveorgan", 17);
            Q.GeneralMidi._values.set("rockorgan", 18);
            Q.GeneralMidi._values.set("churchorgan", 19);
            Q.GeneralMidi._values.set("reedorgan", 20);
            Q.GeneralMidi._values.set("accordion", 21);
            Q.GeneralMidi._values.set("harmonica", 22);
            Q.GeneralMidi._values.set("tangoaccordion", 23);
            Q.GeneralMidi._values.set("acousticguitarnylon", 24);
            Q.GeneralMidi._values.set("acousticguitarsteel", 25);
            Q.GeneralMidi._values.set("electricguitarjazz", 26);
            Q.GeneralMidi._values.set("electricguitarclean", 27);
            Q.GeneralMidi._values.set("electricguitarmuted", 28);
            Q.GeneralMidi._values.set("overdrivenguitar", 29);
            Q.GeneralMidi._values.set("distortionguitar", 30);
            Q.GeneralMidi._values.set("guitarharmonics", 31);
            Q.GeneralMidi._values.set("acousticbass", 32);
            Q.GeneralMidi._values.set("electricbassfinger", 33);
            Q.GeneralMidi._values.set("electricbasspick", 34);
            Q.GeneralMidi._values.set("fretlessbass", 35);
            Q.GeneralMidi._values.set("slapbass1", 36);
            Q.GeneralMidi._values.set("slapbass2", 37);
            Q.GeneralMidi._values.set("synthbass1", 38);
            Q.GeneralMidi._values.set("synthbass2", 39);
            Q.GeneralMidi._values.set("violin", 40);
            Q.GeneralMidi._values.set("viola", 41);
            Q.GeneralMidi._values.set("cello", 42);
            Q.GeneralMidi._values.set("contrabass", 43);
            Q.GeneralMidi._values.set("tremolostrings", 44);
            Q.GeneralMidi._values.set("pizzicatostrings", 45);
            Q.GeneralMidi._values.set("orchestralharp", 46);
            Q.GeneralMidi._values.set("timpani", 47);
            Q.GeneralMidi._values.set("stringensemble1", 48);
            Q.GeneralMidi._values.set("stringensemble2", 49);
            Q.GeneralMidi._values.set("synthstrings1", 50);
            Q.GeneralMidi._values.set("synthstrings2", 51);
            Q.GeneralMidi._values.set("choiraahs", 52);
            Q.GeneralMidi._values.set("voiceoohs", 53);
            Q.GeneralMidi._values.set("synthvoice", 54);
            Q.GeneralMidi._values.set("orchestrahit", 55);
            Q.GeneralMidi._values.set("trumpet", 56);
            Q.GeneralMidi._values.set("trombone", 57);
            Q.GeneralMidi._values.set("tuba", 58);
            Q.GeneralMidi._values.set("mutedtrumpet", 59);
            Q.GeneralMidi._values.set("frenchhorn", 60);
            Q.GeneralMidi._values.set("brasssection", 61);
            Q.GeneralMidi._values.set("synthbrass1", 62);
            Q.GeneralMidi._values.set("synthbrass2", 63);
            Q.GeneralMidi._values.set("sopranosax", 64);
            Q.GeneralMidi._values.set("altosax", 65);
            Q.GeneralMidi._values.set("tenorsax", 66);
            Q.GeneralMidi._values.set("baritonesax", 67);
            Q.GeneralMidi._values.set("oboe", 68);
            Q.GeneralMidi._values.set("englishhorn", 69);
            Q.GeneralMidi._values.set("bassoon", 70);
            Q.GeneralMidi._values.set("clarinet", 71);
            Q.GeneralMidi._values.set("piccolo", 72);
            Q.GeneralMidi._values.set("flute", 73);
            Q.GeneralMidi._values.set("recorder", 74);
            Q.GeneralMidi._values.set("panflute", 75);
            Q.GeneralMidi._values.set("blownbottle", 76);
            Q.GeneralMidi._values.set("shakuhachi", 77);
            Q.GeneralMidi._values.set("whistle", 78);
            Q.GeneralMidi._values.set("ocarina", 79);
            Q.GeneralMidi._values.set("lead1square", 80);
            Q.GeneralMidi._values.set("lead2sawtooth", 81);
            Q.GeneralMidi._values.set("lead3calliope", 82);
            Q.GeneralMidi._values.set("lead4chiff", 83);
            Q.GeneralMidi._values.set("lead5charang", 84);
            Q.GeneralMidi._values.set("lead6voice", 85);
            Q.GeneralMidi._values.set("lead7fifths", 86);
            Q.GeneralMidi._values.set("lead8bassandlead", 87);
            Q.GeneralMidi._values.set("pad1newage", 88);
            Q.GeneralMidi._values.set("pad2warm", 89);
            Q.GeneralMidi._values.set("pad3polysynth", 90);
            Q.GeneralMidi._values.set("pad4choir", 91);
            Q.GeneralMidi._values.set("pad5bowed", 92);
            Q.GeneralMidi._values.set("pad6metallic", 93);
            Q.GeneralMidi._values.set("pad7halo", 94);
            Q.GeneralMidi._values.set("pad8sweep", 95);
            Q.GeneralMidi._values.set("fx1rain", 96);
            Q.GeneralMidi._values.set("fx2soundtrack", 97);
            Q.GeneralMidi._values.set("fx3crystal", 98);
            Q.GeneralMidi._values.set("fx4atmosphere", 99);
            Q.GeneralMidi._values.set("fx5brightness", 100);
            Q.GeneralMidi._values.set("fx6goblins", 101);
            Q.GeneralMidi._values.set("fx7echoes", 102);
            Q.GeneralMidi._values.set("fx8scifi", 103);
            Q.GeneralMidi._values.set("sitar", 104);
            Q.GeneralMidi._values.set("banjo", 105);
            Q.GeneralMidi._values.set("shamisen", 106);
            Q.GeneralMidi._values.set("koto", 107);
            Q.GeneralMidi._values.set("kalimba", 108);
            Q.GeneralMidi._values.set("bagpipe", 109);
            Q.GeneralMidi._values.set("fiddle", 110);
            Q.GeneralMidi._values.set("shanai", 111);
            Q.GeneralMidi._values.set("tinklebell", 112);
            Q.GeneralMidi._values.set("agogo", 113);
            Q.GeneralMidi._values.set("steeldrums", 114);
            Q.GeneralMidi._values.set("woodblock", 115);
            Q.GeneralMidi._values.set("taikodrum", 116);
            Q.GeneralMidi._values.set("melodictom", 117);
            Q.GeneralMidi._values.set("synthdrum", 118);
            Q.GeneralMidi._values.set("reversecymbal", 119);
            Q.GeneralMidi._values.set("guitarfretnoise", 120);
            Q.GeneralMidi._values.set("breathnoise", 121);
            Q.GeneralMidi._values.set("seashore", 122);
            Q.GeneralMidi._values.set("birdtweet", 123);
            Q.GeneralMidi._values.set("telephonering", 124);
            Q.GeneralMidi._values.set("helicopter", 125);
            Q.GeneralMidi._values.set("applause", 126);
            Q.GeneralMidi._values.set("gunshot", 127)
        }
        q = O.replace(q.toLowerCase(), " ", "");
        if (Q.GeneralMidi._values.exists(q)) {
            return Q.GeneralMidi._values.get(q)
        } else {
            return 0
        }
    };
    Q.MidiInstrumentHelper = function() {};
    p["midi.MidiInstrumentHelper"] = Q.MidiInstrumentHelper;
    Q.MidiInstrumentHelper.__name__ = ["midi", "MidiInstrumentHelper"];
    Q.MidiInstrumentHelper.getInstrumentIco = function(W) {
        var q = Q.MidiInstrumentHelper.getInstrumentIcoPreffix(W);
        return Q.MidiInstrumentHelper.instrumentIcons.get(q)
    };
    Q.MidiInstrumentHelper.getInstrumentIcoByMidiIndex = function(W) {
        var q = Q.MidiInstrumentHelper.getInstrumentIcoPreffixByMidiIndex(W);
        return Q.MidiInstrumentHelper.instrumentIcons.get(q)
    };
    Q.MidiInstrumentHelper.getInstrumentColor = function(W) {
        var q = W.instrument();
        if (W.isPercussionChannel()) {
            return "#73b1de"
        } else {
            return Q.MidiInstrumentHelper.getInstrumentColorByMidiIndex(q)
        }
    };
    Q.MidiInstrumentHelper.getInstrumentColorByMidiIndex = function(W) {
        var q = "5e5e5e";
        if (W >= 0 && W <= 7) {
            q = "9aaec3"
        } else {
            if (W >= 8 && W <= 15) {
                q = "b9c9dA"
            } else {
                if (W >= 16 && W <= 23) {
                    q = "A2BCD8"
                } else {
                    if (W >= 24 && W <= 25) {
                        q = "fa6461"
                    } else {
                        if (W >= 26 && W <= 31) {
                            q = "eb385f"
                        } else {
                            if (W >= 32 && W <= 39) {
                                q = "efbf63"
                            } else {
                                if (W >= 40 && W <= 47) {
                                    q = "C7AEE0"
                                } else {
                                    if (W >= 48 && W <= 55) {
                                        q = "D0A2F5"
                                    } else {
                                        if (W >= 56 && W <= 63) {
                                            q = "7DB582"
                                        } else {
                                            if (W >= 64 && W <= 71) {
                                                q = "9AC99D"
                                            } else {
                                                if (W >= 72 && W <= 79) {
                                                    q = "B0DA88"
                                                } else {
                                                    if (W >= 80 && W <= 95) {
                                                        q = "f1a476"
                                                    } else {
                                                        if (W >= 96 && W <= 103) {
                                                            q = "BEB1AF"
                                                        } else {
                                                            if (W >= 104 && W <= 111) {
                                                                q = "f1958c"
                                                            } else {
                                                                if (W >= 112 && W <= 118) {
                                                                    q = "63afef"
                                                                } else {
                                                                    if (W >= 119 && W <= 127) {
                                                                        q = "BEB1AF"
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return "#" + q
    };
    Q.MidiInstrumentHelper.getInstrumentIcoPreffix = function(W) {
        var q;
        if (W.isPercussionChannel()) {
            q = -1
        } else {
            q = W.instrument()
        }
        return Q.MidiInstrumentHelper.getInstrumentIcoPreffixByMidiIndex(q)
    };
    Q.MidiInstrumentHelper.getInstrumentIcoPreffixByMidiIndex = function(q) {
        var W = "drums";
        if (q >= 0 && q <= 7) {
            W = "piano"
        } else {
            if (q >= 8 && q <= 15) {
                W = "chroma"
            } else {
                if (q >= 16 && q <= 23) {
                    W = "organ"
                } else {
                    if (q >= 24 && q <= 25) {
                        W = "ac-guitar"
                    } else {
                        if (q >= 26 && q <= 31) {
                            W = "el-guitar"
                        } else {
                            if (q >= 32 && q <= 39) {
                                W = "bass"
                            } else {
                                if (q >= 40 && q <= 47) {
                                    W = "strings"
                                } else {
                                    if (q >= 48 && q <= 55) {
                                        W = "strings-c"
                                    } else {
                                        if (q >= 56 && q <= 63) {
                                            W = "brass"
                                        } else {
                                            if (q >= 64 && q <= 71) {
                                                W = "reed"
                                            } else {
                                                if (q >= 72 && q <= 79) {
                                                    W = "pipe"
                                                } else {
                                                    if (q >= 80 && q <= 87) {
                                                        W = "synth-lead"
                                                    } else {
                                                        if (q >= 88 && q <= 95) {
                                                            W = "synth-pad"
                                                        } else {
                                                            if (q >= 96 && q <= 103) {
                                                                W = "synth-fx"
                                                            } else {
                                                                if (q >= 104 && q <= 111) {
                                                                    W = "ethnic"
                                                                } else {
                                                                    if (q >= 112 && q <= 118) {
                                                                        W = "percussive"
                                                                    } else {
                                                                        if (q >= 119 && q <= 127) {
                                                                            W = "fx"
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return W
    };
    Q.MidiInstrumentHelper.getInstrumentScheme = function() {
        var q = JSON.parse(Q.MidiInstrumentHelper._instrumentSchemeString);
        return q
    };
    Q.MidiInstrumentHelper.getGroupIndexForInstrumentMidiIndex = function(ab) {
        var q = Q.MidiInstrumentHelper.getInstrumentScheme();
        var Z = -1;
        var aa = 0;
        while (aa < q.length) {
            var ac = q[aa];
            ++aa;
            var Y = 0;
            var X = ac.instruments;
            while (Y < X.length) {
                var W = X[Y];
                ++Y;
                if (ab == W.midiIndex) {
                    Z = ac.index;
                    break
                }
            }
            if (Z != -1) {
                break
            }
        }
        return Z
    };
    Q.MidiInstrumentHelper.getInstrumentIndexForInstrumentMidiIndex = function(q) {
        var W = Q.MidiInstrumentHelper.getInstrumentScheme();
        var Z = -1;
        var Y = 0;
        while (Y < W.length) {
            var aa = W[Y];
            ++Y;
            var X = 0;
            var ac = 0;
            var ab = aa.instruments;
            while (ac < ab.length) {
                var ad = ab[ac];
                ++ac;
                if (q == ad.midiIndex) {
                    Z = X;
                    break
                }
                X++
            }
            if (Z != -1) {
                break
            }
        }
        return Z
    };
    Q.MidiInstrumentHelper.getInstrumentName = function(ab) {
        var W = "";
        var q = Q.MidiInstrumentHelper.getInstrumentScheme();
        var aa = 0;
        while (aa < q.length) {
            var ac = q[aa];
            ++aa;
            var Z = 0;
            var Y = ac.instruments;
            while (Z < Y.length) {
                var X = Y[Z];
                ++Z;
                if (ab == X.midiIndex) {
                    W = X.name;
                    break
                }
            }
            if (W != "") {
                break
            }
        }
        if (ab == 128) {
            return "Drums"
        } else {
            return W
        }
    };
    var S = {};
    S.puremvc = {};
    S.puremvc.haxe = {};
    S.puremvc.haxe.interfaces = {};
    S.puremvc.haxe.interfaces.IController = function() {};
    p["org.puremvc.haxe.interfaces.IController"] = S.puremvc.haxe.interfaces.IController;
    S.puremvc.haxe.interfaces.IController.__name__ = ["org", "puremvc", "haxe", "interfaces", "IController"];
    S.puremvc.haxe.interfaces.IController.prototype = {
        __class__: S.puremvc.haxe.interfaces.IController
    };
    S.puremvc.haxe.core = {};
    S.puremvc.haxe.core.Controller = function() {
        S.puremvc.haxe.core.Controller.instance = this;
        this.commandMap = new m.ds.StringMap();
        this.initializeController()
    };
    p["org.puremvc.haxe.core.Controller"] = S.puremvc.haxe.core.Controller;
    S.puremvc.haxe.core.Controller.__name__ = ["org", "puremvc", "haxe", "core", "Controller"];
    S.puremvc.haxe.core.Controller.__interfaces__ = [S.puremvc.haxe.interfaces.IController];
    S.puremvc.haxe.core.Controller.getInstance = function() {
        if (S.puremvc.haxe.core.Controller.instance == null) {
            S.puremvc.haxe.core.Controller.instance = new S.puremvc.haxe.core.Controller()
        }
        return S.puremvc.haxe.core.Controller.instance
    };
    S.puremvc.haxe.core.Controller.prototype = {
        initializeController: function() {
            this.view = S.puremvc.haxe.core.View.getInstance()
        },
        executeCommand: function(q) {
            var X = this.commandMap.get(q.getName());
            if (X == null) {
                return
            }
            var W = R.createInstance(X, []);
            W.execute(q)
        },
        registerCommand: function(q, W) {
            if (!this.commandMap.exists(q)) {
                this.view.registerObserver(q, new S.puremvc.haxe.patterns.observer.Observer(s(this, this.executeCommand), this))
            }
            this.commandMap.set(q, W)
        },
        hasCommand: function(q) {
            return this.commandMap.exists(q)
        },
        removeCommand: function(q) {
            if (this.hasCommand(q)) {
                this.view.removeObserver(q, this);
                this.commandMap.remove(q)
            }
        },
        __class__: S.puremvc.haxe.core.Controller
    };
    S.puremvc.haxe.interfaces.IModel = function() {};
    p["org.puremvc.haxe.interfaces.IModel"] = S.puremvc.haxe.interfaces.IModel;
    S.puremvc.haxe.interfaces.IModel.__name__ = ["org", "puremvc", "haxe", "interfaces", "IModel"];
    S.puremvc.haxe.interfaces.IModel.prototype = {
        __class__: S.puremvc.haxe.interfaces.IModel
    };
    S.puremvc.haxe.core.Model = function() {
        S.puremvc.haxe.core.Model.instance = this;
        this.proxyMap = new m.ds.StringMap();
        this.initializeModel()
    };
    p["org.puremvc.haxe.core.Model"] = S.puremvc.haxe.core.Model;
    S.puremvc.haxe.core.Model.__name__ = ["org", "puremvc", "haxe", "core", "Model"];
    S.puremvc.haxe.core.Model.__interfaces__ = [S.puremvc.haxe.interfaces.IModel];
    S.puremvc.haxe.core.Model.getInstance = function() {
        if (S.puremvc.haxe.core.Model.instance == null) {
            S.puremvc.haxe.core.Model.instance = new S.puremvc.haxe.core.Model()
        }
        return S.puremvc.haxe.core.Model.instance
    };
    S.puremvc.haxe.core.Model.prototype = {
        initializeModel: function() {},
        registerProxy: function(q) {
            this.proxyMap.set(q.getProxyName(), q);
            q.onRegister()
        },
        retrieveProxy: function(q) {
            return this.proxyMap.get(q)
        },
        hasProxy: function(q) {
            return this.proxyMap.exists(q)
        },
        removeProxy: function(W) {
            var q = this.proxyMap.get(W);
            if (q != null) {
                this.proxyMap.remove(W);
                q.onRemove()
            }
            return q
        },
        __class__: S.puremvc.haxe.core.Model
    };
    S.puremvc.haxe.interfaces.IView = function() {};
    p["org.puremvc.haxe.interfaces.IView"] = S.puremvc.haxe.interfaces.IView;
    S.puremvc.haxe.interfaces.IView.__name__ = ["org", "puremvc", "haxe", "interfaces", "IView"];
    S.puremvc.haxe.interfaces.IView.prototype = {
        __class__: S.puremvc.haxe.interfaces.IView
    };
    S.puremvc.haxe.core.View = function() {
        S.puremvc.haxe.core.View.instance = this;
        this.mediatorMap = new m.ds.StringMap();
        this.observerMap = new m.ds.StringMap();
        this.initializeView()
    };
    p["org.puremvc.haxe.core.View"] = S.puremvc.haxe.core.View;
    S.puremvc.haxe.core.View.__name__ = ["org", "puremvc", "haxe", "core", "View"];
    S.puremvc.haxe.core.View.__interfaces__ = [S.puremvc.haxe.interfaces.IView];
    S.puremvc.haxe.core.View.getInstance = function() {
        if (S.puremvc.haxe.core.View.instance == null) {
            S.puremvc.haxe.core.View.instance = new S.puremvc.haxe.core.View()
        }
        return S.puremvc.haxe.core.View.instance
    };
    S.puremvc.haxe.core.View.prototype = {
        initializeView: function() {},
        registerObserver: function(W, q) {
            if (!this.observerMap.exists(W)) {
                this.observerMap.set(W, new t())
            }
            this.observerMap.get(W).add(q)
        },
        notifyObservers: function(Y) {
            if (this.observerMap.exists(Y.getName())) {
                var ab = this.observerMap.get(Y.getName());
                var aa = new t();
                var W = ab.iterator();
                while (W.hasNext()) {
                    var q = W.next();
                    aa.add(q)
                }
                var X = aa.iterator();
                while (X.hasNext()) {
                    var Z = X.next();
                    Z.notifyObserver(Y)
                }
            }
        },
        removeObserver: function(X, W) {
            var Z = this.observerMap.get(X);
            var Y = Z.iterator();
            while (Y.hasNext()) {
                var q = Y.next();
                if (q.compareNotifyContext(W) == true) {
                    Z.remove(q);
                    break
                }
            }
            if (Z.isEmpty()) {
                this.observerMap.remove(X)
            }
        },
        registerMediator: function(Y) {
            if (this.mediatorMap.exists(Y.getMediatorName())) {
                return
            }
            this.mediatorMap.set(Y.getMediatorName(), Y);
            var aa = Y.listNotificationInterests();
            if (aa.length > 0) {
                var q = new S.puremvc.haxe.patterns.observer.Observer(s(Y, Y.handleNotification), Y);
                var X = 0;
                var Z = aa.length;
                while (X < Z) {
                    var W = X++;
                    this.registerObserver(aa[W], q)
                }
            }
            Y.onRegister()
        },
        retrieveMediator: function(q) {
            return this.mediatorMap.get(q)
        },
        removeMediator: function(q) {
            var Y = this.mediatorMap.get(q);
            if (Y != null) {
                var aa = Y.listNotificationInterests();
                var X = 0;
                var Z = aa.length;
                while (X < Z) {
                    var W = X++;
                    this.removeObserver(aa[W], Y)
                }
                this.mediatorMap.remove(q);
                Y.onRemove()
            }
            return Y
        },
        hasMediator: function(q) {
            return this.mediatorMap.exists(q)
        },
        __class__: S.puremvc.haxe.core.View
    };
    S.puremvc.haxe.interfaces.ICommand = function() {};
    p["org.puremvc.haxe.interfaces.ICommand"] = S.puremvc.haxe.interfaces.ICommand;
    S.puremvc.haxe.interfaces.ICommand.__name__ = ["org", "puremvc", "haxe", "interfaces", "ICommand"];
    S.puremvc.haxe.interfaces.ICommand.prototype = {
        __class__: S.puremvc.haxe.interfaces.ICommand
    };
    S.puremvc.haxe.interfaces.IFacade = function() {};
    p["org.puremvc.haxe.interfaces.IFacade"] = S.puremvc.haxe.interfaces.IFacade;
    S.puremvc.haxe.interfaces.IFacade.__name__ = ["org", "puremvc", "haxe", "interfaces", "IFacade"];
    S.puremvc.haxe.interfaces.IFacade.prototype = {
        __class__: S.puremvc.haxe.interfaces.IFacade
    };
    S.puremvc.haxe.interfaces.IMediator = function() {};
    p["org.puremvc.haxe.interfaces.IMediator"] = S.puremvc.haxe.interfaces.IMediator;
    S.puremvc.haxe.interfaces.IMediator.__name__ = ["org", "puremvc", "haxe", "interfaces", "IMediator"];
    S.puremvc.haxe.interfaces.IMediator.prototype = {
        __class__: S.puremvc.haxe.interfaces.IMediator
    };
    S.puremvc.haxe.interfaces.INotification = function() {};
    p["org.puremvc.haxe.interfaces.INotification"] = S.puremvc.haxe.interfaces.INotification;
    S.puremvc.haxe.interfaces.INotification.__name__ = ["org", "puremvc", "haxe", "interfaces", "INotification"];
    S.puremvc.haxe.interfaces.INotification.prototype = {
        __class__: S.puremvc.haxe.interfaces.INotification
    };
    S.puremvc.haxe.interfaces.INotifier = function() {};
    p["org.puremvc.haxe.interfaces.INotifier"] = S.puremvc.haxe.interfaces.INotifier;
    S.puremvc.haxe.interfaces.INotifier.__name__ = ["org", "puremvc", "haxe", "interfaces", "INotifier"];
    S.puremvc.haxe.interfaces.INotifier.prototype = {
        __class__: S.puremvc.haxe.interfaces.INotifier
    };
    S.puremvc.haxe.interfaces.IObserver = function() {};
    p["org.puremvc.haxe.interfaces.IObserver"] = S.puremvc.haxe.interfaces.IObserver;
    S.puremvc.haxe.interfaces.IObserver.__name__ = ["org", "puremvc", "haxe", "interfaces", "IObserver"];
    S.puremvc.haxe.interfaces.IObserver.prototype = {
        __class__: S.puremvc.haxe.interfaces.IObserver
    };
    S.puremvc.haxe.interfaces.IProxy = function() {};
    p["org.puremvc.haxe.interfaces.IProxy"] = S.puremvc.haxe.interfaces.IProxy;
    S.puremvc.haxe.interfaces.IProxy.__name__ = ["org", "puremvc", "haxe", "interfaces", "IProxy"];
    S.puremvc.haxe.interfaces.IProxy.prototype = {
        __class__: S.puremvc.haxe.interfaces.IProxy
    };
    S.puremvc.haxe.patterns = {};
    S.puremvc.haxe.patterns.observer = {};
    S.puremvc.haxe.patterns.observer.Notifier = function() {
        this.facade = S.puremvc.haxe.patterns.facade.Facade.getInstance()
    };
    p["org.puremvc.haxe.patterns.observer.Notifier"] = S.puremvc.haxe.patterns.observer.Notifier;
    S.puremvc.haxe.patterns.observer.Notifier.__name__ = ["org", "puremvc", "haxe", "patterns", "observer", "Notifier"];
    S.puremvc.haxe.patterns.observer.Notifier.__interfaces__ = [S.puremvc.haxe.interfaces.INotifier];
    S.puremvc.haxe.patterns.observer.Notifier.prototype = {
        sendNotification: function(X, q, W) {
            this.facade.sendNotification(X, q, W)
        },
        __class__: S.puremvc.haxe.patterns.observer.Notifier
    };
    S.puremvc.haxe.patterns.command = {};
    S.puremvc.haxe.patterns.command.MacroCommand = function() {
        S.puremvc.haxe.patterns.observer.Notifier.call(this);
        this.subCommands = new t();
        this.initializeMacroCommand()
    };
    p["org.puremvc.haxe.patterns.command.MacroCommand"] = S.puremvc.haxe.patterns.command.MacroCommand;
    S.puremvc.haxe.patterns.command.MacroCommand.__name__ = ["org", "puremvc", "haxe", "patterns", "command", "MacroCommand"];
    S.puremvc.haxe.patterns.command.MacroCommand.__interfaces__ = [S.puremvc.haxe.interfaces.ICommand];
    S.puremvc.haxe.patterns.command.MacroCommand.__super__ = S.puremvc.haxe.patterns.observer.Notifier;
    S.puremvc.haxe.patterns.command.MacroCommand.prototype = v(S.puremvc.haxe.patterns.observer.Notifier.prototype, {
        initializeMacroCommand: function() {},
        addSubCommand: function(q) {
            this.subCommands.add(q)
        },
        execute: function(W) {
            while (!this.subCommands.isEmpty()) {
                var X = this.subCommands.pop();
                var q = R.createInstance(X, []);
                q.execute(W)
            }
        },
        __class__: S.puremvc.haxe.patterns.command.MacroCommand
    });
    S.puremvc.haxe.patterns.command.SimpleCommand = function() {
        S.puremvc.haxe.patterns.observer.Notifier.call(this)
    };
    p["org.puremvc.haxe.patterns.command.SimpleCommand"] = S.puremvc.haxe.patterns.command.SimpleCommand;
    S.puremvc.haxe.patterns.command.SimpleCommand.__name__ = ["org", "puremvc", "haxe", "patterns", "command", "SimpleCommand"];
    S.puremvc.haxe.patterns.command.SimpleCommand.__interfaces__ = [S.puremvc.haxe.interfaces.ICommand];
    S.puremvc.haxe.patterns.command.SimpleCommand.__super__ = S.puremvc.haxe.patterns.observer.Notifier;
    S.puremvc.haxe.patterns.command.SimpleCommand.prototype = v(S.puremvc.haxe.patterns.observer.Notifier.prototype, {
        execute: function(q) {},
        __class__: S.puremvc.haxe.patterns.command.SimpleCommand
    });
    S.puremvc.haxe.patterns.facade = {};
    S.puremvc.haxe.patterns.facade.Facade = function() {
        S.puremvc.haxe.patterns.facade.Facade.instance = this;
        this.initializeFacade()
    };
    p["org.puremvc.haxe.patterns.facade.Facade"] = S.puremvc.haxe.patterns.facade.Facade;
    S.puremvc.haxe.patterns.facade.Facade.__name__ = ["org", "puremvc", "haxe", "patterns", "facade", "Facade"];
    S.puremvc.haxe.patterns.facade.Facade.__interfaces__ = [S.puremvc.haxe.interfaces.IFacade];
    S.puremvc.haxe.patterns.facade.Facade.getInstance = function() {
        if (S.puremvc.haxe.patterns.facade.Facade.instance == null) {
            S.puremvc.haxe.patterns.facade.Facade.instance = new S.puremvc.haxe.patterns.facade.Facade()
        }
        return S.puremvc.haxe.patterns.facade.Facade.instance
    };
    S.puremvc.haxe.patterns.facade.Facade.prototype = {
        initializeFacade: function() {
            this.initializeModel();
            this.initializeController();
            this.initializeView()
        },
        initializeController: function() {
            if (this.controller != null) {
                return
            }
            this.controller = S.puremvc.haxe.core.Controller.getInstance()
        },
        initializeModel: function() {
            if (this.model != null) {
                return
            }
            this.model = S.puremvc.haxe.core.Model.getInstance()
        },
        initializeView: function() {
            if (this.view != null) {
                return
            }
            this.view = S.puremvc.haxe.core.View.getInstance()
        },
        registerCommand: function(q, W) {
            this.controller.registerCommand(q, W)
        },
        removeCommand: function(q) {
            this.controller.removeCommand(q)
        },
        hasCommand: function(q) {
            return this.controller.hasCommand(q)
        },
        registerProxy: function(q) {
            this.model.registerProxy(q)
        },
        retrieveProxy: function(q) {
            return this.model.retrieveProxy(q)
        },
        removeProxy: function(W) {
            var q = null;
            if (this.model != null) {
                q = this.model.removeProxy(W)
            }
            return q
        },
        hasProxy: function(q) {
            return this.model.hasProxy(q)
        },
        registerMediator: function(q) {
            if (this.view != null) {
                this.view.registerMediator(q)
            }
        },
        retrieveMediator: function(q) {
            return this.view.retrieveMediator(q)
        },
        removeMediator: function(q) {
            var W = null;
            if (this.view != null) {
                W = this.view.removeMediator(q)
            }
            return W
        },
        hasMediator: function(q) {
            return this.view.hasMediator(q)
        },
        sendNotification: function(X, q, W) {
            this.notifyObservers(new S.puremvc.haxe.patterns.observer.Notification(X, q, W))
        },
        notifyObservers: function(q) {
            if (this.view != null) {
                this.view.notifyObservers(q)
            }
        },
        __class__: S.puremvc.haxe.patterns.facade.Facade
    };
    S.puremvc.haxe.patterns.mediator = {};
    S.puremvc.haxe.patterns.mediator.Mediator = function(q, W) {
        S.puremvc.haxe.patterns.observer.Notifier.call(this);
        if (q != null) {
            this.mediatorName = q
        } else {
            this.mediatorName = S.puremvc.haxe.patterns.mediator.Mediator.NAME
        }
        if (W != null) {
            this.viewComponent = W
        }
    };
    p["org.puremvc.haxe.patterns.mediator.Mediator"] = S.puremvc.haxe.patterns.mediator.Mediator;
    S.puremvc.haxe.patterns.mediator.Mediator.__name__ = ["org", "puremvc", "haxe", "patterns", "mediator", "Mediator"];
    S.puremvc.haxe.patterns.mediator.Mediator.__interfaces__ = [S.puremvc.haxe.interfaces.IMediator];
    S.puremvc.haxe.patterns.mediator.Mediator.__super__ = S.puremvc.haxe.patterns.observer.Notifier;
    S.puremvc.haxe.patterns.mediator.Mediator.prototype = v(S.puremvc.haxe.patterns.observer.Notifier.prototype, {
        getMediatorName: function() {
            return this.mediatorName
        },
        setViewComponent: function(q) {
            this.viewComponent = q
        },
        getViewComponent: function() {
            return this.viewComponent
        },
        listNotificationInterests: function() {
            return []
        },
        handleNotification: function(q) {},
        onRegister: function() {},
        onRemove: function() {},
        __class__: S.puremvc.haxe.patterns.mediator.Mediator
    });
    S.puremvc.haxe.patterns.observer.Notification = function(W, q, X) {
        this.name = W;
        if (q != null) {
            this.body = q
        }
        if (X != null) {
            this.type = X
        }
    };
    p["org.puremvc.haxe.patterns.observer.Notification"] = S.puremvc.haxe.patterns.observer.Notification;
    S.puremvc.haxe.patterns.observer.Notification.__name__ = ["org", "puremvc", "haxe", "patterns", "observer", "Notification"];
    S.puremvc.haxe.patterns.observer.Notification.__interfaces__ = [S.puremvc.haxe.interfaces.INotification];
    S.puremvc.haxe.patterns.observer.Notification.prototype = {
        getName: function() {
            return this.name
        },
        setBody: function(q) {
            this.body = q
        },
        getBody: function() {
            return this.body
        },
        setType: function(q) {
            this.type = q
        },
        getType: function() {
            return this.type
        },
        toString: function() {
            var q = "Notification Name: " + this.getName();
            q += "\nBody:" + (this.body == null ? "null" : this.body.toString());
            q += "\nType:" + (this.type == null ? "null" : this.type);
            return q
        },
        __class__: S.puremvc.haxe.patterns.observer.Notification
    };
    S.puremvc.haxe.patterns.observer.Observer = function(q, W) {
        this.setNotifyMethod(q);
        this.setNotifyContext(W)
    };
    p["org.puremvc.haxe.patterns.observer.Observer"] = S.puremvc.haxe.patterns.observer.Observer;
    S.puremvc.haxe.patterns.observer.Observer.__name__ = ["org", "puremvc", "haxe", "patterns", "observer", "Observer"];
    S.puremvc.haxe.patterns.observer.Observer.__interfaces__ = [S.puremvc.haxe.interfaces.IObserver];
    S.puremvc.haxe.patterns.observer.Observer.prototype = {
        setNotifyMethod: function(q) {
            this.notify = q
        },
        setNotifyContext: function(q) {
            this.context = q
        },
        getNotifyMethod: function() {
            return this.notify
        },
        getNotifyContext: function() {
            return this.context
        },
        notifyObserver: function(q) {
            (this.getNotifyMethod())(q)
        },
        compareNotifyContext: function(q) {
            return q == this.context
        },
        __class__: S.puremvc.haxe.patterns.observer.Observer
    };
    S.puremvc.haxe.patterns.proxy = {};
    S.puremvc.haxe.patterns.proxy.Proxy = function(W, q) {
        S.puremvc.haxe.patterns.observer.Notifier.call(this);
        if (W != null) {
            this.proxyName = W
        } else {
            this.proxyName = S.puremvc.haxe.patterns.proxy.Proxy.NAME
        }
        if (q != null) {
            this.setData(q)
        }
    };
    p["org.puremvc.haxe.patterns.proxy.Proxy"] = S.puremvc.haxe.patterns.proxy.Proxy;
    S.puremvc.haxe.patterns.proxy.Proxy.__name__ = ["org", "puremvc", "haxe", "patterns", "proxy", "Proxy"];
    S.puremvc.haxe.patterns.proxy.Proxy.__interfaces__ = [S.puremvc.haxe.interfaces.IProxy];
    S.puremvc.haxe.patterns.proxy.Proxy.__super__ = S.puremvc.haxe.patterns.observer.Notifier;
    S.puremvc.haxe.patterns.proxy.Proxy.prototype = v(S.puremvc.haxe.patterns.observer.Notifier.prototype, {
        getProxyName: function() {
            return this.proxyName
        },
        setData: function(q) {
            this.data = q
        },
        getData: function() {
            return this.data
        },
        onRegister: function() {},
        onRemove: function() {},
        __class__: S.puremvc.haxe.patterns.proxy.Proxy
    });
    S.puremvc.typedExt = {};
    S.puremvc.typedExt.EventHandler = function() {
        this._listeners = new Array()
    };
    p["org.puremvc.typedExt.EventHandler"] = S.puremvc.typedExt.EventHandler;
    S.puremvc.typedExt.EventHandler.__name__ = ["org", "puremvc", "typedExt", "EventHandler"];
    S.puremvc.typedExt.EventHandler.prototype = {
        addListener: function(q) {
            this._listeners.push(q)
        },
        fire: function(X) {
            var Y = 0;
            var W = this._listeners;
            while (Y < W.length) {
                var q = W[Y];
                ++Y;
                if (q != null) {
                    q(X)
                }
            }
        },
        removeListener: function(W) {
            var q = W;
            B.remove(this._listeners, q)
        },
        getListeners: function() {
            return this._listeners
        },
        __class__: S.puremvc.typedExt.EventHandler
    };
    S.puremvc.typedExt.ITypedView = function() {};
    p["org.puremvc.typedExt.ITypedView"] = S.puremvc.typedExt.ITypedView;
    S.puremvc.typedExt.ITypedView.__name__ = ["org", "puremvc", "typedExt", "ITypedView"];
    S.puremvc.typedExt.ITypedView.prototype = {
        __class__: S.puremvc.typedExt.ITypedView
    };
    S.puremvc.typedExt.TypedMediator = function(q, W) {
        S.puremvc.haxe.patterns.observer.Notifier.call(this);
        if (q != null) {
            this.mediatorName = q
        } else {
            this.mediatorName = S.puremvc.typedExt.TypedMediator.NAME
        }
        if (W != null) {
            this.viewComponent = W;
            (h.Boot.__cast(W, S.puremvc.typedExt.ITypedView)).listener = this
        }
    };
    p["org.puremvc.typedExt.TypedMediator"] = S.puremvc.typedExt.TypedMediator;
    S.puremvc.typedExt.TypedMediator.__name__ = ["org", "puremvc", "typedExt", "TypedMediator"];
    S.puremvc.typedExt.TypedMediator.__interfaces__ = [S.puremvc.haxe.interfaces.IMediator];
    S.puremvc.typedExt.TypedMediator.__super__ = S.puremvc.haxe.patterns.observer.Notifier;
    S.puremvc.typedExt.TypedMediator.prototype = v(S.puremvc.haxe.patterns.observer.Notifier.prototype, {
        getMediatorName: function() {
            return this.mediatorName
        },
        setViewComponent: function(q) {
            this.viewComponent = q
        },
        getViewComponent: function() {
            return this.viewComponent
        },
        listNotificationInterests: function() {
            return []
        },
        handleNotification: function(q) {},
        onRegister: function() {},
        onRemove: function() {},
        __class__: S.puremvc.typedExt.TypedMediator
    });
    S.puremvc.typedExt.js = {};
    S.puremvc.typedExt.js.IJqueryComponent = function() {};
    p["org.puremvc.typedExt.js.IJqueryComponent"] = S.puremvc.typedExt.js.IJqueryComponent;
    S.puremvc.typedExt.js.IJqueryComponent.__name__ = ["org", "puremvc", "typedExt", "js", "IJqueryComponent"];
    S.puremvc.typedExt.js.IJqueryComponent.prototype = {
        __class__: S.puremvc.typedExt.js.IJqueryComponent
    };
    S.puremvc.typedExt.js.JqueryComponent = function(q) {
        this._onClick = this.getEventHandler(S.puremvc.typedExt.js.JqueryEvents.ON_CLICK);
        this._parent = q.parent;
        this._id = q.id;
        this._templateId = q.templateId;
        this._jqTemplate = q.jqTemplate;
        this._jqNode = q.jqNode;
        this._tagName = q.tagName;
        this._autoCreate = q.autoCreate;
        this._usageYourself = q.usageYourself;
        this._mouseDownTime = 0;
        this._lastMouseMove = 0;
        this.init();
        this._jqNode.click(s(this, this._click))
    };
    p["org.puremvc.typedExt.js.JqueryComponent"] = S.puremvc.typedExt.js.JqueryComponent;
    S.puremvc.typedExt.js.JqueryComponent.__name__ = ["org", "puremvc", "typedExt", "js", "JqueryComponent"];
    S.puremvc.typedExt.js.JqueryComponent.__interfaces__ = [S.puremvc.typedExt.js.IJqueryComponent];
    S.puremvc.typedExt.js.JqueryComponent.bindHtmlEvents = function(q) {
        S.puremvc.typedExt.js.JqueryComponent.setHtmlEventHandler(q, S.puremvc.typedExt.js.JqueryEvents.ON_CHANGE);
        S.puremvc.typedExt.js.JqueryComponent.setHtmlEventHandler(q, S.puremvc.typedExt.js.JqueryEvents.ON_CLICK);
        S.puremvc.typedExt.js.JqueryComponent.setHtmlEventHandler(q, S.puremvc.typedExt.js.JqueryEvents.ON_MOUSE_WHEEL);
        S.puremvc.typedExt.js.JqueryComponent.setHtmlEventHandler(q, S.puremvc.typedExt.js.JqueryEvents.ON_MOUSE_MOVE);
        S.puremvc.typedExt.js.JqueryComponent.setHtmlEventHandler(q, S.puremvc.typedExt.js.JqueryEvents.ON_DRAG);
        S.puremvc.typedExt.js.JqueryComponent.setHtmlEventHandler(q, S.puremvc.typedExt.js.JqueryEvents.ON_DBL_CLICK);
        S.puremvc.typedExt.js.JqueryComponent.setHtmlEventHandler(q, S.puremvc.typedExt.js.JqueryEvents.ON_MOUSE_UP);
        S.puremvc.typedExt.js.JqueryComponent.setHtmlEventHandler(q, S.puremvc.typedExt.js.JqueryEvents.ON_MOUSE_DOWN);
        S.puremvc.typedExt.js.JqueryComponent.setHtmlEventHandler(q, S.puremvc.typedExt.js.JqueryEvents.ON_DRAG);
        S.puremvc.typedExt.js.JqueryComponent.setHtmlEventHandler(q, S.puremvc.typedExt.js.JqueryEvents.ON_STOP_DRAG);
        S.puremvc.typedExt.js.JqueryComponent.setHtmlEventHandler(q, S.puremvc.typedExt.js.JqueryEvents.ON_KEY_UP);
        S.puremvc.typedExt.js.JqueryComponent.setHtmlEventHandler(q, S.puremvc.typedExt.js.JqueryEvents.ON_KEY_DOWN)
    };
    S.puremvc.typedExt.js.JqueryComponent.setHtmlEventHandler = function(ac, W) {
        var X = S.puremvc.typedExt.js.UiComponentService.eventToJqueryName(W);
        var Z = ac._jqNode.attr(X);
        var ab = Z;
        if (Z != null) {
            var ad = null;
            if (Z.indexOf(".") >= 0) {
                var aa = Z.split(".");
                var Y = aa[0];
                ab = aa[1];
                ad = S.puremvc.typedExt.js.UiComponentService.getParentById(ac, Y)
            } else {
                ad = S.puremvc.typedExt.js.JqueryComponent.getEventDispatcher(ac, ab)
            }
            if (ad != null) {
                var q = D.field(ad, ab);
                if (D.isFunction(q)) {
                    ac.bindEvent(W, function(ae, af) {
                        ad[ab](ae, ac)
                    })
                }
            }
        }
        return null
    };
    S.puremvc.typedExt.js.JqueryComponent.getEventDispatcher = function(W, q) {
        var X = W;
        while (X != null) {
            if (X.methodExists(q)) {
                return X
            }
            X = X._parent
        }
        return null
    };
    S.puremvc.typedExt.js.JqueryComponent.prototype = {
        init: function() {
            if (this._jqNode == null) {
                this.buildJqNode()
            }
            if (this._jqNode.length != 0) {
                if (this._id == null) {
                    this._id = this.getIdFromJqNode()
                }
                if (!this._usageYourself) {
                    this.applyTemplateId()
                }
                S.puremvc.typedExt.js.JqueryComponent.bindHtmlEvents(this);
                this.initChildComponents(this._jqNode)
            }
        },
        buildJqNode: function() {
            var q;
            if (this._parent != null) {
                q = this._parent.getJqNode()
            } else {
                q = null
            }
            if (this._autoCreate) {
                this.createTag();
                q.append(this._jqNode)
            } else {
                this._jqNode = S.puremvc.typedExt.js.UiComponentService.findJqNode(this._id, q)
            }
            if (this._usageYourself) {
                this._jqNode = new h.JQuery(S.puremvc.typedExt.js.UiComponentService.getTemplateContent(this._templateId));
                q.append(this._jqNode)
            }
            if (this._jqNode == null || this._jqNode.length == 0) {
                this._jqNode = null;
                console.log("container with id " + this._id + " does not exists")
            }
        },
        createTag: function() {
            if (this._tagName == null) {
                this._tagName = "div"
            }
            var q = window.document.createElement(this._tagName);
            this._jqNode = new h.JQuery(q);
            this._jqNode.addClass(this._id)
        },
        applyTemplateId: function() {
            this._jqTemplate = S.puremvc.typedExt.js.UiComponentService.getTemplateContent(this._templateId);
            if (this._jqTemplate != null && this._jqTemplate.length > 0 && this._jqNode.length > 0) {
                this._jqNode.append(this._jqTemplate)
            }
        },
        getIdFromJqNode: function() {
            var X = this._jqNode.attr("class");
            if (X != null) {
                var q = X.split(" ");
                var Y = 0;
                while (Y < q.length) {
                    var W = q[Y];
                    ++Y;
                    if ("hx" == B.substr(W, 0, 2)) {
                        return W
                    }
                }
                return q[0]
            }
            return ""
        },
        initChildComponents: function(W) {
            if (this._children == null) {
                this._children = new Array()
            }
            var X = W.children();
            var aa = 0;
            var ab = X.length;
            while (aa < ab) {
                var Y = aa++;
                var Z = X.eq(Y);
                if (Z.attr("type") != null) {
                    var q = S.puremvc.typedExt.js.UiComponentService.createFromJqNode(Z, this);
                    this._children.push(q);
                    this[q._id] = q
                } else {
                    if (!S.puremvc.typedExt.js.UiComponentService.nodeIsComponent(Z)) {
                        this.initChildComponents(Z)
                    }
                }
            }
        },
        getChild: function(Y) {
            var W = 0;
            var q = this._children;
            while (W < q.length) {
                var X = q[W];
                ++W;
                if (X.getId() == Y) {
                    return X
                }
            }
            return null
        },
        getChildren: function() {
            return this._children
        },
        bindEvent: function(q, X) {
            var W = this.getEventHandler(q);
            W.addListener(X);
            if (q == S.puremvc.typedExt.js.JqueryEvents.ON_DRAG || q == S.puremvc.typedExt.js.JqueryEvents.ON_STOP_DRAG) {
                this._draggable = true;
                this.bindDrag(X)
            } else {
                this._bindEvent(q, W)
            }
        },
        _bindEvent: function(W, X) {
            var Y = this;
            var q = S.puremvc.typedExt.js.UiComponentService.eventToJqueryName(W);
            if (q == "mousewheel") {
                q += " DOMMouseScroll"
            }
            this._jqNode.bind(q, function(Z) {
                X.fire(Y.wrapJqEvent(Z))
            })
        },
        wrapJqEvent: function(W) {
            var q = {
                target: this,
                jqEvent: W,
                scrollDelta: -W.originalEvent.wheelDelta || W.originalEvent.detail * 40,
                clientX: W.clientX,
                clientY: W.clientY,
                pageX: W.pageX + 0,
                pageY: W.pageY + 0,
                keyCode: W.keyCode,
                dragStartX: this._startDragX,
                dragStartY: this._startDragY,
                shiftKey: W.shiftKey
            };
            return q
        },
        bindDrag: function(W) {
            var Y = this;
            var q = this.getEventHandler(S.puremvc.typedExt.js.JqueryEvents.ON_DRAG);
            var X = this.getEventHandler(S.puremvc.typedExt.js.JqueryEvents.ON_STOP_DRAG);
            this._jqNode.mousemove(function(aa) {
                var Z = m.Timer.stamp();
                if (Z - Y._lastMouseMove > 0.13) {
                    Y._lastMouseMove = Z;
                    if (Y._mouseDown) {
                        Y._dragState = true;
                        q.fire(Y.wrapJqEvent(aa))
                    }
                }
            });
            if (!this._mouseUpBinded) {
                this._jqNode.mousedown(function(Z) {
                    Y.onMouseDown(Z);
                    return false
                });
                this._jqNode.mouseup(function(Z) {
                    Z.preventDefault()
                });
                this._mouseUpBinded = true
            }
        },
        onMouseDown: function(q) {
            this._mouseDown = true;
            this._mouseDownTime = m.Timer.stamp();
            this._lastMouseMove = this._mouseDownTime;
            this._startDragX = q.pageX;
            this._startDragY = q.pageY
        },
        onMouseUp: function(W) {
            var q = this.wrapJqEvent(W);
            this._mouseDown = false;
            if (!this._draggable || m.Timer.stamp() - this._mouseDownTime < 0.13) {
                this._dragState = false;
                return
            }
            if (this._dragState) {
                q.dragStartX = this._startDragX;
                q.dragStartY = this._startDragY;
                this.getEventHandler(S.puremvc.typedExt.js.JqueryEvents.ON_STOP_DRAG).fire(q)
            } else {}
            this._dragState = false
        },
        getEventHandler: function(q) {
            switch (q[1]) {
                case 1:
                    if (this._onChange == null) {
                        this._onChange = new S.puremvc.typedExt.js.UiEventHandler(this)
                    }
                    return this._onChange;
                case 0:
                    if (this._onClick == null) {
                        this._onClick = new S.puremvc.typedExt.js.UiEventHandler(this)
                    }
                    return this._onClick;
                case 4:
                    if (this._onDblClick == null) {
                        this._onDblClick = new S.puremvc.typedExt.js.UiEventHandler(this)
                    }
                    return this._onDblClick;
                case 2:
                    if (this._onMouseMove == null) {
                        this._onMouseMove = new S.puremvc.typedExt.js.UiEventHandler(this)
                    }
                    return this._onMouseMove;
                case 3:
                    if (this._onMouseWheel == null) {
                        this._onMouseWheel = new S.puremvc.typedExt.js.UiEventHandler(this)
                    }
                    return this._onMouseWheel;
                case 5:
                    if (this._onMouseUp == null) {
                        this._onMouseUp = new S.puremvc.typedExt.js.UiEventHandler(this)
                    }
                    return this._onMouseUp;
                case 6:
                    if (this._onMouseDown == null) {
                        this._onMouseDown = new S.puremvc.typedExt.js.UiEventHandler(this)
                    }
                    return this._onMouseDown;
                case 7:
                    if (this._onDrag == null) {
                        this._onDrag = new S.puremvc.typedExt.js.UiEventHandler(this)
                    }
                    return this._onDrag;
                case 8:
                    if (this._onStartDrag == null) {
                        this._onStartDrag = new S.puremvc.typedExt.js.UiEventHandler(this)
                    }
                    return this._onStartDrag;
                case 9:
                    if (this._onStopDrag == null) {
                        this._onStopDrag = new S.puremvc.typedExt.js.UiEventHandler(this)
                    }
                    return this._onStopDrag;
                case 11:
                    if (this._onKeyUp == null) {
                        this._onKeyUp = new S.puremvc.typedExt.js.UiEventHandler(this)
                    }
                    return this._onKeyUp;
                case 10:
                    if (this._onKeyDown == null) {
                        this._onKeyDown = new S.puremvc.typedExt.js.UiEventHandler(this)
                    }
                    return this._onKeyDown
            }
        },
        methodExists: function(q) {
            var W = D.field(this, q);
            return W != null
        },
        getHtmlDom: function() {
            return this._jqNode[0]
        },
        get_x: function() {
            return this._jqNode.offset().left
        },
        set_x: function(q) {
            this.x = q;
            this._jqNode.css("left", A.string(Math.floor(q)) + "px");
            return q
        },
        set_y: function(q) {
            this.y = q;
            this._jqNode.css("top", A.string(Math.floor(q)) + "px");
            return q
        },
        get_y: function() {
            return this._jqNode.offset().top
        },
        getJqNode: function() {
            return this._jqNode
        },
        findChildJqNode: function(X, q) {
            var W;
            if (q == null) {
                W = this._jqNode
            } else {
                W = q
            }
            return S.puremvc.typedExt.js.UiComponentService.findJqNode(X, W)
        },
        getId: function() {
            return this._id
        },
        get_width: function() {
            return this._jqNode[0].getClientRects()[0].width
        },
        get_height: function() {
            return this._jqNode[0].getClientRects()[0].height
        },
        set_width: function(q) {
            this._jqNode.width(Math.floor(q));
            return q
        },
        set_height: function(q) {
            this._jqNode.height(Math.floor(q));
            return q
        },
        show: function() {
            this._jqNode.show()
        },
        hide: function() {
            this._jqNode.hide()
        },
        destroy: function() {},
        getHtml: function(q) {
            var W = this._jqNode;
            if (q != null) {
                W = this.findChildJqNode(q)
            }
            return W.html()
        },
        setHtml: function(X, q) {
            var W = this._jqNode;
            if (q != null) {
                W = this.findChildJqNode(q)
            }
            W.html(X)
        },
        setAttr: function(q, W) {
            this._jqNode.attr(q, W)
        },
        clear: function() {
            this._jqNode.html(" ")
        },
        get_parent: function() {
            return this._parent
        },
        set_parent: function(q) {
            this._parent = q;
            return q
        },
        click: function(q) {
            this._onClick.removeListener(q);
            if (q != null) {
                this._onClick.addListener(q)
            }
        },
        _click: function(q) {
            // q.preventDefault();
            this._onClick.fire(this.wrapJqEvent(q))
        },
        __class__: S.puremvc.typedExt.js.JqueryComponent,
        __properties__: {
            set_y: "set_y",
            get_y: "get_y",
            set_x: "set_x",
            get_x: "get_x",
            set_parent: "set_parent",
            get_parent: "get_parent",
            set_height: "set_height",
            get_height: "get_height",
            set_width: "set_width",
            get_width: "get_width"
        }
    };
    S.puremvc.typedExt.js.JqueryControl = function(q) {
        S.puremvc.typedExt.js.JqueryComponent.call(this, q)
    };
    p["org.puremvc.typedExt.js.JqueryControl"] = S.puremvc.typedExt.js.JqueryControl;
    S.puremvc.typedExt.js.JqueryControl.__name__ = ["org", "puremvc", "typedExt", "js", "JqueryControl"];
    S.puremvc.typedExt.js.JqueryControl.__super__ = S.puremvc.typedExt.js.JqueryComponent;
    S.puremvc.typedExt.js.JqueryControl.prototype = v(S.puremvc.typedExt.js.JqueryComponent.prototype, {
        get_enabled: function() {
            var q = this._jqNode.attr("disabled");
            return q == null
        },
        set_enabled: function(q) {
            if (q) {
                this._jqNode.removeAttr("disabled")
            } else {
                this._jqNode.attr("disabled", "disabled")
            }
            return q
        },
        __class__: S.puremvc.typedExt.js.JqueryControl,
        __properties__: v(S.puremvc.typedExt.js.JqueryComponent.prototype.__properties__, {
            set_enabled: "set_enabled",
            get_enabled: "get_enabled"
        })
    });
    S.puremvc.typedExt.js.JqueryButton = function(q) {
        S.puremvc.typedExt.js.JqueryControl.call(this, q)
    };
    p["org.puremvc.typedExt.js.JqueryButton"] = S.puremvc.typedExt.js.JqueryButton;
    S.puremvc.typedExt.js.JqueryButton.__name__ = ["org", "puremvc", "typedExt", "js", "JqueryButton"];
    S.puremvc.typedExt.js.JqueryButton.__super__ = S.puremvc.typedExt.js.JqueryControl;
    S.puremvc.typedExt.js.JqueryButton.prototype = v(S.puremvc.typedExt.js.JqueryControl.prototype, {
        __class__: S.puremvc.typedExt.js.JqueryButton
    });
    S.puremvc.typedExt.js.JqueryCheckBox = function(W) {
        var q = this;
        S.puremvc.typedExt.js.JqueryControl.call(this, W);
        this._checked = false;
        this._onChange = this.getEventHandler(S.puremvc.typedExt.js.JqueryEvents.ON_CHANGE);
        if (this._isTxt()) {
            this.getJqNode().find(".on").click(function(X) {
                q.set_checked(true);
                q._onChange.fire({
                    jqEvent: X,
                    target: q
                });
                return false
            });
            this.getJqNode().find(".off").click(function(X) {
                q.set_checked(false);
                q._onChange.fire({
                    jqEvent: X,
                    target: q
                });
                return false
            })
        } else {
            this.getJqNode().click(function(X) {
                q.set_checked(!q._checked);
                q._onChange.fire({
                    jqEvent: X,
                    target: q
                });
                return false
            })
        }
    };
    p["org.puremvc.typedExt.js.JqueryCheckBox"] = S.puremvc.typedExt.js.JqueryCheckBox;
    S.puremvc.typedExt.js.JqueryCheckBox.__name__ = ["org", "puremvc", "typedExt", "js", "JqueryCheckBox"];
    S.puremvc.typedExt.js.JqueryCheckBox.__super__ = S.puremvc.typedExt.js.JqueryControl;
    S.puremvc.typedExt.js.JqueryCheckBox.prototype = v(S.puremvc.typedExt.js.JqueryControl.prototype, {
        get_checked: function() {
            return this._checked
        },
        set_checked: function(q) {
            this._checked = q;
            if (q) {
                this._jqNode.attr("checked", "checked");
                this._jqNode.addClass("active")
            } else {
                this._jqNode.removeAttr("checked");
                this._jqNode.removeClass("active")
            }
            return q
        },
        _isTxt: function() {
            return this.getJqNode().find(".on").length > 0
        },
        change: function(q) {
            this._onChange.removeListener(q);
            if (q != null) {
                this._onChange.addListener(q)
            }
        },
        __class__: S.puremvc.typedExt.js.JqueryCheckBox,
        __properties__: v(S.puremvc.typedExt.js.JqueryControl.prototype.__properties__, {
            set_checked: "set_checked",
            get_checked: "get_checked"
        })
    });
    S.puremvc.typedExt.js.JqueryCombo = function(q) {
        S.puremvc.typedExt.js.JqueryControl.call(this, q)
    };
    p["org.puremvc.typedExt.js.JqueryCombo"] = S.puremvc.typedExt.js.JqueryCombo;
    S.puremvc.typedExt.js.JqueryCombo.__name__ = ["org", "puremvc", "typedExt", "js", "JqueryCombo"];
    S.puremvc.typedExt.js.JqueryCombo.__super__ = S.puremvc.typedExt.js.JqueryControl;
    S.puremvc.typedExt.js.JqueryCombo.prototype = v(S.puremvc.typedExt.js.JqueryControl.prototype, {
        get_value: function() {
            var q = this._jqNode.find("option:selected").val();
            return q
        },
        set_value: function(q) {
            this._jqNode.find('[value="' + q + '"]').attr("selected", "selected");
            return q
        },
        addItem: function(q, X) {
            var W = new h.JQuery(window.document.createElement("option"));
            W.attr("value", X);
            W.html(q);
            this._jqNode.append(W)
        },
        __class__: S.puremvc.typedExt.js.JqueryCombo,
        __properties__: v(S.puremvc.typedExt.js.JqueryControl.prototype.__properties__, {
            set_value: "set_value",
            get_value: "get_value"
        })
    });
    S.puremvc.typedExt.js.JqueryEvents = {
        __ename__: true,
        __constructs__: ["ON_CLICK", "ON_CHANGE", "ON_MOUSE_MOVE", "ON_MOUSE_WHEEL", "ON_DBL_CLICK", "ON_MOUSE_UP", "ON_MOUSE_DOWN", "ON_DRAG", "ON_START_DRAG", "ON_STOP_DRAG", "ON_KEY_DOWN", "ON_KEY_UP"]
    };
    S.puremvc.typedExt.js.JqueryEvents.ON_CLICK = ["ON_CLICK", 0];
    S.puremvc.typedExt.js.JqueryEvents.ON_CLICK.toString = l;
    S.puremvc.typedExt.js.JqueryEvents.ON_CLICK.__enum__ = S.puremvc.typedExt.js.JqueryEvents;
    S.puremvc.typedExt.js.JqueryEvents.ON_CHANGE = ["ON_CHANGE", 1];
    S.puremvc.typedExt.js.JqueryEvents.ON_CHANGE.toString = l;
    S.puremvc.typedExt.js.JqueryEvents.ON_CHANGE.__enum__ = S.puremvc.typedExt.js.JqueryEvents;
    S.puremvc.typedExt.js.JqueryEvents.ON_MOUSE_MOVE = ["ON_MOUSE_MOVE", 2];
    S.puremvc.typedExt.js.JqueryEvents.ON_MOUSE_MOVE.toString = l;
    S.puremvc.typedExt.js.JqueryEvents.ON_MOUSE_MOVE.__enum__ = S.puremvc.typedExt.js.JqueryEvents;
    S.puremvc.typedExt.js.JqueryEvents.ON_MOUSE_WHEEL = ["ON_MOUSE_WHEEL", 3];
    S.puremvc.typedExt.js.JqueryEvents.ON_MOUSE_WHEEL.toString = l;
    S.puremvc.typedExt.js.JqueryEvents.ON_MOUSE_WHEEL.__enum__ = S.puremvc.typedExt.js.JqueryEvents;
    S.puremvc.typedExt.js.JqueryEvents.ON_DBL_CLICK = ["ON_DBL_CLICK", 4];
    S.puremvc.typedExt.js.JqueryEvents.ON_DBL_CLICK.toString = l;
    S.puremvc.typedExt.js.JqueryEvents.ON_DBL_CLICK.__enum__ = S.puremvc.typedExt.js.JqueryEvents;
    S.puremvc.typedExt.js.JqueryEvents.ON_MOUSE_UP = ["ON_MOUSE_UP", 5];
    S.puremvc.typedExt.js.JqueryEvents.ON_MOUSE_UP.toString = l;
    S.puremvc.typedExt.js.JqueryEvents.ON_MOUSE_UP.__enum__ = S.puremvc.typedExt.js.JqueryEvents;
    S.puremvc.typedExt.js.JqueryEvents.ON_MOUSE_DOWN = ["ON_MOUSE_DOWN", 6];
    S.puremvc.typedExt.js.JqueryEvents.ON_MOUSE_DOWN.toString = l;
    S.puremvc.typedExt.js.JqueryEvents.ON_MOUSE_DOWN.__enum__ = S.puremvc.typedExt.js.JqueryEvents;
    S.puremvc.typedExt.js.JqueryEvents.ON_DRAG = ["ON_DRAG", 7];
    S.puremvc.typedExt.js.JqueryEvents.ON_DRAG.toString = l;
    S.puremvc.typedExt.js.JqueryEvents.ON_DRAG.__enum__ = S.puremvc.typedExt.js.JqueryEvents;
    S.puremvc.typedExt.js.JqueryEvents.ON_START_DRAG = ["ON_START_DRAG", 8];
    S.puremvc.typedExt.js.JqueryEvents.ON_START_DRAG.toString = l;
    S.puremvc.typedExt.js.JqueryEvents.ON_START_DRAG.__enum__ = S.puremvc.typedExt.js.JqueryEvents;
    S.puremvc.typedExt.js.JqueryEvents.ON_STOP_DRAG = ["ON_STOP_DRAG", 9];
    S.puremvc.typedExt.js.JqueryEvents.ON_STOP_DRAG.toString = l;
    S.puremvc.typedExt.js.JqueryEvents.ON_STOP_DRAG.__enum__ = S.puremvc.typedExt.js.JqueryEvents;
    S.puremvc.typedExt.js.JqueryEvents.ON_KEY_DOWN = ["ON_KEY_DOWN", 10];
    S.puremvc.typedExt.js.JqueryEvents.ON_KEY_DOWN.toString = l;
    S.puremvc.typedExt.js.JqueryEvents.ON_KEY_DOWN.__enum__ = S.puremvc.typedExt.js.JqueryEvents;
    S.puremvc.typedExt.js.JqueryEvents.ON_KEY_UP = ["ON_KEY_UP", 11];
    S.puremvc.typedExt.js.JqueryEvents.ON_KEY_UP.toString = l;
    S.puremvc.typedExt.js.JqueryEvents.ON_KEY_UP.__enum__ = S.puremvc.typedExt.js.JqueryEvents;
    S.puremvc.typedExt.js.JqueryKnob = function(W) {
        var q = this;
        this._value = 0;
        this._mouseHandled = false;
        this._onChange = this.getEventHandler(S.puremvc.typedExt.js.JqueryEvents.ON_CHANGE);
        this._onStopDrag = this.getEventHandler(S.puremvc.typedExt.js.JqueryEvents.ON_STOP_DRAG);
        S.puremvc.typedExt.js.JqueryComponent.call(this, W);
        if (this._jqNode.find(".knob").length > 0) {
            this._jqKnob = this._jqNode.find(".knob")
        } else {
            this._jqKnob = this._jqNode
        }
        this._jqKnob.knob({
            value: 0,
            slide: function(Y, Z) {
                var X = {
                    jqEvent: Y,
                    target: q
                };
                q._value = Z.value;
                q._onChange.fire(X)
            }
        });
        this._jqKnob.get(0).addEventListener("mousedown", function(X) {
            q._mouseHandled = true
        });
        window.addEventListener("mouseup", function(X) {
            q._mouseHandled = false
        })
    };
    p["org.puremvc.typedExt.js.JqueryKnob"] = S.puremvc.typedExt.js.JqueryKnob;
    S.puremvc.typedExt.js.JqueryKnob.__name__ = ["org", "puremvc", "typedExt", "js", "JqueryKnob"];
    S.puremvc.typedExt.js.JqueryKnob.__super__ = S.puremvc.typedExt.js.JqueryComponent;
    S.puremvc.typedExt.js.JqueryKnob.prototype = v(S.puremvc.typedExt.js.JqueryComponent.prototype, {
        set_value: function(q) {
            this._value = q;
            this._jqKnob.knob({
                value: q
            });
            return q
        },
        get_value: function() {
            return this._value
        },
        get_mouseHandled: function() {
            return this._mouseHandled
        },
        change: function(q) {
            this._onChange.removeListener(q);
            if (q != null) {
                this._onChange.addListener(q)
            }
        },
        stopDrag: function(q) {
            this._onStopDrag.removeListener(q);
            if (q != null) {
                this._onStopDrag.addListener(q)
            }
        },
        _stopDrag: function(W, X) {
            var q = {
                jqEvent: W,
                target: this
            };
            this._onStopDrag.fire(q)
        },
        __class__: S.puremvc.typedExt.js.JqueryKnob,
        __properties__: v(S.puremvc.typedExt.js.JqueryComponent.prototype.__properties__, {
            get_mouseHandled: "get_mouseHandled",
            set_value: "set_value",
            get_value: "get_value"
        })
    });
    S.puremvc.typedExt.js.JqueryLabel = function(q) {
        S.puremvc.typedExt.js.JqueryControl.call(this, q)
    };
    p["org.puremvc.typedExt.js.JqueryLabel"] = S.puremvc.typedExt.js.JqueryLabel;
    S.puremvc.typedExt.js.JqueryLabel.__name__ = ["org", "puremvc", "typedExt", "js", "JqueryLabel"];
    S.puremvc.typedExt.js.JqueryLabel.__super__ = S.puremvc.typedExt.js.JqueryControl;
    S.puremvc.typedExt.js.JqueryLabel.prototype = v(S.puremvc.typedExt.js.JqueryControl.prototype, {
        get_text: function() {
            return this.getHtml()
        },
        set_text: function(q) {
            this.setHtml(q);
            return q
        },
        __class__: S.puremvc.typedExt.js.JqueryLabel,
        __properties__: v(S.puremvc.typedExt.js.JqueryControl.prototype.__properties__, {
            set_text: "set_text",
            get_text: "get_text"
        })
    });
    S.puremvc.typedExt.js.JqueryNumberPicker = function(W) {
        var q = this;
        S.puremvc.typedExt.js.JqueryComponent.call(this, W);
        this._onChange = this.getEventHandler(S.puremvc.typedExt.js.JqueryEvents.ON_CHANGE);
        this.minValue = 0;
        this.maxValue = 0;
        this.step = 1;
        this.getJqNode().find(".decrease").click(function(X) {
            q.decrease(X)
        });
        this.getJqNode().find(".increase").click(function(X) {
            q.increase(X)
        })
    };
    p["org.puremvc.typedExt.js.JqueryNumberPicker"] = S.puremvc.typedExt.js.JqueryNumberPicker;
    S.puremvc.typedExt.js.JqueryNumberPicker.__name__ = ["org", "puremvc", "typedExt", "js", "JqueryNumberPicker"];
    S.puremvc.typedExt.js.JqueryNumberPicker.__super__ = S.puremvc.typedExt.js.JqueryComponent;
    S.puremvc.typedExt.js.JqueryNumberPicker.prototype = v(S.puremvc.typedExt.js.JqueryComponent.prototype, {
        set_value: function(q) {
            this.value = q;
            if (this.get_value() > this.maxValue) {
                this.value = this.maxValue
            } else {
                if (this.get_value() < this.minValue) {
                    this.value = this.minValue
                }
            }
            this.getJqNode().find(".label").html(A.string(this.get_value()));
            return this.get_value()
        },
        get_value: function() {
            return this.value
        },
        decrease: function(q) {
            this.innerSetValue(q, this.get_value() - this.step)
        },
        increase: function(q) {
            this.innerSetValue(q, this.get_value() + this.step)
        },
        innerSetValue: function(Y, X) {
            var q = this.get_value();
            this.set_value(X);
            if (q != this.get_value()) {
                var W = {
                    jqEvent: Y,
                    target: this
                };
                this._onChange.fire(W)
            }
        },
        change: function(q) {
            this._onChange.removeListener(q);
            if (q != null) {
                this._onChange.addListener(q)
            }
        },
        __class__: S.puremvc.typedExt.js.JqueryNumberPicker,
        __properties__: v(S.puremvc.typedExt.js.JqueryComponent.prototype.__properties__, {
            set_value: "set_value",
            get_value: "get_value"
        })
    });
    S.puremvc.typedExt.js.JqueryRadio = function(q) {
        S.puremvc.typedExt.js.JqueryControl.call(this, q)
    };
    p["org.puremvc.typedExt.js.JqueryRadio"] = S.puremvc.typedExt.js.JqueryRadio;
    S.puremvc.typedExt.js.JqueryRadio.__name__ = ["org", "puremvc", "typedExt", "js", "JqueryRadio"];
    S.puremvc.typedExt.js.JqueryRadio.__super__ = S.puremvc.typedExt.js.JqueryControl;
    S.puremvc.typedExt.js.JqueryRadio.prototype = v(S.puremvc.typedExt.js.JqueryControl.prototype, {
        get_checked: function() {
            var q = this._jqNode.attr("checked");
            var W;
            if (q == null || q.toLowerCase() == "false" || q == "0") {
                W = false
            } else {
                W = true
            }
            return W
        },
        set_checked: function(q) {
            if (q) {
                this._jqNode.attr("checked")
            } else {
                this._jqNode.removeAttr("checked")
            }
            return q
        },
        __class__: S.puremvc.typedExt.js.JqueryRadio,
        __properties__: v(S.puremvc.typedExt.js.JqueryControl.prototype.__properties__, {
            set_checked: "set_checked",
            get_checked: "get_checked"
        })
    });
    S.puremvc.typedExt.js.ScrollOrientation = {
        __ename__: true,
        __constructs__: ["Horizontal", "Vertical"]
    };
    S.puremvc.typedExt.js.ScrollOrientation.Horizontal = ["Horizontal", 0];
    S.puremvc.typedExt.js.ScrollOrientation.Horizontal.toString = l;
    S.puremvc.typedExt.js.ScrollOrientation.Horizontal.__enum__ = S.puremvc.typedExt.js.ScrollOrientation;
    S.puremvc.typedExt.js.ScrollOrientation.Vertical = ["Vertical", 1];
    S.puremvc.typedExt.js.ScrollOrientation.Vertical.toString = l;
    S.puremvc.typedExt.js.ScrollOrientation.Vertical.__enum__ = S.puremvc.typedExt.js.ScrollOrientation;
    S.puremvc.typedExt.js.JqueryScroll = function(q) {
        this._lastMove = 0;
        this._value = 0;
        this._onChange = this.getEventHandler(S.puremvc.typedExt.js.JqueryEvents.ON_CHANGE);
        this._onStartDrag = this.getEventHandler(S.puremvc.typedExt.js.JqueryEvents.ON_START_DRAG);
        this._onStopDrag = this.getEventHandler(S.puremvc.typedExt.js.JqueryEvents.ON_STOP_DRAG);
        S.puremvc.typedExt.js.JqueryControl.call(this, q);
        this._barBlock = this.findChildJqNode(S.puremvc.typedExt.js.JqueryScroll.SCROLL_BAR_ID);
        this._barTop = this._jqNode.offset().top - this._barBlock.offset().top;
        this._barLeft = this._jqNode.offset().left - this._barBlock.offset().left;
        this._barBlock.css({
            position: "relative",
            marginLeft: 0,
            marginTop: 0,
            top: this._barTop,
            left: this._barLeft
        });
        this._dragActive = false;
        this._barBlock.draggable({
            start: s(this, this._startDrag),
            stop: s(this, this._stopDrag),
            drag: s(this, this._drag),
            containment: "parent",
            refreshPositions: false,
            scroll: false
        });
        this._jqNode.click(s(this, this.clickHandler));
        this.min = 0;
        this.max = 100;
        if (this.get_height() > this.get_width()) {
            this.setOrientation(S.puremvc.typedExt.js.ScrollOrientation.Vertical)
        } else {
            this.setOrientation(S.puremvc.typedExt.js.ScrollOrientation.Horizontal)
        }
    };
    p["org.puremvc.typedExt.js.JqueryScroll"] = S.puremvc.typedExt.js.JqueryScroll;
    S.puremvc.typedExt.js.JqueryScroll.__name__ = ["org", "puremvc", "typedExt", "js", "JqueryScroll"];
    S.puremvc.typedExt.js.JqueryScroll.__super__ = S.puremvc.typedExt.js.JqueryControl;
    S.puremvc.typedExt.js.JqueryScroll.prototype = v(S.puremvc.typedExt.js.JqueryControl.prototype, {
        setDragConstraints: function() {
            if (this._orientation == S.puremvc.typedExt.js.ScrollOrientation.Horizontal) {
                this._barBlock.draggable("option", "axis", "x")
            } else {
                this._barBlock.draggable("option", "axis", "y")
            }
        },
        setOrientation: function(q) {
            this._orientation = q;
            this.setDragConstraints()
        },
        clickHandler: function(X) {
            X.preventDefault();
            var W = A.parseFloat(this._barBlock.css("top"));
            var Y = A.parseFloat(this._barBlock.css("left"));
            if (this._orientation == S.puremvc.typedExt.js.ScrollOrientation.Vertical) {
                W = X.pageY - this.get_y();
                if (W + this.get_barSize() > this.get_height()) {
                    W = this.get_height() - this.get_barSize()
                }
            } else {
                Y = X.pageX - this.get_x();
                if (Y + this.get_barSize() > this.get_width()) {
                    Y = this.get_width() - this.get_barSize()
                }
            }
            var Z = this.coordToVal(Y, W);
            this._value = Z;
            this._update(Y, W);
            var q = {
                jqEvent: X,
                target: this
            };
            this._onChange.fire(q)
        },
        valToCoord: function(q) {
            var W = (q - this.min) / (this.max - this.min);
            if (this._orientation == S.puremvc.typedExt.js.ScrollOrientation.Vertical) {
                return (this.get_height() - this.get_barSize()) * W
            } else {
                return (this.get_width() - this.get_barSize()) * W
            }
        },
        coordToVal: function(X, W) {
            var q;
            if (this._orientation == S.puremvc.typedExt.js.ScrollOrientation.Vertical) {
                q = W / (this.get_height() - this.get_barSize())
            } else {
                q = X / (this.get_width() - this.get_barSize())
            }
            return Math.floor((this.max - this.min) * q + this.min)
        },
        set_value: function(X) {
            if (X < this.min) {
                X = this.min
            } else {
                if (X > this.max) {
                    X = this.max
                } else {
                    X = X
                }
            }
            this._value = X;
            var q = this._barTop;
            var W = this._barLeft;
            if (this._orientation == S.puremvc.typedExt.js.ScrollOrientation.Vertical) {
                q = this.valToCoord(X)
            } else {
                W = this.valToCoord(X)
            }
            this._update(W, q);
            return this._value
        },
        get_value: function() {
            return this._value
        },
        get_percent: function() {
            return this._value / (this.max - this.min)
        },
        _startDrag: function(W, X) {
            this._dragActive = true;
            var q = {
                jqEvent: W,
                target: this
            };
            this._onStartDrag.fire(q)
        },
        _stopDrag: function(X, Z) {
            this._dragActive = false;
            var W = Z.position.top;
            var Y = Z.position.left;
            var aa = this.coordToVal(Y, W);
            this._value = aa;
            var q = {
                jqEvent: X,
                target: this
            };
            this._onChange.fire(q);
            this._onStopDrag.fire(q)
        },
        isDragActive: function() {
            return this._dragActive
        },
        _drag: function(X, aa) {
            var Z = m.Timer.stamp();
            if (Z - this._lastMove > 0.13) {
                this._lastMove = Z;
                var W = aa.position.top;
                var Y = aa.position.left;
                var ab = this.coordToVal(Y, W);
                this._value = ab;
                var q = {
                    jqEvent: X,
                    target: this
                };
                this._onChange.fire(q)
            }
        },
        _update: function(X, W) {
            var q = window.document.querySelector("." + S.puremvc.typedExt.js.JqueryScroll.SCROLL_BAR_ID);
            q.style.left = Math.round(X) + "px";
            q.style.top = Math.round(W) + "px"
        },
        get_barSize: function() {
            if (this._orientation == S.puremvc.typedExt.js.ScrollOrientation.Vertical) {
                return this._barBlock.height()
            } else {
                return this._barBlock.width()
            }
        },
        getMin: function() {
            return this.min
        },
        getMax: function() {
            return this.max
        },
        setRange: function(W, q) {
            W = Math.floor(Math.abs(W));
            q = Math.floor(Math.abs(q));
            if (W > q) {
                W = q
            }
            this.min = W;
            this.max = q;
            this.set_value(this.get_value() < W ? W : this.get_value() > q ? q : this.get_value())
        },
        bindEvent: function(q, W) {
            if (q == S.puremvc.typedExt.js.JqueryEvents.ON_CHANGE) {
                this.addChangeListener(W)
            } else {
                S.puremvc.typedExt.js.JqueryControl.prototype.bindEvent.call(this, q, W)
            }
        },
        addChangeListener: function(q) {
            this._onChange.addListener(q)
        },
        removeChangeListener: function(q) {
            this._onChange.removeListener(q)
        },
        change: function(q) {
            this._onChange.removeListener(q);
            if (q != null) {
                this._onChange.addListener(q)
            }
        },
        startDrag: function(q) {
            this._onStartDrag.removeListener(q);
            if (q != null) {
                this._onStartDrag.addListener(q)
            }
        },
        stopDrag: function(q) {
            this._onStopDrag.removeListener(q);
            if (q != null) {
                this._onStopDrag.addListener(q)
            }
        },
        __class__: S.puremvc.typedExt.js.JqueryScroll,
        __properties__: v(S.puremvc.typedExt.js.JqueryControl.prototype.__properties__, {
            get_barSize: "get_barSize",
            get_percent: "get_percent",
            set_value: "set_value",
            get_value: "get_value"
        })
    });
    S.puremvc.typedExt.js.JquerySlider = function(W) {
        var q = this;
        this._onChange = this.getEventHandler(S.puremvc.typedExt.js.JqueryEvents.ON_CHANGE);
        this._onStopDrag = this.getEventHandler(S.puremvc.typedExt.js.JqueryEvents.ON_STOP_DRAG);
        S.puremvc.typedExt.js.JqueryComponent.call(this, W);
        this._jqSlider = this._jqNode.find(".slider");
        this._jqSlider.slider({
            stop: s(this, this._stopDrag),
            range: "min",
            value: 0
        });
        this._jqSlider.slider({
            click: function(Y, Z) {
                var X = {
                    jqEvent: Y,
                    target: q
                };
                q.set_value(Z.value);
                q._onChange.fire(X)
            },
            slide: function(Z, X) {
                var Y = {
                    jqEvent: Z,
                    target: q
                };
                q.set_value(X.value);
                q._onChange.fire(Y)
            }
        })
    };
    p["org.puremvc.typedExt.js.JquerySlider"] = S.puremvc.typedExt.js.JquerySlider;
    S.puremvc.typedExt.js.JquerySlider.__name__ = ["org", "puremvc", "typedExt", "js", "JquerySlider"];
    S.puremvc.typedExt.js.JquerySlider.__super__ = S.puremvc.typedExt.js.JqueryComponent;
    S.puremvc.typedExt.js.JquerySlider.prototype = v(S.puremvc.typedExt.js.JqueryComponent.prototype, {
        setRange: function(W, q) {
            this._jqSlider.slider({
                min: W,
                max: q
            })
        },
        setOrientation: function(q) {
            this._jqSlider.slider({
                orientation: q
            })
        },
        setStep: function(q) {
            this._jqSlider.slider({
                step: q
            })
        },
        getStep: function() {
            return this._jqSlider.slider("option", "step")
        },
        set_value: function(q) {
            this.value = q;
            this._jqSlider.slider({
                value: q
            });
            return q
        },
        get_value: function() {
            return this.value
        },
        change: function(q) {
            this._onChange.removeListener(q);
            if (q != null) {
                this._onChange.addListener(q)
            }
        },
        stopDrag: function(q) {
            this._onStopDrag.removeListener(q);
            if (q != null) {
                this._onStopDrag.addListener(q)
            }
        },
        _stopDrag: function(W, X) {
            var q = {
                jqEvent: W,
                target: this
            };
            this._onStopDrag.fire(q)
        },
        __class__: S.puremvc.typedExt.js.JquerySlider,
        __properties__: v(S.puremvc.typedExt.js.JqueryComponent.prototype.__properties__, {
            set_value: "set_value",
            get_value: "get_value"
        })
    });
    S.puremvc.typedExt.js.JquerySplit = function(q) {
        this._onChange = this.getEventHandler(S.puremvc.typedExt.js.JqueryEvents.ON_CHANGE);
        S.puremvc.typedExt.js.JqueryControl.call(this, q);
        this.set_maxPosition(this._jqNode.height());
        this._jqNode.draggable({
            stop: s(this, this._stopDrag),
            drag: s(this, this._drag),
            containment: "parent"
        });
        this._update(0, this.get_parent().get_height() - this._jqNode.height())
    };
    p["org.puremvc.typedExt.js.JquerySplit"] = S.puremvc.typedExt.js.JquerySplit;
    S.puremvc.typedExt.js.JquerySplit.__name__ = ["org", "puremvc", "typedExt", "js", "JquerySplit"];
    S.puremvc.typedExt.js.JquerySplit.__super__ = S.puremvc.typedExt.js.JqueryControl;
    S.puremvc.typedExt.js.JquerySplit.prototype = v(S.puremvc.typedExt.js.JqueryControl.prototype, {
        set_minPosition: function(W) {
            this.minPosition = W;
            this.setConstraints();
            var q = this._checkBarPosition(this.barPosition);
            if (q != this.barPosition) {
                this._update(0, q)
            }
            return W
        },
        set_maxPosition: function(W) {
            this.maxPosition = W;
            this.setConstraints();
            var q = this._checkBarPosition(this.barPosition);
            if (q != this.barPosition) {
                this._update(0, q)
            }
            return W
        },
        setConstraints: function() {
            var W = this.get_parent().get_y();
            var q = this.get_parent().get_x();
            this._jqNode.draggable("option", "containment", [q, this.minPosition + W, q, this.maxPosition + W])
        },
        setBarPosition: function(q) {
            var W = this._checkBarPosition(q);
            this._update(0, W)
        },
        _update: function(X, q) {
            var W = {
                left: Math.round(X),
                top: Math.round(q)
            };
            this._jqNode.css(W);
            this.barPosition = Math.floor(q)
        },
        bindEvent: function(q, W) {
            if (q == S.puremvc.typedExt.js.JqueryEvents.ON_CHANGE) {
                this.addChangeListener(W)
            } else {
                S.puremvc.typedExt.js.JqueryControl.prototype.bindEvent.call(this, q, W)
            }
        },
        _checkBarPosition: function(q) {
            if (q < this.minPosition) {
                q = this.minPosition
            }
            if (q > this.maxPosition) {
                q = this.maxPosition - this.get_parent().get_height()
            }
            return q
        },
        _stopDrag: function(X, Z) {
            var W = Z.position.top;
            var Y = Z.position.left;
            W = this._checkBarPosition(W);
            this.barPosition = W;
            this._update(0, W);
            var q = {
                jqEvent: X,
                target: this
            };
            this._onChange.fire(q)
        },
        _drag: function(X, Y) {
            var W = {
                jqEvent: X,
                target: this
            };
            var q = Y.position.top;
            q = this._checkBarPosition(q);
            this.barPosition = q;
            this._update(0, q);
            this._onChange.fire(W)
        },
        addChangeListener: function(q) {
            this._onChange.addListener(q)
        },
        removeChangeListener: function(q) {
            this._onChange.removeListener(q)
        },
        __class__: S.puremvc.typedExt.js.JquerySplit,
        __properties__: v(S.puremvc.typedExt.js.JqueryControl.prototype.__properties__, {
            set_maxPosition: "set_maxPosition",
            set_minPosition: "set_minPosition"
        })
    });
    S.puremvc.typedExt.js.TipCardPosition = {
        __ename__: true,
        __constructs__: ["TOP", "BOTTOM", "LEFT", "RIGHT"]
    };
    S.puremvc.typedExt.js.TipCardPosition.TOP = ["TOP", 0];
    S.puremvc.typedExt.js.TipCardPosition.TOP.toString = l;
    S.puremvc.typedExt.js.TipCardPosition.TOP.__enum__ = S.puremvc.typedExt.js.TipCardPosition;
    S.puremvc.typedExt.js.TipCardPosition.BOTTOM = ["BOTTOM", 1];
    S.puremvc.typedExt.js.TipCardPosition.BOTTOM.toString = l;
    S.puremvc.typedExt.js.TipCardPosition.BOTTOM.__enum__ = S.puremvc.typedExt.js.TipCardPosition;
    S.puremvc.typedExt.js.TipCardPosition.LEFT = ["LEFT", 2];
    S.puremvc.typedExt.js.TipCardPosition.LEFT.toString = l;
    S.puremvc.typedExt.js.TipCardPosition.LEFT.__enum__ = S.puremvc.typedExt.js.TipCardPosition;
    S.puremvc.typedExt.js.TipCardPosition.RIGHT = ["RIGHT", 3];
    S.puremvc.typedExt.js.TipCardPosition.RIGHT.toString = l;
    S.puremvc.typedExt.js.TipCardPosition.RIGHT.__enum__ = S.puremvc.typedExt.js.TipCardPosition;
    S.puremvc.typedExt.js.JqueryTipCard = function(q) {
        S.puremvc.typedExt.js.JqueryComponent.call(this, q);
        this._isActive = false
    };
    p["org.puremvc.typedExt.js.JqueryTipCard"] = S.puremvc.typedExt.js.JqueryTipCard;
    S.puremvc.typedExt.js.JqueryTipCard.__name__ = ["org", "puremvc", "typedExt", "js", "JqueryTipCard"];
    S.puremvc.typedExt.js.JqueryTipCard.__super__ = S.puremvc.typedExt.js.JqueryComponent;
    S.puremvc.typedExt.js.JqueryTipCard.prototype = v(S.puremvc.typedExt.js.JqueryComponent.prototype, {
        configure: function(Y) {
            var X = this;
            this.getJqNode().find("._hxTitle").html(Y.title);
            this.getJqNode().find("._hxText").html(Y.text);
            this.getJqNode().find("._hxButton").html(Y.buttonText);
            var W = Y.element.getJqNode().offset().left - this.getJqNode().parent().offset().left + Math.round(Y.element.getJqNode().outerWidth() / 2) - S.puremvc.typedExt.js.JqueryTipCard.THROBBER_RADIUS;
            var q = Y.element.getJqNode().offset().top - this.getJqNode().parent().offset().top + Math.round(Y.element.getJqNode().outerHeight() / 2) - S.puremvc.typedExt.js.JqueryTipCard.THROBBER_RADIUS;
            if (R.enumEq(Y.position, S.puremvc.typedExt.js.TipCardPosition.TOP)) {
                W -= S.puremvc.typedExt.js.JqueryTipCard.ARROW_OFFSET_LEFT + Math.round(S.puremvc.typedExt.js.JqueryTipCard.ARROW_WIDTH / 2) - S.puremvc.typedExt.js.JqueryTipCard.THROBBER_RADIUS;
                q -= this.getJqNode().outerHeight()
            }
            this.getJqNode().css({
                left: W + "px",
                top: q + "px"
            });
            this.getJqNode().find("._hxButton").click(function(Z) {
                X.inactive();
                X._callbackOnClose(true);
                return false
            })
        },
        active: function() {
            var q = this;
            this._isActive = true;
            this.getJqNode().show(0, function() {
                q.getJqNode().addClass("active")
            });
            this.getJqNode().click(function(W) {
                return false
            });
            new h.JQuery(window).one("click", function(W) {
                if (q._isActive) {
                    q.inactive();
                    q._callbackOnClose(false)
                }
                return false
            })
        },
        inactive: function() {
            var q = this;
            this._isActive = false;
            this.getJqNode().removeClass("active");
            this.getJqNode().one("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd", function(W) {
                q.getJqNode().hide()
            })
        },
        onClose: function(q) {
            this._callbackOnClose = q
        },
        __class__: S.puremvc.typedExt.js.JqueryTipCard
    });
    S.puremvc.typedExt.js.TypedJsView = function(q) {
        S.puremvc.typedExt.js.JqueryComponent.call(this, q)
    };
    p["org.puremvc.typedExt.js.TypedJsView"] = S.puremvc.typedExt.js.TypedJsView;
    S.puremvc.typedExt.js.TypedJsView.__name__ = ["org", "puremvc", "typedExt", "js", "TypedJsView"];
    S.puremvc.typedExt.js.TypedJsView.__interfaces__ = [S.puremvc.typedExt.ITypedView];
    S.puremvc.typedExt.js.TypedJsView.__super__ = S.puremvc.typedExt.js.JqueryComponent;
    S.puremvc.typedExt.js.TypedJsView.prototype = v(S.puremvc.typedExt.js.JqueryComponent.prototype, {
        __: function(W) {
            var q = W;
            var X = D.field(this.listener, "facade");
            if (X != null) {
                if (D.field(X, "__") != null) {
                    q = D.callMethod(this.listener, D.field(X, "__"), [W])
                }
            }
            return q
        },
        __class__: S.puremvc.typedExt.js.TypedJsView
    });
    S.puremvc.typedExt.js.UiComponentParams = function() {};
    p["org.puremvc.typedExt.js.UiComponentParams"] = S.puremvc.typedExt.js.UiComponentParams;
    S.puremvc.typedExt.js.UiComponentParams.__name__ = ["org", "puremvc", "typedExt", "js", "UiComponentParams"];
    S.puremvc.typedExt.js.UiComponentParams.create = function(Y, q, W) {
        var X = new S.puremvc.typedExt.js.UiComponentParams();
        X.id = Y;
        X.parent = q;
        X.parameters = W;
        return X
    };
    S.puremvc.typedExt.js.UiComponentParams.prototype = {
        setId: function(q) {
            this.id = q;
            return this
        },
        setTemplateId: function(q) {
            this.templateId = q;
            return this
        },
        setParent: function(q) {
            this.parent = q;
            return this
        },
        setJqNode: function(q) {
            this.jqNode = q;
            return this
        },
        withTag: function(q) {
            this.tagName = q;
            return this
        },
        useYourself: function() {
            this.usageYourself = true;
            return this
        },
        setAutoCreateTag: function() {
            this.autoCreate = true;
            return this
        },
        __class__: S.puremvc.typedExt.js.UiComponentParams
    };
    S.puremvc.typedExt.js.UiComponentService = function() {};
    p["org.puremvc.typedExt.js.UiComponentService"] = S.puremvc.typedExt.js.UiComponentService;
    S.puremvc.typedExt.js.UiComponentService.__name__ = ["org", "puremvc", "typedExt", "js", "UiComponentService"];
    S.puremvc.typedExt.js.UiComponentService.createFromJqNode = function(Z, Y, ab) {
        if (ab == null) {
            ab = S.puremvc.typedExt.js.UiComponentParams.create().setJqNode(Z).setParent(Y)
        } else {
            ab = ab
        }
        var q;
        var X = Z.attr("type");
        var aa = X.toLowerCase();
        switch (aa) {
            case "checkbox":
                q = new S.puremvc.typedExt.js.JqueryCheckBox(ab);
                break;
            case "radio":
                q = new S.puremvc.typedExt.js.JqueryRadio(ab);
                break;
            case "label":
                q = new S.puremvc.typedExt.js.JqueryLabel(ab);
                break;
            case "button":
                q = new S.puremvc.typedExt.js.JqueryButton(ab);
                break;
            case "scroll":
                q = new S.puremvc.typedExt.js.JqueryScroll(ab);
                break;
            case "slider":
                q = new S.puremvc.typedExt.js.JquerySlider(ab);
                break;
            case "knob":
                q = new S.puremvc.typedExt.js.JqueryKnob(ab);
                break;
            case "split":
                q = new S.puremvc.typedExt.js.JquerySplit(ab);
                break;
            case "combobox":
                q = new S.puremvc.typedExt.js.JqueryCombo(ab);
                break;
            case "numberpicker":
                q = new S.puremvc.typedExt.js.JqueryNumberPicker(ab);
                break;
            default:
                var W = R.resolveClass(X);
                if (W != null) {
                    q = R.createInstance(W, [ab])
                } else {
                    q = new S.puremvc.typedExt.js.JqueryComponent(ab)
                }
        }
        return q
    };
    S.puremvc.typedExt.js.UiComponentService.create = function(q, aa, X, Y) {
        var W = R.getClassName(q).split(".");
        if (aa == null) {
            aa = "hx" + W[W.length - 1]
        }
        var Z = S.puremvc.typedExt.js.UiComponentParams.create(aa, X, Y).setTemplateId(aa + "Template");
        return R.createInstance(q, [Z])
    };
    S.puremvc.typedExt.js.UiComponentService.getTemplateJqNode = function(W) {
        if (W != null) {
            var X = new h.JQuery("#templates");
            var q = X.find("." + W);
            return q
        }
        return null
    };
    S.puremvc.typedExt.js.UiComponentService.getTemplateContent = function(X) {
        var W = S.puremvc.typedExt.js.UiComponentService.getTemplateJqNode(X);
        if (W != null && W.length > 0) {
            var q = new h.JQuery(W.html());
            return q
        }
        return null
    };
    S.puremvc.typedExt.js.UiComponentService.appendFromTemplate = function(Y, W, q) {
        var X = S.puremvc.typedExt.js.UiComponentService.getTemplateContent(q);
        var Z = Y.findChildJqNode(W);
        Z.append(X);
        return X
    };
    S.puremvc.typedExt.js.UiComponentService.getParentById = function(q, W) {
        while (q != null) {
            if (W == q.getId()) {
                return q
            }
            q = q.get_parent()
        }
        return null
    };
    S.puremvc.typedExt.js.UiComponentService.findJqNode = function(X, q) {
        var W = null;
        if (q != null) {
            W = q.find("." + X)
        } else {
            W = new h.JQuery("." + X)
        }
        return W
    };
    S.puremvc.typedExt.js.UiComponentService.eventToJqueryName = function(q) {
        switch (q[1]) {
            case 1:
                return "change";
            case 0:
                return "click";
            case 4:
                return "dblclick";
            case 2:
                return "mousemove";
            case 3:
                return "mousewheel";
            case 5:
                return "mouseup";
            case 6:
                return "mousedown";
            case 7:
                return "drag";
            case 8:
                return "startDrag";
            case 9:
                return "stopDrag";
            case 10:
                return "keydown";
            case 11:
                return "keyup"
        }
    };
    S.puremvc.typedExt.js.UiComponentService.eventIsComplex = function(q) {
        return q == S.puremvc.typedExt.js.JqueryEvents.ON_DRAG || q == S.puremvc.typedExt.js.JqueryEvents.ON_STOP_DRAG
    };
    S.puremvc.typedExt.js.UiComponentService.nodeIsComponent = function(Y) {
        if (Y.attr("type") != null) {
            return true
        }
        var X = Y.attr("class");
        if (X != null) {
            var W = X.split(" ");
            var Z = 0;
            while (Z < W.length) {
                var q = W[Z];
                ++Z;
                if (B.substr(q, 0, 2) == "hx") {
                    return true
                }
            }
        }
        return false
    };
    S.puremvc.typedExt.js.UiEventHandler = function(q) {
        S.puremvc.typedExt.EventHandler.call(this);
        this._owner = q
    };
    p["org.puremvc.typedExt.js.UiEventHandler"] = S.puremvc.typedExt.js.UiEventHandler;
    S.puremvc.typedExt.js.UiEventHandler.__name__ = ["org", "puremvc", "typedExt", "js", "UiEventHandler"];
    S.puremvc.typedExt.js.UiEventHandler.__super__ = S.puremvc.typedExt.EventHandler;
    S.puremvc.typedExt.js.UiEventHandler.prototype = v(S.puremvc.typedExt.EventHandler.prototype, {
        fire: function(Z) {
            var X = Z;
            if (X != null) {
                var aa = 0;
                var Y = this._listeners;
                while (aa < Y.length) {
                    var W = Y[aa];
                    ++aa;
                    if (W != null) {
                        var q = [X, X.target];
                        W.apply(this._owner, q)
                    }
                }
            }
        },
        __class__: S.puremvc.typedExt.js.UiEventHandler
    });
    var i = {};
    i.NumResult = function() {};
    p["parsing.NumResult"] = i.NumResult;
    i.NumResult.__name__ = ["parsing", "NumResult"];
    i.NumResult.prototype = {
        __class__: i.NumResult
    };
    i.ParseUtils = function() {};
    p["parsing.ParseUtils"] = i.ParseUtils;
    i.ParseUtils.__name__ = ["parsing", "ParseUtils"];
    i.ParseUtils.isCharFrom = function(q, W) {
        return W.indexOf(q) >= 0
    };
    i.ParseUtils.isLetter = function(q) {
        var W = "abcdefghijklmnopqrstuvwxyz";
        return W.indexOf(q.toLowerCase()) >= 0
    };
    i.ParseUtils.isTextSymbol = function(q) {
        var W = "01234567890abcdefghijklmnopqrstuvwxyz?!.,;:\"'";
        return W.indexOf(q.toLowerCase()) >= 0
    };
    i.ParseUtils.isWord = function(Z) {
        var Y = "01234567890abcdefghijklmnopqrstuvwxyz";
        var W = 0;
        Z = Z.toLowerCase();
        var X = Z.length;
        var q = true;
        while (W < X) {
            if (Y.indexOf(Z.charAt(W), 0) < 0) {
                q = false;
                break
            }
            W++
        }
        return q
    };
    i.ParseUtils.isDigit = function(q, X) {
        if (X == null) {
            X = false
        }
        var W = B.cca(q, 0);
        return W >= 48 && W <= 57 || q == "-" && X
    };
    i.ParseUtils.isBlank = function(q) {
        var W = " \r\n\t";
        return W.indexOf(q) >= 0
    };
    i.ParseUtils.readNumber = function(X, ab, Y) {
        if (Y == null) {
            Y = -1
        }
        var q = new i.NumResult();
        if (ab >= X.length) {
            return q
        }
        var aa = ab;
        var W = X.charAt(aa);
        var Z = "";
        while (aa < X.length && i.ParseUtils.isDigit(X.charAt(aa), null)) {
            Z += W;
            aa++;
            W = X.charAt(aa);
            if (Y > 0 && aa - ab >= Y) {
                break
            }
        }
        q.length = aa - ab;
        q.success = q.length > 0;
        q.number = A.parseInt(Z);
        return q
    };
    i.ParseUtils.readToken = function(Y, ab, aa) {
        if (aa == null) {
            aa = " "
        }
        if (ab == null) {
            ab = 0
        }
        var W = ab;
        var Z = "";
        var q = {
            success: false,
            word: "",
            position: W
        };
        while (W < Y.length) {
            var X = Y.charAt(W);
            W++;
            if (aa.indexOf(X) >= 0) {
                break
            }
            Z += X
        }
        if (Z.length > 0) {
            q.word = Z;
            q.success = true
        }
        return q
    };
    i.ParseUtils.expectToken = function(Z, ac, aa, Y) {
        if (Y == null) {
            Y = true
        }
        var q = 0;
        var ab = 0;
        var X = aa.length;
        var W = "";
        if (Z.length >= ac + X) {
            W = B.substr(Z, ac, X);
            if (!Y) {
                W = W.toLowerCase();
                aa = aa.toLowerCase()
            }
        }
        return W == aa
    };
    i.ParseUtils.readDict = function(X, ab, aa) {
        var Y = 0;
        var Z = aa.length;
        while (Y < Z) {
            var W = Y++;
            var q = aa[W];
            if (i.ParseUtils.expectToken(X, ab, q, null)) {
                return W
            }
        }
        return -1
    };
    i.ParseUtils.expectChar = function(Z, aa, q, Y) {
        if (Y == null) {
            Y = ""
        }
        var W = aa;
        while (W < Z.length) {
            var X = Z.charAt(W);
            W++;
            if (X == q) {
                return W - aa
            }
            if (Y.indexOf(X) == -1) {
                return -1
            }
        }
        return -1
    };
    i.ParseUtils.readWord = function(Z, ab, Y) {
        if (ab == null) {
            ab = 0
        }
        var W = ab;
        var aa = "";
        var q = {
            success: false,
            word: "",
            position: W
        };
        while (W < Z.length) {
            var X = Z.charAt(W);
            W++;
            if (!Y.match(X)) {
                break
            }
            aa += X
        }
        if (aa.length > 0) {
            q.word = aa;
            q.success = true
        }
        return q
    };
    i.ParseUtils.readChars = function(aa, ac, Z) {
        var X = ac;
        var ab = "";
        var W = {
            success: false,
            word: "",
            position: X
        };
        var q = aa.length;
        Z = Z.toLowerCase();
        while (X < q) {
            var Y = aa.charAt(X);
            if (Z.indexOf(Y.toLowerCase(), 0) < 0) {
                break
            }
            X++;
            ab += Y
        }
        if (ab.length > 0) {
            W.word = ab;
            W.success = true
        }
        return W
    };
    i.ParseUtils.skipChars = function(Y, Z, X) {
        var q = Z;
        var W = Y.charAt(q);
        while (q < Y.length && X.indexOf(W) >= 0) {
            q++;
            W = Y.charAt(q)
        }
        return q - Z
    };
    i.ParseUtils.readLinesFromStream = function(W) {
        var q = new Array();
        while (!W.eof()) {
            q.push(i.ParseUtils.readLineFromStream(W))
        }
        return q
    };
    i.ParseUtils.readLineFromStream = function(X) {
        var q = "";
        while (!X.eof()) {
            var W = X.readChar();
            if (W == "\n") {
                break
            }
            q += W
        }
        return q
    };
    i.ParseUtils.readLines = function(q) {
        var W = new E.StringInputStream(q);
        return i.ParseUtils.readLinesFromStream(W)
    };
    var f = {};
    f.PtComponent = function() {};
    p["ptb.PtComponent"] = f.PtComponent;
    f.PtComponent.__name__ = ["ptb", "PtComponent"];
    f.PtComponent.prototype = {
        __class__: f.PtComponent
    };
    f.PtBar = function() {};
    p["ptb.PtBar"] = f.PtBar;
    f.PtBar.__name__ = ["ptb", "PtBar"];
    f.PtBar.__interfaces__ = [f.PtComponent];
    f.PtBar.prototype = {
        clone: function() {
            var q = new f.PtBar();
            q.denominator = this.denominator;
            q.numerator = this.numerator;
            q.repeatClose = this.repeatClose;
            q.repeatStart = this.repeatStart;
            return q
        },
        __class__: f.PtBar
    };
    f.PtBeat = function(q, W) {
        this.staff = q;
        this.voice = W;
        this.notes = new Array();
        this.multiBarRest = 1
    };
    p["ptb.PtBeat"] = f.PtBeat;
    f.PtBeat.__name__ = ["ptb", "PtBeat"];
    f.PtBeat.__interfaces__ = [f.PtComponent];
    f.PtBeat.prototype = {
        clone: function() {
            var W = new f.PtBeat(this.staff, this.voice);
            W.duration = this.duration;
            W.dotted = this.dotted;
            W.doubleDotted = this.doubleDotted;
            W.times = this.times;
            W.enters = this.enters;
            W.multiBarRest = this.multiBarRest;
            W.grace = this.grace;
            W.vibrato = this.vibrato;
            W.arpeggioUp = this.arpeggioUp;
            W.arpeggioDown = this.arpeggioDown;
            W.isRest = this.isRest;
            var Y = 0;
            var X = this.notes;
            while (Y < X.length) {
                var q = X[Y];
                ++Y;
                W.notes.push(q.clone())
            }
            return W
        },
        __class__: f.PtBeat
    };
    f.PtDirection = function(X, W, q) {
        this.direction = X;
        this.activeSymbol = W;
        this.repeat = q
    };
    p["ptb.PtDirection"] = f.PtDirection;
    f.PtDirection.__name__ = ["ptb", "PtDirection"];
    f.PtDirection.__interfaces__ = [f.PtComponent];
    f.PtDirection.prototype = {
        clone: function() {
            var q = new f.PtDirection(this.direction, this.activeSymbol, this.repeat);
            return q
        },
        __class__: f.PtDirection
    };
    f.PtGuitarIn = function(q, W) {
        this.staff = q;
        this.trackInfo = W
    };
    p["ptb.PtGuitarIn"] = f.PtGuitarIn;
    f.PtGuitarIn.__name__ = ["ptb", "PtGuitarIn"];
    f.PtGuitarIn.__interfaces__ = [f.PtComponent];
    f.PtGuitarIn.prototype = {
        clone: function() {
            return new f.PtGuitarIn(this.staff, this.trackInfo)
        },
        __class__: f.PtGuitarIn
    };
    f.PtIndex = function(X, q, W) {
        this.section = X;
        this.position = q;
        this.component = W
    };
    p["ptb.PtIndex"] = f.PtIndex;
    f.PtIndex.__name__ = ["ptb", "PtIndex"];
    f.PtIndex.prototype = {
        __class__: f.PtIndex
    };
    f.PtNote = function() {};
    p["ptb.PtNote"] = f.PtNote;
    f.PtNote.__name__ = ["ptb", "PtNote"];
    f.PtNote.prototype = {
        clone: function() {
            var q = new f.PtNote();
            q.value = this.value;
            q.string = this.string;
            q.tied = this.tied;
            q.dead = this.dead;
            q.bend = this.bend;
            q.hammer = this.hammer;
            q.slide = this.slide;
            return q
        },
        __class__: f.PtNote
    };
    f.PtPosition = function(q) {
        this.position = q;
        this.components = new Array()
    };
    p["ptb.PtPosition"] = f.PtPosition;
    f.PtPosition.__name__ = ["ptb", "PtPosition"];
    f.PtPosition.prototype = {
        addComponent: function(q) {
            this.components.push(q)
        },
        sort: function() {
            this.components.sort(function(W, q) {
                if (h.Boot.__instanceof(W, f.PtDirection)) {
                    return 1
                }
                if (h.Boot.__instanceof(q, f.PtDirection)) {
                    return -1
                }
                if (h.Boot.__instanceof(W, f.PtGuitarIn) || h.Boot.__instanceof(W, f.PtBar)) {
                    return -1
                }
                if (h.Boot.__instanceof(q, f.PtGuitarIn) || h.Boot.__instanceof(q, f.PtBar)) {
                    return 1
                }
                return 0
            })
        },
        __class__: f.PtPosition
    };
    f.PtReader = function() {};
    p["ptb.PtReader"] = f.PtReader;
    f.PtReader.__name__ = ["ptb", "PtReader"];
    f.PtReader.__interfaces__ = [V.ISongReader];
    f.PtReader.songUnloopRepeats = function(q) {
        var W = new f.PtSong();
        W.info = q.info;
        W.track1.infos = q.track1.infos;
        W.track2.infos = q.track2.infos;
        f.PtReader.unloopRepeats(q.track1, W.track1);
        f.PtReader.unloopRepeats(q.track2, W.track2);
        return W
    };
    f.PtReader.unloopRepeats = function(ah, aE, ag, aw, az) {
        if (ag == null) {
            ag = new f.PtIndex(0, 0, 0)
        }
        if (aw == null) {
            aw = new f.PtRepeatState()
        }
        if (az == null) {
            az = new Array()
        }
        var at = ag.section;
        var aa = ah.sections.length;
        while (at < aa) {
            var ap = at++;
            var ax = ah.sections[ap];
            ax.sort();
            var ar = new f.PtSection(ax.number);
            ar.staffs = ax.staffs;
            aE.sections.push(ar);
            var ao;
            if (ap == ag.section) {
                ao = ag.position
            } else {
                ao = 0
            }
            var aq = ax.positions.length;
            while (ao < aq) {
                var av = ao++;
                var ad = ax.positions[av];
                ad.sort();
                var Z = new f.PtPosition(ad.position);
                ar.positions.push(Z);
                var am;
                if (ap == ag.section && av == ag.position) {
                    am = ag.component
                } else {
                    am = 0
                }
                var an = ad.components.length;
                while (am < an) {
                    var aB = am++;
                    var al = ad.components[aB];
                    if (!aw.skip) {
                        Z.components.push(al.clone())
                    }
                    if (h.Boot.__instanceof(al, f.PtBar)) {
                        var aA;
                        aA = h.Boot.__cast(al, f.PtBar);
                        if (aA.repeatClose > 0 && aw.repeatStart != null) {
                            aw.repeatNumber++;
                            aw.repeatInProgress = true;
                            aw.repeatAlternative = false;
                            aw.skip = false;
                            if (aw.repeatNumber < aA.repeatClose) {
                                f.PtReader.unloopRepeats(ah, aE, aw.repeatStart, aw, az);
                                return
                            }
                            aw.repeatStart = null;
                            aw.repeatNumber = 0
                        }
                        if (aA.repeatStart) {
                            aw.repeatStart = new f.PtIndex(ap, av, 0);
                            if (!aw.repeatInProgress) {
                                aw.repeatNumber = 0
                            }
                            aw.repeatInProgress = false
                        }
                    } else {
                        if (h.Boot.__instanceof(al, f.PtSymbol)) {
                            var ay;
                            ay = h.Boot.__cast(al, f.PtSymbol);
                            aw.skip = false;
                            if (!aw.repeatAlternative && (ay.number & 1) != 0) {
                                var au = (ay.number & 1 << aw.repeatNumber) != 0;
                                if (aw.repeatNumber > 0 && !au) {
                                    aw.skip = true
                                }
                                aw.repeatAlternative = true
                            }
                        } else {
                            if (h.Boot.__instanceof(al, f.PtDirection)) {
                                var aD;
                                aD = h.Boot.__cast(al, f.PtDirection);
                                var q = aD.repeat == 0 || aw.repeatStart != null && aw.repeatNumber + 1 == aD.repeat;
                                var Y = aD.activeSymbol == aw.findActiveSymbol;
                                if (Y && q) {
                                    aw.findActiveSymbol = 0;
                                    if (aD.direction == f.PtDirection.DIRECTION_FINE) {
                                        if (f.PtReader.canUseDirection(aD, az)) {
                                            return
                                        }
                                    } else {
                                        if (aD.direction == f.PtDirection.DIRECTION_DA_CAPO) {
                                            if (f.PtReader.canUseDirection(aD, az)) {
                                                f.PtReader.unloopRepeats(ah, aE, new f.PtIndex(0, 0, 0), aw, az);
                                                return
                                            }
                                        } else {
                                            if (aD.direction == f.PtDirection.DIRECTION_DAL_SEGNO) {
                                                if (f.PtReader.canUseDirection(aD, az)) {
                                                    var W = f.PtReader.findUnusedDirection(ah, az, f.PtDirection.DIRECTION_SEGNO, ap, av);
                                                    if (W != null) {
                                                        f.PtReader.unloopRepeats(ah, aE, W, aw, az);
                                                        return
                                                    }
                                                }
                                            } else {
                                                if (aD.direction == f.PtDirection.DIRECTION_DAL_SEGNO_SEGNO) {
                                                    if (f.PtReader.canUseDirection(aD, az)) {
                                                        var ak = f.PtReader.findUnusedDirection(ah, az, f.PtDirection.DIRECTION_SEGNO_SEGNO, ap, av);
                                                        if (ak != null) {
                                                            f.PtReader.unloopRepeats(ah, aE, ak, aw, az);
                                                            return
                                                        }
                                                    }
                                                } else {
                                                    if (aD.direction == f.PtDirection.DIRECTION_TO_CODA) {
                                                        if (f.PtReader.canUseDirection(aD, az)) {
                                                            var X = f.PtReader.findUnusedDirection(ah, az, f.PtDirection.DIRECTION_CODA, -1, -1);
                                                            if (X != null) {
                                                                f.PtReader.unloopRepeats(ah, aE, X, aw, az);
                                                                return
                                                            }
                                                        }
                                                    } else {
                                                        if (aD.direction == f.PtDirection.DIRECTION_TO_DOUBLE_CODA) {
                                                            if (f.PtReader.canUseDirection(aD, az)) {
                                                                var aC = f.PtReader.findUnusedDirection(ah, az, f.PtDirection.DIRECTION_DOUBLE_CODA, -1, -1);
                                                                if (aC != null) {
                                                                    f.PtReader.unloopRepeats(ah, aE, aC, aw, az);
                                                                    return
                                                                }
                                                            }
                                                        } else {
                                                            if (aD.direction == f.PtDirection.DIRECTION_DA_CAPO_AL_CODA) {
                                                                if (f.PtReader.canUseDirection(aD, az)) {
                                                                    aw.findActiveSymbol = f.PtDirection.ACTIVE_SYMBOL_DC;
                                                                    f.PtReader.unloopRepeats(ah, aE, new f.PtIndex(0, 0, 0), aw, az);
                                                                    return
                                                                }
                                                            } else {
                                                                if (aD.direction == f.PtDirection.DIRECTION_DA_CAPO_AL_DOUBLE_CODA) {
                                                                    if (f.PtReader.canUseDirection(aD, az)) {
                                                                        aw.findActiveSymbol = f.PtDirection.ACTIVE_SYMBOL_DC;
                                                                        f.PtReader.unloopRepeats(ah, aE, new f.PtIndex(0, 0, 0), aw, az);
                                                                        return
                                                                    }
                                                                } else {
                                                                    if (aD.direction == f.PtDirection.DIRECTION_DAL_SEGNO_AL_CODA) {
                                                                        if (f.PtReader.canUseDirection(aD, az)) {
                                                                            var aj = f.PtReader.findUnusedDirection(ah, az, f.PtDirection.DIRECTION_SEGNO, ap, av);
                                                                            if (aj != null) {
                                                                                aw.findActiveSymbol = f.PtDirection.ACTIVE_SYMBOL_DS;
                                                                                f.PtReader.unloopRepeats(ah, aE, aj, aw, az);
                                                                                return
                                                                            }
                                                                        }
                                                                    } else {
                                                                        if (aD.direction == f.PtDirection.DIRECTION_DAL_SEGNO_AL_DOUBLE_CODA) {
                                                                            if (f.PtReader.canUseDirection(aD, az)) {
                                                                                var ai = f.PtReader.findUnusedDirection(ah, az, f.PtDirection.DIRECTION_SEGNO, ap, av);
                                                                                if (ai != null) {
                                                                                    aw.findActiveSymbol = f.PtDirection.ACTIVE_SYMBOL_DS;
                                                                                    f.PtReader.unloopRepeats(ah, aE, ai, aw, az);
                                                                                    return
                                                                                }
                                                                            }
                                                                        } else {
                                                                            if (aD.direction == f.PtDirection.DIRECTION_DAL_SEGNO_SEGNO_AL_CODA) {
                                                                                if (f.PtReader.canUseDirection(aD, az)) {
                                                                                    var af = f.PtReader.findUnusedDirection(ah, az, f.PtDirection.DIRECTION_SEGNO_SEGNO, ap, av);
                                                                                    if (af != null) {
                                                                                        aw.findActiveSymbol = f.PtDirection.ACTIVE_SYMBOL_DSS;
                                                                                        f.PtReader.unloopRepeats(ah, aE, af, aw, az);
                                                                                        return
                                                                                    }
                                                                                }
                                                                            } else {
                                                                                if (aD.direction == f.PtDirection.DIRECTION_DAL_SEGNO_SEGNO_AL_DOUBLE_CODA) {
                                                                                    if (f.PtReader.canUseDirection(aD, az)) {
                                                                                        var ae = f.PtReader.findUnusedDirection(ah, az, f.PtDirection.DIRECTION_SEGNO_SEGNO, ap, av);
                                                                                        if (ae != null) {
                                                                                            aw.findActiveSymbol = f.PtDirection.ACTIVE_SYMBOL_DSS;
                                                                                            f.PtReader.unloopRepeats(ah, aE, ae, aw, az);
                                                                                            return
                                                                                        }
                                                                                    }
                                                                                } else {
                                                                                    if (aD.direction == f.PtDirection.DIRECTION_DA_CAPO_AL_FINE) {
                                                                                        if (f.PtReader.canUseDirection(aD, az)) {
                                                                                            aw.findActiveSymbol = f.PtDirection.ACTIVE_SYMBOL_DC;
                                                                                            f.PtReader.unloopRepeats(ah, aE, new f.PtIndex(0, 0, 0), aw, az);
                                                                                            return
                                                                                        }
                                                                                    } else {
                                                                                        if (aD.direction == f.PtDirection.DIRECTION_DAL_SEGNO_AL_FINE) {
                                                                                            var ac = f.PtReader.findUnusedDirection(ah, az, f.PtDirection.DIRECTION_SEGNO, ap, av);
                                                                                            if (ac != null) {
                                                                                                aw.findActiveSymbol = f.PtDirection.ACTIVE_SYMBOL_DS;
                                                                                                f.PtReader.unloopRepeats(ah, aE, ac, aw, az);
                                                                                                return
                                                                                            }
                                                                                        } else {
                                                                                            if (aD.direction == f.PtDirection.DIRECTION_DAL_SEGNO_SEGNO_AL_FINE) {
                                                                                                var ab = f.PtReader.findUnusedDirection(ah, az, f.PtDirection.DIRECTION_SEGNO_SEGNO, ap, av);
                                                                                                if (ab != null) {
                                                                                                    aw.findActiveSymbol = f.PtDirection.ACTIVE_SYMBOL_DSS;
                                                                                                    f.PtReader.unloopRepeats(ah, aE, ab, aw, az);
                                                                                                    return
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    };
    f.PtReader.canUseDirection = function(Z, W) {
        var Y = 0;
        var aa = W.length;
        while (Y < aa) {
            var q = Y++;
            var X = W[q];
            if (X.direction == Z.direction && X.activeSymbol == Z.activeSymbol && X.repeat == Z.repeat) {
                return false
            }
        }
        W.push(Z);
        return true
    };
    f.PtReader.findUnusedDirection = function(X, ai, ah, am, q, aj) {
        if (aj == null) {
            aj = 0
        }
        var af = 0;
        var W;
        if (am >= 0) {
            W = am + 1
        } else {
            W = X.sections.length
        }
        while (af < W) {
            var ad = af++;
            var Y = X.sections[ad];
            var ac = 0;
            var ae;
            if (ad == am) {
                ae = q + 1
            } else {
                ae = Y.positions.length
            }
            while (ac < ae) {
                var ag = ac++;
                var an = Y.positions[ag];
                var aa = 0;
                var ab = an.components.length;
                while (aa < ab) {
                    var ak = aa++;
                    var Z = an.components[ak];
                    if (h.Boot.__instanceof(Z, f.PtDirection)) {
                        var al;
                        al = h.Boot.__cast(Z, f.PtDirection);
                        if (al.direction == ah && (aj == 0 || al.activeSymbol == aj)) {
                            if (f.PtReader.canUseDirection(al, ai)) {
                                return new f.PtIndex(ad, ag, 0)
                            }
                        }
                    }
                }
            }
        }
        return null
    };
    f.PtReader.prototype = {
        readSong: function(Z, q, W) {
            this._factory = q;
            this._data = Z;
            this._data.bigEndian = false;
            this._ptSong = new f.PtSong();
            if (!this.readVersion()) {
                throw new V.FormatException("Unsupported Version")
            }
            var Y = this._factory.newSong();
            this._song = Y;
            this.readSongInfo();
            this.readDataInstruments(this._ptSong.track1);
            this.readDataInstruments(this._ptSong.track2);
            var X = f.PtReader.songUnloopRepeats(this._ptSong);
            this._ptSong = X;
            this.parseTrack(this._ptSong.track1);
            this.parseProperties(this._ptSong.info);
            this._isSecondTrack = true;
            this.parseTrack(this._ptSong.track2);
            Y.validate();
            return Y
        },
        parseTrack: function(Y) {
            this._defaultInfo = Y.getDefaultInfo();
            this._trackTable = new m.ds.StringMap();
            this._trackList = new Array();
            var ab = 0;
            var af = Y.infos;
            while (ab < af.length) {
                var X = af[ab];
                ++ab;
                this._trackList.push(this.createTrack(X))
            }
            this._defaultTrack = this._song.tracks[this._defaultInfo.number];
            this._barLength = 0;
            this._barStart = V.ModelConstants.QUARTER_TIME;
            var W = this._barStart;
            var Z = 0;
            var ae = Y.sections.length;
            while (Z < ae) {
                var ad = Z++;
                var ag = Y.sections[ad];
                ag.sort();
                this._section = ag.number;
                this._voices = new Array();
                var ah = this.fixTimeValue(W);
                var ac = 0;
                var q = ag.staffs;
                while (ac < q) {
                    var aa = ac++;
                    this._voices.push(new Array());
                    this._voices[aa].push(ah);
                    this._voices[aa].push(ah)
                }
                this.parseSection(Y, ag);
                W = this.getCurrentTime()
            }
        },
        parseSection: function(q, ae) {
            var ac = 0;
            var X = ae.positions.length;
            while (ac < X) {
                var ab = ac++;
                var Y = ae.positions[ab];
                var Z = 0;
                var aa = Y.components.length;
                while (Z < aa) {
                    var W = Z++;
                    var ad = Y.components[W];
                    if (h.Boot.__instanceof(ad, f.PtBar)) {
                        this.parseBar(h.Boot.__cast(ad, f.PtBar))
                    } else {
                        if (h.Boot.__instanceof(ad, f.PtGuitarIn)) {
                            this.parseGuitarIn(q, h.Boot.__cast(ad, f.PtGuitarIn))
                        } else {
                            if (h.Boot.__instanceof(ad, f.PtTempo)) {
                                this.parseTempo(h.Boot.__cast(ad, f.PtTempo))
                            } else {
                                if (h.Boot.__instanceof(ad, f.PtBeat)) {
                                    this.parseBeat(h.Boot.__cast(ad, f.PtBeat))
                                } else {
                                    if (h.Boot.__instanceof(ad, f.PtDirection)) {}
                                }
                            }
                        }
                    }
                }
            }
        },
        parseBar: function(q) {
            var X = this.getCurrentTime();
            this.initVoices(X);
            if (q.numerator > 0 && q.denominator > 0) {
                this._barLength = Math.floor(q.numerator * V.ModelConstants.QUARTER_TIME * (4 / q.denominator));
                this._barStart = X;
                var W = this._song.getMeasureHeader(X);
                if (W == null) {
                    W = this._song.newMeasureHeader();
                    W.timeSignature.denominator.value = q.denominator;
                    W.timeSignature.numerator = q.numerator
                } else {
                    if (!this._isSecondTrack) {
                        W.timeSignature.denominator.value = q.denominator;
                        W.timeSignature.numerator = q.numerator
                    }
                }
            }
        },
        parseTempo: function(q) {
            var X = this.getCurrentTime();
            var W = this._song.getMeasureHeader(X);
            if (W == null) {
                W = this._song.newMeasureHeader()
            }
            W.tempo.value = q.value
        },
        parseGuitarIn: function(q, Z) {
            var ab = q.getInfo(Z.trackInfo);
            if (ab.length > 0) {
                var X = new Array();
                var aa = 0;
                while (aa < ab.length) {
                    var Y = ab[aa];
                    ++aa;
                    var W = this._trackList[Y.number];
                    if (W != null) {
                        X.push(W);
                        this.deAssociateTrack(W)
                    }
                }
                this._trackTable.set(Z.staff == null ? "null" : "" + Z.staff, X)
            }
        },
        createTrack: function(W) {
            var q = this._song.newTrack();
            this.setTrackInfo(q, W);
            return q
        },
        setTrackInfo: function(q, Y) {
            q.name = Y.name;
            if (q.number == 9) {
                q.channel.channel = 0
            } else {
                q.channel.channel = q.number
            }
            q.channel.effectChannel = q.channel.channel;
            q.channel.instrument(Y.instrument);
            q.channel.volume = Y.volume;
            q.channel.balance = Y.balance;
            q.strings = new Array();
            var X = 0;
            var aa = Y.strings.length;
            while (X < aa) {
                var W = X++;
                var Z = this._song.factory.newString();
                Z.number = W + 1;
                Z.value = Y.strings[W];
                q.strings.push(Z)
            }
        },
        isSameTrack: function(q, Y) {
            if (Y.name != q.name) {
                return false
            }
            if (Y.instrument != q.channel.instrument()) {
                return false
            }
            if (Y.volume != q.channel.volume) {
                return false
            }
            if (Y.balance != q.channel.balance) {
                return false
            }
            if (Y.strings.length != q.stringCount()) {
                return false
            }
            var X = 0;
            var Z = Y.strings.length;
            while (X < Z) {
                var W = X++;
                if (Y.strings[W] != q.strings[W].value) {
                    return false
                }
            }
            return true
        },
        initVoices: function(ac) {
            var q = this.fixTimeValue(ac);
            var aa = 0;
            var ab = this._voices.length;
            while (aa < ab) {
                var X = aa++;
                var Y = 0;
                var Z = this._voices[X].length;
                while (Y < Z) {
                    var W = Y++;
                    this._voices[X][W] = q
                }
            }
            this._measureEmpty = true;
            this._measureRest = false
        },
        getCurrentTime: function() {
            var q = V.ModelConstants.QUARTER_TIME;
            var aa = 0;
            var ab = this._voices.length;
            while (aa < ab) {
                var X = aa++;
                var Y = 0;
                var Z = this._voices[X].length;
                while (Y < Z) {
                    var W = Y++;
                    q = Math.floor(Math.max(q, this._voices[X][W]))
                }
            }
            if (this._measureRest && this._measureEmpty) {
                q = Math.floor(Math.max(q, this._barStart + this._barLength))
            }
            return this.fixTimeValue(q)
        },
        parseBeat: function(ai) {
            if (ai.grace) {
                return
            }
            if (ai.multiBarRest > 1) {
                var W = ai.multiBarRest * this._barLength;
                this._voices[ai.staff][ai.voice] = this._barStart + W;
                var Z = this._barStart;
                var ah = 0;
                var aa = ai.multiBarRest;
                while (ah < aa) {
                    var al = ah++;
                    if (this._song.getMeasureHeader(Z) == null) {
                        var an = this._song.newMeasureHeader()
                    }
                    Z += this._barLength
                }
                return
            }
            var ac = this._voices[ai.staff][ai.voice];
            var af = this._song.factory.newDuration();
            af.value = ai.duration;
            af.isDotted = ai.dotted;
            af.isDoubleDotted = ai.doubleDotted;
            af.tuplet.enters = ai.enters;
            af.tuplet.times = ai.times;
            var ap = af.time();
            var ao = this.getStaffTrack(ai.staff);
            var ad = 0;
            var ag = 0;
            while (ag < ao.length) {
                var aj = ao[ag];
                ++ag;
                var ab = aj.getMeasure(ac);
                var q = ab.getBeat(ac);
                var aq = q.getVoice(ai.voice);
                aq.duration = af;
                if (ai.isRest) {
                    aq.isEmpty = false
                }
                var am = 0;
                var X = ai.notes;
                while (am < X.length) {
                    var ak = X[am];
                    ++am;
                    if (ak.string <= ab.track.stringCount() && ak.value >= 0) {
                        var Y = this._song.factory.newNote();
                        Y.string = ak.string;
                        Y.value = ak.value;
                        Y.isTiedNote = ak.tied;
                        Y.effect.vibrato = ai.vibrato;
                        Y.effect.deadNote = ak.dead;
                        Y.effect.hammer = ak.hammer;
                        Y.effect.slide = ak.slide;
                        Y.effect.set_bend(this.makeBend(ak.bend));
                        aq.addNote(Y)
                    }
                }
                if (ai.arpeggioUp) {
                    q.effect.stroke.direction = V.BeatStrokeDirection.Down;
                    q.effect.stroke.value = V.Duration.SIXTEENTH
                } else {
                    if (ai.arpeggioDown) {
                        q.effect.stroke.direction = V.BeatStrokeDirection.Up;
                        q.effect.stroke.value = V.Duration.SIXTEENTH
                    }
                }
                if (ad == 0) {
                    this._measureEmpty = this._measureEmpty && aq.isRestVoice();
                    this._measureRest = true;
                    if (aq.isRestVoice() && ac == this._barStart && ap > this._barLength) {
                        ap = this._barLength
                    }
                    var ae = this.fixTimeValue(ap);
                    this._voices[ai.staff][ai.voice] = ac + ae;
                    ad = 1
                }
            }
        },
        makeBend: function(W) {
            if (W >= 1 && W <= 8) {
                var q = this._song.factory.newBendEffect();
                if (W == 1) {
                    q.addPoint(0, 0);
                    q.addPoint(6, V.effects.BendEffect.SEMITONE_LENGTH * 4);
                    q.addPoint(12, V.effects.BendEffect.SEMITONE_LENGTH * 4)
                } else {
                    if (W == 2) {
                        q.addPoint(0, 0);
                        q.addPoint(3, V.effects.BendEffect.SEMITONE_LENGTH * 4);
                        q.addPoint(6, V.effects.BendEffect.SEMITONE_LENGTH * 4);
                        q.addPoint(9, 0);
                        q.addPoint(12, 0)
                    } else {
                        if (W == 3) {
                            q.addPoint(0, 0);
                            q.addPoint(6, V.effects.BendEffect.SEMITONE_LENGTH * 4);
                            q.addPoint(12, V.effects.BendEffect.SEMITONE_LENGTH * 4)
                        } else {
                            if (W == 4) {
                                q.addPoint(0, V.effects.BendEffect.SEMITONE_LENGTH * 4);
                                q.addPoint(12, V.effects.BendEffect.SEMITONE_LENGTH * 4)
                            } else {
                                if (W == 5) {
                                    q.addPoint(0, V.effects.BendEffect.SEMITONE_LENGTH * 4);
                                    q.addPoint(4, V.effects.BendEffect.SEMITONE_LENGTH * 4);
                                    q.addPoint(8, 0);
                                    q.addPoint(12, 0)
                                } else {
                                    if (W == 6) {
                                        q.addPoint(0, 8);
                                        q.addPoint(12, 8)
                                    } else {
                                        if (W == 7) {
                                            q.addPoint(0, V.effects.BendEffect.SEMITONE_LENGTH * 4);
                                            q.addPoint(4, V.effects.BendEffect.SEMITONE_LENGTH * 4);
                                            q.addPoint(8, 0);
                                            q.addPoint(12, 0)
                                        } else {
                                            if (W == 8) {
                                                q.addPoint(0, V.effects.BendEffect.SEMITONE_LENGTH * 4);
                                                q.addPoint(4, V.effects.BendEffect.SEMITONE_LENGTH * 4);
                                                q.addPoint(8, 0);
                                                q.addPoint(12, 0)
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                return q
            }
            return null
        },
        getStaffTrack: function(q) {
            var W = this._trackTable.get(q == null ? "null" : "" + q);
            if (W == null || W.length == 0) {
                W = new Array();
                W.push(this._defaultTrack)
            }
            return W
        },
        findTrackInTable: function(q) {
            var Z = this._trackTable.keys();
            while (Z.hasNext()) {
                var Y = Z.next();
                var W = this._trackTable.get(Y);
                if (W != null && W.length > 0) {
                    var aa = 0;
                    while (aa < W.length) {
                        var X = W[aa];
                        ++aa;
                        if (q.number == X.number) {
                            return Y
                        }
                    }
                }
            }
            return null
        },
        deAssociateTrack: function(W) {
            var q = this.findTrackInTable(W);
            if (q != null) {
                var Y = this._trackTable.get(q);
                var Z = 0;
                var aa = Y.length;
                while (Z < aa) {
                    var X = Z++;
                    if (Y[X].number == W.number) {
                        Y.splice(X, 1);
                        return
                    }
                }
            }
        },
        fixTimeValue: function(q) {
            return Math.floor(q % (V.ModelConstants.QUARTER_TIME / 2) + 10 > V.ModelConstants.QUARTER_TIME / 2 ? q + (V.ModelConstants.QUARTER_TIME / 2 - q % (V.ModelConstants.QUARTER_TIME / 2)) : q)
        },
        parseProperties: function(q) {
            this._song.title = q.name;
            this._song.album = q.album;
            this._song.words = q.author;
            this._song.copyright = q.copyright;
            this._song.music = q.arrenger;
            this._song.instructions = q.guitarInstructions + "\n\r" + q.bassInstructions
        },
        readVersion: function() {
            var q = this.readString(4) + "-" + A.string(this.readShort());
            return q == f.PtReader.VERSION
        },
        readSongInfo: function() {
            var W = this.readByte();
            this._ptSong.info.classification = W;
            if (W == 0) {
                this.skip(1);
                this._ptSong.info.name = this.readString();
                this._ptSong.info.interpret = this.readString();
                var q = this.readByte();
                if (q == 0) {
                    this._ptSong.info.albumType = this.readByte();
                    this._ptSong.info.album = this.readString();
                    this._ptSong.info.year = this.readShort();
                    this._ptSong.info.liveRecording = this.readBoolean()
                } else {
                    if (q == 1) {
                        this._ptSong.info.album = this.readString();
                        this._ptSong.info.liveRecording = this.readBoolean()
                    } else {
                        if (q == 2) {
                            this._ptSong.info.album = this.readString();
                            this._ptSong.info.day = this.readShort();
                            this._ptSong.info.month = this.readShort();
                            this._ptSong.info.year = this.readShort()
                        }
                    }
                }
                if (this.readByte() == 0) {
                    this._ptSong.info.author = this.readString();
                    this._ptSong.info.lyricist = this.readString()
                }
                this._ptSong.info.arrenger = this.readString();
                this._ptSong.info.guitarTranscriber = this.readString();
                this._ptSong.info.bassTranscriber = this.readString();
                this._ptSong.info.copyright = this.readString();
                this._ptSong.info.lyrics = this.readString();
                this._ptSong.info.guitarInstructions = this.readString();
                this._ptSong.info.bassInstructions = this.readString()
            } else {
                if (W == 1) {
                    this._ptSong.info.name = this.readString();
                    this._ptSong.info.album = this.readString();
                    this._ptSong.info.style = this.readShort();
                    this._ptSong.info.level = this.readByte();
                    this._ptSong.info.author = this.readString();
                    this._ptSong.info.instructions = this.readString();
                    this._ptSong.info.copyright = this.readString()
                }
            }
        },
        readDataInstruments: function(ah) {
            var am = this.readHeaderItems();
            var q = 0;
            while (q < am) {
                var al = q++;
                this.readTrackInfo(ah);
                if (al < am - 1) {
                    this.readShort()
                }
            }
            am = this.readHeaderItems();
            var ad = 0;
            while (ad < am) {
                var ak = ad++;
                this.readChord();
                if (ak < am - 1) {
                    this.readShort()
                }
            }
            am = this.readHeaderItems();
            var ab = 0;
            while (ab < am) {
                var aj = ab++;
                this.readFloattingText();
                if (aj < am - 1) {
                    this.readShort()
                }
            }
            am = this.readHeaderItems();
            var aa = 0;
            while (aa < am) {
                var ai = aa++;
                this.readGuitarIn(ah);
                if (ai < am - 1) {
                    this.readShort()
                }
            }
            am = this.readHeaderItems();
            var Z = 0;
            while (Z < am) {
                var ag = Z++;
                this.readTempoMarker(ah);
                if (ag < am - 1) {
                    this.readShort()
                }
            }
            am = this.readHeaderItems();
            var Y = 0;
            while (Y < am) {
                var af = Y++;
                this.readDynamic();
                if (af < am - 1) {
                    this.readShort()
                }
            }
            am = this.readHeaderItems();
            var X = 0;
            while (X < am) {
                var ae = X++;
                this.readSectionSymbol(ah);
                if (ae < am - 1) {
                    this.readShort()
                }
            }
            am = this.readHeaderItems();
            var W = 0;
            while (W < am) {
                var ac = W++;
                this.readSection(ah.getSection(ac));
                if (ac < am - 1) {
                    this.readShort()
                }
            }
        },
        readTrackInfo: function(W) {
            var Z = new f.PtTrackInfo();
            Z.number = this.readByte();
            Z.name = this.readString();
            Z.instrument = this.readByte();
            Z.volume = this.readByte();
            Z.balance = this.readByte();
            Z.reverb = this.readByte();
            Z.chorus = this.readByte();
            Z.tremolo = this.readByte();
            Z.phaser = this.readByte();
            this.readByte();
            this.readString();
            this.readByte();
            var Y = this.readByte() & 255;
            var q = new Array();
            var aa = 0;
            while (aa < Y) {
                var X = aa++;
                q.push(this.readByte())
            }
            Z.strings = q;
            W.infos.push(Z)
        },
        readChord: function() {
            this.readShort();
            this.readByte();
            this.readShort();
            this.readByte();
            this.readByte();
            var X = this.readByte();
            var W = 0;
            while (W < X) {
                var q = W++;
                this.readByte()
            }
        },
        readFloattingText: function() {
            this.readString();
            this.readInt();
            this.readInt();
            this.readInt();
            this.readInt();
            this.readByte();
            this.readFontSetting()
        },
        readFontSetting: function() {
            this.readString();
            this.readInt();
            this.readInt();
            this.readBoolean();
            this.readBoolean();
            this.readBoolean();
            this.readInt()
        },
        readGuitarIn: function(X) {
            var Z = this.readShort();
            var W = this.readByte();
            var q = this.readByte();
            this.skip(1);
            var Y = this.readByte() & 255;
            X.getSection(Z).getPosition(q).addComponent(new f.PtGuitarIn(W, Y))
        },
        readTempoMarker: function(W) {
            var Z = this.readShort();
            var q = this.readByte();
            var X = this.readShort();
            var Y = this.readShort();
            this.readString();
            var aa = V.TripletFeel.None;
            if ((Y & 1) != 0) {
                aa = V.TripletFeel.Eighth
            } else {
                if ((Y & 2) != 0) {
                    aa = V.TripletFeel.Sixteenth
                }
            }
            if (X > 0) {
                W.getSection(Z).getPosition(q).addComponent(new f.PtTempo(X))
            }
        },
        readDynamic: function() {
            this.readShort();
            this.readByte();
            this.readByte();
            this.readShort()
        },
        readSectionSymbol: function(X) {
            var aa = this.readShort();
            var W = this.readByte();
            var Z = this.readInt();
            var q = Z >> 16;
            var Y = new f.PtSymbol(q);
            X.getSection(aa).getPosition(W).addComponent(Y)
        },
        readSection: function(ae) {
            this.readInt();
            this.readInt();
            this.readInt();
            this.readInt();
            var af = this.readByte();
            this.readByte();
            this.readByte();
            this.readByte();
            this.readByte();
            this.readBarLine(ae);
            var q = this.readHeaderItems();
            var Y = 0;
            while (Y < q) {
                var W = Y++;
                this.readDirection(ae);
                if (W < q - 1) {
                    this.readShort()
                }
            }
            q = this.readHeaderItems();
            var ad = 0;
            while (ad < q) {
                var aj = ad++;
                this.readChordText();
                if (aj < q - 1) {
                    this.readShort()
                }
            }
            q = this.readHeaderItems();
            var ac = 0;
            while (ac < q) {
                var ai = ac++;
                this.readRhythmSlash();
                if (ai < q - 1) {
                    this.readShort()
                }
            }
            ae.staffs = this.readHeaderItems();
            var X = 0;
            var ab = ae.staffs;
            while (X < ab) {
                var ah = X++;
                this.readStaff(ah, ae);
                if (ah < ae.staffs - 1) {
                    this.readShort()
                }
            }
            q = this.readHeaderItems();
            var Z = 0;
            while (Z < q) {
                var ag = Z++;
                this.readBarLine(ae);
                if (ag < q - 1) {
                    this.readShort()
                }
            }
            var aa = new f.PtBar();
            if (af >>> 5 == 4) {
                aa.repeatClose = af - 128
            } else {
                aa.repeatClose = 0
            }
            ae.getPosition(ae.getNextPositionNumber()).addComponent(aa)
        },
        readStaff: function(q, aa) {
            this.readByte();
            this.readByte();
            this.readByte();
            this.readByte();
            this.readByte();
            var ab = 0;
            while (ab < 2) {
                var Y = ab++;
                var Z = this.readHeaderItems();
                var X = 0;
                while (X < Z) {
                    var W = X++;
                    this.readPosition(q, Y, aa);
                    if (W < Z - 1) {
                        this.readShort()
                    }
                }
            }
        },
        readPosition: function(ae, al, ad) {
            var q = new f.PtBeat(ae, al);
            var am = this.readByte();
            var af = this.readByte();
            if (af - 128 < 0) {
                af = af
            } else {
                af = af - 128
            }
            this.readByte();
            var ab = this.readByte();
            this.readByte();
            var Z = this.readByte();
            var aa = this.readByte();
            var Y = 1;
            var ag = this.readByte();
            var W = 0;
            while (W < ag) {
                var aj = W++;
                var ac = this.readShort();
                this.readByte();
                var X = this.readByte();
                if ((X & 8) != 0) {
                    Y = ac
                }
            }
            var ak = this.readHeaderItems();
            var ah = 0;
            while (ah < ak) {
                var ai = ah++;
                this.readNote(q);
                if (ai < ak - 1) {
                    this.readShort()
                }
            }
            if (ak == 0) {
                q.multiBarRest = Y
            } else {
                q.multiBarRest = 1
            }
            q.vibrato = (ab & 8) != 0 || (ab & 16) != 0;
            q.grace = (Z & 1) != 0;
            q.duration = aa;
            q.dotted = (ab & 1) != 0;
            q.doubleDotted = (ab & 2) != 0;
            q.arpeggioUp = (ab & 32) != 0;
            q.arpeggioDown = (ab & 64) != 0;
            q.enters = h.Boot.__cast((af - af % 8) / 8 + 1, x);
            q.times = af % 8 + 1;
            q.isRest = (ab & 4) != 0;
            ad.getPosition(am).addComponent(q)
        },
        readNote: function(ab) {
            var ac = new f.PtNote();
            var aa = this.readByte();
            var q = this.readShort();
            var ad = this.readByte();
            var Z = 0;
            while (Z < ad) {
                var Y = Z++;
                this.readByte();
                this.readByte();
                var X = this.readByte();
                var W = this.readByte();
                ac.bend = Math.floor(W == 101 ? X / 16 + 1 : 0);
                ac.slide = W == 100
            }
            ac.value = aa & 31;
            ac.string = ((aa & 224) >> 5) + 1;
            ac.tied = (q & 1) != 0;
            ac.dead = (q & 2) != 0;
            ab.notes.push(ac)
        },
        readDirection: function(Z) {
            var q = this.readByte();
            var Y = this.readByte();
            var aa = 0;
            while (aa < Y) {
                var W = aa++;
                var X = this.readShort();
                Z.getPosition(q).addComponent(new f.PtDirection(X >> 8, (X & 192) >> 6, X & 31))
            }
        },
        readChordText: function() {
            this.readByte();
            this.readShort();
            this.readByte();
            this.readShort();
            this.readByte()
        },
        readRhythmSlash: function() {
            this.readByte();
            this.readByte();
            this.readInt()
        },
        readBarLine: function(Y) {
            var X = new f.PtBar();
            var q = this.readByte();
            var W = this.readByte();
            X.repeatStart = W >>> 5 == 3;
            if (W >>> 5 == 4) {
                X.repeatClose = W - 128
            } else {
                X.repeatClose = 0
            }
            this.readKeySignature();
            this.readTimeSignature(X);
            this.readRehearsalSign();
            Y.getPosition(q).addComponent(X)
        },
        readRehearsalSign: function() {
            this.readByte();
            this.readString()
        },
        readTimeSignature: function(q) {
            this.readByte();
            this.readByte();
            this.readByte();
            var W = this.readByte();
            this.readByte();
            q.numerator = h.Boot.__cast((W - W % 8) / 8 + 1, x);
            q.denominator = h.Boot.__cast(Math.pow(2, W % 8), x)
        },
        readKeySignature: function() {
            this.readByte()
        },
        readHeaderItems: function() {
            var q = this.readShort();
            if (q != 0) {
                var W = this.readShort();
                if (W == -1) {
                    if (this.readShort() != 1) {
                        return -1
                    }
                    this.readString(this.readShort())
                }
            }
            return q
        },
        readString: function(W) {
            if (W == null) {
                W = -1
            }
            if (W == -1) {
                W = this._data.readByte() & 255;
                if (W < 255) {
                    W = W
                } else {
                    W = this.readShort()
                }
            }
            var Y = "";
            var X = 0;
            while (X < W) {
                var q = X++;
                Y += String.fromCharCode(this.readByte())
            }
            return Y
        },
        readInt: function() {
            return this._data.readInt()
        },
        readShort: function() {
            return this._data.readShort()
        },
        readBoolean: function() {
            return this._data.readBool()
        },
        readByte: function() {
            return this._data.readByte()
        },
        skip: function(W) {
            var X = 0;
            while (X < W) {
                var q = X++;
                this._data.readByte()
            }
        },
        __class__: f.PtReader
    };
    f.PtRepeatState = function() {};
    p["ptb.PtRepeatState"] = f.PtRepeatState;
    f.PtRepeatState.__name__ = ["ptb", "PtRepeatState"];
    f.PtRepeatState.prototype = {
        __class__: f.PtRepeatState
    };
    f.PtSection = function(q) {
        this.number = q;
        this.positions = new Array()
    };
    p["ptb.PtSection"] = f.PtSection;
    f.PtSection.__name__ = ["ptb", "PtSection"];
    f.PtSection.prototype = {
        getPosition: function(X) {
            var q = 0;
            var W;
            while (q < this.positions.length) {
                W = this.positions[q];
                if (W.position == X) {
                    return W
                }
                q++
            }
            W = new f.PtPosition(X);
            this.positions.push(W);
            return W
        },
        getNextPositionNumber: function() {
            var W = 0;
            var q = 0;
            while (q < this.positions.length) {
                var X = this.positions[q];
                W = Math.max(W, X.position + 1);
                q++
            }
            return h.Boot.__cast(W, x)
        },
        sort: function() {
            this.positions.sort(function(W, q) {
                return W.position - q.position
            })
        },
        __class__: f.PtSection
    };
    f.PtSong = function() {
        this.info = new f.PtSongInfo();
        this.track1 = new f.PtTrack();
        this.track2 = new f.PtTrack()
    };
    p["ptb.PtSong"] = f.PtSong;
    f.PtSong.__name__ = ["ptb", "PtSong"];
    f.PtSong.prototype = {
        __class__: f.PtSong
    };
    f.PtSongInfo = function() {};
    p["ptb.PtSongInfo"] = f.PtSongInfo;
    f.PtSongInfo.__name__ = ["ptb", "PtSongInfo"];
    f.PtSongInfo.prototype = {
        __class__: f.PtSongInfo
    };
    f.PtSymbol = function(q) {
        this.number = q
    };
    p["ptb.PtSymbol"] = f.PtSymbol;
    f.PtSymbol.__name__ = ["ptb", "PtSymbol"];
    f.PtSymbol.__interfaces__ = [f.PtComponent];
    f.PtSymbol.prototype = {
        clone: function() {
            return new f.PtSymbol(this.number)
        },
        __class__: f.PtSymbol
    };
    f.PtTempo = function(q) {
        this.value = q
    };
    p["ptb.PtTempo"] = f.PtTempo;
    f.PtTempo.__name__ = ["ptb", "PtTempo"];
    f.PtTempo.__interfaces__ = [f.PtComponent];
    f.PtTempo.prototype = {
        clone: function() {
            return new f.PtTempo(this.value)
        },
        __class__: f.PtTempo
    };
    f.PtTrack = function() {
        this.sections = new Array();
        this.infos = new Array()
    };
    p["ptb.PtTrack"] = f.PtTrack;
    f.PtTrack.__name__ = ["ptb", "PtTrack"];
    f.PtTrack.prototype = {
        getSection: function(Y) {
            var X = this.sections.length;
            var Z = Y + 1;
            while (X < Z) {
                var q = X++;
                var W = new f.PtSection(q);
                this.sections.push(W)
            }
            return this.sections[Y]
        },
        getDefaultInfo: function() {
            var q = null;
            var X = 0;
            var Z = this.infos.length;
            while (X < Z) {
                var W = X++;
                var Y = this.infos[W];
                if (q == null || Y.number < q.number) {
                    q = Y
                }
            }
            return q
        },
        getInfo: function(Y) {
            var q = new Array();
            var X = 0;
            var aa = this.infos.length;
            while (X < aa) {
                var W = X++;
                var Z = this.infos[W];
                if ((1 << Z.number & Y) != 0) {
                    q.push(Z)
                }
            }
            return q
        },
        __class__: f.PtTrack
    };
    f.PtTrackInfo = function() {};
    p["ptb.PtTrackInfo"] = f.PtTrackInfo;
    f.PtTrackInfo.__name__ = ["ptb", "PtTrackInfo"];
    f.PtTrackInfo.prototype = {
        __class__: f.PtTrackInfo
    };
    var k = {};
    k.NetSigs = function() {};
    p["sigs.NetSigs"] = k.NetSigs;
    k.NetSigs.__name__ = ["sigs", "NetSigs"];
    k.NetStatus = function() {};
    p["sigs.NetStatus"] = k.NetStatus;
    k.NetStatus.__name__ = ["sigs", "NetStatus"];
    k.NetStatus.isAccepted = function() {
        var X = "";
        var W = "";
        var q = window.location.hostname;
        var Y = q.split(".");
        Y.reverse();
        if (Y.length >= 2) {
            W = Y[1] + "." + Y[0]
        }
        return y.indexOf(k.NetSigs.S, m.crypto.Sha1.encode(q)) >= 0 || y.indexOf(k.NetSigs.S, m.crypto.Sha1.encode(W)) >= 0
    };
    V.Automation = function() {
        this.barId = 0;
        this.position = 0;
        this.value = 0;
        this.reference = 0;
        this.visible = false;
        this.linear = false;
        this.type = "Tempo"
    };
    p["songModel.Automation"] = V.Automation;
    V.Automation.__name__ = ["songModel", "Automation"];
    V.Automation.prototype = {
        __class__: V.Automation
    };
    V.Beat = function(q) {
        if (q != null) {
            q = q
        } else {
            q = new V.SongFactory()
        }
        this.start = V.ModelConstants.QUARTER_TIME;
        this.effect = q.newBeatEffect();
        this.voices = new Array();
        this.text = "";
        this.lyricLines = new Array();
        var Y = 0;
        var Z = V.Beat.MAX_VOICES;
        while (Y < Z) {
            var W = Y++;
            var X = q.newVoice(W);
            X.beat = this;
            this.voices.push(X)
        }
    };
    p["songModel.Beat"] = V.Beat;
    V.Beat.__name__ = ["songModel", "Beat"];
    V.Beat.prototype = {
        clone: function(X) {
            var q = X.newBeat();
            q.text = this.text;
            q.start = this.start;
            q.effect = this.effect.clone(X);
            q.index = this.index;
            q.ensureVoices(this.voices.length, X);
            q.lyricLines = this.lyricLines.slice();
            var aa = 0;
            var Z = this.voices;
            while (aa < Z.length) {
                var Y = Z[aa];
                ++aa;
                var W = Y.clone(X);
                W.beat = q;
                q.voices[Y.index] = W
            }
            return q
        },
        isRestBeat: function() {
            var X = 0;
            var Y = this.voices.length;
            while (X < Y) {
                var q = X++;
                var W = this.voices[q];
                if (!W.isEmpty && W.notes.length != 0) {
                    return false
                }
            }
            return true
        },
        isEmpty: function() {
            var X = 0;
            var Y = this.voices.length;
            while (X < Y) {
                var q = X++;
                var W = this.voices[q];
                if (!W.isEmpty) {
                    return false
                }
            }
            return true
        },
        getStartInMilliSeconds: function() {
            var W = this.measure.header;
            var q = this.start - W.start;
            return W.startInMilliSeconds + Math.floor(q / V.ModelConstants.QUARTER_TIME * (60 / W.tempo.value) * 1000)
        },
        getRealDurationInMilliSeconds: function() {
            var q = this.getNextBeat();
            var W;
            if (q == null) {
                W = this.measure.track.song.getTotalTime()
            } else {
                W = q.getStartInMilliSeconds()
            }
            return W - this.getStartInMilliSeconds()
        },
        getOffsetInMilliseconds: function() {
            var W = this.measure.header;
            var q = this.start - W.start;
            return Math.floor(q / V.ModelConstants.QUARTER_TIME * (60 / W.tempo.value) * 1000)
        },
        setText: function(q) {
            this.text = q
        },
        setChord: function(q) {
            if (this.effect.chord != null) {
                this.effect.chord.beat = null
            }
            if (q != null) {
                q.beat = this
            }
            this.effect.chord = q
        },
        ensureVoices: function(W, q) {
            while (this.voices.length < W) {
                var X = q.newVoice(this.voices.length);
                X.beat = this;
                this.voices.push(X)
            }
        },
        getVoice: function(q) {
            this.ensureVoices(q + 1, this.measure.track.song.factory);
            return this.voices[q]
        },
        getNotes: function() {
            var q = new Array();
            var ab = 0;
            var aa = this.voices;
            while (ab < aa.length) {
                var Z = aa[ab];
                ++ab;
                var Y = 0;
                var X = Z.notes;
                while (Y < X.length) {
                    var W = X[Y];
                    ++Y;
                    q.push(W)
                }
            }
            return q
        },
        forAllNotes: function(Y) {
            var aa = 0;
            var Z = this.voices;
            while (aa < Z.length) {
                var q = Z[aa];
                ++aa;
                var X = 0;
                var W = q.notes;
                while (X < W.length) {
                    var ab = W[X];
                    ++X;
                    Y(ab)
                }
            }
        },
        hasAnyEffect: function() {
            var W = this.getNotes();
            var q = false;
            var Y = 0;
            while (Y < W.length) {
                var X = W[Y];
                ++Y;
                q = q || X.effect.hasAnyEffect()
            }
            return q || this.effect.hasAnyEffect()
        },
        getNoteWithEffect: function(q) {
            var W = this.getNotes();
            var Y = 0;
            while (Y < W.length) {
                var X = W[Y];
                ++Y
            }
            return null
        },
        shortestVoice: function() {
            var X = V.Duration.WHOLE;
            var Z = 0;
            var aa = 0;
            var Y = this.voices;
            while (aa < Y.length) {
                var q = Y[aa];
                ++aa;
                var W = q.duration.time();
                if (W < X) {
                    X = W;
                    Z = q.index
                }
            }
            return Z
        },
        setTied: function(Y) {
            var X = 0;
            var W = this.getNotes();
            while (X < W.length) {
                var q = W[X];
                ++X;
                q.isTiedNote = Y
            }
            return this
        },
        getNextBeat: function() {
            return this.measure.track.getNextBeat(this.measure.getIndex(), this.index)
        },
        getPrevBeat: function() {
            return this.measure.track.getPrevBeat(this.measure.getIndex(), this.index)
        },
        getNoteOnString: function(q) {
            var X = 0;
            var W = this.getNotes();
            while (X < W.length) {
                var Y = W[X];
                ++X;
                if (Y.string == q) {
                    return Y
                }
            }
            return null
        },
        get_lyrics: function() {
            return this.lyricLines[0]
        },
        __class__: V.Beat,
        __properties__: {
            get_lyrics: "get_lyrics"
        }
    };
    V.BeatEffect = function(q) {
        this.tapping = false;
        this.slapping = false;
        this.popping = false;
        this.fadeIn = false;
        this.fadeOut = false;
        this.tremoloBar = null;
        this.stroke = q.newStroke()
    };
    p["songModel.BeatEffect"] = V.BeatEffect;
    V.BeatEffect.__name__ = ["songModel", "BeatEffect"];
    V.BeatEffect.prototype = {
        isChord: function() {
            return this.chord != null
        },
        isTremoloBar: function() {
            return this.tremoloBar != null
        },
        hasAnyEffect: function() {
            return this.fadeIn || this.fadeOut || this.vibrato || this.tapping || this.slapping || this.popping || this.isTremoloBar()
        },
        clone: function(q) {
            var W = q.newBeatEffect();
            W.fadeIn = this.fadeIn;
            W.hasPickStroke = this.hasPickStroke;
            W.hasRasgueado = this.hasRasgueado;
            W.pickStroke = this.pickStroke;
            W.popping = this.popping;
            W.slapping = this.slapping;
            W.tapping = this.tapping;
            W.vibrato = this.vibrato;
            W.stroke = this.stroke.clone();
            if (this.chord != null) {
                W.chord = this.chord.clone()
            }
            if (this.tremoloBar != null) {
                W.tremoloBar = this.tremoloBar.clone(q)
            }
            if (this.effectTable != null) {
                W.effectTable = this.effectTable.clone()
            }
            return W
        },
        __class__: V.BeatEffect
    };
    V.BeatStroke = function() {
        this.direction = V.BeatStrokeDirection.None
    };
    p["songModel.BeatStroke"] = V.BeatStroke;
    V.BeatStroke.__name__ = ["songModel", "BeatStroke"];
    V.BeatStroke.prototype = {
        getIncrementTime: function(X) {
            var aa = 0;
            if (this.value > 0) {
                var Z = 0;
                var ab = X.voices.length;
                while (Z < ab) {
                    var q = Z++;
                    var Y = X.voices[q];
                    if (Y.isEmpty) {
                        continue
                    }
                    var W = Y.duration.time();
                    if (aa == 0 || W < aa) {
                        if (W <= V.ModelConstants.QUARTER_TIME) {
                            aa = W
                        } else {
                            aa = V.ModelConstants.QUARTER_TIME
                        }
                    }
                }
                if (aa > 0) {
                    return Math.round(aa / 8 * (4 / this.value))
                }
            }
            return 0
        },
        clone: function() {
            var q = new V.BeatStroke();
            q.direction = this.direction;
            q.value = this.value;
            return q
        },
        __class__: V.BeatStroke
    };
    V.BeatStrokeDirection = function() {};
    p["songModel.BeatStrokeDirection"] = V.BeatStrokeDirection;
    V.BeatStrokeDirection.__name__ = ["songModel", "BeatStrokeDirection"];
    V.ChannelPresets = function() {
        this._defaultInstrument = -1;
        this.channel = 0;
        this.effectChannel = 0;
        this.instrument(V.ChannelPresets.DEFAULT_INSTRUMENT);
        this.volume = V.ChannelPresets.DEFAULT_VOLUME;
        this.balance = V.ChannelPresets.DEFAULT_BALANCE;
        this.chorus = V.ChannelPresets.DEFAULT_CHORUS;
        this.reverb = V.ChannelPresets.DEFAULT_REVERB;
        this.phaser = V.ChannelPresets.DEFAULT_PHASER;
        this.tremolo = V.ChannelPresets.DEFAULT_TREMOLO
    };
    p["songModel.ChannelPresets"] = V.ChannelPresets;
    V.ChannelPresets.__name__ = ["songModel", "ChannelPresets"];
    V.ChannelPresets.prototype = {
        instrument: function(q) {
            if (q == null) {
                q = -1
            }
            if (q != -1) {
                this._instrument = q
            }
            if (this.channel == V.ChannelPresets.DEFAULT_PERCUSSION_CHANNEL && this._instrument == 0) {
                return V.ChannelPresets.DEFAULT_PERCUSSION_PRESET
            } else {
                return this._instrument
            }
        },
        isPercussionChannel: function() {
            return this.instrument() == V.ChannelPresets.DEFAULT_PERCUSSION_PRESET
        },
        copy: function(q) {
            q.channel = this.channel;
            q.effectChannel = this.effectChannel;
            q.instrument(this.instrument());
            q.volume = this.volume;
            q.balance = this.balance;
            q.chorus = this.chorus;
            q.reverb = this.reverb;
            q.phaser = this.phaser;
            q.tremolo = this.tremolo
        },
        clone: function() {
            var q = new V.ChannelPresets();
            this.copy(q);
            return q
        },
        chageInstrument: function(q) {
            if (this._defaultInstrument == -1) {
                this._defaultInstrument = this._instrument
            }
            this.instrument(q)
        },
        getDefaulInstrument: function() {
            return this._defaultInstrument
        },
        __class__: V.ChannelPresets
    };
    V.Chord = function(X, q) {
        if (q == null) {
            q = ""
        }
        if (X == null) {
            X = 0
        }
        this.strings = new Array();
        this.origName = q;
        this.name = q;
        var Y = 0;
        while (Y < X) {
            var W = Y++;
            this.strings.push(-1)
        }
        this.auto = false
    };
    p["songModel.Chord"] = V.Chord;
    V.Chord.__name__ = ["songModel", "Chord"];
    V.Chord.findTonicNumber = function(ab) {
        var q = -1;
        var aa = 0;
        var ac = V.Chord.tonics.length;
        while (aa < ac) {
            var W = aa++;
            var Z = 0;
            var Y = V.Chord.tonics[W];
            while (Z < Y.length) {
                var X = Y[Z];
                ++Z;
                if (ab == X) {
                    q = W;
                    break
                }
            }
            if (q != -1) {
                break
            }
        }
        return q
    };
    V.Chord.prototype = {
        stringCount: function() {
            return this.strings.length
        },
        noteCount: function() {
            var W = 0;
            var X = 0;
            var Y = this.strings.length;
            while (X < Y) {
                var q = X++;
                if (this.strings[q] >= 0) {
                    W++
                }
            }
            return W
        },
        clone: function() {
            var q = new V.Chord(this.strings.length, this.name);
            q.strings = this.strings.slice();
            q.firstFret = this.firstFret;
            q.auto = this.auto;
            return q
        },
        __class__: V.Chord
    };
    V.Color = function(Y, X, q, W) {
        if (W == null) {
            W = 1
        }
        if (q == null) {
            q = 0
        }
        if (X == null) {
            X = 0
        }
        if (Y == null) {
            Y = 0
        }
        this.r = Y;
        this.g = X;
        this.b = q;
        this.a = W
    };
    p["songModel.Color"] = V.Color;
    V.Color.__name__ = ["songModel", "Color"];
    V.Color.fromInt = function(W) {
        var q = new V.Color();
        q.r = W >> 24 & 255;
        q.g = W >> 16 & 255;
        q.b = W >> 8 & 255;
        q.a = (W & 255) / 255;
        return q
    };
    V.Color.fromRgb = function(X, W, q) {
        return new V.Color(X, W, q, 1)
    };
    V.Color.fromARgb = function(Y, X, q, W) {
        return new V.Color(Y, X, q, W)
    };
    V.Color.prototype = {
        toInt: function() {
            var q = Math.floor(Math.max(0, Math.min(this.a, 1)) * 255);
            return q << 24 & 255 | this.r << 16 & 255 | this.g << 8 & 255 | this.b & 255
        },
        asRgbString: function() {
            if (this.a == 1) {
                var W = "rgb(";
                W += A.string(this.r) + ",";
                W += A.string(this.g) + ",";
                W += A.string(this.b) + ")";
                return W
            } else {
                var q = "rgba(";
                q += A.string(this.r) + ",";
                q += A.string(this.g) + ",";
                q += A.string(this.b) + ",";
                q += A.string(this.a) + ")";
                return q
            }
        },
        clone: function() {
            return new V.Color(this.r, this.g, this.b, this.a)
        },
        __class__: V.Color
    };
    V.ModelConstants = function() {};
    p["songModel.ModelConstants"] = V.ModelConstants;
    V.ModelConstants.__name__ = ["songModel", "ModelConstants"];
    V.ModelConstants.prototype = {
        __class__: V.ModelConstants
    };
    V.Duration = function(q, W) {
        if (W == null) {
            W = -1
        }
        if (q == null) {
            q = new V.SongFactory()
        } else {
            q = q
        }
        if (W == -1) {
            this.value = V.Duration.QUARTER
        } else {
            this.value = W
        }
        this.isDotted = false;
        this.isDoubleDotted = false;
        this.tuplet = q.newTuplet()
    };
    p["songModel.Duration"] = V.Duration;
    V.Duration.__name__ = ["songModel", "Duration"];
    V.Duration.fromTime = function(q, ac, Z, ab) {
        if (ab == null) {
            ab = 0
        }
        if (q == null) {
            q = new V.SongFactory()
        } else {
            q = q
        }
        var aa;
        if (Z != null) {
            aa = Z.clone(q)
        } else {
            aa = q.newDuration(V.Duration.SIXTY_FOURTH)
        }
        var X = q.newDuration();
        X.value = V.Duration.WHOLE;
        X.isDotted = true;
        var W = false;
        while (!W) {
            var Y = X.time();
            if (Y - ab <= ac) {
                if (Math.abs(Y - ac) < Math.abs(aa.time() - ac)) {
                    aa = X.clone(q)
                }
            }
            if (X.isDotted) {
                X.isDotted = false
            } else {
                if (X.tuplet.equals(V.Tuplet.NORMAL)) {
                    X.tuplet.enters = 3;
                    X.tuplet.times = 2
                } else {
                    X.value = X.value * 2;
                    X.isDotted = true;
                    X.tuplet.enters = 1;
                    X.tuplet.times = 1
                }
            }
            if (X.value > V.Duration.SIXTY_FOURTH) {
                W = true
            }
        }
        return aa
    };
    V.Duration.fillTime = function(Y) {
        var q = new Array();
        var X = new V.Duration(null, 1);
        while (X.time() < Y) {
            q.push(X);
            Y -= X.time()
        }
        while (X.value < 128) {
            var W = X.time();
            if (W <= Y) {
                q.push(X);
                Y -= W
            }
            if (Y <= 0) {
                break
            }
            X = new V.Duration(null, X.value << 1)
        }
        return q
    };
    V.Duration.prototype = {
        time: function() {
            var q;
            if (this.value > 0) {
                q = this.value
            } else {
                q = 1
            }
            var W = Math.floor(V.ModelConstants.QUARTER_TIME * (4 / q));
            if (this.isDotted) {
                W += Math.floor(W / 2)
            } else {
                if (this.isDoubleDotted) {
                    W += Math.floor(W / 4 * 3)
                }
            }
            return this.tuplet.convertTime(W)
        },
        index: function() {
            var q = 0;
            var W = this.value;
            while ((W = W >> 1) > 0) {
                q++
            }
            return q
        },
        copy: function(q) {
            q.value = this.value;
            q.isDotted = this.isDotted;
            q.isDoubleDotted = this.isDoubleDotted;
            this.tuplet.copy(q.tuplet)
        },
        clone: function(q) {
            var W = q.newDuration();
            W.value = this.value;
            W.isDotted = this.isDotted;
            W.isDoubleDotted = this.isDoubleDotted;
            W.tuplet = this.tuplet.clone(q);
            return W
        },
        equals: function(q) {
            if (q == null) {
                return false
            }
            if (this == q) {
                return true
            }
            return q.value == this.value && q.isDotted == this.isDotted && q.isDoubleDotted == this.isDoubleDotted && q.tuplet.equals(this.tuplet)
        },
        __class__: V.Duration
    };
    V.EffectTable = function() {
        this.volume = new V.EffectTableItem();
        this.balance = new V.EffectTableItem();
        this.chorus = new V.EffectTableItem();
        this.reverb = new V.EffectTableItem();
        this.phaser = new V.EffectTableItem();
        this.tremolo = new V.EffectTableItem();
        this.instrument = new V.EffectTableItem();
        this.tempo = new V.EffectTableItem();
        this.hideTempo = true
    };
    p["songModel.EffectTable"] = V.EffectTable;
    V.EffectTable.__name__ = ["songModel", "EffectTable"];
    V.EffectTable.prototype = {
        clone: function() {
            var q = new V.EffectTable();
            q.volume = this.volume;
            q.balance = this.balance;
            q.chorus = this.chorus;
            q.reverb = this.reverb;
            q.phaser = this.phaser;
            q.tremolo = this.tremolo;
            q.instrument = this.instrument;
            q.tempo = this.tempo;
            return q
        },
        __class__: V.EffectTable
    };
    V.EffectTableItem = function(q, W) {
        if (W == null) {
            W = 0
        }
        if (q == null) {
            q = 0
        }
        this.value = q;
        this.duration = W;
        this.allTracks = false
    };
    p["songModel.EffectTableItem"] = V.EffectTableItem;
    V.EffectTableItem.__name__ = ["songModel", "EffectTableItem"];
    V.EffectTableItem.prototype = {
        clone: function() {
            return new V.EffectTableItem(this.value, this.duration)
        },
        __class__: V.EffectTableItem
    };
    V.FormatException = function(q) {
        this.message = q
    };
    p["songModel.FormatException"] = V.FormatException;
    V.FormatException.__name__ = ["songModel", "FormatException"];
    V.FormatException.prototype = {
        __class__: V.FormatException
    };
    V.GuitarString = function(q, W) {
        if (W == null) {
            W = 0
        }
        if (q == null) {
            q = 0
        }
        this.number = q;
        this.value = W
    };
    p["songModel.GuitarString"] = V.GuitarString;
    V.GuitarString.__name__ = ["songModel", "GuitarString"];
    V.GuitarString.prototype = {
        clone: function(q) {
            var W = q.newString();
            W.number = this.number;
            W.value = this.value;
            return W
        },
        __class__: V.GuitarString
    };
    V.LyricLine = function(q, W) {
        this.startingMeasure = q;
        this.lyrics = W
    };
    p["songModel.LyricLine"] = V.LyricLine;
    V.LyricLine.__name__ = ["songModel", "LyricLine"];
    V.LyricLine.prototype = {
        toString: function() {
            return this.lyrics
        },
        clone: function() {
            var q = new V.LyricLine(this.startingMeasure, this.lyrics);
            return q
        },
        __class__: V.LyricLine
    };
    V.Lyrics = function(q) {
        this.trackChoice = q;
        this.lines = new Array()
    };
    p["songModel.Lyrics"] = V.Lyrics;
    V.Lyrics.__name__ = ["songModel", "Lyrics"];
    V.Lyrics.prototype = {
        lyricsBeats: function() {
            var X = "";
            var Z = 0;
            var Y = this.lines;
            while (Z < Y.length) {
                var q = Y[Z];
                ++Z;
                if (q != null) {
                    X += q.lyrics + "\n"
                }
            }
            var W = O.trim(X);
            W = O.replace(W, "\n", " ");
            W = O.replace(W, "\r", " ");
            return W.split(" ")
        },
        clone: function() {
            var X = new V.Lyrics(this.trackChoice);
            var Y = 0;
            var Z = this.lines.length;
            while (Y < Z) {
                var W = Y++;
                var q = this.lines[W];
                if (q != null) {
                    X.lines.push(q.clone())
                } else {
                    X.lines.push(null)
                }
            }
            return X
        },
        __class__: V.Lyrics
    };
    V.MeasureClef = function() {};
    p["songModel.MeasureClef"] = V.MeasureClef;
    V.MeasureClef.__name__ = ["songModel", "MeasureClef"];
    V.Measure = function(q) {
        this.header = q;
        this.clef = V.Measure.DEFAULT_CLEF;
        this.beats = new Array()
    };
    p["songModel.Measure"] = V.Measure;
    V.Measure.__name__ = ["songModel", "Measure"];
    V.Measure.prototype = {
        clone: function(W) {
            var q = W.newMeasure();
            q.clef = this.clef;
            var Z = 0;
            var Y = this.beats;
            while (Z < Y.length) {
                var X = Y[Z];
                ++Z;
                q.addBeat(X.clone(W))
            }
            return q
        },
        beatCount: function() {
            return this.beats.length
        },
        end: function() {
            return this.start() + this.length()
        },
        number: function() {
            return this.header.number
        },
        getIndex: function() {
            return this.header.number - 1
        },
        keySignature: function() {
            return this.header.keySignature
        },
        repeatClose: function() {
            return this.header.repeatClose
        },
        start: function() {
            return this.header.start
        },
        length: function() {
            return this.header.length()
        },
        tempo: function() {
            return this.header.tempo
        },
        timeSignature: function() {
            return this.header.timeSignature
        },
        isRepeatOpen: function() {
            return this.header.isRepeatOpen
        },
        tripletFeel: function() {
            return this.header.tripletFeel
        },
        addBeat: function(q) {
            q.measure = this;
            q.index = this.beats.length;
            this.beats.push(q)
        },
        forAllNotes: function(W) {
            var Y = 0;
            var X = this.beats;
            while (Y < X.length) {
                var q = X[Y];
                ++Y;
                q.forAllNotes(W)
            }
        },
        forAllBeats: function(W) {
            var Y = 0;
            var X = this.beats;
            while (Y < X.length) {
                var q = X[Y];
                ++Y;
                W(q)
            }
        },
        getBeat: function(Z) {
            var Y = 0;
            var X = this.beats;
            while (Y < X.length) {
                var W = X[Y];
                ++Y;
                if (W.start == Z) {
                    return W
                }
            }
            var q = this.newBeat();
            q.start = Z;
            return q
        },
        findBeat: function(aa) {
            if (aa < this.start() || aa > this.end()) {
                return null
            }
            var q = this.beats[0];
            var Y = 1;
            var Z = this.beats.length;
            while (Y < Z) {
                var W = Y++;
                var X = this.beats[W];
                if (q.start <= aa && X.start > aa) {
                    return q
                }
                q = X
            }
            if (aa >= q.start) {
                return q
            }
            return null
        },
        newBeat: function() {
            var q = this.track.song.factory.newBeat();
            q.start = this.beats.length;
            this.addBeat(q);
            return q
        },
        validateBeats: function() {
            var X = 0;
            var ab = this.beats;
            while (X < ab.length) {
                var ac = ab[X];
                ++X;
                var Y = true;
                var aa = 0;
                var Z = ac.voices;
                while (aa < Z.length) {
                    var af = Z[aa];
                    ++aa;
                    Y = Y && af.isEmpty
                }
                if (Y) {
                    ac.voices[0].isEmpty = false
                }
            }
            var W = this.countBeatTime();
            var q = this.length();
            if (W < q) {
                var ad = this.getBeat(this.start() + W);
                var ae = ad.getVoice(0);
                ae.isEmpty = false;
                ae.duration = V.Duration.fromTime(this.track.song.factory, q - W)
            }
        },
        generateVoiceRest: function(Z) {
            if (this.beats.length > 0) {
                var Y = 0;
                var W = 0;
                var q = 0;
                while (Y < this.beats.length) {
                    var X = this.beats[Y];
                    var ab = 0;
                    if (Y + 1 < this.beats.length) {
                        ab = this.beats[Y + 1].start - X.start
                    } else {
                        ab = this.start() + this.length() - X.start
                    }
                    var aa = X.getVoice(Z);
                    if (aa.notes.length != 0) {
                        W = aa.duration.time();
                        q = X.start
                    } else {
                        if (q + W > X.start) {
                            aa.isEmpty = true
                        } else {
                            aa.isEmpty = false;
                            aa.duration = V.Duration.fromTime(this.track.song.factory, ab)
                        }
                    }
                    Y++
                }
            }
        },
        makeRestIfEmpty: function() {
            if (this.beats.length == 0) {
                var q = this.getBeat(this.start());
                var W = q.getVoice(0);
                W.isEmpty = false;
                W.duration = V.Duration.fromTime(this.track.song.factory, this.length())
            }
        },
        countBeatTime: function(Y) {
            if (Y == null) {
                Y = 0
            }
            var q = 0;
            var aa = 0;
            var Z = this.beats;
            while (aa < Z.length) {
                var X = Z[aa];
                ++aa;
                var W = X.getVoice(Y);
                if (W != null && !W.isEmpty) {
                    q += W.duration.time()
                }
            }
            return q
        },
        sortByStart: function() {
            this.beats.sort(function(aa, Z) {
                return aa.start - Z.start
            });
            var W = 0;
            var Y = 0;
            var X = this.beats;
            while (Y < X.length) {
                var q = X[Y];
                ++Y;
                q.index = W;
                W++
            }
        },
        getActiveVoices: function() {
            var ad = new Array();
            var aa = 0;
            var W = V.Beat.MAX_VOICES;
            while (aa < W) {
                var q = aa++;
                var X = true;
                var Z = 0;
                var Y = this.beats;
                while (Z < Y.length) {
                    var ab = Y[Z];
                    ++Z;
                    var ac = ab.getVoice(q);
                    X = X && ac.isEmpty
                }
                if (!X) {
                    ad.push(q)
                }
            }
            return ad
        },
        isEmpty: function() {
            var X = 0;
            var W = this.beats;
            while (X < W.length) {
                var q = W[X];
                ++X;
                if (!q.isEmpty()) {
                    return false
                }
            }
            return true
        },
        ensureBeats: function(q) {
            while (this.beats.length < q) {
                this.addBeat(new V.Beat(this.track.song.factory))
            }
        },
        removeAllBeats: function() {
            this.beats = new Array()
        },
        equals: function(W) {
            var q = false;
            if (this.beats.toString() == W.beats.toString() && this.header.timeSignature.equals(W.header.timeSignature)) {
                q = true
            }
            return q
        },
        isRest: function() {
            var W = true;
            var Y = 0;
            var X = this.beats;
            while (Y < X.length) {
                var q = X[Y];
                ++Y;
                if (!q.isRestBeat()) {
                    W = false;
                    break
                }
            }
            return W
        },
        __class__: V.Measure
    };
    V.MeasureHeader = function(q) {
        this.number = 0;
        this.start = V.ModelConstants.QUARTER_TIME;
        this.timeSignature = q.newTimeSignature();
        this.keySignature = V.MeasureHeader.DEFAULT_KEY_SIGNATURE;
        this.tempo = q.newTempo();
        this.tripletFeel = V.TripletFeel.None;
        this.isRepeatOpen = false;
        this.repeatClose = 0;
        this.repeatAlternative = 0;
        this.startInMilliSeconds = -1
    };
    p["songModel.MeasureHeader"] = V.MeasureHeader;
    V.MeasureHeader.__name__ = ["songModel", "MeasureHeader"];
    V.MeasureHeader.prototype = {
        length: function() {
            return this.timeSignature.numerator * this.timeSignature.denominator.time()
        },
        clone: function(q) {
            var W = q.newMeasureHeader();
            W.number = this.number;
            W.start = this.start;
            W.keySignature = this.keySignature;
            W.keySignatureType = this.keySignatureType;
            W.hasDoubleBar = this.hasDoubleBar;
            W.repeatAlternative = this.repeatAlternative;
            W.repeatClose = this.repeatClose;
            W.startInMilliSeconds = this.startInMilliSeconds;
            W.tripletFeel = this.tripletFeel;
            W.tempo.value = this.tempo.value;
            W.isRepeatOpen = this.isRepeatOpen;
            W.timeSignature = this.timeSignature.clone(q);
            W.tempo = new V.Tempo(this.tempo.value);
            if (this.text != null) {
                W.text = this.text.clone();
                W.text.measureHeader = W
            }
            return W
        },
        alterEndString: function() {
            var Y = "";
            var W = this.repeatAlternative;
            var X = 1;
            while (W > 0) {
                var q = W % 2;
                if (q > 0) {
                    Y += X + ","
                }
                W >>= 1;
                X++
            }
            return B.substr(Y, 0, Y.length - 1)
        },
        countLengthInMilliSeconds: function() {
            return V.Song.ticksToMilliSeconds(this.length(), this.tempo.value)
        },
        setText: function(W, q) {
            this.text = new V.MeasureText(W, q);
            this.text.measureHeader = this;
            return this.text
        },
        isTimeSignatureExists: function() {
            if (this.number == 1) {
                return true
            }
            var W = this.number - 2;
            var q = this.song.measureHeaders[W].timeSignature;
            return !q.equals(this.timeSignature)
        },
        __class__: V.MeasureHeader
    };
    V.MeasureText = function(W, q) {
        if (W == null) {
            W = ""
        }
        this.title = W;
        if (q != null) {
            this.color = q
        } else {
            this.color = V.Color.Red
        }
    };
    p["songModel.MeasureText"] = V.MeasureText;
    V.MeasureText.__name__ = ["songModel", "MeasureText"];
    V.MeasureText.prototype = {
        clone: function() {
            var q = new V.MeasureText(this.title, this.color.clone());
            return q
        },
        __class__: V.MeasureText
    };
    V.Note = function(q) {
        if (q != null) {
            q = q
        } else {
            q = new V.SongFactory()
        }
        this._realValue = -1;
        this.value = 0;
        this.velocity = V.Velocities.DEFAULT;
        this.string = 1;
        this.isTiedNote = false;
        this.effect = q.newNoteEffect()
    };
    p["songModel.Note"] = V.Note;
    V.Note.__name__ = ["songModel", "Note"];
    V.Note.prototype = {
        clone: function(q) {
            var W = q.newNote();
            W.duration = this.duration;
            W.tuplet = this.tuplet;
            W.value = this.value;
            W.velocity = this.velocity;
            W.string = this.string;
            W.isTiedNote = this.isTiedNote;
            W.effect = this.effect.clone(q);
            W.durationPercent = this.durationPercent;
            W.index = this.index;
            return W
        },
        realValue: function() {
            if (this._realValue == -1) {
                this._realValue = this.value + this.voice.beat.measure.track.strings[this.string - 1].value
            }
            return this._realValue
        },
        getPrevNote: function() {
            var X = this.voice.beat;
            var W = X.measure;
            var q = W.track;
            return V.Song.getPreviousNote(this, q, W.number() - 1, X.index)
        },
        getNextNote: function() {
            var X = this.voice.beat;
            var W = X.measure;
            var q = W.track;
            return V.Song.getNextNote(this, q, W.number() - 1, X.index)
        },
        getSlideTarget: function() {
            if (this.effect.slide) {
                return this.nextNoteOnSameLine()
            } else {
                return null
            }
        },
        nextNoteOnSameLine: function() {
            var q = this.voice.beat.getNextBeat();
            if (q != null) {
                return q.getNoteOnString(this.string)
            }
            return null
        },
        harmonicOvertone: function() {
            if (this.effect.harmonic.type == V.effects.HarmonicType.None) {
                return 0
            }
            var q = this.effect.harmonic.data;
            var W = 0;
            if (this.effect.harmonic.type == V.effects.HarmonicType.Natural) {
                W = this.value
            }
            if (Math.abs(q - 12) < 0.001) {
                return 12 - W
            }
            if (Math.abs(q - 7) < 0.001 || Math.abs(q - 19) < 0.001) {
                return 19 - W
            }
            if (Math.abs(q - 5) < 0.001 || Math.abs(q - 24) < 0.001) {
                return 24 - W
            }
            if (Math.abs(q - 4) < 0.001 || Math.abs(q - 9) < 0.001 || Math.abs(q - 16) < 0.001) {
                return 28 - W
            }
            if (Math.abs(q - 3.2) < 0.001) {
                return 31 - W
            }
            if (Math.abs(q - 2.7) < 0.001 || Math.abs(q - 5.8) < 0.001 || Math.abs(q - 9.6) < 0.001 || Math.abs(q - 14.7) < 0.001 || Math.abs(q - 21.7) < 0.001) {
                return 34 - W
            }
            if (Math.abs(q - 2.4) < 0.001 || Math.abs(q - 8.2) < 0.001 || Math.abs(q - 17) < 0.001) {
                return 36 - W
            }
            return 0
        },
        __class__: V.Note
    };
    V.NoteEffect = function(q) {
        if (q == null) {
            q = 0
        }
        this.set_bend(null);
        this.set_harmonic(null);
        this.set_grace(null);
        this.trill = null;
        this.tremoloPicking = null;
        this.vibrato = false;
        this.deadNote = false;
        this.slide = false;
        this.hammer = false;
        this.ghostNote = false;
        this.accentuatedNote = false;
        this.heavyAccentuatedNote = false;
        this.palmMute = false;
        this.staccato = false;
        this.letRing = false;
        this.set_isFingering(false)
    };
    p["songModel.NoteEffect"] = V.NoteEffect;
    V.NoteEffect.__name__ = ["songModel", "NoteEffect"];
    V.NoteEffect.prototype = {
        set_leftHandFinger: function(q) {
            if (q == 0) {
                this.effectFlags &= ~V.effects.GuitarPlayEffects.LEFT_FINGER
            } else {
                this.effectFlags |= V.effects.GuitarPlayEffects.LEFT_FINGER
            }
            this.leftHandFinger = q;
            return q
        },
        set_rightHandFinger: function(q) {
            if (q == 0) {
                this.effectFlags &= ~V.effects.GuitarPlayEffects.RIGHT_FINGER
            } else {
                this.effectFlags |= V.effects.GuitarPlayEffects.RIGHT_FINGER
            }
            this.rightHandFinger = q;
            return q
        },
        set_isFingering: function(q) {
            if (q) {
                this.effectFlags |= V.effects.GuitarPlayEffects.FINGERING
            } else {
                this.effectFlags &= ~V.effects.GuitarPlayEffects.FINGERING
            }
            this.isFingering = q;
            return q
        },
        set_bend: function(q) {
            if (q == null) {
                this.effectFlags &= ~V.effects.GuitarPlayEffects.BEND
            } else {
                this.effectFlags |= ~V.effects.GuitarPlayEffects.BEND
            }
            this.bend = q;
            return q
        },
        isBend: function() {
            return this.bend != null && this.bend.points.length != 0
        },
        set_harmonic: function(q) {
            if (q == null) {
                this.effectFlags &= ~V.effects.GuitarPlayEffects.HARMONIC
            } else {
                this.effectFlags |= V.effects.GuitarPlayEffects.HARMONIC
            }
            this.harmonic = q;
            return q
        },
        isHarmonic: function() {
            return this.harmonic != null
        },
        set_grace: function(q) {
            if (q == null) {
                this.effectFlags &= ~V.effects.GuitarPlayEffects.GRACE
            } else {
                this.effectFlags |= V.effects.GuitarPlayEffects.GRACE
            }
            this.grace = q;
            return q
        },
        isGrace: function() {
            return this.grace != null
        },
        isTrill: function() {
            return this.trill != null
        },
        isTremoloPicking: function() {
            return this.tremoloPicking != null
        },
        clone: function(q) {
            var W;
            if (q != null) {
                W = q.newNoteEffect()
            } else {
                W = new V.NoteEffect()
            }
            W.vibrato = this.vibrato;
            W.deadNote = this.deadNote;
            W.slide = this.slide;
            W.slideType = this.slideType;
            W.hammer = this.hammer;
            W.ghostNote = this.ghostNote;
            W.accentuatedNote = this.accentuatedNote;
            W.heavyAccentuatedNote = this.heavyAccentuatedNote;
            W.palmMute = this.palmMute;
            W.staccato = this.staccato;
            W.letRing = this.letRing;
            W.set_isFingering(this.isFingering);
            W.set_leftHandFinger(this.leftHandFinger);
            W.set_rightHandFinger(this.rightHandFinger);
            W.set_bend(this.isBend() ? this.bend.clone(q) : null);
            W.set_harmonic(this.isHarmonic() ? this.harmonic.clone(q) : null);
            W.set_grace(this.isGrace() ? this.grace.clone(q) : null);
            if (this.isTrill()) {
                W.trill = this.trill.clone(q)
            } else {
                W.trill = null
            }
            if (this.isTremoloPicking()) {
                W.tremoloPicking = this.tremoloPicking.clone(q)
            } else {
                W.tremoloPicking = null
            }
            return W
        },
        hasAnyEffect: function() {
            return this.isBend() || this.isHarmonic() || this.isGrace() || this.isTrill() || this.isTremoloPicking() || this.vibrato || this.deadNote || this.slide || this.hammer || this.ghostNote || this.accentuatedNote || this.heavyAccentuatedNote || this.palmMute || this.staccato
        },
        getEffectFlags: function() {
            return this.effectFlags
        },
        __class__: V.NoteEffect,
        __properties__: {
            set_grace: "set_grace",
            set_harmonic: "set_harmonic",
            set_bend: "set_bend",
            set_isFingering: "set_isFingering",
            set_rightHandFinger: "set_rightHandFinger",
            set_leftHandFinger: "set_leftHandFinger"
        }
    };
    V.NoteNames = function() {};
    p["songModel.NoteNames"] = V.NoteNames;
    V.NoteNames.__name__ = ["songModel", "NoteNames"];
    V.NoteNames.getNoteName = function(X, Y) {
        if (Y == null) {
            Y = 1
        }
        var W = [
            ["C", "C"],
            ["Db", "C#"],
            ["D", "D"],
            ["Eb", "D#"],
            ["E", "E"],
            ["F", "F"],
            ["Gb", "F#"],
            ["G", "G"],
            ["Ab", "G#"],
            ["A", "A"],
            ["Bb", "A#"],
            ["B", "B"]
        ];
        var q = X % 12;
        return W[q][Y]
    };
    V.NoteNames.getNoteForSemitone = function(q) {
        return V.NoteNames.noteSemitones[q]
    };
    V.NoteNames.noteExists = function(q) {
        return V.NoteNames.notesBySemitones.exists(q)
    };
    V.NoteNames.getNoteSemitone = function(X) {
        var W = B.substr(X, 0, 1).toUpperCase();
        if (!V.NoteNames.notesBySemitones.exists(W)) {
            return -1
        }
        var q = V.NoteNames.notesBySemitones.get(W);
        if (X.length > 1) {
            if (B.substr(X, 1, 1) == "b") {
                q--
            } else {
                if (B.substr(X, 1, 1) == "#") {
                    q++
                }
            }
        }
        return q
    };
    V.Song = function() {
        this.measureHeaders = new Array();
        this.masterVolumeAutomations = new Array();
        this.tracks = new Array();
        this.tempo = 120;
        this.title = "";
        this.subtitle = "";
        this.artist = "";
        this.album = "";
        this.words = "";
        this.music = "";
        this.copyright = "";
        this.tab = "";
        this.instructions = "";
        this.notice = "";
        this.factory = new V.SongFactory()
    };
    p["songModel.Song"] = V.Song;
    V.Song.__name__ = ["songModel", "Song"];
    V.Song.newString = function(W, X, q) {
        var Y = q.newString();
        Y.number = W;
        Y.value = X;
        return Y
    };
    V.Song.getBend = function(W, af) {
        if (af.effect.isBend()) {
            return af.effect.bend
        }
        var ag = af.voice.beat;
        if (ag.effect.isTremoloBar()) {
            return ag.effect.tremoloBar
        }
        if (af.effect.slide) {
            var ah = V.Song.getNextNote(af, W, ag.measure.number() - 1, ag.index);
            if (ah != null) {
                var ai = new V.effects.BendEffect();
                var ae = A["int"](Math.abs(ah.realValue() - af.realValue()));
                var X;
                if (ah.realValue() > af.realValue()) {
                    X = 1
                } else {
                    X = -1
                }
                ai.addPoint(0, 0);
                var ad = 0;
                while (ad < ae) {
                    var ab = ad++;
                    ai.addPoint((ae - 1) * 2 + ab + 1, X * (ab + 1) * 2)
                }
                return ai
            }
        }
        if (af.effect.vibrato) {
            var q = new V.effects.BendEffect();
            var ac = 330;
            var Z = ac * 6;
            var Y = af.voice.duration.time();
            q.addPoint(0, 0);
            q.addPoint(4, 0);
            var aa = 5;
            while (Z < Y) {
                q.addPoint(aa, -1);
                q.addPoint(aa + 1, Z + ac >= Y ? 0 : 1);
                Z += ac;
                aa += 2
            }
            return q
        }
        return null
    };
    V.Song.getRealKey = function(q, Y, X) {
        var W = q.offset + Y + q.strings[X - 1].value;
        if (W > 128) {
            return 0
        } else {
            return W
        }
    };
    V.Song.getRealNoteDuration = function(an, Y, W, aq) {
        if (aq == null) {
            aq = 0
        }
        var al = Y.voice.beat.start + Y.voice.duration.time();
        var at = W;
        var q = Y.voice.beat;
        var ac = q.measure;
        var aj = q.index;
        var aa = ac.number() - 1;
        var ae = aj + 1;
        var ab = an.measureCount();
        var ad;
        if (aq == 0) {
            ad = ac.tempo().value
        } else {
            ad = aq
        }
        var Z = aa;
        while (Z < ab) {
            var ar = Z++;
            var X = an.measures[ar];
            var ak = X.beatCount();
            var am = false;
            var ag = ae;
            while (ag < ak) {
                var av = ag++;
                var ai = X.beats[av];
                var ax = ai.voices[Y.voice.index];
                if (ax.isRestVoice()) {
                    return V.Song.applyDurationEffects(Y, ad, at)
                }
                var au = ax.notes.length;
                var aw = ar == aa && av != aj && Y.effect.letRing;
                var ap = false;
                var af = 0;
                while (af < au) {
                    var ao = af++;
                    var ah = ax.notes[ao];
                    if (ah == Y || ah.string != Y.string) {
                        continue
                    }
                    if (ah.string == Y.string && !ah.isTiedNote) {
                        aw = false;
                        am = true
                    }
                    if (!ah.isTiedNote && !aw) {
                        return V.Song.applyDurationEffects(Y, ad, at)
                    }
                    ap = true;
                    at += ai.start - al + ah.voice.duration.time();
                    al = ai.start + ax.duration.time()
                }
                if (aw && !ap && !am) {
                    at += ai.start - al + ax.duration.time();
                    al = ai.start + ax.duration.time()
                }
            }
            ae = 0
        }
        return V.Song.applyDurationEffects(Y, ad, at)
    };
    V.Song.applyDurationEffects = function(q, X, W) {
        if (q.effect.deadNote) {
            return V.Song.applyStaticDuration(X, V.ModelConstants.DEFAULT_DURATION_DEAD, W)
        }
        if (q.effect.palmMute) {
            return V.Song.applyStaticDuration(X, V.ModelConstants.DEFAULT_DURATION_PM, W)
        }
        if (q.effect.staccato) {
            return Math.floor(W * 50 / 100)
        }
        return W
    };
    V.Song.applyStaticDuration = function(X, W, Y) {
        var q = Math.floor(X * W / 60);
        if (q < Y) {
            return q
        } else {
            return Y
        }
    };
    V.Song.applyStrokeDuration = function(q, X, W) {
        return X - W[q.string - 1]
    };
    V.Song.applyStrokeStart = function(q, X, W) {
        return X + W[q.string - 1]
    };
    V.Song.getRealVelocity = function(Z, W) {
        var ab = Z.velocity;
        var aa = Z.voice.beat;
        var Y = aa.measure;
        var ac = aa.index;
        var X = Y.number() - 1;
        if (!W.isPercussionTrack) {
            var q = V.Song.getPreviousNote(Z, W, X, ac);
            if (q != null && q.effect.hammer) {
                ab = Math.floor(Math.max(V.Velocities.MIN_VELOCITY, ab - 25))
            }
        }
        if (Z.effect.ghostNote) {
            ab = Math.floor(Math.max(V.Velocities.MIN_VELOCITY, ab - V.Velocities.VELOCITY_INCREMENT))
        } else {
            if (Z.effect.accentuatedNote) {
                ab = Math.floor(Math.max(V.Velocities.MIN_VELOCITY, ab + V.Velocities.VELOCITY_INCREMENT))
            } else {
                if (Z.effect.heavyAccentuatedNote) {
                    ab = Math.floor(Math.max(V.Velocities.MIN_VELOCITY, ab + V.Velocities.VELOCITY_INCREMENT * 2))
                }
            }
        }
        if (ab > 127) {
            return 127
        } else {
            return ab
        }
    };
    V.Song.getPreviousNote = function(ac, W, ad, ai) {
        var Z = ai;
        var Y = ad;
        while (Y >= 0) {
            var q = W.measures[Y];
            if (Z < 0) {
                Z = q.beatCount()
            } else {
                Z = Z
            }
            var ae = Z - 1;
            var ah = q.beatCount();
            while (ae >= 0 && ae < ah) {
                var af = q.beats[ae].voices[ac.voice.index];
                var ag = af.notes.length;
                var aa = 0;
                while (aa < ag) {
                    var X = aa++;
                    var ab = af.notes[X];
                    if (ab.string == ac.string) {
                        return ab
                    }
                }
                ae--
            }
            Z = -1;
            Y--
        }
        return null
    };
    V.Song.getNextNote = function(X, ah, Z, af) {
        var ac = af + 1;
        var aa = ah.measureCount();
        var Y = Z;
        while (Y < aa) {
            var aj = Y++;
            var ab = ah.measures[aj];
            var ag = ab.beatCount();
            var ae = ac;
            while (ae < ag) {
                var al = ae++;
                var q = ab.beats[al];
                var am = q.voices[X.voice.index];
                var ak = am.notes.length;
                var ad = 0;
                while (ad < ak) {
                    var ai = ad++;
                    var W = am.notes[ai];
                    if (W.string == X.string) {
                        return W
                    }
                }
                return null
            }
            ac = 0
        }
        return null
    };
    V.Song.getVoiceFromNextBeat = function(Y, ab) {
        var W = null;
        var X = ab + 1;
        var aa = Y.beat.measure.beatCount();
        while (X < aa) {
            var q = X++;
            var Z = Y.beat.measure.beats[q];
            if (Z.start > Y.beat.start && !Z.voices[Y.index].isEmpty && (W == null || Z.start < W.beat.start)) {
                W = Z.voices[Y.index]
            }
        }
        return W
    };
    V.Song.getVoiceFromPreviousBeat = function(X, Z) {
        var W = null;
        var q = Z - 1;
        while (q >= 0) {
            var Y = X.beat.measure.beats[q];
            if (Y.start < X.beat.start && !Y.voices[X.index].isEmpty && (W == null || Y.start > W.beat.start)) {
                W = Y.voices[X.index]
            }
            q--
        }
        return W
    };
    V.Song.getStroke = function(q, aa, ac) {
        var ap = q.effect.stroke.direction;
        if (aa == null || ap != V.BeatStrokeDirection.None || aa.effect.stroke.direction != V.BeatStrokeDirection.None) {
            if (ap == V.BeatStrokeDirection.None) {
                var ai = 0;
                var ab = ac.length;
                while (ai < ab) {
                    var am = ai++;
                    ac[am] = 0
                }
            } else {
                var ah = 0;
                var ao = 0;
                var an = 0;
                var ag = q.voices.length;
                while (an < ag) {
                    var X = an++;
                    var ar = q.voices[X];
                    var af = 0;
                    var Y = ar.notes.length;
                    while (af < Y) {
                        var W = af++;
                        var Z = ar.notes[W];
                        if (Z.isTiedNote) {
                            continue
                        }
                        ah |= 1 << Z.string - 1;
                        ao++
                    }
                }
                if (ao > 0) {
                    var aq = 0;
                    var aj = q.effect.stroke.getIncrementTime(q);
                    var al = 0;
                    var ae = ac.length;
                    while (al < ae) {
                        var ak = al++;
                        var ad;
                        if (ap != V.BeatStrokeDirection.Down) {
                            ad = ak
                        } else {
                            ad = ac.length - 1 - ak
                        }
                        if ((ah & 1 << ad) != 0) {
                            ac[ad] = aq;
                            aq += aj
                        }
                    }
                }
            }
        }
        return ac
    };
    V.Song.getTimeFromMeasureQueue = function(q, X, W) {
        if (W == null) {
            W = -1
        }
        if (X == null) {
            X = 0
        }
        var Z = 0;
        if (W < 0) {
            W = q.length - 1
        }
        var aa = 0;
        while (aa < q.length) {
            var Y = q[aa];
            ++aa;
            var ab = Y.header;
            Z += V.Song.ticksToMilliSeconds(ab.length(), ab.tempo.value)
        }
        return Math.floor(Z)
    };
    V.Song.ticksToMilliSeconds = function(q, W) {
        return Math.floor(q / V.ModelConstants.QUARTER_TIME * (60 / W) * 1000)
    };
    V.Song.prototype = {
        clone: function(ag) {
            var ab;
            if (ag == null) {
                ab = this.factory
            } else {
                ab = ag
            }
            var Y = ab.newSong();
            Y.album = this.album;
            Y.artist = this.artist;
            Y.copyright = this.copyright;
            Y.instructions = this.instructions;
            Y.key = this.key;
            Y.music = this.music;
            Y.notice = this.notice;
            Y.octave = this.octave;
            Y.subtitle = this.subtitle;
            Y.tab = this.tab;
            Y.tempo = this.tempo;
            Y.tempoName = this.tempoName;
            Y.title = this.title;
            Y.words = this.words;
            if (this.lyrics != null) {
                Y.lyrics = this.lyrics.clone()
            }
            var af = 0;
            var aj = this.measureHeaders;
            while (af < aj.length) {
                var ae = aj[af];
                ++af;
                Y.addMeasureHeader(ae.clone(Y.factory))
            }
            var ai = 0;
            var ac = this.tracks;
            while (ai < ac.length) {
                var Z = ac[ai];
                ++ai;
                var ad = Z.clone(ab);
                Y.addTrack(ad);
                var ah = 0;
                var X = ad.measures.length;
                while (ah < X) {
                    var aa = ah++;
                    var W = Y.measureHeaders[aa];
                    var q = ad.measures[aa];
                    q.header = W
                }
            }
            return Y
        },
        measureCount: function() {
            return this.measureHeaders.length
        },
        addMeasureHeader: function(q) {
            q.song = this;
            this.measureHeaders.push(q);
            q.number = this.measureHeaders.length
        },
        addTrack: function(q) {
            q.song = this;
            this.tracks.push(q)
        },
        removeTrack: function(X) {
            var Z = X - 1;
            if (Z >= 0 && Z < this.tracks.length) {
                var q = this.tracks.splice(Z, 1)[0];
                var Y = 0;
                var aa = this.tracks.length;
                while (Y < aa) {
                    var W = Y++;
                    this.tracks[W].number = W + 1
                }
                return q
            }
            return null
        },
        removeMeasureHeader: function(Y) {
            if (Y >= 0 && Y < this.measureHeaders.length) {
                var ab = 0;
                var aa = this.tracks;
                while (ab < aa.length) {
                    var W = aa[ab];
                    ++ab;
                    W.removeMeasure(Y)
                }
                this.measureHeaders.splice(Y, 1);
                var q = Y;
                var Z = this.measureHeaders.length;
                while (q < Z) {
                    var X = q++;
                    this.measureHeaders[X].number = X + 1
                }
            }
        },
        newTrack: function() {
            var q = this.factory.newTrack();
            q.number = this.tracks.length + 1;
            q.channel.instrument(25);
            q.channel.channel = 0;
            q.channel.effectChannel = 1;
            q.strings = V.Tuning.createStandard();
            this.addTrack(q);
            return q
        },
        forAllNotes: function(W) {
            var Y = 0;
            var X = this.tracks;
            while (Y < X.length) {
                var q = X[Y];
                ++Y;
                q.forAllNotes(W)
            }
        },
        forAllBeats: function(W) {
            var Y = 0;
            var X = this.tracks;
            while (Y < X.length) {
                var q = X[Y];
                ++Y;
                q.forAllBeats(W)
            }
        },
        newMeasureHeader: function() {
            var W = this.factory.newMeasureHeader();
            if (this.measureHeaders.length == 0) {
                W.number = 1;
                W.start = V.ModelConstants.QUARTER_TIME;
                W.tempo.value = this.tempo
            } else {
                var q = this.measureHeaders[this.measureHeaders.length - 1];
                W.number = this.measureHeaders.length + 1;
                W.start = q.start + q.length();
                W.tempo.copy(q.tempo);
                W.timeSignature.copyFrom(q.timeSignature)
            }
            this.addMeasureHeader(W);
            return W
        },
        getMeasureHeader: function(Z) {
            var X = 0;
            var W = this.measureHeaders;
            while (X < W.length) {
                var Y = W[X];
                ++X;
                var q = Y.start + Y.length();
                if (Z >= Y.start && q > Z) {
                    return Y
                }
            }
            return null
        },
        getUsedPresets: function() {
            var q = new Array();
            var Z = 0;
            var Y = this.tracks;
            while (Z < Y.length) {
                var W = Y[Z];
                ++Z;
                var X = W.channel.instrument();
                if (!y.has(q, X)) {
                    q.push(X)
                }
            }
            return q
        },
        getMaxMeasure: function() {
            var q = 0;
            var Y = 0;
            var X = this.tracks;
            while (Y < X.length) {
                var W = X[Y];
                ++Y;
                if (W.measures.length > q) {
                    q = W.measures.length
                }
            }
            return q
        },
        getMeasureQueue: function(X) {
            var q = new Array();
            if (X.measures.length > 0) {
                var Y = X.measures[0];
                var W = X.measures[X.measures.length - 1];
                this.queueRepeat(X, Y, W, q)
            }
            return q
        },
        skipToOpenCloseBar: function(X, Z, W) {
            var aa = Z.number() - 1;
            var q = aa;
            while (q < W.number()) {
                var Y = X.measures[q];
                if (Y.isRepeatOpen() && q > aa) {
                    return Y
                }
                if (Y.repeatClose() > 0) {
                    q++;
                    if (q >= W.number()) {
                        return null
                    }
                    Y = X.measures[q];
                    return Y
                }
                q++
            }
            return null
        },
        queueRepeat: function(Y, X, aa, ac) {
            var Z = X.number() - 1;
            var ab = X;
            var ae = 1;
            var q = 0;
            var ad = 0;
            while (Z < aa.number()) {
                var W = Y.measures[Z];
                Z++;
                if (W.header.repeatAlternative != 0 && (W.header.repeatAlternative & ae) == 0) {
                    W = this.skipToOpenCloseBar(Y, W, aa);
                    if (W == null) {
                        return
                    }
                    Z = W.number() - 1;
                    continue
                }
                ac.push(W);
                if (W.header.isRepeatOpen && W.number() != ab.number()) {
                    ab = W;
                    q = 0;
                    ad = 0;
                    ae = 1
                }
                if (W.header.repeatAlternative > 0) {
                    q = W.header.repeatAlternative
                }
                if (W.header.repeatClose > 0) {
                    ad++;
                    if (q > 0) {
                        ae <<= 1;
                        Z = ab.number() - 1;
                        q = 0
                    } else {
                        if (ad < W.repeatClose()) {
                            Z = ab.number() - 1
                        }
                    }
                }
            }
        },
        validate: function() {
            var aa = new Array();
            var Z = 0;
            var Y = this.tracks;
            while (Z < Y.length) {
                var q = Y[Z];
                ++Z;
                if (q.isEmpty()) {
                    aa.push(q.number)
                } else {
                    q.generateEmptyMeasures()
                }
            }
            aa.reverse();
            var X = 0;
            while (X < aa.length) {
                var W = aa[X];
                ++X;
                this.removeTrack(W)
            }
            V.SongOperations.computeRealStartMarks(this)
        },
        applyFilters: function(aa) {
            var X;
            var W;
            var q;
            var ab = 0;
            while (ab < aa.length) {
                var Y = aa[ab];
                ++ab;
                Y = "songModel.filter.SongFilter" + Y;
                if (R.resolveClass(Y) != null) {
                    var Z = R.createInstance(R.resolveClass(Y), []);
                    Z.execute(this)
                }
            }
        },
        findMeasureHeaderForTime: function(q) {
            if (this.tracks.length > 0) {
                var W = null;
                var Y = 0;
                var X = this.measureHeaders;
                while (Y < X.length) {
                    var Z = X[Y];
                    ++Y;
                    if (W != null && Z.startInMilliSeconds > q) {
                        return W
                    }
                    W = Z
                }
                if (W.startInMilliSeconds + V.Song.ticksToMilliSeconds(W.length(), W.tempo.value) > q) {
                    return W
                }
            }
            return null
        },
        findBeatForTime: function(ad, X) {
            var Z = this.findMeasureHeaderForTime(X);
            var W = this.tracks[ad - 1];
            if (Z != null && W != null) {
                var q = W.measures[Z.number - 1];
                var Y = null;
                var aa = 0;
                var ac = q.beats;
                while (aa < ac.length) {
                    var ab = ac[aa];
                    ++aa;
                    if (Y != null && ab.getStartInMilliSeconds() > X) {
                        return Y
                    }
                    Y = ab
                }
                return Y
            }
            return null
        },
        getBeatInPosition: function(X) {
            var q = this.tracks[X.trackNumber - 1];
            if (q != null) {
                var W = q.measures[X.measureIndex];
                if (W != null) {
                    return W.beats[X.beatIndex]
                }
            }
            return null
        },
        getNextBeat: function(W) {
            var q = this.tracks[W.trackNumber - 1];
            if (q != null) {
                return q.getNextBeat(W.measureIndex, W.beatIndex)
            }
            return null
        },
        getPrevBeat: function(W) {
            var q = this.tracks[W.trackNumber - 1];
            if (q != null) {
                return q.getPrevBeat(W.measureIndex, W.beatIndex)
            }
            return null
        },
        getNextMeasure: function(W) {
            var q = this.tracks[W.trackNumber - 1];
            if (q != null) {
                return q.measures[W.measureIndex + 1]
            }
            return null
        },
        getPrevMeasure: function(W) {
            if (W.measureIndex == 0) {
                return null
            }
            var q = this.tracks[W.trackNumber - 1];
            if (q != null) {
                return q.measures[W.measureIndex - 1]
            }
            return null
        },
        getTotalTime: function() {
            var X = 0;
            if (this.tracks.length > 0) {
                var W = this.tracks[0];
                var q = this.getMeasureQueue(W);
                X = V.Song.getTimeFromMeasureQueue(q)
            }
            return X
        },
        getMeasureText: function() {
            var q = new Array();
            var X = 0;
            var W = this.measureHeaders;
            while (X < W.length) {
                var Y = W[X];
                ++X;
                if (Y.text != null) {
                    q.push(Y.text)
                }
            }
            return q
        },
        getPresetsCopy: function() {
            var q = new Array();
            var Z = 0;
            var Y = this.tracks;
            while (Z < Y.length) {
                var X = Y[Z];
                ++Z;
                var W = new V.ChannelPresets();
                X.channel.copy(W);
                q.push(W)
            }
            return q
        },
        finish: function() {
            this.breakLyricsOnBeats()
        },
        breakLyricsOnBeats: function() {
            var W = 0;
            var ai = this.tracks;
            while (W < ai.length) {
                var ak = ai[W];
                ++W;
                if (ak.lyricLines.filter(function(ap) {
                        return ap.lyrics.length > 0
                    }).length == 0) {
                    continue
                }
                var ag = 0;
                var ah = ak.lyricLines.length;
                while (ag < ah) {
                    var an = ag++;
                    var X = ak.lyricLines[an];
                    var aj = new Array();
                    if (X.lyrics.length > 0) {
                        var Z = O.replace(X.lyrics, " -", "- ");
                        Z = O.replace(Z, "- ", "-");
                        Z = O.replace(Z, "-", "- ");
                        Z = O.replace(Z, "\r", "_____");
                        Z = O.replace(Z, "\n", "_____");
                        var aa = new K("_{5,}", "gm");
                        Z = aa.replace(Z, " ");
                        aj = Z.split(" ")
                    }
                    var ao = 0;
                    var al = 0;
                    var af = 0;
                    var ae = ak.measures;
                    while (af < ae.length) {
                        var Y = ae[af];
                        ++af;
                        var ad = 0;
                        var ac = Y.beats;
                        while (ad < ac.length) {
                            var q = ac[ad];
                            ++ad;
                            var am = false;
                            if (Y.number() < X.startingMeasure) {
                                ao++;
                                al++
                            } else {
                                if (!q.isRestBeat()) {
                                    am = true;
                                    al++
                                }
                            }
                            if (X.lyrics.length == 0 || Y.number() < X.startingMeasure) {
                                q.lyricLines[an] = ""
                            } else {
                                if (am && X.lyrics.length > 0 && Y.number() >= X.startingMeasure) {
                                    var ab = al - ao - 1;
                                    if (aj[ab] != null) {
                                        q.lyricLines[an] = aj[ab]
                                    } else {
                                        q.lyricLines[an] = ""
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        __class__: V.Song
    };
    V.SongFactory = function() {};
    p["songModel.SongFactory"] = V.SongFactory;
    V.SongFactory.__name__ = ["songModel", "SongFactory"];
    V.SongFactory.prototype = {
        newSong: function() {
            var q = new V.Song();
            q.factory = this;
            q.tempo = 120;
            q.tempoName = "";
            q.hideTempo = false;
            return q
        },
        newLyrics: function() {
            return new V.Lyrics(0)
        },
        newLyricLine: function() {
            return new V.LyricLine(0, "")
        },
        newChannelPresets: function() {
            return new V.ChannelPresets()
        },
        newTimeSignature: function() {
            return new V.TimeSignature(this)
        },
        newDuration: function(q) {
            if (q == null) {
                q = -1
            }
            return new V.Duration(this, q)
        },
        newMeasureHeader: function() {
            return new V.MeasureHeader(this)
        },
        newTempo: function() {
            return new V.Tempo()
        },
        newStroke: function() {
            return new V.BeatStroke()
        },
        newVoice: function(q) {
            return new V.Voice(this, q)
        },
        newNoteEffect: function() {
            return new V.NoteEffect()
        },
        newBeatEffect: function() {
            return new V.BeatEffect(this)
        },
        newTrack: function() {
            return new V.Track(this)
        },
        newString: function() {
            return new V.GuitarString()
        },
        newMeasure: function(q) {
            return new V.Measure(q)
        },
        newTuplet: function() {
            return new V.Tuplet()
        },
        newBeat: function() {
            return new V.Beat(this)
        },
        newBendEffect: function() {
            return new V.effects.BendEffect()
        },
        newHarmonicEffect: function() {
            return new V.effects.HarmonicEffect()
        },
        newGraceEffect: function() {
            return new V.effects.GraceEffect()
        },
        newTrillEffect: function() {
            return new V.effects.TrillEffect(this)
        },
        newTremoloPickingEffect: function() {
            return new V.effects.TremoloPickingEffect(this)
        },
        newChord: function(q) {
            return new V.Chord(q)
        },
        newNote: function() {
            return new V.Note(this)
        },
        __class__: V.SongFactory
    };
    V.SongIo = function() {};
    p["songModel.SongIo"] = V.SongIo;
    V.SongIo.__name__ = ["songModel", "SongIo"];
    V.SongIo.readStream = function(ac, X) {
        var W = new V.SongFactory();
        var Y = V.SongIo.availableReaders();
        var ab = 0;
        while (ab < Y.length) {
            var q = Y[ab];
            ++ab;
            try {
                P.utils.Logger.debug("Try reader " + A.string(R["typeof"](q)) + ": ");
                ac.seek(0);
                var aa = q.readSong(new E.DataInputStream(ac), W, X);
                return aa
            } catch (Z) {
                if (h.Boot.__instanceof(Z, V.FormatException)) {
                    continue
                } else {
                    throw (Z)
                }
            }
        }
        return null
    };
    V.SongIo.read = function(q, W) {
        var Y = new E.BytesInputStream(q);
        var X = V.SongIo.readStream(Y, W);
        X.finish();
        return X
    };
    V.SongIo.availableReaders = function() {
        if (V.SongIo._readers == null) {
            V.SongIo._readers = new Array();
            V.SongIo._readers.push(new c.Gp5Reader());
            V.SongIo._readers.push(new c.Gp4Reader());
            V.SongIo._readers.push(new c.Gp3Reader());
            V.SongIo._readers.push(new c.gpx.GpxReader());
            V.SongIo._readers.push(new f.PtReader());
            V.SongIo._readers.push(new M.JsonReader())
        }
        return V.SongIo._readers
    };
    V.SongIo.registerReader = function(q) {
        V.SongIo._readers.push(q)
    };
    V.SongIo.parseKeySignature = function(W) {
        var q = W.toLowerCase();
        switch (q) {
            case "cb":
                return -7;
            case "gb":
                return -6;
            case "db":
                return -5;
            case "ab":
                return -4;
            case "eb":
                return -3;
            case "bb":
                return -2;
            case "f":
                return -1;
            case "c":
                return 0;
            case "g":
                return 1;
            case "d":
                return 2;
            case "a":
                return 3;
            case "e":
                return 4;
            case "b":
                return 5;
            case "f#":
                return 6;
            case "c#":
                return 7;
            default:
                return 0
        }
    };
    V.SongIo.toKeySignature = function(q) {
        if (q < 0) {
            return 7 + Math.round(Math.abs(q))
        } else {
            return q
        }
    };
    V.SongOperations = function() {};
    p["songModel.SongOperations"] = V.SongOperations;
    V.SongOperations.__name__ = ["songModel", "SongOperations"];
    V.SongOperations.expandRepeats = function(am) {
        var Y = am.clone();
        if (Y.tracks.length > 0) {
            var ae = Y.getMeasureQueue(Y.tracks[0]);
            Y.measureHeaders = new Array();
            var ah = 0;
            var W = ae.length;
            while (ah < W) {
                var aj = ah++;
                var ak = ae[aj].header;
                var an = ak.clone(Y.factory);
                an.isRepeatOpen = false;
                an.repeatAlternative = 0;
                an.repeatClose = 0;
                Y.addMeasureHeader(an)
            }
            var al = 0;
            var af = Y.tracks.length;
            while (al < af) {
                var ac = al++;
                var ag = am.tracks[ac];
                var ai = Y.tracks[ac];
                ai.measures = new Array();
                var ad = 0;
                var q = ae.length;
                while (ad < q) {
                    var aa = ad++;
                    var ab = Y.measureHeaders[aa];
                    var ao = ae[aa].getIndex();
                    var X = ag.measures[ao];
                    var Z = X.clone(Y.factory);
                    Z.header = ab;
                    ai.addMeasure(Z)
                }
            }
            V.SongOperations.computeRealStartMarks(Y)
        }
        return Y
    };
    V.SongOperations.computeRealStartMarks = function(X) {
        if (X.tracks.length > 0 && X.tracks[0].measures.length > 0) {
            var aa = 0;
            var ad = X.measureHeaders;
            while (aa < ad.length) {
                var Z = ad[aa];
                ++aa;
                Z.startInMilliSeconds = -1
            }
            var ab = X.getMeasureQueue(X.tracks[0]);
            var Y = V.Song.ticksToMilliSeconds(ab[0].start(), ab[0].tempo().value);
            var ac = 0;
            while (ac < ab.length) {
                var W = ab[ac];
                ++ac;
                var q = W.header;
                if (q.startInMilliSeconds < 0) {
                    q.startInMilliSeconds = Y
                }
                Y += V.Song.ticksToMilliSeconds(q.length(), q.tempo.value)
            }
        }
    };
    V.SongOperations.transposeSong = function(aa, Z) {
        var X = aa.clone();
        var W = 0;
        var Y = X.tracks.length;
        while (W < Y) {
            var q = W++;
            V.SongOperations.transposeTrack(X.tracks[q], Z)
        }
        return X
    };
    V.SongOperations.transposeTrack = function(W, Z) {
        if (!W.channel.isPercussionChannel()) {
            var aj = 0;
            var ab = W.measures.length;
            while (aj < ab) {
                var aa = aj++;
                var q = W.measures[aa];
                var af = 0;
                var ag = q.beats.length;
                while (af < ag) {
                    var Y = af++;
                    var ae = q.beats[Y];
                    if (!ae.isRestBeat()) {
                        if (ae.effect.chord != null) {
                            V.SongOperations.transposeChord(ae.effect.chord, Z)
                        }
                        var ac = 0;
                        var ad = ae.voices[0].notes.length;
                        while (ac < ad) {
                            var X = ac++;
                            var ai = ae.voices[0].notes[X];
                            var ah = V.SongOperations.transposeNote(ai, Z);
                            if (W.number == 2 && aa == 0 && Y == 0 && X == 0) {
                                2
                            }
                            if (ah != null) {
                                W.measures[aa].beats[Y].voices[0].notes[X].string = ah.string;
                                W.measures[aa].beats[Y].voices[0].notes[X].value = ah.value
                            } else {
                                B.remove(W.measures[aa].beats[Y].voices[0].notes, ai)
                            }
                        }
                    }
                }
            }
        }
    };
    V.SongOperations.transposeChord = function(ac, ab) {
        var Y = new K("([CDEFGAB])(#|b)?([^/.]+)?(/([CDEFGAB])(#|b)?)?", "");
        if (Y.match(ac.origName)) {
            var aa = Y.matched(1);
            var q;
            if (Y.matched(2) == null) {
                q = ""
            } else {
                q = Y.matched(2)
            }
            var W;
            if (Y.matched(3) == null) {
                W = ""
            } else {
                W = Y.matched(3)
            }
            var Z;
            if (Y.matched(5) == null) {
                Z = ""
            } else {
                Z = Y.matched(5)
            }
            var X;
            if (Y.matched(6) == null) {
                X = ""
            } else {
                X = Y.matched(6)
            }
            ac.name = V.SongOperations.transposeChordNote(aa, q, ab) + W;
            if (Z != "") {
                ac.name += "/" + V.SongOperations.transposeChordNote(Z, X, ab)
            }
        }
    };
    V.SongOperations.transposeChordNote = function(W, aa, Y) {
        var Z = W;
        var q = V.Chord.findTonicNumber(W + aa);
        if (q != -1) {
            var X = (q + Y + 12) % 12;
            if (V.Chord.tonics[X].length > 1) {
                if (aa == "b") {
                    Z = V.Chord.tonics[X][1]
                } else {
                    Z = V.Chord.tonics[X][0]
                }
            } else {
                Z = V.Chord.tonics[X][0]
            }
        }
        return Z
    };
    V.SongOperations.transposeNote = function(Z, ab) {
        var W = Z.clone(Z.voice.beat.measure.track.song.factory);
        var q = Z.voice.beat.measure.track.strings;
        var aa = Z.value + ab;
        var Y = q[Z.string - 1].value + aa;
        if (aa < 0) {
            var X = V.SongOperations.findLowestNoteByMidiIndex(q, Y);
            if (X != null) {
                W.string = X.string;
                W.value = X.value
            } else {
                W = null
            }
        } else {
            W.value = aa
        }
        return W
    };
    V.SongOperations.getLowestMidiIndex = function(q) {
        return 0
    };
    V.SongOperations.findLowestNoteByMidiIndex = function(q, Z) {
        var W = null;
        while (Z > 0) {
            var Y = 0;
            while (Y < q.length) {
                var X = q[Y];
                ++Y;
                if (Z >= X.value) {
                    W = new V.Note();
                    W.string = X.number;
                    W.value = Z - X.value;
                    break
                }
            }
            if (W != null) {
                break
            }
            Z += 12
        }
        return W
    };
    V.SongOperations.prototype = {
        __class__: V.SongOperations
    };
    V.Tempo = function(q) {
        if (q == null) {
            q = 120
        }
        this.value = q
    };
    p["songModel.Tempo"] = V.Tempo;
    V.Tempo.__name__ = ["songModel", "Tempo"];
    V.Tempo.tempoToUsq = function(q) {
        return Math.floor(60000000 / q)
    };
    V.Tempo.prototype = {
        inUsq: function() {
            return V.Tempo.tempoToUsq(this.value)
        },
        copy: function(q) {
            this.value = q.value
        },
        __class__: V.Tempo
    };
    V.TimeSelectedRange = function(W, q) {
        if (q > W) {
            this.start = W;
            this.end = q
        } else {
            this.start = q;
            this.end = W
        }
    };
    p["songModel.TimeSelectedRange"] = V.TimeSelectedRange;
    V.TimeSelectedRange.__name__ = ["songModel", "TimeSelectedRange"];
    V.TimeSelectedRange.prototype = {
        convertToTrackSelection: function(W) {
            var X = W.song.findBeatForTime(W.number, this.start);
            var q = W.song.findBeatForTime(W.number, this.end);
            if (X != null && q != null) {
                return new V.TrackSelectedRange(X.measure.getIndex(), q.measure.getIndex(), X.index, q.index)
            } else {
                return null
            }
        },
        __class__: V.TimeSelectedRange
    };
    V.TimeSignature = function(q) {
        if (q == null) {
            q = new V.SongFactory()
        } else {
            q = q
        }
        this.numerator = 4;
        this.denominator = q.newDuration()
    };
    p["songModel.TimeSignature"] = V.TimeSignature;
    V.TimeSignature.__name__ = ["songModel", "TimeSignature"];
    V.TimeSignature.fromString = function(Z) {
        var X = i.ParseUtils.readNumber(Z, 0);
        if (!X.success) {
            return null
        }
        var aa = X.length;
        var q = i.ParseUtils.expectChar(Z, aa, "/", " ");
        if (q < 0) {
            return null
        }
        aa += q;
        aa += i.ParseUtils.skipChars(Z, aa, " ");
        var W = i.ParseUtils.readNumber(Z, aa);
        if (!W.success) {
            return null
        }
        var Y = new V.TimeSignature();
        Y.numerator = X.number;
        Y.denominator.value = W.number;
        return Y
    };
    V.TimeSignature.computeGcd = function(W, q) {
        var X = 0;
        while (q > 0) {
            W %= q;
            X = W;
            W = q;
            q = X
        }
        return W
    };
    V.TimeSignature.prototype = {
        copyFrom: function(q) {
            this.numerator = q.numerator;
            this.denominator.value = q.denominator.value
        },
        equals: function(q) {
            return q.numerator == this.numerator && q.denominator.equals(this.denominator)
        },
        clone: function(q) {
            if (q == null) {
                q = new V.SongFactory()
            } else {
                q = q
            }
            var W = q.newTimeSignature();
            W.numerator = this.numerator;
            W.denominator = this.denominator.clone(q);
            return W
        },
        getDurationTime: function() {
            return this.numerator * this.denominator.time()
        },
        toString: function() {
            return this.numerator + "/" + this.denominator.value
        },
        simplify: function() {
            var q = V.TimeSignature.computeGcd(this.numerator, this.denominator.value);
            if (q == 1) {
                return false
            }
            this.numerator = Math.floor(this.numerator / q);
            this.denominator.value = Math.floor(this.denominator.value / q);
            if (this.numerator == 1) {
                this.numerator *= 2;
                this.denominator.value *= 2
            }
            if (this.denominator.value == 2) {
                this.numerator *= 2;
                this.denominator.value *= 2
            }
            return true
        },
        __class__: V.TimeSignature
    };
    V.Track = function(q) {
        this.number = 0;
        this.offset = 0;
        this.isSolo = false;
        this.isMute = false;
        this.name = "";
        this.measures = new Array();
        this.strings = new Array();
        this.channel = q.newChannelPresets();
        this.color = V.Color.Black;
        this.lyricLines = new Array();
        this.volumeAutomations = new Array()
    };
    p["songModel.Track"] = V.Track;
    V.Track.__name__ = ["songModel", "Track"];
    V.Track.prototype = {
        stringCount: function() {
            return this.strings.length
        },
        measureCount: function() {
            return this.measures.length
        },
        addMeasure: function(q) {
            q.track = this;
            this.measures.push(q)
        },
        removeMeasure: function(q) {
            if (q >= 0 && q < this.measures.length) {
                this.measures.splice(q, 1)
            }
        },
        forAllNotes: function(W) {
            var Y = 0;
            var X = this.measures;
            while (Y < X.length) {
                var q = X[Y];
                ++Y;
                q.forAllNotes(W)
            }
        },
        forAllBeats: function(W) {
            var Y = 0;
            var X = this.measures;
            while (Y < X.length) {
                var q = X[Y];
                ++Y;
                q.forAllBeats(W)
            }
        },
        forAllMeasures: function(W) {
            var Y = 0;
            var X = this.measures;
            while (Y < X.length) {
                var q = X[Y];
                ++Y;
                W(q)
            }
        },
        getMeasure: function(ab) {
            var q = null;
            var Z = 0;
            var X = this.measures;
            while (Z < X.length) {
                var Y = X[Z];
                ++Z;
                if (ab >= Y.start() && ab < Y.start() + Y.length()) {
                    return Y
                }
            }
            var aa = this.song.getMeasureHeader(ab);
            if (aa == null) {
                aa = this.song.newMeasureHeader();
                aa.start = ab
            }
            var W = this.song.factory.newMeasure(aa);
            this.addMeasure(W);
            return W
        },
        detectClef: function() {
            if (!this.isPercussionTrack) {
                var X = 0;
                var W = this.strings;
                while (X < W.length) {
                    var q = W[X];
                    ++X;
                    if (q.value <= 34) {
                        return V.MeasureClef.Bass
                    }
                }
            }
            return V.MeasureClef.Treble
        },
        getNextBeat: function(W, Z) {
            if (Z == null) {
                Z = 0
            }
            if (W == null) {
                W = 0
            }
            var Y = W;
            var X = Z;
            if (Y >= this.measures.length || Y < 0) {
                return null
            }
            var q = this.measures[Y];
            X++;
            if (X < q.beats.length) {
                return q.beats[X]
            }
            q = this.getNextMeasureWithBeats(Y);
            if (q == null) {
                return null
            }
            return q.beats[0]
        },
        getNextMeasureWithBeats: function(W) {
            var q = null;
            do {
                W++;
                if (W >= this.measures.length) {
                    return null
                }
                q = this.measures[W]
            } while (q.beats.length == 0);
            return q
        },
        getPrevMeasureWithBeats: function(W) {
            var q = null;
            do {
                W--;
                if (W < 0) {
                    return null
                }
                q = this.measures[W]
            } while (q.beats.length == 0);
            return q
        },
        getPrevBeat: function(W, X) {
            if (W >= this.measures.length) {
                W = this.measures.length - 1
            }
            var q = this.measures[W];
            X--;
            if (X < 0 || X > q.beats.length) {
                q = this.getPrevMeasureWithBeats(W)
            } else {
                return q.beats[X]
            }
            if (q == null) {
                return null
            }
            return q.beats[q.beats.length - 1]
        },
        getBeat: function(X, W) {
            if (X < this.measures.length && X >= 0) {
                var q = this.measures[X];
                if (W < q.beats.length) {
                    return q.beats[W]
                }
            }
            return null
        },
        getTuning: function(q) {
            if (q == null) {
                q = false
            }
            return V.Tuning.toString(this.strings, q)
        },
        sortMeasures: function() {
            this.measures.sort(function(W, q) {
                return W.number() - q.number()
            })
        },
        generateEmptyMeasures: function() {
            var W = 0;
            var Y = null;
            var X = null;
            this.sortMeasures();
            var q = this.measures.slice(0, this.measures.length);
            var aa = 0;
            var Z = this.song.measureHeaders;
            while (aa < Z.length) {
                var ac = Z[aa];
                ++aa;
                var ab = ac.start;
                X = null;
                if (W < q.length) {
                    X = q[W]
                }
                if (X == null || X.start() > ab) {
                    Y = this.song.factory.newMeasure(ac);
                    this.addMeasure(Y)
                } else {
                    W++
                }
            }
            this.sortMeasures();
            this.validateMeasures()
        },
        validateMeasures: function() {
            var W;
            var q = 0;
            while (q < this.measures.length) {
                W = this.measures[q];
                W.sortByStart();
                W.validateBeats();
                q++
            }
        },
        isEmpty: function() {
            var X = 0;
            var W = this.measures;
            while (X < W.length) {
                var q = W[X];
                ++X;
                if (!q.isEmpty()) {
                    return false
                }
            }
            return true
        },
        getFisrtNotRestMeasureIndex: function() {
            var X = null;
            var ab = 0;
            var aa = this.measures;
            while (ab < aa.length) {
                var q = aa[ab];
                ++ab;
                var Z = 0;
                var W = q.beats;
                while (Z < W.length) {
                    var Y = W[Z];
                    ++Z;
                    if (!Y.isRestBeat()) {
                        X = q;
                        break
                    }
                }
                if (X != null) {
                    break
                }
            }
            if (X == null) {
                return this.measures.length - 1
            } else {
                return X.getIndex()
            }
        },
        clone: function(X) {
            var W = X.newTrack();
            W.fretCount = this.fretCount;
            W.is12StringedGuitarTrack = this.is12StringedGuitarTrack;
            W.isBanjoTrack = this.isBanjoTrack;
            W.isMute = this.isMute;
            W.isPercussionTrack = this.isPercussionTrack;
            W.isSolo = this.isSolo;
            W.name = this.name;
            W.number = this.number;
            W.offset = this.offset;
            W.port = this.port;
            W.song = null;
            W.strings = new Array();
            var ac = 0;
            var ab = this.strings;
            while (ac < ab.length) {
                var Y = ab[ac];
                ++ac;
                W.strings.push(Y.clone(X))
            }
            W.channel = this.channel.clone();
            W.color = this.color.clone();
            var aa = 0;
            var q = this.measures;
            while (aa < q.length) {
                var Z = q[aa];
                ++aa;
                W.addMeasure(Z.clone(X))
            }
            W.lyricLines = this.lyricLines.slice();
            return W
        },
        __class__: V.Track
    };
    V.TrackPosition = function(q, W, X) {
        if (X == null) {
            X = -1
        }
        if (W == null) {
            W = -1
        }
        if (q == null) {
            q = -1
        }
        this.trackNumber = q;
        this.measureIndex = W;
        this.beatIndex = X
    };
    p["songModel.TrackPosition"] = V.TrackPosition;
    V.TrackPosition.__name__ = ["songModel", "TrackPosition"];
    V.TrackPosition.prototype = {
        isOnBeat: function(q, W) {
            return this.measureIndex == q && this.beatIndex == W
        },
        equal: function(q) {
            return this.trackNumber == q.trackNumber && this.measureIndex == q.measureIndex && this.beatIndex == q.beatIndex
        },
        clone: function() {
            return new V.TrackPosition(this.trackNumber, this.measureIndex, this.beatIndex)
        },
        __class__: V.TrackPosition
    };
    V.TrackSelectedRange = function(Z, Y, W, q) {
        this.startMeasure = Z;
        this.endMeasure = Y;
        this.startBeat = W;
        this.endBeat = q;
        if (Z > Y) {
            this.swapStartEnd()
        }
        if (Z == Y && W > q) {
            var X = W;
            this.startBeat = q;
            this.endBeat = W
        }
    };
    p["songModel.TrackSelectedRange"] = V.TrackSelectedRange;
    V.TrackSelectedRange.__name__ = ["songModel", "TrackSelectedRange"];
    V.TrackSelectedRange.prototype = {
        swapStartEnd: function() {
            var q = this.startMeasure;
            this.startMeasure = this.endMeasure;
            this.endMeasure = q;
            q = this.startBeat;
            this.startBeat = this.endBeat;
            this.endBeat = q
        },
        isPositionInRange: function(q, W) {
            return this.positionGreaterStart(q, W) && this.positionBeforeEnd(q, W)
        },
        positionGreaterStart: function(q, W) {
            if (q < this.startMeasure) {
                return false
            }
            if (q == this.startMeasure && W < this.startBeat) {
                return false
            }
            return true
        },
        positionBeforeEnd: function(q, W) {
            if (q > this.endMeasure) {
                return false
            }
            if (q == this.endMeasure && W > this.endBeat) {
                return false
            }
            return true
        },
        getStartInMilliSeconds: function(q) {
            var W = q.measures[this.startMeasure].beats[this.startBeat];
            return W.getStartInMilliSeconds()
        },
        getEndInMilliSeconds: function(q) {
            var Y;
            var W = q.getNextBeat(this.endMeasure, this.endBeat);
            if (W == null) {
                var X = q.getBeat(0, 0);
                Y = X.getStartInMilliSeconds() + X.measure.track.song.getTotalTime()
            } else {
                Y = W.getStartInMilliSeconds()
            }
            return Y - 1
        },
        clone: function() {
            return new V.TrackSelectedRange(this.startMeasure, this.endMeasure, this.startBeat, this.endBeat)
        },
        convertToTimeRange: function(q) {
            var Y = q.song;
            var X = q.measures[this.startMeasure].beats[this.startBeat].getStartInMilliSeconds();
            var W = this.getEndInMilliSeconds(q);
            return new V.TimeSelectedRange(X, W)
        },
        equal: function(q) {
            if (q == null) {
                return false
            }
            if (this.startBeat != q.startBeat || this.endBeat != q.endBeat || this.startMeasure != q.startMeasure || this.endMeasure != q.endMeasure) {
                return false
            }
            return true
        },
        __class__: V.TrackSelectedRange
    };
    V.TripletFeel = function() {};
    p["songModel.TripletFeel"] = V.TripletFeel;
    V.TripletFeel.__name__ = ["songModel", "TripletFeel"];
    V.Tuning = function(W, X, q) {
        this.name = W;
        this._midiNotes = X;
        this.isStandard = q
    };
    p["songModel.Tuning"] = V.Tuning;
    V.Tuning.__name__ = ["songModel", "Tuning"];
    V.Tuning.isTuning = function(q) {
        var W = V.Tuning.TUNING_REGEX;
        return W.match(q)
    };
    V.Tuning.getTextForTuning = function(Y, Z) {
        var W = Math.floor(Y / 12);
        var X = Y % 12;
        var q = V.NoteNames.getNoteForSemitone(X);
        if (Z) {
            if (W == null) {
                q += "null"
            } else {
                q += "" + W
            }
        }
        return q
    };
    V.Tuning.parse = function(ac, X, ag) {
        var Z = X;
        var ae = 0;
        var af = 0;
        while (Z < ac.length) {
            var W = ac.charAt(Z);
            if (!i.ParseUtils.isLetter(W)) {
                break
            }
            Z++;
            var ad = W;
            if (Z < ac.length) {
                W = ac.charAt(Z)
            } else {
                W = ""
            }
            if (W == "#" || W == "b") {
                ad += W;
                Z++
            }
            var q = i.ParseUtils.readNumber(ac, Z, 1);
            if (q.success) {
                ae = q.number;
                Z++
            }
            var Y = V.NoteNames.getNoteSemitone(ad) + ae * 12;
            if (Y < 0) {
                break
            }
            var ab = new V.GuitarString(af, Y);
            ag.push(ab);
            var aa = i.ParseUtils.skipChars(ac, Z, " ");
            Z += aa
        }
        ag.reverse();
        if (ag.length > 2) {
            return Z - X
        } else {
            return -1
        }
    };
    V.Tuning.parseAndDetect = function(X, Y) {
        var W = new Array();
        V.Tuning.parse(X, Y, W);
        if (W.length > 3) {
            if (W[0].value < 13) {
                var q = V.Tuning.findTuning(W, true);
                if (q != null) {
                    W = q.getStrings()
                } else {
                    V.Tuning.detectOctave(W);
                    return W
                }
            }
        }
        return W
    };
    V.Tuning.addOctaves = function(W, q) {
        var Y = 0;
        while (Y < W.length) {
            var X = W[Y];
            ++Y;
            X.value += 12 * q
        }
    };
    V.Tuning.detectOctave = function(ag) {
        var ac = null;
        if (ag.length == 4) {
            ac = V.Tuning.createStandardBass()
        } else {
            if (ag.length <= 8) {
                ac = V.Tuning.createStandard(ag.length);
                if (ac == null) {
                    V.Tuning.addOctaves(ag, 3);
                    return
                }
            } else {
                V.Tuning.addOctaves(ag, 3);
                return
            }
        }
        var ae = 0;
        var Z = ag.length;
        while (ae < Z) {
            var Y = ae++;
            var X = ag[Y].value % 12;
            var af = ac[Y].value;
            var ab = Math.floor(af / 12);
            var aa = af % 12;
            var ad = af;
            if (aa != X) {
                var W = Math.abs(aa - X);
                var q = 12 - Math.abs(aa - X);
                if (W < q) {
                    ad = ab * 12 + X
                } else {
                    if (X > aa) {
                        ad = ab * 12 - 12 + X
                    } else {
                        ad = ab * 12 + 12 + X
                    }
                }
            }
            ag[Y].value = ad
        }
    };
    V.Tuning.getTuningForText = function(ab, W) {
        if (W == null) {
            W = 0
        }
        var X = ab.charAt(0).toUpperCase();
        var aa = 1;
        var q = ab.charAt(1);
        if (q == "b" || q == "#") {
            aa++
        }
        var Z = V.NoteNames.getNoteSemitone(X);
        if (Z < 0) {
            return -1
        }
        if (W == 0) {
            var Y = i.ParseUtils.readNumber(ab, aa, 1);
            if (Y.success) {
                W = Y.number
            }
        }
        Z += W * 12;
        if (q == "b") {
            Z--
        }
        if (q == "#") {
            Z++
        }
        return Z
    };
    V.Tuning.toString = function(W, Z) {
        if (Z == null) {
            Z = false
        }
        var q = "";
        var Y = 0;
        while (Y < W.length) {
            var X = W[Y];
            ++Y;
            q = V.Tuning.getTextForTuning(X.value, Z) + " " + q
        }
        return O.trim(q)
    };
    V.Tuning.getPresetsFor = function(q) {
        switch (q) {
            case 8:
                return V.Tuning._eightStrings;
            case 7:
                return V.Tuning._sevenStrings;
            case 6:
                return V.Tuning._sixStrings;
            case 5:
                return V.Tuning._fiveStrings;
            case 4:
                return V.Tuning._fourStrings
        }
        return new Array()
    };
    V.Tuning.findTuning = function(ad, Z) {
        if (Z == null) {
            Z = false
        }
        var ae = V.Tuning.getPresetsFor(ad.length);
        var q;
        if (Z) {
            q = 12
        } else {
            q = 1
        }
        var Y = 0;
        while (Y < ae.length) {
            var ac = ae[Y];
            ++Y;
            var W = true;
            var aa = 0;
            var ab = ad.length;
            while (aa < ab) {
                var X = aa++;
                if (ad[X].value % q != ac._midiNotes[X] % q) {
                    W = false;
                    break
                }
            }
            if (W) {
                return ac
            }
        }
        return null
    };
    V.Tuning.findByName = function(W) {
        var q = O.replace(W, " ", "").toLowerCase();
        var ac = 0;
        var ah = V.Tuning._sixStrings;
        while (ac < ah.length) {
            var ai = ah[ac];
            ++ac;
            if (ai.getHash() == q) {
                return ai
            }
        }
        var ag = 0;
        var aa = V.Tuning._sevenStrings;
        while (ag < aa.length) {
            var ad = aa[ag];
            ++ag;
            if (ad.getHash() == q) {
                return ad
            }
        }
        var af = 0;
        var Y = V.Tuning._fiveStrings;
        while (af < Y.length) {
            var ab = Y[af];
            ++af;
            if (ab.getHash() == q) {
                return ab
            }
        }
        var ae = 0;
        var X = V.Tuning._fourStrings;
        while (ae < X.length) {
            var Z = X[ae];
            ++ae;
            if (Z.getHash() == q) {
                return Z
            }
        }
        return null
    };
    V.Tuning.createStandard = function(q) {
        if (q == null) {
            q = 6
        }
        switch (q) {
            case 4:
                return V.Tuning._fourStrings[0].getStrings();
            case 5:
                return V.Tuning._fiveStrings[0].getStrings();
            case 6:
                return V.Tuning._sixStrings[0].getStrings();
            case 7:
                return V.Tuning._sevenStrings[0].getStrings();
            case 8:
                return V.Tuning._eightStrings[0].getStrings()
        }
        return null
    };
    V.Tuning.createStandardBass = function(W) {
        if (W == null) {
            W = 4
        }
        switch (W) {
            case 4:
                return V.Tuning._fourStrings[0].getStrings();
            case 5:
                return V.Tuning._fiveStrings[0].getStrings();
            case 6:
                var q = V.Tuning.findByName("Bass 6 Strings");
                if (q != null) {
                    return q.getStrings()
                }
                break
        }
        return null
    };
    V.Tuning.offsetFromStandard = function(ad) {
        var ac = ad.slice();
        ac.reverse();
        var Z = 999;
        var X = V.Tuning.createStandard(ac.length);
        X.reverse();
        var Y = new Array();
        var W;
        if (ac.length > 6) {
            W = 6
        } else {
            W = ac.length
        }
        var ab = 0;
        while (ab < W) {
            var aa = ab++;
            var q = ac[aa].value - X[aa].value;
            if (Y.length == 0) {
                Z = q;
                Y.push(q)
            } else {
                if (B.indexOf(Y, q, 0) == -1) {
                    Z = 999;
                    break
                }
            }
        }
        return Z
    };
    V.Tuning.newString = function(q, W) {
        var X = new V.GuitarString();
        X.number = q;
        X.value = W;
        return X
    };
    V.Tuning.prototype = {
        asNoteString: function(q) {
            return V.Tuning.toString(this.getStrings(), q)
        },
        getStrings: function() {
            var q = new Array();
            var Y = 0;
            var Z = this._midiNotes.length;
            while (Y < Z) {
                var W = Y++;
                var X = new V.GuitarString(W + 1, this._midiNotes[W]);
                q.push(X)
            }
            return q
        },
        getHash: function() {
            return O.replace(this.name, " ", "").toLowerCase()
        },
        __class__: V.Tuning
    };
    V.Tuplet = function() {
        this.enters = 1;
        this.times = 1
    };
    p["songModel.Tuplet"] = V.Tuplet;
    V.Tuplet.__name__ = ["songModel", "Tuplet"];
    V.Tuplet.prototype = {
        copy: function(q) {
            q.enters = this.enters;
            q.times = this.times
        },
        convertTime: function(q) {
            return Math.floor(q * this.times / this.enters)
        },
        equals: function(q) {
            return this.enters == q.enters && this.times == q.times
        },
        clone: function(q) {
            var W = q.newTuplet();
            this.copy(W);
            return W
        },
        __class__: V.Tuplet
    };
    V.Velocities = function() {};
    p["songModel.Velocities"] = V.Velocities;
    V.Velocities.__name__ = ["songModel", "Velocities"];
    V.Voice = function(q, W) {
        this.duration = q.newDuration();
        this.notes = new Array();
        this.index = W;
        this.direction = V.VoiceDirection.None;
        this.isEmpty = true
    };
    p["songModel.Voice"] = V.Voice;
    V.Voice.__name__ = ["songModel", "Voice"];
    V.Voice.prototype = {
        isRestVoice: function() {
            return this.notes.length == 0
        },
        addNote: function(q) {
            q.voice = this;
            q.index = this.notes.length;
            this.notes.push(q);
            this.isEmpty = false
        },
        clone: function(W) {
            var q = W.newVoice(this.index);
            q.duration = this.duration.clone(W);
            q.direction = this.direction;
            q.isEmpty = this.isEmpty;
            var Z = 0;
            var Y = this.notes;
            while (Z < Y.length) {
                var X = Y[Z];
                ++Z;
                q.addNote(X.clone(W))
            }
            return q
        },
        __class__: V.Voice
    };
    V.VoiceDirection = function() {};
    p["songModel.VoiceDirection"] = V.VoiceDirection;
    V.VoiceDirection.__name__ = ["songModel", "VoiceDirection"];
    V.effects = {};
    V.effects.BendEffect = function() {
        this.type = V.effects.BendTypes.None;
        this.value = 0;
        this.points = new Array()
    };
    p["songModel.effects.BendEffect"] = V.effects.BendEffect;
    V.effects.BendEffect.__name__ = ["songModel", "effects", "BendEffect"];
    V.effects.BendEffect.createFullUp = function() {
        var q = new V.effects.BendEffect();
        q.type = V.effects.BendTypes.Bend;
        q.addPoint(0, 0);
        q.addPoint(3, 4);
        q.addPoint(12, 4);
        return q
    };
    V.effects.BendEffect.createHalfUp = function() {
        var q = new V.effects.BendEffect();
        q.type = V.effects.BendTypes.Bend;
        q.addPoint(0, 0);
        q.addPoint(3, 2);
        q.addPoint(12, 2);
        return q
    };
    V.effects.BendEffect.createSmallBend = function() {
        var q = new V.effects.BendEffect();
        q.type = V.effects.BendTypes.Bend;
        q.addPoint(0, 0);
        q.addPoint(3, 1);
        q.addPoint(12, 1);
        return q
    };
    V.effects.BendEffect.createBendRelease = function() {
        var q = new V.effects.BendEffect();
        q.type = V.effects.BendTypes.BendRelease;
        q.addPoint(0, 0);
        q.addPoint(2, 4);
        q.addPoint(4, 4);
        q.addPoint(6, 0);
        q.addPoint(12, 0);
        return q
    };
    V.effects.BendEffect.prototype = {
        addPoint: function(q, W) {
            this.points.push(new V.effects.BendPoint(q, W))
        },
        clone: function(W) {
            var Y = new V.effects.BendEffect();
            Y.value = this.value;
            Y.type = this.type;
            var Z = 0;
            var aa = this.points.length;
            while (Z < aa) {
                var X = Z++;
                var q = this.points[X];
                Y.points.push(new V.effects.BendPoint(q.position, q.value, q.vibrato))
            }
            return Y
        },
        finalize: function() {
            if (this.points.length == 0) {
                return
            }
            if (this.value == 0) {
                this._calcValue()
            }
            if (this.type == V.effects.BendTypes.None) {
                this.type = V.effects.BendTypes.Bend;
                if (this.points[0].value == 0) {
                    if (this.points.length == 2) {
                        if (this.points[0].value < this.points[1].value) {
                            this.type = V.effects.BendTypes.Bend
                        }
                    } else {
                        if (this.points[this.points.length - 1].value * 25 < this.value) {
                            this.type = V.effects.BendTypes.BendRelease
                        }
                    }
                } else {
                    if (this.points.length == 2) {
                        if (this.points[0].value == this.points[1].value) {
                            this.type = V.effects.BendTypes.Prebend
                        } else {
                            if (this.points[0].value < this.points[1].value) {
                                this.type = V.effects.BendTypes.Prebend
                            } else {
                                this.type = V.effects.BendTypes.PrebendRelease
                            }
                        }
                    }
                }
            }
        },
        _calcValue: function() {
            var Y = 0;
            var X = 0;
            var W = this.points;
            while (X < W.length) {
                var q = W[X];
                ++X;
                if (q.value > Y) {
                    Y = q.value
                }
            }
            this.value = Y * 25
        },
        __class__: V.effects.BendEffect
    };
    V.effects.BendPoint = function(W, X, q) {
        if (q == null) {
            q = false
        }
        if (X == null) {
            X = 0
        }
        if (W == null) {
            W = 0
        }
        this.position = W;
        this.value = X;
        this.vibrato = q
    };
    p["songModel.effects.BendPoint"] = V.effects.BendPoint;
    V.effects.BendPoint.__name__ = ["songModel", "effects", "BendPoint"];
    V.effects.BendPoint.prototype = {
        getTime: function(q) {
            return Math.floor(q * this.position / V.effects.BendEffect.MAX_POSITION)
        },
        __class__: V.effects.BendPoint
    };
    V.effects.BendTypes = function() {};
    p["songModel.effects.BendTypes"] = V.effects.BendTypes;
    V.effects.BendTypes.__name__ = ["songModel", "effects", "BendTypes"];
    V.effects.GraceEffect = function() {
        this.fret = 0;
        this.duration = 16;
        this.velocity = V.Velocities.DEFAULT;
        this.transition = V.effects.GraceEffectTransition.None;
        this.isOnBeat = false;
        this.isDead = false
    };
    p["songModel.effects.GraceEffect"] = V.effects.GraceEffect;
    V.effects.GraceEffect.__name__ = ["songModel", "effects", "GraceEffect"];
    V.effects.GraceEffect.prototype = {
        durationTime: function() {
            return Math.floor(V.ModelConstants.QUARTER_TIME * 4 / this.duration)
        },
        clone: function(q) {
            var W = q.newGraceEffect();
            W.fret = this.fret;
            W.duration = this.duration;
            W.velocity = this.velocity;
            W.transition = this.transition;
            W.isOnBeat = this.isOnBeat;
            W.isDead = this.isDead;
            return W
        },
        __class__: V.effects.GraceEffect
    };
    V.effects.GraceEffectTransition = function() {};
    p["songModel.effects.GraceEffectTransition"] = V.effects.GraceEffectTransition;
    V.effects.GraceEffectTransition.__name__ = ["songModel", "effects", "GraceEffectTransition"];
    V.effects.GuitarPlayEffects = function() {};
    p["songModel.effects.GuitarPlayEffects"] = V.effects.GuitarPlayEffects;
    V.effects.GuitarPlayEffects.__name__ = ["songModel", "effects", "GuitarPlayEffects"];
    V.effects.HarmonicEffect = function() {};
    p["songModel.effects.HarmonicEffect"] = V.effects.HarmonicEffect;
    V.effects.HarmonicEffect.__name__ = ["songModel", "effects", "HarmonicEffect"];
    V.effects.HarmonicEffect.prototype = {
        clone: function(q) {
            var W = q.newHarmonicEffect();
            W.type = this.type;
            W.data = this.data;
            return W
        },
        __class__: V.effects.HarmonicEffect
    };
    V.effects.HarmonicType = function() {};
    p["songModel.effects.HarmonicType"] = V.effects.HarmonicType;
    V.effects.HarmonicType.__name__ = ["songModel", "effects", "HarmonicType"];
    V.effects.SlideType = function() {};
    p["songModel.effects.SlideType"] = V.effects.SlideType;
    V.effects.SlideType.__name__ = ["songModel", "effects", "SlideType"];
    V.effects.TremoloPickingEffect = function(q) {
        this.duration = q.newDuration()
    };
    p["songModel.effects.TremoloPickingEffect"] = V.effects.TremoloPickingEffect;
    V.effects.TremoloPickingEffect.__name__ = ["songModel", "effects", "TremoloPickingEffect"];
    V.effects.TremoloPickingEffect.prototype = {
        clone: function(q) {
            var W = q.newTremoloPickingEffect();
            W.duration.value = this.duration.value;
            W.duration.isDotted = this.duration.isDotted;
            W.duration.isDoubleDotted = this.duration.isDoubleDotted;
            W.duration.tuplet.enters = this.duration.tuplet.enters;
            W.duration.tuplet.times = this.duration.tuplet.times;
            return W
        },
        __class__: V.effects.TremoloPickingEffect
    };
    V.effects.TrillEffect = function(q) {
        this.fret = 0;
        this.duration = q.newDuration()
    };
    p["songModel.effects.TrillEffect"] = V.effects.TrillEffect;
    V.effects.TrillEffect.__name__ = ["songModel", "effects", "TrillEffect"];
    V.effects.TrillEffect.prototype = {
        clone: function(q) {
            var W = q.newTrillEffect();
            W.fret = this.fret;
            W.duration.value = this.duration.value;
            W.duration.isDotted = this.duration.isDotted;
            W.duration.isDoubleDotted = this.duration.isDoubleDotted;
            W.duration.tuplet.enters = this.duration.tuplet.enters;
            W.duration.tuplet.times = this.duration.tuplet.times;
            return W
        },
        __class__: V.effects.TrillEffect
    };
    V.filter = {};
    V.filter.ISongFilter = function() {};
    p["songModel.filter.ISongFilter"] = V.filter.ISongFilter;
    V.filter.ISongFilter.__name__ = ["songModel", "filter", "ISongFilter"];
    V.filter.ISongFilter.prototype = {
        __class__: V.filter.ISongFilter
    };
    V.filter.SongFilterByInstrumentsAbstract = function() {
        this._scheme = JSON.parse(V.filter.SongFilterByInstrumentsAbstract._instrumentGroupSchemeString);
        var Z = 0;
        while (Z < 129) {
            var X = Z++;
            var Y = this.getSchemeInstrumentGroupItemForInstrument(X);
            if (Y == null) {
                var q = {
                    name: "",
                    midiIndex: X
                };
                var W = {
                    name: Q.MidiInstrumentHelper.getInstrumentName(X),
                    instruments: [q]
                };
                this._scheme.push(W)
            }
        }
    };
    p["songModel.filter.SongFilterByInstrumentsAbstract"] = V.filter.SongFilterByInstrumentsAbstract;
    V.filter.SongFilterByInstrumentsAbstract.__name__ = ["songModel", "filter", "SongFilterByInstrumentsAbstract"];
    V.filter.SongFilterByInstrumentsAbstract.__interfaces__ = [V.filter.ISongFilter];
    V.filter.SongFilterByInstrumentsAbstract.prototype = {
        getSchemeInstrumentGroupItemForInstrument: function(ac) {
            var Y = null;
            var ab = 0;
            var Z = this._scheme;
            while (ab < Z.length) {
                var aa = Z[ab];
                ++ab;
                var X = 0;
                var W = aa.instruments;
                while (X < W.length) {
                    var q = W[X];
                    ++X;
                    if (q.midiIndex == ac) {
                        Y = aa;
                        break
                    }
                }
                if (Y != null) {
                    break
                }
            }
            return Y
        },
        getSchemeInstrumentItemForInstrument: function(Z) {
            var W = null;
            var Y = 0;
            var X = this.getSchemeInstrumentGroupItemForInstrument(Z).instruments;
            while (Y < X.length) {
                var q = X[Y];
                ++Y;
                if (q.midiIndex == Z) {
                    W = q;
                    break
                }
            }
            return W
        },
        execute: function(q) {},
        __class__: V.filter.SongFilterByInstrumentsAbstract
    };
    V.filter.SongFilterRecognizeChords = function() {};
    p["songModel.filter.SongFilterRecognizeChords"] = V.filter.SongFilterRecognizeChords;
    V.filter.SongFilterRecognizeChords.__name__ = ["songModel", "filter", "SongFilterRecognizeChords"];
    V.filter.SongFilterRecognizeChords.__interfaces__ = [V.filter.ISongFilter];
    V.filter.SongFilterRecognizeChords.prototype = {
        execute: function(Z) {
            var aa = 0;
            var ag = Z.tracks;
            while (aa < ag.length) {
                var X = ag[aa];
                ++aa;
                if (!this._hasTrackAnyChords(X)) {
                    var ah = X.strings;
                    var af = 0;
                    var ae = X.measures;
                    while (af < ae.length) {
                        var W = ae[af];
                        ++af;
                        this._lastChordMidiIndexes = [];
                        var ac = 0;
                        var ab = W.beats;
                        while (ac < ab.length) {
                            var ad = ab[ac];
                            ++ac;
                            var q = this.getChordNameForBeatWithStrings(ad, ah);
                            if (q != null) {
                                var Y = new V.Chord();
                                Y.name = q;
                                Y.auto = true;
                                ad.effect.chord = Y
                            }
                        }
                    }
                }
            }
        },
        getChordNameForBeatWithStrings: function(q, ad) {
            var af = null;
            var ak = q.voices[0].notes;
            var ag = [];
            if (ak.length >= 3) {
                var aa = 0;
                while (aa < ak.length) {
                    var Z = ak[aa];
                    ++aa;
                    var am = ad[Z.string - 1].value + Z.value;
                    ag.push(am)
                }
            }
            if (this._lastChordMidiIndexes.length == 0 || !P.utils.ArrayUtils.isEqual(this._lastChordMidiIndexes, ag)) {
                this._lastChordMidiIndexes = ag.slice()
            } else {
                return null
            }
            ag.sort(s(this, this._sort));
            var Y = -1;
            var aq = 0;
            var an = 0;
            while (an < ag.length) {
                var ac = ag[an];
                ++an;
                var W = [];
                var ai = ac % 12;
                var at = 0;
                while (at < ag.length) {
                    var ah = ag[at];
                    ++at;
                    var aj = ah % 12;
                    var ao = (12 - (ai - aj)) % 12;
                    W.push(ao)
                }
                var ab = P.utils.ArrayUtils.unique(W.slice());
                ab.sort(s(this, this._sort));
                var al = [];
                if (aq > 0) {
                    al = V.Chord.availableChordsWithUnimportantOrder.slice()
                } else {
                    al = V.Chord.availableChords.slice()
                }
                var ar = 0;
                while (ar < al.length) {
                    var X = al[ar];
                    ++ar;
                    var ae = X.degrees;
                    var ap = ae.slice();
                    ap.sort(s(this, this._sort));
                    if (P.utils.ArrayUtils.isEqual(ab, ap)) {
                        if (Y == -1 || ac < Y) {
                            Y = ac;
                            af = V.Chord.noteNames[ai] + (X.shortName == null ? X.name : X.shortName)
                        }
                    }
                }
                aq++
            }
            return af
        },
        _sort: function(W, q) {
            if (W < q) {
                return -1
            }
            if (W > q) {
                return 1
            }
            return 0
        },
        _hasTrackAnyChords: function(q) {
            var ab = 0;
            var aa = q.measures;
            while (ab < aa.length) {
                var X = aa[ab];
                ++ab;
                var Z = 0;
                var W = X.beats;
                while (Z < W.length) {
                    var Y = W[Z];
                    ++Z;
                    if (Y.effect.chord != null && Y.effect.chord.name.length > 0) {
                        return true
                    }
                }
            }
            return false
        },
        __class__: V.filter.SongFilterRecognizeChords
    };
    V.filter.SongFilterTracksRenameByInstruments = function() {
        V.filter.SongFilterByInstrumentsAbstract.call(this)
    };
    p["songModel.filter.SongFilterTracksRenameByInstruments"] = V.filter.SongFilterTracksRenameByInstruments;
    V.filter.SongFilterTracksRenameByInstruments.__name__ = ["songModel", "filter", "SongFilterTracksRenameByInstruments"];
    V.filter.SongFilterTracksRenameByInstruments.__interfaces__ = [V.filter.ISongFilter];
    V.filter.SongFilterTracksRenameByInstruments.__super__ = V.filter.SongFilterByInstrumentsAbstract;
    V.filter.SongFilterTracksRenameByInstruments.prototype = v(V.filter.SongFilterByInstrumentsAbstract.prototype, {
        execute: function(X) {
            var ae = new m.ds.StringMap();
            var af = 0;
            var aa = X.tracks.length;
            while (af < aa) {
                var Z = af++;
                var q = X.tracks[Z];
                var ah = this.getSchemeInstrumentGroupItemForInstrument(q.channel.instrument());
                var ag;
                if (ae.get(ah.name) == null) {
                    ag = []
                } else {
                    ag = ae.get(ah.name)
                }
                ag.push(q.number);
                ae.set(ah.name, ag);
                q.name = ah.name
            }
            var Y = 0;
            var ad = X.tracks.length;
            while (Y < ad) {
                var W = Y++;
                var ac = X.tracks[W];
                var ab = this.getSchemeInstrumentItemForInstrument(ac.channel.instrument());
                ac.name = ac.name + (ae.get(ac.name).length > 1 ? " #" + ((function(aj) {
                    var ai;
                    var ak = ae.get(ac.name);
                    ai = B.indexOf(ak, ac.number, 0);
                    return ai
                }(this)) + 1) : "") + (ab.name.length > 0 ? " (" + ab.name + ")" : "")
            }
        },
        __class__: V.filter.SongFilterTracksRenameByInstruments
    });
    V.filter.SongFilterTracksSortByInstruments = function() {
        V.filter.SongFilterByInstrumentsAbstract.call(this);
        this._guitarPriority = new m.ds.StringMap();
        this._guitarPriority.set("Acoustic Guitar", 0);
        this._guitarPriority.set("Electric Guitar", 1)
    };
    p["songModel.filter.SongFilterTracksSortByInstruments"] = V.filter.SongFilterTracksSortByInstruments;
    V.filter.SongFilterTracksSortByInstruments.__name__ = ["songModel", "filter", "SongFilterTracksSortByInstruments"];
    V.filter.SongFilterTracksSortByInstruments.__interfaces__ = [V.filter.ISongFilter];
    V.filter.SongFilterTracksSortByInstruments.__super__ = V.filter.SongFilterByInstrumentsAbstract;
    V.filter.SongFilterTracksSortByInstruments.prototype = v(V.filter.SongFilterByInstrumentsAbstract.prototype, {
        execute: function(Z) {
            var ad = this;
            this._actualizeGuitarPriority(Z);
            var ai = [];
            var ag = 0;
            var af = Z.tracks.length;
            while (ag < af) {
                var ac = ag++;
                var q = Z.tracks[ac];
                var ah = this.getSchemeInstrumentGroupItemForInstrument(q.channel.instrument());
                var Y = {
                    priority: B.indexOf(["Acoustic Guitar", "Electric Guitar"], ah.name, 0) != -1 ? this._guitarPriority.get(ah.name) : B.indexOf(this._scheme, ah, 0),
                    trackNumber: q.number
                };
                ai.push(Y)
            }
            ai.sort(function(ak, aj) {
                var al = 0;
                if (ak.trackNumber > aj.trackNumber) {
                    al = 1
                } else {
                    if (ak.trackNumber < aj.trackNumber) {
                        al = -1
                    }
                }
                return al
            });
            Z.tracks.sort(function(al, ak) {
                var aj = 0;
                if (ad._getTrackPriority(ai, al.number) > ad._getTrackPriority(ai, ak.number)) {
                    aj = 1
                } else {
                    if (ad._getTrackPriority(ai, al.number) < ad._getTrackPriority(ai, ak.number)) {
                        aj = -1
                    } else {
                        if (al.number > ak.number) {
                            aj = 1
                        } else {
                            if (al.number < ak.number) {
                                aj = -1
                            }
                        }
                    }
                }
                return aj
            });
            var W = 1;
            var ab = 0;
            var ae = Z.tracks.length;
            while (ab < ae) {
                var X = ab++;
                var aa = Z.tracks[X];
                aa.number = W++
            }
        },
        _getTrackPriority: function(X, q) {
            var W = 0;
            var Z = 0;
            while (Z < X.length) {
                var Y = X[Z];
                ++Z;
                if (Y.trackNumber == q) {
                    W = Y.priority;
                    break
                }
            }
            return W
        },
        _actualizeGuitarPriority: function(ac) {
            var W = 99;
            var ab = 99;
            var aa = 0;
            var Z = ac.tracks;
            while (aa < Z.length) {
                var q = Z[aa];
                ++aa;
                if ((function(af) {
                        var ae;
                        var ad = q.channel.instrument();
                        ae = B.indexOf([24, 25], ad, 0);
                        return ae
                    }(this)) != -1) {
                    var X = q.getFisrtNotRestMeasureIndex();
                    if (W > X) {
                        W = X
                    } else {
                        W = W
                    }
                } else {
                    if ((function(af) {
                            var ad;
                            var ae = q.channel.instrument();
                            ad = B.indexOf([26, 27, 28, 29, 30, 31, 32], ae, 0);
                            return ad
                        }(this)) != -1) {
                        var Y = q.getFisrtNotRestMeasureIndex();
                        if (ab > Y) {
                            ab = Y
                        } else {
                            ab = ab
                        }
                    }
                }
            }
            this._guitarPriority.set("Acoustic Guitar", ab < W ? 1 : 0);
            this._guitarPriority.set("Electric Guitar", ab < W ? 0 : 1)
        },
        __class__: V.filter.SongFilterTracksSortByInstruments
    });
    var U = {};
    U.AppFacade = function() {
        S.puremvc.haxe.patterns.facade.Facade.call(this)
    };
    p["tabPro.AppFacade"] = U.AppFacade;
    U.AppFacade.__name__ = ["tabPro", "AppFacade"];
    U.AppFacade.getInstance = function() {
        if (U.AppFacade.instance == null) {
            U.AppFacade.instance = new U.AppFacade()
        }
        return U.AppFacade.instance
    };
    U.AppFacade.__super__ = S.puremvc.haxe.patterns.facade.Facade;
    U.AppFacade.prototype = v(S.puremvc.haxe.patterns.facade.Facade.prototype, {
        getTablature: function() {
            var q = this.retrieveMediator("TabRenderMediator");
            return q.getTablature()
        },
        getFretboard: function() {
            var q = this.retrieveMediator("FretBoardMediator");
            return q.getFretboard()
        },
        __: function(W) {
            var q = U.AppFacade.getInstance().retrieveProxy("InternationalizationProxy");
            return q.__(W)
        },
        moveToTabPosition: function(q, X, Y) {
            var W = U.AppFacade.getInstance().retrieveProxy("TabProxy");
            W.moveToTabPosition(q, X, Y)
        },
        isPlaying: function() {
            var q = U.AppFacade.getInstance().retrieveProxy("TabProxy");
            return q.isPlay()
        },
        initializeController: function() {
            S.puremvc.haxe.patterns.facade.Facade.prototype.initializeController.call(this);
            this.registerCommand("Startup", U.controller.StartupCommand);
            this.registerCommand("LoadingStats", U.controller.LoadingStatsCommand);
            this.registerCommand("LoadSong", U.controller.LoadTabCommand);
            this.registerCommand("InitNotesPlayer", U.controller.InitNotesPlayerCommand);
            this.registerCommand("KeyAction", U.controller.KeyActionCommand);
            this.registerCommand("IntentTogglePlay", U.controller.IntentTogglePlayCommand);
            this.registerCommand("CountDownEnd", U.controller.CountDownEndCommand);
            this.registerCommand("StartLoadingPresets", U.controller.StartLoadingPresets);
            this.registerCommand("SaveSettings", U.controller.SaveSettingsCommand);
            this.registerCommand("IntentToggleFullScreen", U.controller.IntentToggleFullScreenCommand);
            this.registerCommand("ShowTip", U.controller.ShowTipCommand);
            this.registerCommand("ChangeTrack", U.controller.ChangeTrackCommand);
            this.registerCommand("SetTrackSolo", U.controller.SetTrackSoloCommand);
            this.registerCommand("MoveToFirstNotEmptyMeasure", U.controller.MoveToFirstNotEmptyMeasureCommand)
        },
        __class__: U.AppFacade
    });
    U.Errors = function() {};
    p["tabPro.Errors"] = U.Errors;
    U.Errors.__name__ = ["tabPro", "Errors"];
    U.Events = function() {};
    p["tabPro.Events"] = U.Events;
    U.Events.__name__ = ["tabPro", "Events"];
    U.Mediators = function() {};
    p["tabPro.Mediators"] = U.Mediators;
    U.Mediators.__name__ = ["tabPro", "Mediators"];
    U.controller = {};
    U.controller.ChangeTrackCommand = function() {
        S.puremvc.haxe.patterns.command.SimpleCommand.call(this)
    };
    p["tabPro.controller.ChangeTrackCommand"] = U.controller.ChangeTrackCommand;
    U.controller.ChangeTrackCommand.__name__ = ["tabPro", "controller", "ChangeTrackCommand"];
    U.controller.ChangeTrackCommand.__super__ = S.puremvc.haxe.patterns.command.SimpleCommand;
    U.controller.ChangeTrackCommand.prototype = v(S.puremvc.haxe.patterns.command.SimpleCommand.prototype, {
        execute: function(W) {
            var q = this.facade.retrieveProxy("TabProxy");
            q.setCurrentTrack(W.getBody())
        },
        __class__: U.controller.ChangeTrackCommand
    });
    U.controller.CountDownEndCommand = function() {
        S.puremvc.haxe.patterns.command.SimpleCommand.call(this)
    };
    p["tabPro.controller.CountDownEndCommand"] = U.controller.CountDownEndCommand;
    U.controller.CountDownEndCommand.__name__ = ["tabPro", "controller", "CountDownEndCommand"];
    U.controller.CountDownEndCommand.__super__ = S.puremvc.haxe.patterns.command.SimpleCommand;
    U.controller.CountDownEndCommand.prototype = v(S.puremvc.haxe.patterns.command.SimpleCommand.prototype, {
        execute: function(q) {
            this.facade.removeMediator("CountDownMediator")
        },
        __class__: U.controller.CountDownEndCommand
    });
    U.controller.InitNotesPlayerCommand = function() {
        S.puremvc.haxe.patterns.command.SimpleCommand.call(this)
    };
    p["tabPro.controller.InitNotesPlayerCommand"] = U.controller.InitNotesPlayerCommand;
    U.controller.InitNotesPlayerCommand.__name__ = ["tabPro", "controller", "InitNotesPlayerCommand"];
    U.controller.InitNotesPlayerCommand.__super__ = S.puremvc.haxe.patterns.command.SimpleCommand;
    U.controller.InitNotesPlayerCommand.prototype = v(S.puremvc.haxe.patterns.command.SimpleCommand.prototype, {
        execute: function(Y) {
            var W = U.AppFacade.getInstance().retrieveProxy("AppProxy");
            var q = U.AppFacade.getInstance().retrieveProxy("TabProxy");
            var X = {
                stage: q.notesPlayerType == U.model.dto.NotesPlayerType.html5 ? U.model.dto.Stage.Html5NotesPlayerLoading : U.model.dto.Stage.FlashNotesPlayerLoading,
                phase: U.model.dto.StagePhase.START
            };
            this.sendNotification("LoadingStats", X);
            q.initNotesPlayer(W.assetSoundFontUrl)
        },
        __class__: U.controller.InitNotesPlayerCommand
    });
    U.controller.IntentToggleFullScreenCommand = function() {
        S.puremvc.haxe.patterns.command.SimpleCommand.call(this)
    };
    p["tabPro.controller.IntentToggleFullScreenCommand"] = U.controller.IntentToggleFullScreenCommand;
    U.controller.IntentToggleFullScreenCommand.__name__ = ["tabPro", "controller", "IntentToggleFullScreenCommand"];
    U.controller.IntentToggleFullScreenCommand.__super__ = S.puremvc.haxe.patterns.command.SimpleCommand;
    U.controller.IntentToggleFullScreenCommand.prototype = v(S.puremvc.haxe.patterns.command.SimpleCommand.prototype, {
        execute: function(W) {
            S.puremvc.haxe.patterns.command.SimpleCommand.prototype.execute.call(this, W);
            var q = this.facade.retrieveProxy("AppProxy");
            if (!fullScreenStatus()) {
                window.requestFullScreen(new h.JQuery(".hxRootView")[0])
            } else {
                window.exitFullScreen()
            }
            window.onFullScreenEvent(function(X) {
                q.toggleFullScreen(X)
            })
        },
        __class__: U.controller.IntentToggleFullScreenCommand
    });
    U.controller.IntentTogglePlayCommand = function() {
        S.puremvc.haxe.patterns.command.SimpleCommand.call(this)
    };
    p["tabPro.controller.IntentTogglePlayCommand"] = U.controller.IntentTogglePlayCommand;
    U.controller.IntentTogglePlayCommand.__name__ = ["tabPro", "controller", "IntentTogglePlayCommand"];
    U.controller.IntentTogglePlayCommand.__super__ = S.puremvc.haxe.patterns.command.SimpleCommand;
    U.controller.IntentTogglePlayCommand.prototype = v(S.puremvc.haxe.patterns.command.SimpleCommand.prototype, {
        execute: function(aa) {
            var Z = this.facade.retrieveProxy("SettingsProxy");
            var W = this.facade.retrieveProxy("AppProxy");
            var q = this.facade.retrieveProxy("TabProxy");
            if (q.isPlayOptionDisabled()) {
                return
            }
            var X = {
                action: q.isPlay() ? U.model.dto.AnalyticsEventType.Pause : U.model.dto.AnalyticsEventType.Play,
                value: q.getCurrentPosition(),
                keyboard: aa.getBody()
            };
            this.sendNotification("AnalyticsEvent", X);
            if (q.isPlay()) {
                q.stop()
            } else {
                if (this.facade.hasMediator("CountDownMediator")) {
                    this.sendNotification("CountDownBreak")
                } else {
                    if (Z.getOption(U.model.settings.SettingsOption.countDown)) {
                        var ab = S.puremvc.typedExt.js.UiComponentService.create(U.view.js.CountDownView);
                        var Y = new U.view.CountDownMediator("CountDownMediator", ab);
                        this.facade.registerMediator(Y);
                        this.sendNotification("CountDownStart")
                    } else {
                        q.play()
                    }
                }
            }
        },
        __class__: U.controller.IntentTogglePlayCommand
    });
    U.controller.KeyActionCommand = function() {
        S.puremvc.haxe.patterns.command.SimpleCommand.call(this)
    };
    p["tabPro.controller.KeyActionCommand"] = U.controller.KeyActionCommand;
    U.controller.KeyActionCommand.__name__ = ["tabPro", "controller", "KeyActionCommand"];
    U.controller.KeyActionCommand.__super__ = S.puremvc.haxe.patterns.command.SimpleCommand;
    U.controller.KeyActionCommand.prototype = v(S.puremvc.haxe.patterns.command.SimpleCommand.prototype, {
        execute: function(X) {
            var q = this.facade.retrieveProxy("AppProxy");
            var Y = this.facade.retrieveProxy("TabProxy");
            var aa = X.getBody();
            var ac = aa.keyCode - 48;
            if (aa.keyCode == 16) {
                if (aa.keyAction == U.model.dto.KeyAction.UP) {
                    q.shiftPressed = false
                } else {
                    q.shiftPressed = true
                }
            } else {
                if (aa.keyAction == U.model.dto.KeyAction.UP) {
                    if (ac > 0 && ac < 10 || ac > 48 && ac < 58) {
                        if (ac > 48 && ac < 58) {
                            ac -= 48
                        }
                        Y.setCurrentTrack(ac, false, true)
                    } else {
                        var Z = aa.keyCode;
                        switch (Z) {
                            case 32:
                                if (aa.ctrlPressed) {
                                    Y.rewind(true)
                                } else {
                                    this.sendNotification("IntentTogglePlay", true)
                                }
                                break;
                            case 70:
                                this.sendNotification("IntentToggleFretboard", {
                                    keyboard: true
                                });
                                break;
                            case 76:
                                Y.toggleLoop(true);
                                break;
                            case 77:
                                this.sendNotification("IntentToggleMetronome", {
                                    keyboard: true
                                });
                                break
                        }
                    }
                } else {
                    if (aa.keyAction == U.model.dto.KeyAction.DOWN) {
                        var ab = aa.keyCode;
                        switch (ab) {
                            case 8:
                                Y.rewind(true);
                                break;
                            case 37:
                                if (aa.ctrlPressed) {
                                    Y.rewind(true)
                                } else {
                                    Y.moveToPrevBeat();
                                    this.firePositionChangeEvent()
                                }
                                break;
                            case 39:
                                Y.moveToNextBeat();
                                this.firePositionChangeEvent();
                                break;
                            case 38:
                                Y.moveToPrevMeasure();
                                this.firePositionChangeEvent();
                                break;
                            case 40:
                                Y.moveToNextMeasure();
                                this.firePositionChangeEvent();
                                break;
                            case 107:
                                var ad = Y.getTempCoeff();
                                Y.setTempCoeff(ad + 0.1);
                                this.fireTempChangeEventFromKeyboard();
                                break;
                            case 109:
                                var W = Y.getTempCoeff();
                                Y.setTempCoeff(W - 0.1);
                                this.fireTempChangeEventFromKeyboard();
                                break
                        }
                    }
                }
            }
        },
        firePositionChangeEvent: function() {
            var q = this.facade.retrieveProxy("TabProxy");
            var X = q.getCurrentPosition();
            var W = {
                action: U.model.dto.AnalyticsEventType.PositionChange,
                value: {
                    trackNumber: X.trackNumber,
                    measureNumber: X.measureIndex + 1,
                    beatNumber: X.beatIndex + 1
                },
                keyboard: true
            };
            this.sendNotification("AnalyticsEvent", W)
        },
        fireTempChangeEventFromKeyboard: function() {
            var q = this.facade.retrieveProxy("TabProxy");
            var W = {
                action: U.model.dto.AnalyticsEventType.TempoChange,
                value: q.getTempCoeff(),
                keyboard: true
            };
            this.sendNotification("AnalyticsEvent", W)
        },
        __class__: U.controller.KeyActionCommand
    });
    U.controller.LoadTabCommand = function() {
        S.puremvc.haxe.patterns.command.SimpleCommand.call(this)
    };
    p["tabPro.controller.LoadTabCommand"] = U.controller.LoadTabCommand;
    U.controller.LoadTabCommand.__name__ = ["tabPro", "controller", "LoadTabCommand"];
    U.controller.LoadTabCommand.__super__ = S.puremvc.haxe.patterns.command.SimpleCommand;
    U.controller.LoadTabCommand.prototype = v(S.puremvc.haxe.patterns.command.SimpleCommand.prototype, {
        execute: function(Z) {
            var X = this.facade.retrieveProxy("AppProxy");
            var W = this.facade.retrieveProxy("TabProxy");
            W.reset();
            W.stop();
            var aa = Z.getBody();
            W.configure(aa);
            var q = this.facade.retrieveProxy("HitMapTabProxy");
            q.setSourceData(aa);
            var Y = {
                stage: U.model.dto.Stage.TabLoading,
                phase: U.model.dto.StagePhase.START
            };
            this.sendNotification("LoadingStats", Y);
            if (aa.tabUrl != null) {
                P.net.JsBinaryLoader.loadBinary("GET", aa.tabUrl, s(this, this.loadTabComplete), s(this, this.loadTabError))
            } else {
                if (aa.tabBinaryData != null) {
                    this.loadTabComplete(P.net.JsBinaryLoader.StrToBytes(aa.tabBinaryData))
                }
            }
        },
        loadTabError: function(q) {
            this.sendNotification("LoadTabError", q)
        },
        loadTabComplete: function(W) {
            var aa = this;
            var q = this.facade.retrieveProxy("TabProxy");
            var Y = this.facade.retrieveProxy("AppProxy");
            var Z = {
                stage: U.model.dto.Stage.TabLoading,
                phase: U.model.dto.StagePhase.END
            };
            this.sendNotification("LoadingStats", Z);
            var ab = {
                stage: U.model.dto.Stage.TabParsing,
                phase: U.model.dto.StagePhase.START
            };
            this.sendNotification("LoadingStats", ab);
            if (q.setSongData(W)) {
                var X = Y.createTablature(function(ae) {
                    q.setTablature(ae);
                    var ac = aa.facade.retrieveProxy("HitMapTabProxy");
                    ac.mergeData();
                    aa.sendNotification("LoadTabComplete");
                    var ad = m.Timer.stamp();
                    m.Timer.delay(s(q, q.setNotesPlayerSongData), 250);
                    var af = {
                        stage: U.model.dto.Stage.TabParsing,
                        phase: U.model.dto.StagePhase.END
                    };
                    aa.sendNotification("LoadingStats", af)
                })
            } else {
                this.sendNotification("LoadTabError", "Error during parsing stage")
            }
        },
        __class__: U.controller.LoadTabCommand
    });
    U.controller.LoadingStatsCommand = function() {
        S.puremvc.haxe.patterns.command.SimpleCommand.call(this)
    };
    p["tabPro.controller.LoadingStatsCommand"] = U.controller.LoadingStatsCommand;
    U.controller.LoadingStatsCommand.__name__ = ["tabPro", "controller", "LoadingStatsCommand"];
    U.controller.LoadingStatsCommand.__super__ = S.puremvc.haxe.patterns.command.SimpleCommand;
    U.controller.LoadingStatsCommand.prototype = v(S.puremvc.haxe.patterns.command.SimpleCommand.prototype, {
        execute: function(W) {
            var q = this.facade.retrieveProxy("LoadingStatsProxy");
            q.stageLoad(W.getBody())
        },
        __class__: U.controller.LoadingStatsCommand
    });
    U.controller.MoveToFirstNotEmptyMeasureCommand = function() {
        S.puremvc.haxe.patterns.command.SimpleCommand.call(this)
    };
    p["tabPro.controller.MoveToFirstNotEmptyMeasureCommand"] = U.controller.MoveToFirstNotEmptyMeasureCommand;
    U.controller.MoveToFirstNotEmptyMeasureCommand.__name__ = ["tabPro", "controller", "MoveToFirstNotEmptyMeasureCommand"];
    U.controller.MoveToFirstNotEmptyMeasureCommand.__super__ = S.puremvc.haxe.patterns.command.SimpleCommand;
    U.controller.MoveToFirstNotEmptyMeasureCommand.prototype = v(S.puremvc.haxe.patterns.command.SimpleCommand.prototype, {
        execute: function(W) {
            var q = this.facade.retrieveProxy("TabProxy");
            q.moveToFirstNotRestMeasure()
        },
        __class__: U.controller.MoveToFirstNotEmptyMeasureCommand
    });
    U.controller.PrepareAnalyticsCommand = function() {
        S.puremvc.haxe.patterns.command.SimpleCommand.call(this)
    };
    p["tabPro.controller.PrepareAnalyticsCommand"] = U.controller.PrepareAnalyticsCommand;
    U.controller.PrepareAnalyticsCommand.__name__ = ["tabPro", "controller", "PrepareAnalyticsCommand"];
    U.controller.PrepareAnalyticsCommand.__super__ = S.puremvc.haxe.patterns.command.SimpleCommand;
    U.controller.PrepareAnalyticsCommand.prototype = v(S.puremvc.haxe.patterns.command.SimpleCommand.prototype, {
        execute: function(X) {
            var q = X.getBody();
            var W = new U.view.AnalyticsMediator("AnalyticsMediator");
            this.facade.registerMediator(W);
            W.playerEventListener = q.params.playerEventListener
        },
        __class__: U.controller.PrepareAnalyticsCommand
    });
    U.controller.PrepareModelCommand = function() {
        S.puremvc.haxe.patterns.command.SimpleCommand.call(this)
    };
    p["tabPro.controller.PrepareModelCommand"] = U.controller.PrepareModelCommand;
    U.controller.PrepareModelCommand.__name__ = ["tabPro", "controller", "PrepareModelCommand"];
    U.controller.PrepareModelCommand.__super__ = S.puremvc.haxe.patterns.command.SimpleCommand;
    U.controller.PrepareModelCommand.prototype = v(S.puremvc.haxe.patterns.command.SimpleCommand.prototype, {
        execute: function(W) {
            var q = W.getBody();
            this.facade.registerProxy(new U.model.LoadingStatsProxy(q.params.onStageLoad));
            this.facade.registerProxy(new U.model.SettingsProxy(q.setts));
            this.facade.registerProxy(new U.model.ApplicationProxy(q));
            this.facade.registerProxy(new U.model.TabProxy(q));
            this.facade.registerProxy(new U.model.HitMapTabProxy());
            this.facade.registerProxy(new U.model.InternationalizationProxy(q.params.i18nResources))
        },
        __class__: U.controller.PrepareModelCommand
    });
    U.controller.PrepareViewCommand = function() {
        S.puremvc.haxe.patterns.command.SimpleCommand.call(this)
    };
    p["tabPro.controller.PrepareViewCommand"] = U.controller.PrepareViewCommand;
    U.controller.PrepareViewCommand.__name__ = ["tabPro", "controller", "PrepareViewCommand"];
    U.controller.PrepareViewCommand.__super__ = S.puremvc.haxe.patterns.command.SimpleCommand;
    U.controller.PrepareViewCommand.prototype = v(S.puremvc.haxe.patterns.command.SimpleCommand.prototype, {
        execute: function(q) {
            var av = q.getBody().params;
            var aA = this.facade.retrieveProxy("AppProxy");
            var ap = this.facade.retrieveProxy("TabProxy");
            var ag = null;
            if (ap.instanceId > 0) {
                ag = new S.puremvc.typedExt.js.JqueryComponent(S.puremvc.typedExt.js.UiComponentParams.create("hxRootWrapper" + (ap.instanceId == null ? "null" : "" + ap.instanceId)))
            }
            var aq = S.puremvc.typedExt.js.UiComponentService.create(U.view.js.RootView, "hxRootView", ag);
            var aj = new U.view.RootMediator("RootMediator", aq);
            this.facade.registerMediator(aj);
            var X = S.puremvc.typedExt.js.UiComponentService.create(U.view.js.SplashView, "hxSplashView", ag);
            var at = new U.view.SplashMediator("SplashMediator", X);
            this.facade.registerMediator(at);
            var ak = S.puremvc.typedExt.js.UiComponentService.create(U.view.js.TopControlPanelView, "hxTopControlPanelView", ag);
            var ao = new U.view.TopControlPanelMediator("TopControlPanelMediator", ak);
            this.facade.registerMediator(ao);
            var W = S.puremvc.typedExt.js.UiComponentService.create(U.view.js.ControlPanelView, "hxControlPanelView", ag);
            var au = new U.view.ControlPanelMediator("ControlPanelMediator", W);
            this.facade.registerMediator(au);
            var aw = S.puremvc.typedExt.js.UiComponentService.create(U.view.js.TracklistView, "hxTracklistView", ag);
            var ae = new U.view.TracklistMediator("TracklistMediator", aw);
            this.facade.registerMediator(ae);
            ae.setTracklistStyle(av.tracklistStyle);
            var ah = null;
            var Y = aA.fretBoardType;
            switch (Y) {
                case "svg":
                    ah = S.puremvc.typedExt.js.UiComponentService.create(U.view.js.FretBoardViewSvg, U.view.js.FretBoardView.ID, ag);
                    break;
                case "canvas":
                    var ad;
                    var an = new m.ds.StringMap();
                    an.set("assetFretBoardImagesPreUrl", aA.assetFretBoardImagesPreUrl);
                    ad = an;
                    ah = S.puremvc.typedExt.js.UiComponentService.create(U.view.js.FretBoardViewCanvas, U.view.js.FretBoardView.ID, ag, ad);
                    break;
                case "flash":
                    ah = S.puremvc.typedExt.js.UiComponentService.create(U.view.js.FretBoardViewFlash, U.view.js.FretBoardView.ID, ag);
                    break;
                default:
                    h.Lib.alert(U.Errors.INVALID_OR_UNDEFINE_FRETBOARD_TYPE.message)
            }
            if (ah != null) {
                var aa = new U.view.FretBoardMediator("FretBoardMediator", ah);
                this.facade.registerMediator(aa);
                aa.configureView(av.fretboardConf)
            }
            if (aA.canvasType == U.view.js.TabRenderView.RENDER_MODE_ASCII) {
                var ab = S.puremvc.typedExt.js.UiComponentService.create(U.view.js.TabRenderViewAscii, U.view.js.TabRenderViewAscii.ID, ag);
                var ar = new U.view.AsciiTabRenderMediator("AsciiTabRenderMediator", ab);
                this.facade.registerMediator(ar)
            } else {
                var ai = null;
                var am = aA.canvasType;
                switch (am) {
                    case U.view.js.TabRenderView.RENDER_MODE_SVG:
                        ai = S.puremvc.typedExt.js.UiComponentService.create(U.view.js.TabRenderViewSvg, U.view.js.TabRenderView.ID, ag);
                        break;
                    case U.view.js.TabRenderView.RENDER_MODE_CANVAS:
                        ai = S.puremvc.typedExt.js.UiComponentService.create(U.view.js.TabRenderViewCanvas, U.view.js.TabRenderView.ID, ag);
                        break;
                    case U.view.js.TabRenderView.RENDER_MODE_FLASH:
                        ai = S.puremvc.typedExt.js.UiComponentService.create(U.view.js.TabRenderViewFlash, U.view.js.TabRenderView.ID, ag);
                        break;
                    default:
                        h.Lib.alert(U.Errors.INVALID_OR_UNDEFINE_CANVAS_TYPE.message)
                }
                var ay = new U.view.TabRenderMediator("TabRenderMediator", ai);
                this.facade.registerMediator(ay)
            }
            var Z = S.puremvc.typedExt.js.UiComponentService.create(U.view.js.InstrumentSwitcherView, "hxInstrumentSwitcherView", ag);
            var af = new U.view.InstrumentSwitcherMediator("InstrumentSwitcherMediator", Z);
            this.facade.registerMediator(af);
            if (av.tracklistStyle == U.interfaces.TracklistStyle.Smekhov_0929[0]) {
                var az = S.puremvc.typedExt.js.UiComponentService.create(U.view.js.TimelineView, "hxTimelineView", ag);
                var al = new U.view.TimelineMediator("TimelineMediator", az);
                this.facade.registerMediator(al)
            }
            var ac = S.puremvc.typedExt.js.UiComponentService.create(U.view.js.EqualizerView, "hxEqualizerView", ag);
            var ax = new U.view.EqualizerMediator("EqualizerMediator", ac);
            this.facade.registerMediator(ax)
        },
        __class__: U.controller.PrepareViewCommand
    });
    U.controller.SaveSettingsCommand = function() {
        S.puremvc.haxe.patterns.command.SimpleCommand.call(this)
    };
    p["tabPro.controller.SaveSettingsCommand"] = U.controller.SaveSettingsCommand;
    U.controller.SaveSettingsCommand.__name__ = ["tabPro", "controller", "SaveSettingsCommand"];
    U.controller.SaveSettingsCommand.__super__ = S.puremvc.haxe.patterns.command.SimpleCommand;
    U.controller.SaveSettingsCommand.prototype = v(S.puremvc.haxe.patterns.command.SimpleCommand.prototype, {
        execute: function(q) {
            S.puremvc.haxe.patterns.command.SimpleCommand.prototype.execute.call(this, q)
        },
        __class__: U.controller.SaveSettingsCommand
    });
    U.controller.SetTrackSoloCommand = function() {
        S.puremvc.haxe.patterns.command.SimpleCommand.call(this)
    };
    p["tabPro.controller.SetTrackSoloCommand"] = U.controller.SetTrackSoloCommand;
    U.controller.SetTrackSoloCommand.__name__ = ["tabPro", "controller", "SetTrackSoloCommand"];
    U.controller.SetTrackSoloCommand.__super__ = S.puremvc.haxe.patterns.command.SimpleCommand;
    U.controller.SetTrackSoloCommand.prototype = v(S.puremvc.haxe.patterns.command.SimpleCommand.prototype, {
        execute: function(W) {
            var q = this.facade.retrieveProxy("TabProxy");
            q.setTrackSolo(W.getBody())
        },
        __class__: U.controller.SetTrackSoloCommand
    });
    U.controller.ShowTipCommand = function() {
        S.puremvc.haxe.patterns.command.SimpleCommand.call(this)
    };
    p["tabPro.controller.ShowTipCommand"] = U.controller.ShowTipCommand;
    U.controller.ShowTipCommand.__name__ = ["tabPro", "controller", "ShowTipCommand"];
    U.controller.ShowTipCommand.__super__ = S.puremvc.haxe.patterns.command.SimpleCommand;
    U.controller.ShowTipCommand.prototype = v(S.puremvc.haxe.patterns.command.SimpleCommand.prototype, {
        execute: function(X) {
            if (this._getCookie(U.controller.ShowTipCommand.COOKIE_TRACKLIST_RESIZE_TIPS_SHOWN) != 1) {
                var W = this.facade.retrieveMediator("RootMediator").getViewComponent();
                W.getJqNode().find("._hxTracklistResizeTips").remove();
                var q = X.getBody();
                var Y = S.puremvc.typedExt.js.UiComponentParams.create(null, W).setTemplateId(S.puremvc.typedExt.js.JqueryTipCard.TEMPLATE).useYourself();
                this._tipCard = new S.puremvc.typedExt.js.JqueryTipCard(Y);
                this._tipCard.configure(q);
                this._throbber = q.element;
                this._tipCard.onClose(s(this, this._tipCardClosed));
                this._tipCard.getJqNode().addClass("_hxTracklistResizeTips");
                this._tipCard.hide();
                this._active();
                this._bindOneClickOnThrobber()
            }
        },
        _tipCardClosed: function(q) {
            this._throbber.getJqNode().off("click.main");
            this._throbber.getJqNode().off("click.tips");
            this._throbber.getJqNode().off("mousedown.tips");
            this._throbber.getJqNode().off("mousemove.tips");
            if (q) {
                this._log(U.model.dto.AnalyticsEventType.InstrumentsTracklistResizeTipsForeverOff)
            } else {
                this._log(U.model.dto.AnalyticsEventType.InstrumentsTracklistResizeTipsOff)
            }
        },
        _active: function() {
            var q = this;
            m.Timer.delay(function() {
                q._throbber.getJqNode().addClass("has_helper")
            }, 20);
            this._throbber.getJqNode().css({
                cursor: "pointer"
            })
        },
        _inactive: function() {
            this._throbber.getJqNode().removeClass("has_helper");
            this._throbber.getJqNode().css({
                cursor: ""
            })
        },
        _bindOneClickOnThrobber: function() {
            var q = this;
            this._throbber.getJqNode().off("click.main");
            this._throbber.getJqNode().on("click.main", function(W) {
                q._tipCard.active();
                q._inactive();
                q._setCookie(U.controller.ShowTipCommand.COOKIE_TRACKLIST_RESIZE_TIPS_SHOWN, 1);
                q._log(U.model.dto.AnalyticsEventType.InstrumentsTracklistResizeTipsOn);
                q._throbber.getJqNode().off("click.tips");
                q._throbber.getJqNode().on("click.tips", function(X) {
                    q._tipCard.inactive();
                    q._tipCardClosed(true);
                    q._throbber.getJqNode().off("click.tips");
                    return false
                });
                q._throbber.getJqNode().off("mousedown.tips");
                q._throbber.getJqNode().on("mousedown.tips", function(Z) {
                    var Y = Z.pageX;
                    var X = Z.pageY;
                    q._throbber.getJqNode().off("mousemove.tips");
                    q._throbber.getJqNode().on("mousemove.tips", function(aa) {
                        var ab = Math.sqrt((aa.pageX - Y) * (aa.pageX - Y) + (aa.pageY - X) * (aa.pageY - X));
                        if (ab > 5) {
                            q._tipCard.inactive();
                            q._tipCardClosed(true);
                            q._throbber.getJqNode().off("mousemove.tips")
                        }
                        return false
                    });
                    q._throbber.getJqNode().off("mousedown.tips");
                    new h.JQuery(window).one("mouseup.tips", function(aa) {
                        q._throbber.getJqNode().off("mousemove.tips")
                    });
                    return false
                });
                q._throbber.getJqNode().off("click.main");
                return false
            })
        },
        _log: function(W) {
            var q = {
                action: W,
                value: null,
                keyboard: false
            };
            this.sendNotification("AnalyticsEvent", q)
        },
        _getCookie: function(q) {
            var W = null;
            if (R["typeof"]($.cookie) == "TFunction") {
                W = $.cookie(q)
            }
            return W
        },
        _setCookie: function(q, W) {
            if (R["typeof"]($.cookie) == "TFunction") {
                $.cookie(q, W, {
                    expires: 730,
                    path: "/"
                })
            }
        },
        __class__: U.controller.ShowTipCommand
    });
    U.controller.StartLoadingPresets = function() {
        S.puremvc.haxe.patterns.command.SimpleCommand.call(this)
    };
    p["tabPro.controller.StartLoadingPresets"] = U.controller.StartLoadingPresets;
    U.controller.StartLoadingPresets.__name__ = ["tabPro", "controller", "StartLoadingPresets"];
    U.controller.StartLoadingPresets.__super__ = S.puremvc.haxe.patterns.command.SimpleCommand;
    U.controller.StartLoadingPresets.prototype = v(S.puremvc.haxe.patterns.command.SimpleCommand.prototype, {
        execute: function(q) {
            S.puremvc.haxe.patterns.command.SimpleCommand.prototype.execute.call(this, q)
        },
        __class__: U.controller.StartLoadingPresets
    });
    U.controller.StartupCommand = function() {
        S.puremvc.haxe.patterns.command.MacroCommand.call(this)
    };
    p["tabPro.controller.StartupCommand"] = U.controller.StartupCommand;
    U.controller.StartupCommand.__name__ = ["tabPro", "controller", "StartupCommand"];
    U.controller.StartupCommand.__super__ = S.puremvc.haxe.patterns.command.MacroCommand;
    U.controller.StartupCommand.prototype = v(S.puremvc.haxe.patterns.command.MacroCommand.prototype, {
        initializeMacroCommand: function() {
            this.addSubCommand(U.controller.PrepareModelCommand);
            this.addSubCommand(U.controller.PrepareViewCommand);
            this.addSubCommand(U.controller.PrepareAnalyticsCommand)
        },
        __class__: U.controller.StartupCommand
    });
    U.hepler = {};
    U.hepler.js = {};
    U.hepler.js.CanvasHelper = function() {};
    p["tabPro.hepler.js.CanvasHelper"] = U.hepler.js.CanvasHelper;
    U.hepler.js.CanvasHelper.__name__ = ["tabPro", "hepler", "js", "CanvasHelper"];
    U.hepler.js.CanvasHelper.moveTo = function(W, q, X) {
        q = Math.floor(q) + U.hepler.js.CanvasHelper.getAntiAliasingOffset(W);
        X = Math.floor(X) + U.hepler.js.CanvasHelper.getAntiAliasingOffset(W);
        W.moveTo(q, X)
    };
    U.hepler.js.CanvasHelper.lineTo = function(W, q, X) {
        q = Math.floor(q) + U.hepler.js.CanvasHelper.getAntiAliasingOffset(W);
        X = Math.floor(X) + U.hepler.js.CanvasHelper.getAntiAliasingOffset(W);
        W.lineTo(q, X)
    };
    U.hepler.js.CanvasHelper.drawRoundRect = function(X, q, ab, W, Y, aa, Z) {
        q = Math.floor(q) + U.hepler.js.CanvasHelper.getAntiAliasingOffset(X);
        ab = Math.floor(ab) + U.hepler.js.CanvasHelper.getAntiAliasingOffset(X);
        X.moveTo(q + aa, ab);
        X.lineTo(q + W - aa, ab);
        X.quadraticCurveTo(q + W, ab, q + W, ab + Z);
        X.lineTo(q + W, ab + Y - Z);
        X.quadraticCurveTo(q + W, ab + Y, q + W - aa, ab + Y);
        X.lineTo(q + aa, ab + Y);
        X.quadraticCurveTo(q, ab + Y, q, ab + Y - Z);
        X.lineTo(q, ab + Z);
        X.quadraticCurveTo(q, ab, q + aa, ab)
    };
    U.hepler.js.CanvasHelper.getAntiAliasingOffset = function(q) {
        if (q.lineWidth % 2 != 0) {
            return 0.5
        } else {
            return 0
        }
    };
    U.hepler.js.CanvasHelper.prototype = {
        __class__: U.hepler.js.CanvasHelper
    };
    U.interfaces = {};
    U.interfaces.ControlPanelStyle = {
        __ename__: true,
        __constructs__: ["Default", "Bakanovskiy_0624", "Smekhov_0701"]
    };
    U.interfaces.ControlPanelStyle.Default = ["Default", 0];
    U.interfaces.ControlPanelStyle.Default.toString = l;
    U.interfaces.ControlPanelStyle.Default.__enum__ = U.interfaces.ControlPanelStyle;
    U.interfaces.ControlPanelStyle.Bakanovskiy_0624 = ["Bakanovskiy_0624", 1];
    U.interfaces.ControlPanelStyle.Bakanovskiy_0624.toString = l;
    U.interfaces.ControlPanelStyle.Bakanovskiy_0624.__enum__ = U.interfaces.ControlPanelStyle;
    U.interfaces.ControlPanelStyle.Smekhov_0701 = ["Smekhov_0701", 2];
    U.interfaces.ControlPanelStyle.Smekhov_0701.toString = l;
    U.interfaces.ControlPanelStyle.Smekhov_0701.__enum__ = U.interfaces.ControlPanelStyle;
    U.interfaces.IControlPanelView = function() {};
    p["tabPro.interfaces.IControlPanelView"] = U.interfaces.IControlPanelView;
    U.interfaces.IControlPanelView.__name__ = ["tabPro", "interfaces", "IControlPanelView"];
    U.interfaces.IControlPanelView.prototype = {
        __class__: U.interfaces.IControlPanelView
    };
    U.interfaces.IControlPanelViewListener = function() {};
    p["tabPro.interfaces.IControlPanelViewListener"] = U.interfaces.IControlPanelViewListener;
    U.interfaces.IControlPanelViewListener.__name__ = ["tabPro", "interfaces", "IControlPanelViewListener"];
    U.interfaces.IControlPanelViewListener.prototype = {
        __class__: U.interfaces.IControlPanelViewListener
    };
    U.interfaces.ICountDownView = function() {};
    p["tabPro.interfaces.ICountDownView"] = U.interfaces.ICountDownView;
    U.interfaces.ICountDownView.__name__ = ["tabPro", "interfaces", "ICountDownView"];
    U.interfaces.ICountDownView.prototype = {
        __class__: U.interfaces.ICountDownView
    };
    U.interfaces.ICountDownViewListener = function() {};
    p["tabPro.interfaces.ICountDownViewListener"] = U.interfaces.ICountDownViewListener;
    U.interfaces.ICountDownViewListener.__name__ = ["tabPro", "interfaces", "ICountDownViewListener"];
    U.interfaces.IEqualizerListener = function() {};
    p["tabPro.interfaces.IEqualizerListener"] = U.interfaces.IEqualizerListener;
    U.interfaces.IEqualizerListener.__name__ = ["tabPro", "interfaces", "IEqualizerListener"];
    U.interfaces.IEqualizerListener.prototype = {
        __class__: U.interfaces.IEqualizerListener
    };
    U.interfaces.IEqualizerView = function() {};
    p["tabPro.interfaces.IEqualizerView"] = U.interfaces.IEqualizerView;
    U.interfaces.IEqualizerView.__name__ = ["tabPro", "interfaces", "IEqualizerView"];
    U.interfaces.IEqualizerView.prototype = {
        __class__: U.interfaces.IEqualizerView
    };
    U.interfaces.IFretBoardView = function() {};
    p["tabPro.interfaces.IFretBoardView"] = U.interfaces.IFretBoardView;
    U.interfaces.IFretBoardView.__name__ = ["tabPro", "interfaces", "IFretBoardView"];
    U.interfaces.IFretBoardView.prototype = {
        __class__: U.interfaces.IFretBoardView
    };
    U.interfaces.IFretBoardViewListener = function() {};
    p["tabPro.interfaces.IFretBoardViewListener"] = U.interfaces.IFretBoardViewListener;
    U.interfaces.IFretBoardViewListener.__name__ = ["tabPro", "interfaces", "IFretBoardViewListener"];
    U.interfaces.IFretBoardViewListener.prototype = {
        __class__: U.interfaces.IFretBoardViewListener
    };
    U.interfaces.ILoadingPresetsView = function() {};
    p["tabPro.interfaces.ILoadingPresetsView"] = U.interfaces.ILoadingPresetsView;
    U.interfaces.ILoadingPresetsView.__name__ = ["tabPro", "interfaces", "ILoadingPresetsView"];
    U.interfaces.ILoadingPresetsView.prototype = {
        __class__: U.interfaces.ILoadingPresetsView
    };
    U.interfaces.ILoadingPresetsViewListener = function() {};
    p["tabPro.interfaces.ILoadingPresetsViewListener"] = U.interfaces.ILoadingPresetsViewListener;
    U.interfaces.ILoadingPresetsViewListener.__name__ = ["tabPro", "interfaces", "ILoadingPresetsViewListener"];
    U.interfaces.INotesPlayer = function() {};
    p["tabPro.interfaces.INotesPlayer"] = U.interfaces.INotesPlayer;
    U.interfaces.INotesPlayer.__name__ = ["tabPro", "interfaces", "INotesPlayer"];
    U.interfaces.INotesPlayer.prototype = {
        __class__: U.interfaces.INotesPlayer
    };
    U.interfaces.IRootView = function() {};
    p["tabPro.interfaces.IRootView"] = U.interfaces.IRootView;
    U.interfaces.IRootView.__name__ = ["tabPro", "interfaces", "IRootView"];
    U.interfaces.IRootView.prototype = {
        __class__: U.interfaces.IRootView
    };
    U.interfaces.IRootViewListener = function() {};
    p["tabPro.interfaces.IRootViewListener"] = U.interfaces.IRootViewListener;
    U.interfaces.IRootViewListener.__name__ = ["tabPro", "interfaces", "IRootViewListener"];
    U.interfaces.IRootViewListener.prototype = {
        __class__: U.interfaces.IRootViewListener
    };
    U.interfaces.ISplashView = function() {};
    p["tabPro.interfaces.ISplashView"] = U.interfaces.ISplashView;
    U.interfaces.ISplashView.__name__ = ["tabPro", "interfaces", "ISplashView"];
    U.interfaces.ISplashView.prototype = {
        __class__: U.interfaces.ISplashView
    };
    U.interfaces.ISplashViewListener = function() {};
    p["tabPro.interfaces.ISplashViewListener"] = U.interfaces.ISplashViewListener;
    U.interfaces.ISplashViewListener.__name__ = ["tabPro", "interfaces", "ISplashViewListener"];
    U.interfaces.ITabRenderView = function() {};
    p["tabPro.interfaces.ITabRenderView"] = U.interfaces.ITabRenderView;
    U.interfaces.ITabRenderView.__name__ = ["tabPro", "interfaces", "ITabRenderView"];
    U.interfaces.ITabRenderView.prototype = {
        __class__: U.interfaces.ITabRenderView
    };
    U.interfaces.ITabRenderViewListener = function() {};
    p["tabPro.interfaces.ITabRenderViewListener"] = U.interfaces.ITabRenderViewListener;
    U.interfaces.ITabRenderViewListener.__name__ = ["tabPro", "interfaces", "ITabRenderViewListener"];
    U.interfaces.ITabRenderViewListener.prototype = {
        __class__: U.interfaces.ITabRenderViewListener
    };
    U.interfaces.ChangePositionType = {
        __ename__: true,
        __constructs__: ["Click", "Slider"]
    };
    U.interfaces.ChangePositionType.Click = ["Click", 0];
    U.interfaces.ChangePositionType.Click.toString = l;
    U.interfaces.ChangePositionType.Click.__enum__ = U.interfaces.ChangePositionType;
    U.interfaces.ChangePositionType.Slider = ["Slider", 1];
    U.interfaces.ChangePositionType.Slider.toString = l;
    U.interfaces.ChangePositionType.Slider.__enum__ = U.interfaces.ChangePositionType;
    U.interfaces.ITimelineView = function() {};
    p["tabPro.interfaces.ITimelineView"] = U.interfaces.ITimelineView;
    U.interfaces.ITimelineView.__name__ = ["tabPro", "interfaces", "ITimelineView"];
    U.interfaces.ITimelineView.prototype = {
        __class__: U.interfaces.ITimelineView
    };
    U.interfaces.ITimelineViewListener = function() {};
    p["tabPro.interfaces.ITimelineViewListener"] = U.interfaces.ITimelineViewListener;
    U.interfaces.ITimelineViewListener.__name__ = ["tabPro", "interfaces", "ITimelineViewListener"];
    U.interfaces.ITimelineViewListener.prototype = {
        __class__: U.interfaces.ITimelineViewListener
    };
    U.interfaces.ITopControlPanelView = function() {};
    p["tabPro.interfaces.ITopControlPanelView"] = U.interfaces.ITopControlPanelView;
    U.interfaces.ITopControlPanelView.__name__ = ["tabPro", "interfaces", "ITopControlPanelView"];
    U.interfaces.ITopControlPanelView.prototype = {
        __class__: U.interfaces.ITopControlPanelView
    };
    U.interfaces.ITopControlPanelViewListener = function() {};
    p["tabPro.interfaces.ITopControlPanelViewListener"] = U.interfaces.ITopControlPanelViewListener;
    U.interfaces.ITopControlPanelViewListener.__name__ = ["tabPro", "interfaces", "ITopControlPanelViewListener"];
    U.interfaces.ITopControlPanelViewListener.prototype = {
        __class__: U.interfaces.ITopControlPanelViewListener
    };
    U.interfaces.ITracklistItemView = function() {};
    p["tabPro.interfaces.ITracklistItemView"] = U.interfaces.ITracklistItemView;
    U.interfaces.ITracklistItemView.__name__ = ["tabPro", "interfaces", "ITracklistItemView"];
    U.interfaces.ITracklistItemView.prototype = {
        __class__: U.interfaces.ITracklistItemView
    };
    U.interfaces.TracklistStyle = {
        __ename__: true,
        __constructs__: ["Default", "Smekhov_0701", "Smekhov_0929"]
    };
    U.interfaces.TracklistStyle.Default = ["Default", 0];
    U.interfaces.TracklistStyle.Default.toString = l;
    U.interfaces.TracklistStyle.Default.__enum__ = U.interfaces.TracklistStyle;
    U.interfaces.TracklistStyle.Smekhov_0701 = ["Smekhov_0701", 1];
    U.interfaces.TracklistStyle.Smekhov_0701.toString = l;
    U.interfaces.TracklistStyle.Smekhov_0701.__enum__ = U.interfaces.TracklistStyle;
    U.interfaces.TracklistStyle.Smekhov_0929 = ["Smekhov_0929", 2];
    U.interfaces.TracklistStyle.Smekhov_0929.toString = l;
    U.interfaces.TracklistStyle.Smekhov_0929.__enum__ = U.interfaces.TracklistStyle;
    U.interfaces.ITracklistView = function() {};
    p["tabPro.interfaces.ITracklistView"] = U.interfaces.ITracklistView;
    U.interfaces.ITracklistView.__name__ = ["tabPro", "interfaces", "ITracklistView"];
    U.interfaces.ITracklistView.prototype = {
        __class__: U.interfaces.ITracklistView
    };
    U.interfaces.ITracklistViewListener = function() {};
    p["tabPro.interfaces.ITracklistViewListener"] = U.interfaces.ITracklistViewListener;
    U.interfaces.ITracklistViewListener.__name__ = ["tabPro", "interfaces", "ITracklistViewListener"];
    U.interfaces.ITracklistViewListener.prototype = {
        __class__: U.interfaces.ITracklistViewListener
    };
    U.model = {};
    U.model.ApplicationProxy = function(q) {
        S.puremvc.haxe.patterns.proxy.Proxy.call(this);
        this.proxyName = "AppProxy";
        this._settingsProxy = this.facade.retrieveProxy("SettingsProxy");
        this.canvasType = "canvas";
        this.fretBoardType = "canvas";
        this.showNames = false;
        this.fitToScreen = false;
        this.beginnerMode = false;
        this.offsetTop = 0;
        this.minHeight = 715;
        this.maxHeight = 920;
        this.controlPanelStyle = U.interfaces.ControlPanelStyle.Default;
        this.assetBaseUrl = "/tab-pro-player/";
        this.assetSoundFontUrl = this.assetBaseUrl + "soundfonts/GeneralUserGs/soundfont.xml";
        this.assetNotesPlayerFlashUrl = this.assetBaseUrl + "swf/NotesPlayerFlash.swf";
        this.assetFretBoardImagesPreUrl = this.assetBaseUrl + "images/fretboard/";
        this.assetFretBoardSwfUrl = this.assetBaseUrl + "swf/FretBoard.swf";
        this.fretBoardHeight = 116;
        this.minFretBoardHeight = 80;
        this.maxFretBoardHeight = 250;
        this.controlPanelHeight = 30;
        if (q == null) {
            q = {}
        } else {
            q = q
        }
        var aa = q.params;
        var X = q.setts;
        if (aa != null) {
            if (aa.showNames) {
                this.showNames = true
            } else {
                this.showNames = false
            }
            if (aa.fitToScreen) {
                this.fitToScreen = true
            } else {
                this.fitToScreen = false
            }
            if (aa.beginnerMode) {
                this.beginnerMode = true
            } else {
                this.beginnerMode = false
            }
            if (aa.scalableTabOffsets) {
                this.scalableTabOffsets = true
            } else {
                this.scalableTabOffsets = false
            }
            if (aa.offsetTop != null) {
                this.offsetTop = aa.offsetTop
            } else {
                this.offsetTop = this.offsetTop
            }
            if (aa.minHeight != null) {
                this.minHeight = aa.minHeight
            } else {
                this.minHeight = this.minHeight
            }
            if (aa.maxHeight != null) {
                this.maxHeight = aa.maxHeight
            } else {
                this.maxHeight = this.maxHeight
            }
            var Z = 0;
            var Y = R.getEnumConstructs(U.interfaces.ControlPanelStyle);
            while (Z < Y.length) {
                var W = Y[Z];
                ++Z;
                if (aa.controlPanelStyle == W) {
                    this.controlPanelStyle = R.createEnum(U.interfaces.ControlPanelStyle, W, null)
                }
            }
            if (aa.canvasType) {
                this.canvasType = aa.canvasType.toLowerCase()
            } else {
                this.canvasType = this.canvasType
            }
            if (aa.fretBoardType) {
                this.fretBoardType = aa.fretBoardType.toLowerCase()
            } else {
                this.fretBoardType = this.fretBoardType
            }
            if (aa.fretBoardHeight) {
                this.fretBoardHeight = aa.fretBoardHeight
            } else {
                this.fretBoardHeight = this.fretBoardHeight
            }
            this._onSaveSettings = aa.onSaveSettings;
            this._onApplicationReady = aa.onApplicationReady;
            this._onFlashNotesPlayerReady = aa.onFlashNotesPlayerReady;
            this._onFretboardReady = aa.onFretboardReady;
            if (aa.assets != null) {
                if (aa.assets.baseUrl != null) {
                    this.assetBaseUrl = aa.assets.baseUrl
                } else {
                    this.assetBaseUrl = this.assetBaseUrl
                }
                if (aa.assets.soundFontUrl != null) {
                    this.assetSoundFontUrl = aa.assets.soundFontUrl
                } else {
                    this.assetSoundFontUrl = this.assetSoundFontUrl
                }
                if (aa.assets.notesPlayerFlashUrl != null) {
                    this.assetNotesPlayerFlashUrl = aa.assets.notesPlayerFlashUrl
                } else {
                    this.assetNotesPlayerFlashUrl = this.assetNotesPlayerFlashUrl
                }
                if (aa.assets.fretBoardImagesPreUrl != null) {
                    this.assetFretBoardImagesPreUrl = aa.assets.fretBoardImagesPreUrl
                } else {
                    this.assetFretBoardImagesPreUrl = this.assetFretBoardImagesPreUrl
                }
                if (aa.assets.fretBoardSwfUrl != null) {
                    this.assetFretBoardSwfUrl = aa.assets.fretBoardSwfUrl
                } else {
                    this.assetFretBoardSwfUrl = this.assetFretBoardSwfUrl
                }
            }
        }
    };
    p["tabPro.model.ApplicationProxy"] = U.model.ApplicationProxy;
    U.model.ApplicationProxy.__name__ = ["tabPro", "model", "ApplicationProxy"];
    U.model.ApplicationProxy.__super__ = S.puremvc.haxe.patterns.proxy.Proxy;
    U.model.ApplicationProxy.prototype = v(S.puremvc.haxe.patterns.proxy.Proxy.prototype, {
        toggleFullScreen: function(q) {
            if (this.isFullScreen != q) {
                this.isFullScreen = q;
                this.sendNotification("ToggleFullScreen", this.isFullScreen)
            }
        },
        saveSettings: function(q) {
            if (D.isFunction(this._onSaveSettings)) {
                this._onSaveSettings(q)
            }
        },
        createTablature: function(Y) {
            if (B.indexOf(["ascii", "canvas", "svg"], this.canvasType, 0) != -1) {
                var q = this.facade.retrieveProxy("TabProxy");
                var X = new u.model.Tablature();
                var W = {
                    beginnerMode: this.beginnerMode,
                    scalableTabOffsets: this.scalableTabOffsets,
                    drawDurations: this._settingsProxy.getOption(U.model.settings.SettingsOption.drawDurations),
                    multipleInstance: q.instanceId > 0 ? true : false
                };
                X.configure(W);
                Y(X);
                return X
            } else {
                if (this.canvasType == "flash") {
                    return new U.model.FlashTablature(U.model.ApplicationProxy.CANVAS_ID, 992, 650, Y)
                }
            }
            return null
        },
        applicationReady: function() {
            var q = this;
            if (D.isFunction(this._onApplicationReady)) {
                m.Timer.delay(function() {
                    var X = q.facade.retrieveProxy("TabProxy");
                    var Y = new Array();
                    var aa = 0;
                    var Z = X.getSong().tracks;
                    while (aa < Z.length) {
                        var W = Z[aa];
                        ++aa;
                        Y.push({
                            instrumentMidiIndex: W.channel.instrument(),
                            name: O.trim(W.name).length > 0 ? O.trim(W.name) : Q.MidiInstrumentHelper.getInstrumentName(W.channel.instrument()),
                            selected: X.getCurrentTrack().number == W.number
                        })
                    }
                    q._onApplicationReady({
                        tracks: Y
                    }, X.instanceId)
                }, 20)
            }
        },
        flashNotesPlayerReady: function(q) {
            var W = this;
            if (D.isFunction(this._onFlashNotesPlayerReady)) {
                m.Timer.delay(function() {
                    W._onFlashNotesPlayerReady()
                }, 20)
            }
        },
        onFretboardReady: function() {
            var q = this;
            if (D.isFunction(this._onFretboardReady)) {
                m.Timer.delay(function() {
                    q._onFretboardReady()
                }, 20)
            }
        },
        __class__: U.model.ApplicationProxy
    });
    U.model.FlashObjectProxy = function(q) {};
    p["tabPro.model.FlashObjectProxy"] = U.model.FlashObjectProxy;
    U.model.FlashObjectProxy.__name__ = ["tabPro", "model", "FlashObjectProxy"];
    U.model.FlashObjectProxy.prototype = {
        callMethod: function(q, W) {
            if (this._initEnd) {
                if (W != null) {
                    this._swfObject[q].apply(this._swfObject, W)
                } else {
                    this._swfObject[q].apply(this._swfObject)
                }
            }
        },
        __class__: U.model.FlashObjectProxy
    };
    U.model.FlashFretBoard = H.tabPro.model.FlashFretBoard = function(X, q, Z, ab) {
        U.model.FlashObjectProxy.call(this, X);
        var W = U.AppFacade.getInstance().retrieveProxy("AppProxy");
        this._initEnd = false;
        var aa = new h.JQuery("." + X);
        if (aa.length > 0) {
            var Y = new h.SWFObject(W.assetFretBoardSwfUrl, "FretBoardSwf", Math.floor(q), Math.floor(Z), "11.2", "");
            Y.addVariable("readyCallback", "tabPro.model.FlashFretBoard.readyCallback");
            Y.addParam("wmode", "transparent");
            aa.append(Y.getSWFHTML());
            this._initBegin = true;
            U.model.FlashFretBoard._instance = this;
            this._loadComplete = ab
        }
    };
    p["tabPro.model.FlashFretBoard"] = U.model.FlashFretBoard;
    U.model.FlashFretBoard.__name__ = ["tabPro", "model", "FlashFretBoard"];
    U.model.FlashFretBoard.__interfaces__ = [C.IFretBoard];
    U.model.FlashFretBoard.readyCallback = function() {
        U.model.FlashFretBoard._instance._swfObject = window.document.getElementById("FretBoardSwf");
        U.model.FlashFretBoard._instance._initEnd = true;
        U.model.FlashFretBoard._instance.setCapo(U.model.FlashFretBoard._instance._capo);
        U.model.FlashFretBoard._instance._loadComplete(new P.net.LoaderStatus(P.net.LoaderStatus.OK))
    };
    U.model.FlashFretBoard.__super__ = U.model.FlashObjectProxy;
    U.model.FlashFretBoard.prototype = v(U.model.FlashObjectProxy.prototype, {
        render: function(W, X, q) {
            if (q == null) {
                q = 1
            }
            if (X == null) {
                X = false
            }
            this.callMethod("render")
        },
        setWidth: function(q) {
            this.callMethod("setWidth", [q])
        },
        setHeight: function(q) {
            this.callMethod("setHeight", [q])
        },
        pickStrings: function(W, q) {
            this.callMethod("pickStrings", [W, q])
        },
        futureStrings: function(W, q) {
            this.callMethod("futureStrings", [W, q])
        },
        setCapo: function(q) {
            this._capo = q;
            this.callMethod("setCapo", [q])
        },
        setStringCount: function(q) {
            this._stringCount = q;
            this.callMethod("setStringCount", [q])
        },
        onMousemove: function(q, W) {},
        configure: function(q) {},
        __class__: U.model.FlashFretBoard
    });
    U.model.FlashNotesPlayer = H.tabPro.model.FlashNotesPlayer = function(Y, Z, W, q) {
        if (q == null) {
            q = "NotesPlayerFlash"
        }
        if (W == null) {
            W = "NotesPlayerFlash.swf"
        }
        if (Y == null) {
            Y = 0
        }
        this._soundfontUrl = Z;
        this._currentTrack = 1;
        this._measureIndex = 0;
        this._beatIndex = 0;
        this._volume = 100;
        this._tempCoeff = 1;
        this._trackIsMute = new m.ds.StringMap();
        this._trackVolume = new m.ds.StringMap();
        this._pan = new m.ds.StringMap();
        this._instanceId = Y;
        var X = new h.SWFObject(W, "NotesPlayerFlashSwf" + (Y == null ? "null" : "" + Y), 1, 1, "11.2", "");
        this._state = new U.model.dto.NotesPlayerState(U.model.dto.NotesPlayerState.FLASH_NOT_READY);
        X.addVariable("readyCallback", (Y > 0 ? "TabProPlayer" + (Y == null ? "null" : "" + Y) + "." : "") + "tabPro.model.FlashNotesPlayer.statusChange");
        X.addParam("wmode", "transparent");
        X.addParam("allowscriptaccess", "always");
        new h.JQuery("#NotesPlayerFlash" + (Y == null ? "null" : "" + Y)).remove();
        new h.JQuery("body").append('<div id="NotesPlayerFlash' + (Y == null ? "null" : "" + Y) + '" style="position: fixed; top: 0; left: 0; width: 1px; height:1px; opacity: 0;"></div>');
        X.write("NotesPlayerFlash" + (Y == null ? "null" : "" + Y));
        this._stateCallbackList = new Array();
        U.model.FlashNotesPlayer._instance = this
    };
    p["tabPro.model.FlashNotesPlayer"] = U.model.FlashNotesPlayer;
    U.model.FlashNotesPlayer.__name__ = ["tabPro", "model", "FlashNotesPlayer"];
    U.model.FlashNotesPlayer.__interfaces__ = [U.interfaces.INotesPlayer];
    U.model.FlashNotesPlayer.statusChange = function(q) {
        U.model.FlashNotesPlayer._instance.dispatchState(q)
    };
    U.model.FlashNotesPlayer.playCallback = function(W, X, q) {
        U.model.FlashNotesPlayer._instance._playCallback(W, X, q)
    };
    U.model.FlashNotesPlayer.prototype = {
        setSongData: function(q) {
            this._songData = q;
            if (this.isSoundFontLoaded()) {
                this._swfObject.setSong(q.b)
            }
        },
        applySongFilters: function(q) {
            this._songFilters = q;
            if (this.isSoundFontLoaded()) {
                this._swfObject.applySongFilters(this._songFilters)
            }
        },
        monitorTrack: function(q) {
            this._currentTrack = q;
            if (this._state.stateCode >= U.model.dto.NotesPlayerState.READY) {
                this._swfObject.monitorTrack(q)
            }
        },
        play: function() {
            if (this.isSongAccepted()) {
                this.monitorTrack(this._currentTrack);
                this.setVolume(this._volume);
                var Y = this._swfObject.getTrackCount();
                var aa = {
                    tracks: []
                };
                var Z = 0;
                while (Z < Y) {
                    var q = Z++;
                    var X = q + 1;
                    var W = {
                        trackNumber: X,
                        mute: this._trackIsMute.get(X == null ? "null" : "" + X),
                        volume: this._trackVolume.get(X == null ? "null" : "" + X)
                    };
                    aa.tracks.push(W)
                }
                this._swfObject.startPlay(aa);
                this.setTempCoeff(this._tempCoeff)
            }
        },
        changePosition: function(q, W) {
            this._measureIndex = q;
            this._beatIndex = W;
            if (this.isSongAccepted()) {
                this._swfObject.changePosition({
                    trackNumber: this._currentTrack,
                    measureIndex: q,
                    beatIndex: W
                })
            }
        },
        changePositionMs: function(q) {
            this._timePosition = q;
            if (this.isSongAccepted()) {
                this._swfObject.changePositionMs(q)
            }
        },
        stop: function() {
            if (this._state.stateCode == U.model.dto.NotesPlayerState.START_PLAY) {
                this._swfObject.pausePlay()
            }
        },
        setVolume: function(q) {
            this._volume = q;
            if (this.isSongAccepted()) {
                this._swfObject.setVolume(q)
            }
        },
        getVolume: function() {
            return this._volume
        },
        setTrackVolume: function(q, W) {
            this._trackVolume.set(q == null ? "null" : "" + q, W);
            if (this._state.stateCode >= U.model.dto.NotesPlayerState.START_PLAY) {
                this._swfObject.setTrackVolume(q, W)
            }
        },
        getTrackVolume: function(q) {
            if (this.isSongAccepted()) {
                return this._swfObject.getTrackVolume(q)
            }
            return -1
        },
        setTrackMute: function(q, W) {
            this._trackIsMute.set(q == null ? "null" : "" + q, W);
            if (this._state.stateCode >= U.model.dto.NotesPlayerState.START_PLAY) {
                this._swfObject.setTrackMute(q, W)
            }
        },
        setTrackPan: function(q, W) {
            this._pan.set(q == null ? "null" : "" + q, W);
            if (this._state.stateCode >= U.model.dto.NotesPlayerState.START_PLAY) {
                this._swfObject.setTrackPan(q, W)
            }
        },
        getTrackPan: function(q) {
            if (this.isSongAccepted()) {
                return this._swfObject.getTrackPan(q)
            }
            if (this._pan.exists(q == null ? "null" : "" + q)) {
                return this._pan.get(q == null ? "null" : "" + q)
            }
            return 64
        },
        setTrackChorus: function(q, W) {
            if (this._state.stateCode >= U.model.dto.NotesPlayerState.START_PLAY) {
                this._swfObject.setTrackChorus(q, W)
            }
        },
        setTempCoeff: function(q) {
            this._tempCoeff = q;
            if (this.isSongAccepted()) {
                this._swfObject.setTempCoeff(q)
            }
        },
        loadSoundfont: function() {
            if (this._state.stateCode >= U.model.dto.NotesPlayerState.READY) {
                this._swfObject.loadSoundfont(this._soundfontUrl)
            }
        },
        changePreset: function(q, W) {
            if (this.isSongAccepted()) {
                this._swfObject.changePreset(q, W)
            }
        },
        changePitch: function(q) {
            if (this.isSongAccepted()) {
                this._swfObject.changePitch(q)
            }
        },
        transposeSong: function(W, q) {
            this._swfObject.transposeSong(W)
        },
        setMetronomeActivity: function(q) {
            this._metronome = q;
            if (this._state.stateCode >= U.model.dto.NotesPlayerState.READY) {
                this._swfObject.setMetronomeActivity(q)
            }
        },
        setPlayCallback: function(q) {
            this._playCallback = q
        },
        setStateCallback: function(q) {
            if (B.indexOf(this._stateCallbackList, q, 0) == -1) {
                this._stateCallbackList.push(q)
            }
        },
        getState: function() {
            return this._state
        },
        dispatchState: function(W) {
            this._state.stateCode = W.stateCode;
            this._state.message = W.message;
            var Z = W.stateCode;
            switch (Z) {
                case U.model.dto.NotesPlayerState.READY:
                    this._swfObject = new h.JQuery("#NotesPlayerFlashSwf" + A.string(this._instanceId))[0];
                    this._swfObject.setPlayCallback((this._instanceId > 0 ? "TabProPlayer" + A.string(this._instanceId) + "." : "") + "tabPro.model.FlashNotesPlayer.playCallback");
                    this.loadSoundfont();
                    break;
                case U.model.dto.NotesPlayerState.SOUNDFONT_GENERAL_XML_LOADED:
                    this._soundFontLoaded = true;
                    if (this._songData != null) {
                        this.setSongData(this._songData);
                        this.applySongFilters(this._songFilters)
                    }
                    break;
                case U.model.dto.NotesPlayerState.SOUNDFONT_PRESETS_LOADED:
                    this._songAccepted = true;
                    if (this._metronome) {
                        this._swfObject.setMetronomeActivity(true)
                    }
                    break;
                case U.model.dto.NotesPlayerState.START_PLAY:
                    break;
                case U.model.dto.NotesPlayerState.END_PLAY:
                    break;
                case U.model.dto.NotesPlayerState.ERROR:
                    break
            }
            if (this._stateCallbackList.length > 0) {
                var Y = 0;
                var q = this._stateCallbackList;
                while (Y < q.length) {
                    var X = q[Y];
                    ++Y;
                    X(W)
                }
            }
        },
        isPlay: function() {
            return this._state.stateCode == U.model.dto.NotesPlayerState.START_PLAY
        },
        getPresetList: function(q) {
            if (q == null) {
                q = 0
            }
            if (this.isSoundFontLoaded()) {
                return this._swfObject.getPresetList(q)
            }
            return null
        },
        playNote: function(Y, X, W, q) {
            if (this.isSongAccepted()) {
                this._swfObject.playNote(Y, X, W, q)
            }
            return null
        },
        setLoop: function(W, q) {
            if (q == null) {
                q = -1
            }
            if (W == null) {
                W = 0
            }
            if (this.isSongAccepted()) {
                this._swfObject.setLoop(W, q)
            }
        },
        isSoundFontLoaded: function() {
            return this._soundFontLoaded
        },
        isSongAccepted: function() {
            return this._songAccepted
        },
        reset: function() {},
        setEqualizerParameters: function(q) {},
        __class__: U.model.FlashNotesPlayer
    };
    var u = {};
    u.model = {};
    u.model.ITablature = function() {};
    p["tabRender.model.ITablature"] = u.model.ITablature;
    u.model.ITablature.__name__ = ["tabRender", "model", "ITablature"];
    u.model.ITablature.prototype = {
        __class__: u.model.ITablature
    };
    U.model.FlashTablature = H.tabPro.model.FlashTablature = function(W, Z, q, Y) {
        this._trackNum = 1;
        this._measureIndex = 0;
        this._beatIndex = 0;
        U.model.FlashTablature._initEnd = false;
        this._ready = Y;
        U.model.FlashTablature._instance = this;
        var aa = new h.JQuery("." + W);
        if (aa.length > 0) {
            var X = new h.SWFObject("TabRender.swf", "TabrenderSwf", Math.floor(Z), Math.floor(q), "11.2", "");
            X.addVariable("readyCallback", "tabPro.model.FlashTablature.readyCallback");
            X.addParam("wmode", "transparent");
            aa.html(X.getSWFHTML());
            U.model.FlashTablature._initBegin = true
        }
    };
    p["tabPro.model.FlashTablature"] = U.model.FlashTablature;
    U.model.FlashTablature.__name__ = ["tabPro", "model", "FlashTablature"];
    U.model.FlashTablature.__interfaces__ = [u.model.ITablature];
    U.model.FlashTablature.readyCallback = function() {
        U.model.FlashTablature._swfObject = window.document.getElementById("TabrenderSwf");
        U.model.FlashTablature._initEnd = true;
        U.model.FlashTablature._swfObject.setWidth(U.model.FlashTablature._instance.width);
        U.model.FlashTablature._swfObject.setHeight(U.model.FlashTablature._instance.height);
        if (U.model.FlashTablature._instance._songData != null) {
            U.model.FlashTablature._swfObject.setSongData(U.model.FlashTablature._instance._songData.b);
            U.model.FlashTablature._swfObject.showTrack(U.model.FlashTablature._instance._trackNum);
            U.model.FlashTablature._swfObject.doLayout();
            U.model.FlashTablature._swfObject.updateCanvas()
        }
        if (U.model.FlashTablature._instance._ready != null) {
            U.model.FlashTablature._instance._ready(U.model.FlashTablature._instance)
        }
    };
    U.model.FlashTablature.dragHandler = function(W, Y, q, X) {
        U.model.FlashTablature._listener.onDrag(W, Y, q, X)
    };
    U.model.FlashTablature.clickHandler = function(q, X, W) {
        U.model.FlashTablature._listener.onCanvasClick(q, X, W)
    };
    U.model.FlashTablature.keypressHandler = function(q) {
        U.model.FlashTablature._listener.onKeyPress(q)
    };
    U.model.FlashTablature.prototype = {
        setBeginnerMode: function(q) {
            this.beginnerMode = q
        },
        setCanvas: function(q) {
            this._canvas = q
        },
        setCursorCanvas: function(q) {},
        addTitles: function() {},
        render: function() {
            if (U.model.FlashTablature._initEnd) {
                U.model.FlashTablature._swfObject.updateCanvas()
            }
        },
        animateCursor: function(W, q) {
            if (W == null) {
                W = 1
            }
            if (U.model.FlashTablature._initEnd) {
                U.model.FlashTablature._swfObject.animateCursor(W)
            }
        },
        stopAnimation: function() {
            if (U.model.FlashTablature._initEnd) {
                U.model.FlashTablature._swfObject.stopAnimation()
            }
        },
        moveToBeatIndex: function(W, X, q) {
            if (q == null) {
                q = true
            }
            if (U.model.FlashTablature._initEnd) {
                U.model.FlashTablature._swfObject.moveToBeatIndex(W, X)
            }
        },
        moveToTime: function(q) {
            if (U.model.FlashTablature._initEnd) {
                U.model.FlashTablature._swfObject.moveToTime(q)
            }
        },
        setSongData: function(q, W) {
            if (W == null) {
                W = false
            }
            if (U.model.FlashTablature._initEnd) {
                U.model.FlashTablature._swfObject.setSongData(q.b, W)
            }
            this._songData = q
        },
        showTrack: function(q) {
            if (U.model.FlashTablature._initEnd) {
                U.model.FlashTablature._swfObject.showTrack(q)
            }
            this._trackNum = q
        },
        doLayout: function() {
            if (U.model.FlashTablature._initEnd) {
                U.model.FlashTablature._swfObject.doLayout()
            }
        },
        resetLayout: function() {
            if (U.model.FlashTablature._initEnd) {
                U.model.FlashTablature._swfObject.resetLayout()
            }
        },
        set_width: function(q) {
            this.width = q;
            if (U.model.FlashTablature._initEnd) {
                U.model.FlashTablature._swfObject.setWidth(q)
            }
            return q
        },
        set_height: function(q) {
            this.height = q;
            if (U.model.FlashTablature._initEnd) {
                U.model.FlashTablature._swfObject.setHeight(q)
            }
            return q
        },
        scrollOnDelta: function(W, q) {
            if (q == null) {
                q = true
            }
            if (U.model.FlashTablature._initEnd) {
                U.model.FlashTablature._swfObject.scroll(W)
            }
        },
        getCurrentMeasureIndex: function() {
            if (U.model.FlashTablature._initEnd) {
                return U.model.FlashTablature._swfObject.getMeasure()
            } else {
                return this._measureIndex
            }
        },
        getCurrentBeatIndex: function() {
            if (U.model.FlashTablature._initEnd) {
                return U.model.FlashTablature._swfObject.getBeat()
            } else {
                return this._beatIndex
            }
        },
        moveToNextBeat: function() {
            if (U.model.FlashTablature._initEnd) {
                U.model.FlashTablature._swfObject.moveToNextBeat()
            }
        },
        moveToPrevBeat: function() {
            if (U.model.FlashTablature._initEnd) {
                U.model.FlashTablature._swfObject.moveToPrevBeat()
            }
        },
        moveToNextStave: function() {
            if (U.model.FlashTablature._initEnd) {
                U.model.FlashTablature._swfObject.moveToNextStave()
            }
        },
        moveToPrevStave: function() {
            if (U.model.FlashTablature._initEnd) {
                U.model.FlashTablature._swfObject.moveToPrevStave()
            }
        },
        getTrackNumber: function() {
            if (U.model.FlashTablature._initEnd) {
                return U.model.FlashTablature._swfObject.getTrackNumber()
            } else {
                return this._trackNum
            }
        },
        moveToPosition: function(q, W) {
            if (U.model.FlashTablature._initEnd) {
                U.model.FlashTablature._swfObject.moveToPosition(q, W)
            }
        },
        getViewportY: function() {
            if (U.model.FlashTablature._initEnd) {
                return U.model.FlashTablature._swfObject.getViewportY()
            }
            return 0
        },
        getViewportX: function() {
            if (U.model.FlashTablature._initEnd) {
                return U.model.FlashTablature._swfObject.getViewportX()
            }
            return 0
        },
        getRealHeight: function() {
            if (U.model.FlashTablature._initEnd) {
                return U.model.FlashTablature._swfObject.getRealHeight()
            }
            return 0
        },
        setScale: function(q) {
            if (U.model.FlashTablature._initEnd) {
                return U.model.FlashTablature._swfObject.setScale(q)
            }
            return 0
        },
        scrollToPosition: function(q, W) {
            if (U.model.FlashTablature._initEnd) {
                U.model.FlashTablature._swfObject.scrollToPosition(q, W)
            }
        },
        scrollToY: function(W, q) {
            if (q == null) {
                q = true
            }
        },
        scrollToIndex: function(X, Y, W, q) {
            if (q == null) {
                q = true
            }
            if (W == null) {
                W = true
            }
            if (U.model.FlashTablature._initEnd) {
                U.model.FlashTablature._swfObject.scrollToIndex(X, Y)
            }
        },
        scrollToCurrentBeat: function(W, q) {
            if (q == null) {
                q = true
            }
            if (W == null) {
                W = true
            }
            if (U.model.FlashTablature._initEnd) {
                U.model.FlashTablature._swfObject.scrollToCurrentBeat()
            }
        },
        selectRange: function(Y, X, W, q) {
            if (U.model.FlashTablature._initEnd) {
                U.model.FlashTablature._swfObject.selectRange(Y, X, W, q)
            }
        },
        clearSelection: function() {
            if (U.model.FlashTablature._initEnd) {
                U.model.FlashTablature._swfObject.clearSelection()
            }
        },
        selectRangeXY: function(W, q, Y, X) {
            if (U.model.FlashTablature._initEnd) {
                U.model.FlashTablature._swfObject.selectRangeXY(W, q, Y, X)
            }
        },
        isPositionOnLeftMarker: function(q, W) {
            if (U.model.FlashTablature._initEnd) {
                return U.model.FlashTablature._swfObject.isPositionOnLeftMarker(q, W)
            }
            return false
        },
        isPositionOnRightMarker: function(q, W) {
            if (U.model.FlashTablature._initEnd) {
                return U.model.FlashTablature._swfObject.isPositionOnRightMarker(q, W)
            }
            return false
        },
        getTrackPositionXY: function(q, W) {
            if (U.model.FlashTablature._initEnd) {
                return U.model.FlashTablature._swfObject.getTrackPositionXY(q, W)
            }
            return null
        },
        highlightPositionByCoords: function(q, X, W) {},
        highlightPositionByIndexes: function(W, X, q) {},
        getCurrentTrackPosition: function() {
            if (U.model.FlashTablature._initEnd) {
                return U.model.FlashTablature._swfObject.getCurrentTrackPosition()
            }
            return new V.TrackPosition(1, 0, 0)
        },
        expandRepeats: function(q) {
            if (U.model.FlashTablature._initEnd) {
                U.model.FlashTablature._swfObject.expandRepeats(q)
            }
            return null
        },
        transposeSong: function(q) {},
        showGhostMeasures: function(q) {
            if (U.model.FlashTablature._initEnd) {
                U.model.FlashTablature._swfObject.showGhostMeasures(q)
            }
        },
        highlightActiveNotes: function(q) {
            if (U.model.FlashTablature._initEnd) {
                U.model.FlashTablature._swfObject.highlightActiveNotes(q)
            }
        },
        setListener: function(q) {
            U.model.FlashTablature._listener = q
        },
        checkChordClick: function(q, W) {
            return null
        },
        __class__: U.model.FlashTablature,
        __properties__: {
            set_height: "set_height",
            set_width: "set_width"
        }
    };
    U.model.HitMapTabProxy = function() {
        S.puremvc.haxe.patterns.proxy.Proxy.call(this);
        this.proxyName = "HitMapTabProxy";
        this._tabProxy = this.facade.retrieveProxy("TabProxy");
        this._trackNumberBeforeOn = -1;
        this._measureNumberTmp = -1
    };
    p["tabPro.model.HitMapTabProxy"] = U.model.HitMapTabProxy;
    U.model.HitMapTabProxy.__name__ = ["tabPro", "model", "HitMapTabProxy"];
    U.model.HitMapTabProxy.__super__ = S.puremvc.haxe.patterns.proxy.Proxy;
    U.model.HitMapTabProxy.prototype = v(S.puremvc.haxe.patterns.proxy.Proxy.prototype, {
        setSourceData: function(q) {
            this._sourceData = q.tabDataOnBasisOfHits
        },
        getMergedData: function() {
            return this._mergedData
        },
        mergeData: function() {
            var ab = this._tabProxy.getTracks().length;
            var X = this._tabProxy.getTracks()[0].measures.length;
            this._mergedData = {};
            var ac = 1;
            var Y = X + 1;
            while (ac < Y) {
                var af = ac++;
                var ae = 0;
                var ad = 0;
                if (this._sourceData != null) {
                    var Z = 1;
                    var aa = ab + 1;
                    while (Z < aa) {
                        var W = Z++;
                        var q;
                        if (this._sourceData[W] != null && this._sourceData[W][af] != null) {
                            q = A.parseFloat(this._sourceData[W][af])
                        } else {
                            q = 0
                        }
                        if (q > ad && !this._tabProxy.getSong().tracks[W - 1].measures[af - 1].isRest()) {
                            ae = W;
                            ad = q
                        }
                    }
                }
                this._mergedData[af] = {
                    track: ae,
                    value: ad
                }
            }
        },
        isPopularMeasure: function(q, X) {
            var W = false;
            if (this._mergedData != null) {
                W = this._mergedData[X].track == q && this._mergedData[X].value > 0
            }
            return W
        },
        on: function(q) {
            if (this._trackNumberBeforeOn == -1) {
                this._trackNumberBeforeOn = this._tabProxy.getCurrentTrack().number
            }
            if (this._measureNumberTmp != q) {
                this._measureNumberTmp = q;
                this._lastHitMapTabDto = {
                    trackNumber: this._mergedData[q].track,
                    measureNumber: q
                };
                this.sendNotification("HitMapTabOn", this._lastHitMapTabDto)
            }
        },
        off: function() {
            this._measureNumberTmp = -1;
            this._lastHitMapTabDto = null;
            this.sendNotification("HitMapTabOff");
            this._trackNumberBeforeOn = -1
        },
        getLastHitMapTabDto: function() {
            return this._lastHitMapTabDto
        },
        getTrackNumberBeforeOn: function() {
            return this._trackNumberBeforeOn
        },
        setTrackNumberBeforeOn: function(q) {
            this._trackNumberBeforeOn = q
        },
        __class__: U.model.HitMapTabProxy
    });
    U.model.Html5NotesPlayer = function(X, Y, q, W) {
        this._soundfontUrl = Y;
        this._currentTrack = 1;
        this._measureIndex = 0;
        this._beatIndex = 0;
        this._volume = 100;
        this._tempCoeff = 1;
        this._trackIsMute = new m.ds.StringMap();
        this._trackVolume = new m.ds.StringMap();
        this._pan = new m.ds.StringMap();
        this._instanceId = X;
        this._playerBridge = new window.PlayerBridge();
        this._state = new U.model.dto.NotesPlayerState(U.model.dto.NotesPlayerState.READY);
        this._playCallback = q;
        this._playerBridge.setPlayCallback(q);
        this._stateCallbackList = new Array();
        this._stateCallbackList.push(W);
        this._playerBridge.setNotifyCallback(s(this, this.dispatchState))
    };
    p["tabPro.model.Html5NotesPlayer"] = U.model.Html5NotesPlayer;
    U.model.Html5NotesPlayer.__name__ = ["tabPro", "model", "Html5NotesPlayer"];
    U.model.Html5NotesPlayer.__interfaces__ = [U.interfaces.INotesPlayer];
    U.model.Html5NotesPlayer.playCallback = function(W, X, q) {};
    U.model.Html5NotesPlayer.prototype = {
        dispatchState: function(W) {
            this._state.stateCode = W.stateCode;
            this._state.message = W.message;
            var Z = W.stateCode;
            switch (Z) {
                case U.model.dto.NotesPlayerState.READY:
                    this.loadSoundfont();
                    break;
                case U.model.dto.NotesPlayerState.SOUNDFONT_GENERAL_XML_LOADED:
                    this._soundFontLoaded = true;
                    this.dispatchState(new U.model.dto.NotesPlayerState(U.model.dto.NotesPlayerState.SOUNDFONT_PRESETS_LOADED));
                    this.dispatchState(new U.model.dto.NotesPlayerState(U.model.dto.NotesPlayerState.SOUNDFONT_PRESETS_PROGRESS_LOAD, "1:1:1"));
                    break;
                case U.model.dto.NotesPlayerState.SOUNDFONT_PRESETS_LOADED:
                    this._songAccepted = true;
                    if (this._metronome) {
                        this._playerBridge.setMetronomeActivity(true)
                    }
                    break;
                case U.model.dto.NotesPlayerState.START_PLAY:
                    break;
                case U.model.dto.NotesPlayerState.END_PLAY:
                    break;
                case U.model.dto.NotesPlayerState.ERROR:
                    break
            }
            if (this._stateCallbackList.length > 0) {
                var Y = 0;
                var q = this._stateCallbackList;
                while (Y < q.length) {
                    var X = q[Y];
                    ++Y;
                    X(W)
                }
            }
        },
        applySongFilters: function(q) {},
        changePitch: function(q) {
            this._playerBridge.changePitch(q)
        },
        changePosition: function(q, W) {
            this._playerBridge.changePosition(q, W)
        },
        changePositionMs: function(q) {
            this._playerBridge.changePositionMs(q)
        },
        setSongData: function(q) {},
        setSong: function(q) {
            this._playerBridge.initSong(q)
        },
        monitorTrack: function(q) {
            this._currentTrack = q;
            this._playerBridge.monitorTrack(q)
        },
        play: function() {
            if (this._soundFontLoaded) {
                this.monitorTrack(this._currentTrack);
                this.setVolume(this._volume);
                var Z = this._trackIsMute.keys();
                while (Z.hasNext()) {
                    var q = Z.next();
                    var Y = this._trackIsMute.get(q);
                    if (Y) {
                        this._playerBridge.setTrackMute(A.parseInt(q), Y)
                    }
                }
                var X = this._trackVolume.keys();
                while (X.hasNext()) {
                    var W = X.next();
                    this._playerBridge.setTrackVolume(A.parseInt(W), this._trackVolume.get(W))
                }
                this._playerBridge.play();
                this.setTempCoeff(this._tempCoeff)
            }
        },
        stop: function() {
            if (this._state.stateCode == U.model.dto.NotesPlayerState.START_PLAY) {
                this._playerBridge.stop()
            }
        },
        setVolume: function(q) {
            this._volume = q;
            if (this._soundFontLoaded) {
                this._playerBridge.setVolume(q)
            }
        },
        getVolume: function() {
            console.log("method: getVolume");
            return 100
        },
        setTrackVolume: function(q, W) {
            this._trackVolume.set(q == null ? "null" : "" + q, W);
            this._playerBridge.setTrackVolume(q, W)
        },
        getTrackVolume: function(q) {
            console.log("method: getTrackVolume");
            return 100
        },
        setTrackPan: function(q, W) {
            this._pan.set(q == null ? "null" : "" + q, W);
            this._playerBridge.setTrackPan(q == null ? "null" : "" + q, W)
        },
        getTrackPan: function(q) {
            console.log("method: getTrackPan");
            return 64
        },
        setTrackChorus: function(q, W) {
            console.log("method: setTrackChorus")
        },
        setTrackMute: function(q, W) {
            this._trackIsMute.set(q == null ? "null" : "" + q, W);
            if (this._soundFontLoaded) {
                this._playerBridge.setTrackMute(q, W)
            }
        },
        setTempCoeff: function(q) {
            this._tempCoeff = q;
            this._playerBridge.setTempCoeff(q)
        },
        loadSoundfont: function() {
            this._playerBridge.loadSoundfont(this._soundfontUrl)
        },
        changePreset: function(q, W) {
            this._playerBridge.changePreset(q, W)
        },
        setPlayCallback: function(q) {
            this._playCallback = q
        },
        setStateCallback: function(q) {
            if (B.indexOf(this._stateCallbackList, q, 0) == -1) {
                this._stateCallbackList.push(q)
            }
        },
        getState: function() {
            console.log("method: getState");
            return null
        },
        isPlay: function() {
            console.log("method: isPlay");
            return null
        },
        getPresetList: function(q) {
            if (q == null) {
                q = 0
            }
            console.log("method: getPresetList");
            return null
        },
        setMetronomeActivity: function(q) {
            this._playerBridge.setMetronomeActivity(q)
        },
        transposeSong: function(W, q) {
            this._playerBridge.replaceSong(q)
        },
        playNote: function(Y, X, W, q) {
            this._playerBridge.playNote(Y, X, W, q)
        },
        switchEqualizer: function(q) {
            this._playerBridge.switchEqualizer(q)
        },
        setLoop: function(W, q) {
            if (q == null) {
                q = -1
            }
            if (W == null) {
                W = 0
            }
            this._playerBridge.setLoop(W, q)
        },
        reset: function() {
            this._soundFontLoaded = false
        },
        setEqualizerParameters: function(q) {
            this._playerBridge.setEqualizerParameters(q)
        },
        __class__: U.model.Html5NotesPlayer
    };
    U.model.InternationalizationProxy = function(q) {
        S.puremvc.haxe.patterns.proxy.Proxy.call(this);
        this.proxyName = "InternationalizationProxy";
        this._i18nResources = q
    };
    p["tabPro.model.InternationalizationProxy"] = U.model.InternationalizationProxy;
    U.model.InternationalizationProxy.__name__ = ["tabPro", "model", "InternationalizationProxy"];
    U.model.InternationalizationProxy.__super__ = S.puremvc.haxe.patterns.proxy.Proxy;
    U.model.InternationalizationProxy.prototype = v(S.puremvc.haxe.patterns.proxy.Proxy.prototype, {
        __: function(q) {
            var W = D.field(this._i18nResources, q);
            if (W == null) {
                return q
            } else {
                return W
            }
        },
        __class__: U.model.InternationalizationProxy
    });
    U.model.KeyboardProcessor = function() {};
    p["tabPro.model.KeyboardProcessor"] = U.model.KeyboardProcessor;
    U.model.KeyboardProcessor.__name__ = ["tabPro", "model", "KeyboardProcessor"];
    U.model.KeyboardProcessor.isShiftPressed = function() {
        return U.model.KeyboardProcessor._shiftPressed
    };
    U.model.KeyboardProcessor.isCapturedKey = function(q) {
        var ab = q.keyCode;
        var W = null;
        if (q.type == "keydown") {
            W = U.model.dto.KeyAction.DOWN
        } else {
            if (q.type == "keyup") {
                W = U.model.dto.KeyAction.UP
            } else {
                if (q.type == "keypress") {
                    W = U.model.dto.KeyAction.PRESS
                }
            }
        }
        var Z = q.ctrlKey || q.metaKey;
        var Y = [8, 16, 17, 32, 37, 38, 39, 40, 49, 50, 51, 52, 53, 54, 55, 56, 57, 67, 70, 76, 77, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 109];
        var ad = true;
        var aa = q.target;
        var ac = aa.tagName;
        var X = aa.getAttribute("contenteditable") == "true";
        if (ab == 16) {
            if (W == U.model.dto.KeyAction.UP) {
                U.model.KeyboardProcessor._shiftPressed = false
            } else {
                U.model.KeyboardProcessor._shiftPressed = true
            }
            ad = false
        } else {
            if (Z && (ab == 70 || ab == 76)) {
                ad = false
            } else {
                if (Z && (ab == 107 || ab == 109)) {
                    ad = false
                } else {
                    if (B.indexOf(Y, ab, 0) == -1) {
                        ad = false
                    } else {
                        if ((function(ag) {
                                var af;
                                var ae = ac.toLowerCase();
                                af = B.indexOf(["input", "select", "textarea"], ae, 0);
                                return af
                            }(this)) != -1 || X) {
                            ad = false
                        }
                    }
                }
            }
        }
        return ad
    };
    U.model.LoadingStatsProxy = function(W) {
        S.puremvc.haxe.patterns.proxy.Proxy.call(this);
        this.proxyName = "LoadingStatsProxy";
        if (W) {
            this._onStageLoad = W
        }
        var q = {
            stage: U.model.dto.Stage.Application,
            phase: U.model.dto.StagePhase.END
        };
        this.stageLoad(q)
    };
    p["tabPro.model.LoadingStatsProxy"] = U.model.LoadingStatsProxy;
    U.model.LoadingStatsProxy.__name__ = ["tabPro", "model", "LoadingStatsProxy"];
    U.model.LoadingStatsProxy.__super__ = S.puremvc.haxe.patterns.proxy.Proxy;
    U.model.LoadingStatsProxy.prototype = v(S.puremvc.haxe.patterns.proxy.Proxy.prototype, {
        stageLoad: function(q) {
            var W = this;
            if (D.isFunction(this._onStageLoad)) {
                m.Timer.delay(function() {
                    W._onStageLoad(q.stage[0], (function(Z) {
                        var X;
                        var Y = q.phase;
                        X = (function(ab) {
                            var aa;
                            switch (Y[1]) {
                                case 0:
                                    aa = true;
                                    break;
                                default:
                                    aa = false
                            }
                            return aa
                        }(Z));
                        return X
                    }(this)))
                }, 20)
            }
        },
        __class__: U.model.LoadingStatsProxy
    });
    U.model.SettingsProxy = function(q) {
        S.puremvc.haxe.patterns.proxy.Proxy.call(this);
        this.fixCookie();
        this.proxyName = "SettingsProxy";
        this._callbackListOnSettingsOptionChange = new Array();
        this._settingsHtml5 = new U.model.settings.SettingsHtml5(q)
    };
    p["tabPro.model.SettingsProxy"] = U.model.SettingsProxy;
    U.model.SettingsProxy.__name__ = ["tabPro", "model", "SettingsProxy"];
    U.model.SettingsProxy.__super__ = S.puremvc.haxe.patterns.proxy.Proxy;
    U.model.SettingsProxy.prototype = v(S.puremvc.haxe.patterns.proxy.Proxy.prototype, {
        fixCookie: function() {
            var q = h.Cookie.get("settingsXml");
            if (q != null) {
                h.Cookie.remove("settingsXml");
                h.Cookie.remove("settingsXml", "/")
            }
            if (h.Browser.getLocalStorage() != null) {
                try {
                    var W = h.Cookie.get("settingsHtml5");
                    if (W != null) {
                        h.Browser.getLocalStorage().setItem("settingsHtml5", W);
                        h.Cookie.remove("settingsHtml5");
                        h.Cookie.remove("settingsHtml5", "/")
                    }
                } catch (X) {}
            }
        },
        getOption: function(q) {
            return this._settingsHtml5.getOption(q)
        },
        setOption: function(W, aa, q, X) {
            if (X == null) {
                X = true
            }
            if (q == null) {
                q = true
            }
            var Y = aa;
            if (R.enumEq(W, U.model.settings.SettingsOption.scale)) {
                Y = aa = U.model.settings.Settings.checkScale(aa)
            } else {
                if (R.enumEq(W, U.model.settings.SettingsOption.volume)) {
                    aa = U.model.settings.Settings.checkVolume(aa);
                    Y = Math.round(aa * U.model.settings.Settings.MAX_VOLUME)
                }
            }
            this._settingsHtml5.setOption(W, aa, X);
            var ab = 0;
            var Z = this._callbackListOnSettingsOptionChange;
            while (ab < Z.length) {
                var ac = Z[ab];
                ++ab;
                ac(W, Y)
            }
            if (q) {
                this._notifySettingsOptionChanged(W, aa)
            }
        },
        onSettingsOptionChange: function(q) {
            if (B.indexOf(this._callbackListOnSettingsOptionChange, q, 0) == -1) {
                this._callbackListOnSettingsOptionChange.push(q)
            }
        },
        _notifySettingsOptionChanged: function(q, W) {
            if (R.enumEq(q, U.model.settings.SettingsOption.scale)) {
                this.sendNotification("ScaleChanged", W)
            }
        },
        __class__: U.model.SettingsProxy
    });
    U.model.TabProxy = function(q) {
        S.puremvc.haxe.patterns.proxy.Proxy.call(this);
        this.proxyName = "TabProxy";
        this._settingsProxy = this.facade.retrieveProxy("SettingsProxy");
        this._settingsProxy.onSettingsOptionChange(s(this, this._settingsOptionChanged));
        this._tempCoeff = U.model.TabProxy.DEFAULT_TEMP;
        this._demoTime = U.model.TabProxy.DEFAULT_DEMO_DURATION;
        if (q == null) {
            q = {}
        } else {
            q = q
        }
        var aa = q.params;
        var X = q.setts;
        this._transposeTimer = new m.Timer(250);
        this.notesPlayerType = U.model.dto.NotesPlayerType.flash;
        this.instanceId = 0;
        if (aa != null) {
            var Z = 0;
            var Y = R.getEnumConstructs(U.model.dto.NotesPlayerType);
            while (Z < Y.length) {
                var W = Y[Z];
                ++Z;
                if (aa.notesPlayerType == W) {
                    this.notesPlayerType = R.createEnum(U.model.dto.NotesPlayerType, W, null)
                }
            }
            this._onSoundsLoaded = aa.onSoundsLoaded;
            this._onEndPlay = aa.onEndPlay;
            this._onStartPlay = aa.onStartPlay;
            this._onStopPlay = aa.onStopPlay;
            this._onTrackChanged = aa.onTrackChanged;
            this._onTrackSoloChanged = aa.onTrackSoloChanged;
            this._onTabParseError = aa.onTabParseError;
            this._onPositionChanged = aa.onPositionChanged;
            this._demoMode = aa.demoMode;
            this._demoTime = aa.demoTime;
            this._autoPlay = aa.autoPlay;
            if (aa.instanceId != null) {
                this.instanceId = aa.instanceId
            } else {
                this.instanceId = 0
            }
        }
        this._autoScrollStrategyType = u.autoScroll.AutoScrollStrategyType.NAIDENOV_STRATEGY;
        if (X != null) {
            this._ghostMeasuresVisible = X.ghostMeasures;
            this._expandRepeats = X.expandRepeats;
            if (X.autoScrollStrategyType == u.autoScroll.AutoScrollStrategyType.USTINOV_STRATEGY[1]) {
                this._autoScrollStrategyType = u.autoScroll.AutoScrollStrategyType.USTINOV_STRATEGY
            } else {
                if (X.autoScrollStrategyType == u.autoScroll.AutoScrollStrategyType.NAIDENOV_STRATEGY[1]) {
                    this._autoScrollStrategyType = u.autoScroll.AutoScrollStrategyType.NAIDENOV_STRATEGY
                } else {
                    if (X.autoScrollStrategyType == u.autoScroll.AutoScrollStrategyType.GUITAR_PRO_STRATEGY[1]) {
                        this._autoScrollStrategyType = u.autoScroll.AutoScrollStrategyType.GUITAR_PRO_STRATEGY
                    }
                }
            }
        }
        this._isPlayOptionDisabled = true;
        if ((aa.songFilters instanceof Array) && aa.songFilters.__enum__ == null) {
            this._songFilters = aa.songFilters
        } else {
            this._songFilters = []
        }
        this._equalizerMode = U.model.dto.EqualizerMode.off
    };
    p["tabPro.model.TabProxy"] = U.model.TabProxy;
    U.model.TabProxy.__name__ = ["tabPro", "model", "TabProxy"];
    U.model.TabProxy.__super__ = S.puremvc.haxe.patterns.proxy.Proxy;
    U.model.TabProxy.prototype = v(S.puremvc.haxe.patterns.proxy.Proxy.prototype, {
        configure: function(q) {
            if (q.author != null) {
                this.author = q.author
            } else {
                this.author = ""
            }
            this.artistName = q.artistName;
            this.songName = q.songName;
            this._pitchNotificationShown = q.pitchNotificationShown;
            this._onPitchNotificationShow = q.onPitchNotificationShow;
            this._tabDataOnBasisOfHits = q.tabDataOnBasisOfHits;
            this.sendNotification("LoadTabConfigComplete")
        },
        reset: function() {
            this._isPlayOptionDisabled = true;
            this._equalizerMode = U.model.dto.EqualizerMode.off;
            if (this._player != null) {
                this._player.reset()
            }
        },
        isPlayOptionDisabled: function() {
            return this._isPlayOptionDisabled
        },
        getTracks: function() {
            return this._song.tracks
        },
        getTracklistTitles: function() {
            var X = new Array();
            var Y = 0;
            var W = this._song.tracks;
            while (Y < W.length) {
                var q = W[Y];
                ++Y;
                X.push(q.name)
            }
            return X
        },
        setTempCoeff: function(q) {
            if (q < 0.1) {
                q = 0.1
            }
            if (q > 1.5) {
                q = 1.5
            }
            if (this._player != null) {
                q = Math.round(q * 100) / 100;
                this._tempCoeff = q;
                this._player.setTempCoeff(q)
            }
            this.sendNotification("TempChanged", this._tempCoeff)
        },
        getTempCoeff: function() {
            return this._tempCoeff
        },
        _settingsOptionChanged: function(q, W) {
            if (this._player != null) {
                if (R.enumEq(q, U.model.settings.SettingsOption.volume)) {
                    this._player.setVolume(W)
                } else {
                    if (R.enumEq(q, U.model.settings.SettingsOption.metronome)) {
                        this._player.setMetronomeActivity(W)
                    }
                }
            }
        },
        setTrackSolo: function(W) {
            var X = this;
            var q = this._origSong.tracks[W.trackNumber - 1];
            if (q != null) {
                if (W.value) {
                    q.isMute = false;
                    q.isSolo = true
                } else {
                    q.isSolo = false
                }
                this.sendNotification("TrackSoloChanged", W);
                if (D.isFunction(this._onTrackSoloChanged)) {
                    m.Timer.delay(function() {
                        X._onTrackSoloChanged(W.trackNumber, W.value)
                    }, 20)
                }
                this.playerProcessSoloAndMute()
            }
        },
        playerProcessSoloAndMute: function() {
            if (this._player != null) {
                if (y.filter(this._origSong.tracks, function(q) {
                        return q.isSolo
                    }).length > 0) {
                    this.turnOnSolo()
                } else {
                    this.turnOnMute()
                }
            }
        },
        turnOnSolo: function() {
            var X = 0;
            var W = this._origSong.tracks;
            while (X < W.length) {
                var q = W[X];
                ++X;
                this._player.setTrackMute(q.number, !q.isSolo)
            }
        },
        turnOnMute: function() {
            var X = 0;
            var W = this._origSong.tracks;
            while (X < W.length) {
                var q = W[X];
                ++X;
                this._player.setTrackMute(q.number, q.isMute)
            }
        },
        setTrackMute: function(W, X) {
            var q = this._origSong.tracks[W - 1];
            if (q != null) {
                if (X) {
                    q.isSolo = false
                }
                q.isMute = X;
                this.playerProcessSoloAndMute()
            }
        },
        _resetSoloMute: function() {
            var X = 0;
            var W = this._origSong.tracks;
            while (X < W.length) {
                var q = W[X];
                ++X;
                q.isMute = false;
                q.isSolo = false
            }
            this.playerProcessSoloAndMute()
        },
        setTrackVolume: function(q, W) {
            if (this._player != null) {
                this._player.setTrackVolume(q, W)
            }
        },
        setTrackPan: function(q, W) {
            if (this._player != null) {
                this._player.setTrackPan(q, W)
            }
        },
        getTrackPan: function(q) {
            if (this._player != null) {
                return this._player.getTrackPan(q)
            }
            return 64
        },
        setTrackChorus: function(q, W) {
            if (this._player != null) {
                this._player.setTrackChorus(q, W)
            }
        },
        setSongData: function(aa) {
            this._songData = aa;
            var Z = V.SongIo.read(aa);
            if (Z != null) {
                Z.validate();
                Z.applyFilters(this._songFilters);
                this._totalTime = Z.getTotalTime();
                if (this.artistName == null) {
                    this.artistName = Z.artist
                } else {
                    this.artistName = this.artistName
                }
                if (this.songName == null) {
                    this.songName = Z.title
                } else {
                    this.songName = this.songName
                }
                this._fullSong = Z.clone();
                if (this._demoMode) {
                    var W = Z.findMeasureHeaderForTime(this._demoTime);
                    var X = Z.measureCount() - W.number;
                    var Y = 0;
                    while (Y < X) {
                        var q = Y++;
                        Z.removeMeasureHeader(W.number)
                    }
                }
                this._demoTime = Z.getTotalTime();
                this._origSong = Z;
                this._expandedSong = V.SongOperations.expandRepeats(Z);
                this._song = Z;
                return true
            } else {
                if (D.isFunction(this._onTabParseError)) {
                    this._onTabParseError()
                }
                return false
            }
        },
        setNotesPlayerSongData: function() {
            if (this._player != null) {
                if (h.Boot.__instanceof(this._player, U.model.Html5NotesPlayer)) {
                    (h.Boot.__cast(this._player, U.model.Html5NotesPlayer)).setSong(this._song)
                } else {
                    this._player.setSongData(this._songData)
                }
                this._player.applySongFilters(this._songFilters);
                this._player.setVolume(this._settingsProxy.getOption(U.model.settings.SettingsOption.volume));
                var X = 0;
                var W = this._song.tracks;
                while (X < W.length) {
                    var q = W[X];
                    ++X;
                    this._player.setTrackVolume(q.number, q.channel.volume)
                }
                this._player.setMetronomeActivity(this._settingsProxy.getOption(U.model.settings.SettingsOption.metronome))
            }
        },
        getSong: function() {
            return this._song
        },
        getFullSong: function() {
            return this._fullSong
        },
        getSongData: function() {
            return this._songData
        },
        getTablature: function() {
            return this._tablature
        },
        setTablature: function(q) {
            this._tablature = q;
            (h.Boot.__cast(this._tablature, u.model.Tablature)).setAutoScrollStrategyType(this._autoScrollStrategyType);
            (h.Boot.__cast(this._tablature, u.model.Tablature)).artistName = this.artistName;
            (h.Boot.__cast(this._tablature, u.model.Tablature)).songName = this.songName;
            if (this._origSong != null) {
                if (h.Boot.__instanceof(this._tablature, u.model.Tablature)) {
                    (h.Boot.__cast(this._tablature, u.model.Tablature)).setSong(this._origSong, this._demoMode)
                } else {
                    this._tablature.setSongData(this._songData, this._demoMode)
                }
                if (this._expandRepeats) {
                    this._song = this._expandedSong
                }
            }
            this._resetLoop();
            this._resetSoloMute()
        },
        moveToPosition: function(W, Z, X, q) {
            if (q == null) {
                q = true
            }
            if (X == null) {
                X = true
            }
            var Y = this._tablature.getTrackPositionXY(W, Z);
            if (Y == null) {
                return
            }
            if (this.isPlay()) {
                if (!this.ensurePositionInLoop(Y)) {
                    return
                }
            }
            this.moveToBeatIndex(Y.measureIndex, Y.beatIndex, X, q)
        },
        rewind: function(q) {
            if (q == null) {
                q = false
            }
            if (this.isPlay()) {
                this.stop()
            }
            if (this.get_loopMode()) {
                this.moveToBeatIndex(this._currentLoop.startMeasure, this._currentLoop.startBeat)
            } else {
                this.moveToBeatIndex(0, 0)
            }
            var W = {
                action: U.model.dto.AnalyticsEventType.Rewind,
                value: null,
                keyboard: q
            };
            this.sendNotification("AnalyticsEvent", W)
        },
        moveToBeatIndex: function(Y, aa, X, q) {
            if (q == null) {
                q = true
            }
            if (X == null) {
                X = true
            }
            var Z = this;
            this._tablature.moveToBeatIndex(Y, aa, false);
            if (!this.isPlay() || this._settingsProxy.getOption(U.model.settings.SettingsOption.autoScroll)) {
                this._tablature.scrollToCurrentBeat(X, q)
            }
            if (this.isPlay()) {
                this.syncPlayerPosition(Y, aa)
            }
            this._tablature.render();
            var W = this.getCurrentTrack().measures[Y].beats[aa];
            this.sendNotification("MoveToBeat", W);
            if (D.isFunction(this._onPositionChanged)) {
                m.Timer.delay(function() {
                    Z._onPositionChanged(Z.instanceId, Y, aa)
                }, 20)
            }
        },
        moveToTabPosition: function(q, W, Y) {
            var X = new V.TrackPosition(q, W - 1, Y - 1);
            if (X != null) {
                if (X.trackNumber != this.getCurrentTrack().number) {
                    this.setCurrentTrack(X.trackNumber)
                }
                this.moveToBeatIndex(X.measureIndex, X.beatIndex)
            }
        },
        moveToTime: function(q, W) {
            if (W == null) {
                W = true
            }
            var X = this._song.findBeatForTime(this.getCurrentTrack().number, q);
            this.moveToBeatIndex(X.measure.getIndex(), X.index, W)
        },
        moveToNextBeat: function() {
            var W = this.getCurrentPosition();
            if (W.measureIndex != this.getCurrentTrack().measureCount() - 1 || W.beatIndex != this.getCurrentTrack().measures[W.measureIndex].beatCount() - 1) {
                var q = this._song.getNextBeat(W);
                this.moveToBeatIndex(q.measure.getIndex(), q.index)
            }
        },
        moveToPrevBeat: function() {
            var W = this.getCurrentPosition();
            if (W.measureIndex > 0 || W.beatIndex > 0) {
                var q = this._song.getPrevBeat(W);
                this.moveToBeatIndex(q.measure.getIndex(), q.index)
            }
        },
        moveToNextMeasure: function() {
            var W = this.getCurrentPosition();
            if (W.measureIndex != this.getCurrentTrack().measureCount() - 1 || W.beatIndex != this.getCurrentTrack().measures[W.measureIndex].beatCount() - 1) {
                var q = this._song.getNextMeasure(W).beats[0];
                this.moveToBeatIndex(q.measure.getIndex(), q.index)
            }
        },
        moveToPrevMeasure: function() {
            var W = this.getCurrentPosition();
            if (W.measureIndex > 0 || W.beatIndex > 0) {
                var q;
                if (W.measureIndex > 0) {
                    q = W.measureIndex - 1
                } else {
                    q = 0
                }
                this.moveToBeatIndex(q, 0)
            }
        },
        moveToFirstNotRestMeasure: function() {
            var q = this.getCurrentTrack().getFisrtNotRestMeasureIndex();
            this.moveToBeatIndex(q, 0, false)
        },
        getCurrentPosition: function() {
            return this._tablature.getCurrentTrackPosition()
        },
        getPositionInMilliSeconds: function() {
            var q = this._song.getBeatInPosition(this._tablature.getCurrentTrackPosition());
            return q.getStartInMilliSeconds()
        },
        getTotalTime: function() {
            return this._totalTime
        },
        getMarkers: function() {
            return this._song.getMeasureText()
        },
        setBestInstrument: function() {
            var af = [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 0, 1, 2, 3, 4, 5];
            var Z = this.getIndexesOfAppropriateTracks(af);
            var ab = this.getFisrtNotRestMeasureIndexesOfTracks(Z);
            var ac = P.utils.ArrayUtils.min(ab);
            var ai = P.utils.ArrayUtils.indexesOf(ac, ab);
            var ae = P.utils.ArrayUtils.cutByIndexes(Z, ai);
            var W = -1;
            var Y = 0;
            while (Y < af.length) {
                var ah = af[Y];
                ++Y;
                var aa = 0;
                while (aa < ae.length) {
                    var X = ae[aa];
                    ++aa;
                    if (ah == this.getSong().tracks[X].channel.instrument()) {
                        W = X + 1;
                        break
                    }
                }
                if (W != -1) {
                    break
                }
            }
            if (W == -1) {
                W = 1
            } else {
                W = W
            }
            this.setCurrentTrack(W, true);
            if (!this._pitchNotificationShown) {
                var q = V.Tuning.offsetFromStandard(this.getCurrentTrack().strings);
                if (q != 999 && q != 0) {
                    this._pitchNotificationShown = true;
                    var ag = V.Tuning.toString(this.getCurrentTrack().strings).split(" ");
                    var ad = ag.join(" ");
                    this.sendNotification("ShowPitchNotification", {
                        offset: q,
                        name: ad
                    });
                    if (D.isFunction(this._onPitchNotificationShow)) {
                        this._onPitchNotificationShow()
                    }
                }
            }
        },
        getIndexesOfAppropriateTracks: function(X) {
            var Y = new Array();
            var W = 0;
            var aa = 0;
            var Z = this.getTracks();
            while (aa < Z.length) {
                var q = Z[aa];
                ++aa;
                if (!q.channel.isPercussionChannel()) {
                    if ((function(ad) {
                            var ac;
                            var ab = q.channel.instrument();
                            ac = B.indexOf(X, ab, 0);
                            return ac
                        }(this)) != -1) {
                        Y.push(W)
                    }
                }
                W++
            }
            return Y
        },
        getFisrtNotRestMeasureIndexesOfTracks: function(W) {
            var X = new Array();
            var Y = 0;
            while (Y < W.length) {
                var q = W[Y];
                ++Y;
                X.push(this.getSong().tracks[q].getFisrtNotRestMeasureIndex())
            }
            return X
        },
        getCurrentTrack: function() {
            if (this._tablature.getTrackNumber() == null) {
                return null
            } else {
                return this._song.tracks[this._tablature.getTrackNumber() - 1]
            }
        },
        setCurrentTrack: function(q, aa, Y) {
            if (Y == null) {
                Y = false
            }
            if (aa == null) {
                aa = false
            }
            var ab = this;
            if (q < 1 || q > this._song.tracks.length) {
                return
            }
            if (this._tablature != null) {
                var X = null;
                if (this._currentLoop != null) {
                    X = this._currentLoop.convertToTimeRange(this.getCurrentTrack())
                }
                this._tablature.showTrack(q);
                if (aa) {
                    this._tablature.setScale(this._settingsProxy.getOption(U.model.settings.SettingsOption.scale));
                    this._tablature.highlightActiveNotes(this._settingsProxy.getOption(U.model.settings.SettingsOption.highlight));
                    this._tablature.expandRepeats(this._expandRepeats);
                    this._tablature.showGhostMeasures(this._ghostMeasuresVisible)
                } else {
                    var W = this.getTracks()[q - 1];
                    var Z = {
                        action: U.model.dto.AnalyticsEventType.InstrumentChange,
                        value: {
                            trackNumber: q,
                            trackName: O.trim(W.name).length > 0 ? O.trim(W.name) : Q.MidiInstrumentHelper.getInstrumentName(W.channel.instrument())
                        },
                        keyboard: Y
                    };
                    this.sendNotification("AnalyticsEvent", Z)
                }
                this._tablature.doLayout();
                this.monitorTrack(q);
                if (X != null) {
                    this._currentLoop = X.convertToTrackSelection(this.getCurrentTrack());
                    this._updateLoop()
                }
                this._tablature.scrollToCurrentBeat(false);
                this._tablature.render();
                if (!aa && D.isFunction(this._onTrackChanged)) {
                    m.Timer.delay(function() {
                        ab._onTrackChanged(q)
                    }, 20)
                }
                this.sendNotification("ShowTrack", q)
            }
        },
        monitorTrack: function(q) {
            if (this._player != null) {
                if (this._monitoredTrackNumber != q) {
                    this._monitoredTrackNumber = q;
                    this._player.monitorTrack(q)
                }
            }
        },
        initNotesPlayer: function(W) {
            if (this.notesPlayerType == U.model.dto.NotesPlayerType.html5) {
                this._player = new U.model.Html5NotesPlayer(this.instanceId, W, s(this, this.playerPositionChanged), s(this, this.playerStateChanged))
            } else {
                var q = this.facade.retrieveProxy("AppProxy");
                this._player = new U.model.FlashNotesPlayer(this.instanceId, W, q.assetNotesPlayerFlashUrl, "NotesPlayerFlash");
                this._player.setPlayCallback(s(this, this.playerPositionChanged));
                this._player.setStateCallback(s(this, this.playerStateChanged))
            }
        },
        playerPositionChanged: function(X, aa, q) {
            var Y = this;
            if (this._demoMode && q > this._demoTime) {
                this.stop();
                this.moveToBeatIndex(0, 0);
                if (D.isFunction(this._onEndPlay)) {
                    m.Timer.delay(function() {
                        Y._onEndPlay(Y.instanceId)
                    }, 20)
                }
                return
            }
            if (D.isFunction(this._onPositionChanged)) {
                m.Timer.delay(function() {
                    Y._onPositionChanged(Y.instanceId, X, aa)
                }, 20)
            }
            if (this._expandRepeats) {
                var Z = this._expandedSong.findMeasureHeaderForTime(q);
                X = Z.number - 1
            }
            this._tablature.moveToBeatIndex(X, aa);
            if (this._settingsProxy.getOption(U.model.settings.SettingsOption.autoScroll)) {
                this._tablature.scrollToIndex(X, aa)
            }
            var W = this.getCurrentTrack().measures[X].beats[aa];
            this.sendNotification("BeatSoundStart", W)
        },
        playerStateChanged: function(q) {
            var ab = this;
            var X = q.stateCode;
            switch (X) {
                case U.model.dto.NotesPlayerState.START_PLAY:
                    this._isPlay = true;
                    break;
                case U.model.dto.NotesPlayerState.PAUSE:
                    this._isPlay = false;
                    break;
                case U.model.dto.NotesPlayerState.READY:
                    var W = this.facade.retrieveProxy("AppProxy");
                    W.flashNotesPlayerReady(this._player);
                    this.sendNotification("NotesPlayerReady");
                    var ac = {
                        stage: this.notesPlayerType == U.model.dto.NotesPlayerType.html5 ? U.model.dto.Stage.Html5NotesPlayerLoading : U.model.dto.Stage.FlashNotesPlayerLoading,
                        phase: U.model.dto.StagePhase.END
                    };
                    this.sendNotification("LoadingStats", ac);
                    break;
                case U.model.dto.NotesPlayerState.SOUNDFONT_GENERAL_XML_LOADED:
                    this.sendNotification("SoundFontLoaded");
                    break;
                case U.model.dto.NotesPlayerState.SOUNDFONT_PRESETS_LOADED:
                    this._loadedPresets = this._totalPresets;
                    this._isPlayOptionDisabled = false;
                    this.sendNotification("PlayerAcceptSong");
                    var aa = {
                        stage: U.model.dto.Stage.SoundsLoading,
                        phase: U.model.dto.StagePhase.END
                    };
                    this.sendNotification("LoadingStats", aa);
                    if (D.isFunction(this._onSoundsLoaded)) {
                        m.Timer.delay(function() {
                            ab._onSoundsLoaded()
                        }, 20)
                    }
                    if (this._autoPlay) {
                        this.sendNotification("IntentTogglePlay", true)
                    }
                    break;
                case U.model.dto.NotesPlayerState.END_PLAY:
                    if (!this.get_loopMode()) {
                        if (D.isFunction(this._onEndPlay)) {
                            m.Timer.delay(function() {
                                ab._onEndPlay(ab.instanceId)
                            }, 20)
                        }
                        this._isPlay = false;
                        this.sendNotification("TogglePlay", false)
                    } else {
                        this._tablature.stopAnimation();
                        m.Timer.delay(function() {
                            if (!ab.get_loopMode()) {
                                return
                            }
                            ab.moveToBeatIndex(ab._currentLoop.startMeasure, ab._currentLoop.startBeat);
                            ab.syncPlayerPosition(ab._currentLoop.startMeasure, ab._currentLoop.startBeat);
                            if (ab._isPlay) {
                                ab._player.play()
                            }
                        }, 400)
                    }
                    break;
                case U.model.dto.NotesPlayerState.SOUNDFONT_START_LOADING_PRESETS:
                    this._totalPresets = A.parseInt(q.message);
                    this._loadedPresets = 0;
                    this.sendNotification("StartLoadingPresets", this._totalPresets);
                    var Z = {
                        stage: U.model.dto.Stage.SoundsLoading,
                        phase: U.model.dto.StagePhase.START
                    };
                    this.sendNotification("LoadingStats", Z);
                    break;
                case U.model.dto.NotesPlayerState.SOUNDFONT_PRESET_LOADED:
                    this._loadedPresets++;
                    this.sendNotification("PresetLoaded", this._loadedPresets);
                    break;
                case U.model.dto.NotesPlayerState.SOUNDFONT_PRESETS_PROGRESS_LOAD:
                    var ad = q.message.split(":");
                    var Y = {
                        total: A.parseFloat(ad[0]),
                        complete: A.parseFloat(ad[1]),
                        increment: A.parseFloat(ad[2])
                    };
                    this.sendNotification("PresetsProgressLoad", Y);
                    break
            }
        },
        syncPlayerPosition: function(q, W) {
            if (this._player != null) {
                this._player.changePosition(q, W)
            }
        },
        syncPlayerPositionMs: function(q) {
            if (this._player != null) {
                this._player.changePositionMs(q)
            }
        },
        ensurePositionInLoop: function(q) {
            if (this.get_loopMode() && !this._currentLoop.isPositionInRange(q.measureIndex, q.beatIndex)) {
                q.measureIndex = this._currentLoop.startMeasure;
                q.beatIndex = this._currentLoop.startBeat;
                return false
            }
            return true
        },
        play: function() {
            if (this._player != null) {
                var W = this.getCurrentPosition();
                if (!this.ensurePositionInLoop(W)) {
                    this.moveToBeatIndex(W.measureIndex, W.beatIndex, false)
                }
                if (this.get_loopMode()) {
                    this._player.setLoop(this.getLoopStartInMs(), this.getLoopEndInMs())
                }
                var q = this._song.getBeatInPosition(W);
                this.syncPlayerPositionMs(q.getStartInMilliSeconds());
                this._isPlay = true;
                if (D.isFunction(this._onStartPlay)) {
                    this._onStartPlay(this.instanceId)
                }
                this._player.play();
                this.sendNotification("TogglePlay", true)
            }
        },
        stop: function() {
            if (this._isPlay) {
                if (D.isFunction(this._onStopPlay)) {
                    m.Timer.delay(this._onStopPlay, 20)
                }
            }
            if (this._player != null) {
                this._isPlay = false;
                this._player.stop()
            }
            if (this._tablature != null) {
                this._tablature.stopAnimation()
            }
            this.sendNotification("TogglePlay", false)
        },
        toggleLoop: function(W) {
            if (W == null) {
                W = false
            }
            this.loopMode = !this.get_loopMode();
            var Z = {
                action: U.model.dto.AnalyticsEventType.ToggleLoop,
                value: this.get_loopMode(),
                keyboard: W
            };
            this.sendNotification("AnalyticsEvent", Z);
            if (this.get_loopMode()) {
                var Y = this._tablature.getCurrentMeasureIndex();
                var q = this._tablature.getTrackNumber();
                var X = this._song.tracks[q - 1].measures[Y];
                this._currentLoop = new V.TrackSelectedRange(Y, Y, 0, X.beatCount() - 1);
                Z = {
                    action: U.model.dto.AnalyticsEventType.LoopSet,
                    value: this._currentLoop,
                    keyboard: W
                };
                this.sendNotification("AnalyticsEvent", Z)
            }
            this._updateLoop();
            this.sendNotification("ToggleLoop", this.get_loopMode())
        },
        _resetLoop: function() {
            this.loopMode = false;
            this._currentLoop = null;
            if (this._player != null) {
                this._player.setLoop()
            }
            this.sendNotification("ToggleLoop", false)
        },
        get_loopMode: function() {
            return this.loopMode
        },
        _updateLoop: function() {
            if (this.get_loopMode()) {
                this._tablature.selectRange(this._currentLoop.startMeasure, this._currentLoop.endMeasure, this._currentLoop.startBeat, this._currentLoop.endBeat);
                if (this.isPlay()) {
                    this._player.setLoop(this.getLoopStartInMs(), this.getLoopEndInMs())
                }
            } else {
                this._currentLoop = null;
                this._tablature.clearSelection();
                if (this._player != null) {
                    this._player.setLoop()
                }
            }
            this._tablature.render()
        },
        _unsetLoop: function() {
            this.loopMode = false;
            this._currentLoop = null
        },
        editLoopXY: function(W, ab) {
            var X = this._currentLoop.clone();
            var q = this._tablature.getTrackPositionXY(W, ab);
            var Z = q.measureIndex;
            var aa = q.beatIndex;
            if (Z < this._currentLoop.startMeasure || Z == this._currentLoop.startMeasure && aa < this._currentLoop.startBeat) {
                this._currentLoop.startMeasure = Z;
                this._currentLoop.startBeat = aa
            } else {
                if (Z > this._currentLoop.endMeasure || Z >= this._currentLoop.endMeasure && aa > this._currentLoop.endBeat) {
                    this._currentLoop.endMeasure = Z;
                    this._currentLoop.endBeat = aa
                } else {
                    this.moveToPosition(W, ab)
                }
            }
            if (!X.equal(this._currentLoop)) {
                this._leftLoopEdit = false;
                this._rightLoopEdit = false;
                this._updateLoop();
                this.sendNotification("LoopChanged", true);
                var Y = {
                    action: U.model.dto.AnalyticsEventType.LoopChange,
                    value: this._currentLoop,
                    keyboard: false
                };
                this.sendNotification("AnalyticsEvent", Y)
            }
        },
        setLoopXY: function(X, q, aa, Z) {
            if (this.get_loopMode()) {
                var W = this._currentLoop.clone();
                var ab = this._tablature.isPositionOnLeftMarker(X, q);
                var Y = this._tablature.isPositionOnRightMarker(X, q);
                var ac = this._tablature.getTrackPositionXY(aa, Z);
                if (ac != null) {
                    if (ab) {
                        this._leftLoopEdit = true;
                        this._rightLoopEdit = false
                    }
                    if (Y) {
                        this._leftLoopEdit = false;
                        this._rightLoopEdit = true
                    }
                    if (this._leftLoopEdit && this._currentLoop.positionBeforeEnd(ac.measureIndex, ac.beatIndex)) {
                        this._currentLoop = new V.TrackSelectedRange(ac.measureIndex, this._currentLoop.endMeasure, ac.beatIndex, this._currentLoop.endBeat)
                    }
                    if (this._rightLoopEdit && this._currentLoop.positionGreaterStart(ac.measureIndex, ac.beatIndex)) {
                        this._currentLoop = new V.TrackSelectedRange(this._currentLoop.startMeasure, ac.measureIndex, this._currentLoop.startBeat, ac.beatIndex)
                    }
                }
                if (!W.equal(this._currentLoop)) {
                    this._updateLoop();
                    this.sendNotification("LoopChanged", true)
                }
            }
        },
        switchEqualizer: function() {
            var W = R.getEnumConstructs(U.model.dto.EqualizerMode);
            var q = B.indexOf(W, this._equalizerMode[0], 0) + 1;
            if (q == W.length) {
                q = 0
            } else {
                q = q
            }
            this._equalizerMode = R.createEnumIndex(U.model.dto.EqualizerMode, q, null);
            (h.Boot.__cast(this._player, U.model.Html5NotesPlayer)).switchEqualizer(this._equalizerMode[1]);
            this.sendNotification("EqualizerSwitched", this._equalizerMode)
        },
        setLoopRange: function(q) {
            if (q != null) {
                if (!this.get_loopMode()) {
                    this.loopMode = true;
                    this.sendNotification("ToggleLoop", this.get_loopMode())
                }
                this._currentLoop = q.clone();
                this._updateLoop()
            }
        },
        getCurrentLoop: function() {
            return this._currentLoop
        },
        getLoopStartInMs: function() {
            return this._currentLoop.getStartInMilliSeconds(this._song.tracks[this._tablature.getTrackNumber() - 1])
        },
        getLoopEndInMs: function() {
            return this._currentLoop.getEndInMilliSeconds(this._song.tracks[this._tablature.getTrackNumber() - 1])
        },
        changePreset: function(q, Y) {
            var W = this._song.tracks[q - 1].channel.instrument();
            if (this._player != null && W != Y) {
                this._player.changePreset(q, Y);
                this._song.tracks[q - 1].channel.chageInstrument(Y);
                var X = {
                    action: U.model.dto.AnalyticsEventType.InstrumentInstrumentChange,
                    value: W + ":" + Y,
                    keyboard: false
                };
                this.sendNotification("AnalyticsEvent", X);
                this.sendNotification("InstrumentSwitched", q)
            }
        },
        restoreDefaulPreset: function(q) {
            if (this._player != null) {
                var W = this._song.tracks[q - 1].channel.getDefaulInstrument();
                if (W != -1) {
                    this._player.changePreset(q, W);
                    this._song.tracks[q - 1].channel.instrument(W);
                    this.sendNotification("InstrumentSwitched", q)
                }
            }
        },
        getSongFilters: function() {
            return this._songFilters
        },
        isPlay: function() {
            return this._isPlay
        },
        getPresetList: function(X) {
            if (X == null) {
                X = 0
            }
            var q = new Array();
            if (this._player != null) {
                var W = this._player.getPresetList();
                var Z = 0;
                while (Z < W.length) {
                    var Y = W[Z];
                    ++Z;
                    q.push(new U.model.dto.PresetDto(Y.id, Y.name))
                }
            }
            return q
        },
        expandRepeats: function(W) {
            if (W != this._expandRepeats) {
                this._expandRepeats = W;
                var X = this._tablature.getTrackNumber() - 1;
                var q = null;
                if (this.get_loopMode()) {
                    q = this._currentLoop.convertToTimeRange(this._song.tracks[X])
                }
                if (W) {
                    this._song = this._expandedSong
                } else {
                    this._song = this._origSong
                }
                this._tablature.expandRepeats(W);
                if (q != null) {
                    this._currentLoop = q.convertToTrackSelection(this._song.tracks[X])
                }
                this.sendNotification("ExpandRepeats")
            }
        },
        transposeSong: function(W) {
            var q = this;
            this._transposeTimer.stop();
            this._transposeTimer = new m.Timer(250);
            this._transposeTimer.run = function() {
                var X = null;
                if (q._currentLoop != null) {
                    X = q._currentLoop.convertToTimeRange(q.getCurrentTrack())
                }
                if (W != 0) {
                    q._song = V.SongOperations.transposeSong(q._origSong, W)
                } else {
                    q._song = q._origSong
                }
                q._tablature.transposeSong(q._song);
                q._tablature.doLayout();
                q._tablature.render();
                q._tablature.scrollToCurrentBeat(false);
                if (X != null) {
                    q._currentLoop = X.convertToTrackSelection(q.getCurrentTrack());
                    q._updateLoop()
                }
                q._player.transposeSong(W, q._song);
                q.sendNotification("SongTransposed");
                q._transposeTimer.stop()
            }
        },
        repeatsExpanded: function() {
            return this._expandRepeats
        },
        changePitch: function(q) {
            if (this._player != null) {
                this._player.changePitch(q);
                this.sendNotification("PitchChanged", q)
            }
        },
        showGhostMeasures: function(q) {
            this._tablature.showGhostMeasures(q);
            this._ghostMeasuresVisible = q;
            this.sendNotification("ToggleGhostMeasures", this._ghostMeasuresVisible)
        },
        isGhostMeasuresVisible: function() {
            return this._ghostMeasuresVisible
        },
        getActiveTracks: function() {
            var ad = new Array();
            var ac = this.getCurrentPosition();
            var Z = this._song.getBeatInPosition(ac);
            var W = Z.start;
            var Y = 0;
            var aa = this._song.tracks;
            while (Y < aa.length) {
                var X = aa[Y];
                ++Y;
                var q = X.measures[ac.measureIndex];
                var ab = q.findBeat(W);
                if (ab != null && !ab.isRestBeat()) {
                    ad.push(X)
                } else {
                    ad.push(null)
                }
            }
            return ad
        },
        startPlayCountDown: function() {
            this._player.playNote(62, -1, 0, 240)
        },
        playCountDown: function() {
            this._player.playNote(62, -1, 120, 240)
        },
        isDemoMode: function() {
            return this._demoMode
        },
        getDemoTime: function() {
            return this._demoTime
        },
        getTabDataOnBasisOfHits: function() {
            return this._tabDataOnBasisOfHits
        },
        setEqualizerParameters: function(q) {
            if (this._player != null) {
                this._player.setEqualizerParameters(q)
            }
        },
        __class__: U.model.TabProxy,
        __properties__: {
            get_loopMode: "get_loopMode"
        }
    });
    U.model.dto = {};
    U.model.dto.AnalyticsEventType = {
        __ename__: true,
        __constructs__: ["ToggleInstruments", "ExpandInstruments", "Rewind", "Play", "DisabledPlay", "Pause", "Playback", "ToggleLoop", "TempoChange", "VolumeChange", "PitchChange", "TransposeChange", "TogglePitchTransposeControl", "ZoomChange", "ToggleZoomControl", "FontSizeChange", "ToggleFretboard", "ToggleSettings", "ToggleHighlightNotes", "ToggleCountDown", "ToggleAutoScroll", "ToggleDrawDurations", "ToggleExpandRepeats", "ToggleUseLineBreaks", "ToggleGhotsMeasures", "ToggleColorNotes", "ToggleMetronome", "LoopSet", "LoopChange", "ToggleFitToScreen", "ToggleFullscreen", "InstrumentChange", "InstrumentVolumeChange", "InstrumentChorusChange", "InstrumentPanningChange", "InstrumentShowMore", "InstrumentShowLess", "TracklistHeightChange", "ToggleInstrumentMute", "ToggleInstrumentsSolo", "ToggleInstrumentAdvancedSettings", "InstrumentMeasureCellClick", "InstrumentInstrumentChange", "TimelineSliderChange", "TimelineClick", "InstrumentsTracklistResizeTipsOn", "InstrumentsTracklistResizeTipsOff", "InstrumentsTracklistResizeTipsForeverOff", "Scroll", "PositionChange", "ChordRender", "ChordShow"]
    };
    U.model.dto.AnalyticsEventType.ToggleInstruments = ["ToggleInstruments", 0];
    U.model.dto.AnalyticsEventType.ToggleInstruments.toString = l;
    U.model.dto.AnalyticsEventType.ToggleInstruments.__enum__ = U.model.dto.AnalyticsEventType;
    U.model.dto.AnalyticsEventType.ExpandInstruments = ["ExpandInstruments", 1];
    U.model.dto.AnalyticsEventType.ExpandInstruments.toString = l;
    U.model.dto.AnalyticsEventType.ExpandInstruments.__enum__ = U.model.dto.AnalyticsEventType;
    U.model.dto.AnalyticsEventType.Rewind = ["Rewind", 2];
    U.model.dto.AnalyticsEventType.Rewind.toString = l;
    U.model.dto.AnalyticsEventType.Rewind.__enum__ = U.model.dto.AnalyticsEventType;
    U.model.dto.AnalyticsEventType.Play = ["Play", 3];
    U.model.dto.AnalyticsEventType.Play.toString = l;
    U.model.dto.AnalyticsEventType.Play.__enum__ = U.model.dto.AnalyticsEventType;
    U.model.dto.AnalyticsEventType.DisabledPlay = ["DisabledPlay", 4];
    U.model.dto.AnalyticsEventType.DisabledPlay.toString = l;
    U.model.dto.AnalyticsEventType.DisabledPlay.__enum__ = U.model.dto.AnalyticsEventType;
    U.model.dto.AnalyticsEventType.Pause = ["Pause", 5];
    U.model.dto.AnalyticsEventType.Pause.toString = l;
    U.model.dto.AnalyticsEventType.Pause.__enum__ = U.model.dto.AnalyticsEventType;
    U.model.dto.AnalyticsEventType.Playback = ["Playback", 6];
    U.model.dto.AnalyticsEventType.Playback.toString = l;
    U.model.dto.AnalyticsEventType.Playback.__enum__ = U.model.dto.AnalyticsEventType;
    U.model.dto.AnalyticsEventType.ToggleLoop = ["ToggleLoop", 7];
    U.model.dto.AnalyticsEventType.ToggleLoop.toString = l;
    U.model.dto.AnalyticsEventType.ToggleLoop.__enum__ = U.model.dto.AnalyticsEventType;
    U.model.dto.AnalyticsEventType.TempoChange = ["TempoChange", 8];
    U.model.dto.AnalyticsEventType.TempoChange.toString = l;
    U.model.dto.AnalyticsEventType.TempoChange.__enum__ = U.model.dto.AnalyticsEventType;
    U.model.dto.AnalyticsEventType.VolumeChange = ["VolumeChange", 9];
    U.model.dto.AnalyticsEventType.VolumeChange.toString = l;
    U.model.dto.AnalyticsEventType.VolumeChange.__enum__ = U.model.dto.AnalyticsEventType;
    U.model.dto.AnalyticsEventType.PitchChange = ["PitchChange", 10];
    U.model.dto.AnalyticsEventType.PitchChange.toString = l;
    U.model.dto.AnalyticsEventType.PitchChange.__enum__ = U.model.dto.AnalyticsEventType;
    U.model.dto.AnalyticsEventType.TransposeChange = ["TransposeChange", 11];
    U.model.dto.AnalyticsEventType.TransposeChange.toString = l;
    U.model.dto.AnalyticsEventType.TransposeChange.__enum__ = U.model.dto.AnalyticsEventType;
    U.model.dto.AnalyticsEventType.TogglePitchTransposeControl = ["TogglePitchTransposeControl", 12];
    U.model.dto.AnalyticsEventType.TogglePitchTransposeControl.toString = l;
    U.model.dto.AnalyticsEventType.TogglePitchTransposeControl.__enum__ = U.model.dto.AnalyticsEventType;
    U.model.dto.AnalyticsEventType.ZoomChange = ["ZoomChange", 13];
    U.model.dto.AnalyticsEventType.ZoomChange.toString = l;
    U.model.dto.AnalyticsEventType.ZoomChange.__enum__ = U.model.dto.AnalyticsEventType;
    U.model.dto.AnalyticsEventType.ToggleZoomControl = ["ToggleZoomControl", 14];
    U.model.dto.AnalyticsEventType.ToggleZoomControl.toString = l;
    U.model.dto.AnalyticsEventType.ToggleZoomControl.__enum__ = U.model.dto.AnalyticsEventType;
    U.model.dto.AnalyticsEventType.FontSizeChange = ["FontSizeChange", 15];
    U.model.dto.AnalyticsEventType.FontSizeChange.toString = l;
    U.model.dto.AnalyticsEventType.FontSizeChange.__enum__ = U.model.dto.AnalyticsEventType;
    U.model.dto.AnalyticsEventType.ToggleFretboard = ["ToggleFretboard", 16];
    U.model.dto.AnalyticsEventType.ToggleFretboard.toString = l;
    U.model.dto.AnalyticsEventType.ToggleFretboard.__enum__ = U.model.dto.AnalyticsEventType;
    U.model.dto.AnalyticsEventType.ToggleSettings = ["ToggleSettings", 17];
    U.model.dto.AnalyticsEventType.ToggleSettings.toString = l;
    U.model.dto.AnalyticsEventType.ToggleSettings.__enum__ = U.model.dto.AnalyticsEventType;
    U.model.dto.AnalyticsEventType.ToggleHighlightNotes = ["ToggleHighlightNotes", 18];
    U.model.dto.AnalyticsEventType.ToggleHighlightNotes.toString = l;
    U.model.dto.AnalyticsEventType.ToggleHighlightNotes.__enum__ = U.model.dto.AnalyticsEventType;
    U.model.dto.AnalyticsEventType.ToggleCountDown = ["ToggleCountDown", 19];
    U.model.dto.AnalyticsEventType.ToggleCountDown.toString = l;
    U.model.dto.AnalyticsEventType.ToggleCountDown.__enum__ = U.model.dto.AnalyticsEventType;
    U.model.dto.AnalyticsEventType.ToggleAutoScroll = ["ToggleAutoScroll", 20];
    U.model.dto.AnalyticsEventType.ToggleAutoScroll.toString = l;
    U.model.dto.AnalyticsEventType.ToggleAutoScroll.__enum__ = U.model.dto.AnalyticsEventType;
    U.model.dto.AnalyticsEventType.ToggleDrawDurations = ["ToggleDrawDurations", 21];
    U.model.dto.AnalyticsEventType.ToggleDrawDurations.toString = l;
    U.model.dto.AnalyticsEventType.ToggleDrawDurations.__enum__ = U.model.dto.AnalyticsEventType;
    U.model.dto.AnalyticsEventType.ToggleExpandRepeats = ["ToggleExpandRepeats", 22];
    U.model.dto.AnalyticsEventType.ToggleExpandRepeats.toString = l;
    U.model.dto.AnalyticsEventType.ToggleExpandRepeats.__enum__ = U.model.dto.AnalyticsEventType;
    U.model.dto.AnalyticsEventType.ToggleUseLineBreaks = ["ToggleUseLineBreaks", 23];
    U.model.dto.AnalyticsEventType.ToggleUseLineBreaks.toString = l;
    U.model.dto.AnalyticsEventType.ToggleUseLineBreaks.__enum__ = U.model.dto.AnalyticsEventType;
    U.model.dto.AnalyticsEventType.ToggleGhotsMeasures = ["ToggleGhotsMeasures", 24];
    U.model.dto.AnalyticsEventType.ToggleGhotsMeasures.toString = l;
    U.model.dto.AnalyticsEventType.ToggleGhotsMeasures.__enum__ = U.model.dto.AnalyticsEventType;
    U.model.dto.AnalyticsEventType.ToggleColorNotes = ["ToggleColorNotes", 25];
    U.model.dto.AnalyticsEventType.ToggleColorNotes.toString = l;
    U.model.dto.AnalyticsEventType.ToggleColorNotes.__enum__ = U.model.dto.AnalyticsEventType;
    U.model.dto.AnalyticsEventType.ToggleMetronome = ["ToggleMetronome", 26];
    U.model.dto.AnalyticsEventType.ToggleMetronome.toString = l;
    U.model.dto.AnalyticsEventType.ToggleMetronome.__enum__ = U.model.dto.AnalyticsEventType;
    U.model.dto.AnalyticsEventType.LoopSet = ["LoopSet", 27];
    U.model.dto.AnalyticsEventType.LoopSet.toString = l;
    U.model.dto.AnalyticsEventType.LoopSet.__enum__ = U.model.dto.AnalyticsEventType;
    U.model.dto.AnalyticsEventType.LoopChange = ["LoopChange", 28];
    U.model.dto.AnalyticsEventType.LoopChange.toString = l;
    U.model.dto.AnalyticsEventType.LoopChange.__enum__ = U.model.dto.AnalyticsEventType;
    U.model.dto.AnalyticsEventType.ToggleFitToScreen = ["ToggleFitToScreen", 29];
    U.model.dto.AnalyticsEventType.ToggleFitToScreen.toString = l;
    U.model.dto.AnalyticsEventType.ToggleFitToScreen.__enum__ = U.model.dto.AnalyticsEventType;
    U.model.dto.AnalyticsEventType.ToggleFullscreen = ["ToggleFullscreen", 30];
    U.model.dto.AnalyticsEventType.ToggleFullscreen.toString = l;
    U.model.dto.AnalyticsEventType.ToggleFullscreen.__enum__ = U.model.dto.AnalyticsEventType;
    U.model.dto.AnalyticsEventType.InstrumentChange = ["InstrumentChange", 31];
    U.model.dto.AnalyticsEventType.InstrumentChange.toString = l;
    U.model.dto.AnalyticsEventType.InstrumentChange.__enum__ = U.model.dto.AnalyticsEventType;
    U.model.dto.AnalyticsEventType.InstrumentVolumeChange = ["InstrumentVolumeChange", 32];
    U.model.dto.AnalyticsEventType.InstrumentVolumeChange.toString = l;
    U.model.dto.AnalyticsEventType.InstrumentVolumeChange.__enum__ = U.model.dto.AnalyticsEventType;
    U.model.dto.AnalyticsEventType.InstrumentChorusChange = ["InstrumentChorusChange", 33];
    U.model.dto.AnalyticsEventType.InstrumentChorusChange.toString = l;
    U.model.dto.AnalyticsEventType.InstrumentChorusChange.__enum__ = U.model.dto.AnalyticsEventType;
    U.model.dto.AnalyticsEventType.InstrumentPanningChange = ["InstrumentPanningChange", 34];
    U.model.dto.AnalyticsEventType.InstrumentPanningChange.toString = l;
    U.model.dto.AnalyticsEventType.InstrumentPanningChange.__enum__ = U.model.dto.AnalyticsEventType;
    U.model.dto.AnalyticsEventType.InstrumentShowMore = ["InstrumentShowMore", 35];
    U.model.dto.AnalyticsEventType.InstrumentShowMore.toString = l;
    U.model.dto.AnalyticsEventType.InstrumentShowMore.__enum__ = U.model.dto.AnalyticsEventType;
    U.model.dto.AnalyticsEventType.InstrumentShowLess = ["InstrumentShowLess", 36];
    U.model.dto.AnalyticsEventType.InstrumentShowLess.toString = l;
    U.model.dto.AnalyticsEventType.InstrumentShowLess.__enum__ = U.model.dto.AnalyticsEventType;
    U.model.dto.AnalyticsEventType.TracklistHeightChange = ["TracklistHeightChange", 37];
    U.model.dto.AnalyticsEventType.TracklistHeightChange.toString = l;
    U.model.dto.AnalyticsEventType.TracklistHeightChange.__enum__ = U.model.dto.AnalyticsEventType;
    U.model.dto.AnalyticsEventType.ToggleInstrumentMute = ["ToggleInstrumentMute", 38];
    U.model.dto.AnalyticsEventType.ToggleInstrumentMute.toString = l;
    U.model.dto.AnalyticsEventType.ToggleInstrumentMute.__enum__ = U.model.dto.AnalyticsEventType;
    U.model.dto.AnalyticsEventType.ToggleInstrumentsSolo = ["ToggleInstrumentsSolo", 39];
    U.model.dto.AnalyticsEventType.ToggleInstrumentsSolo.toString = l;
    U.model.dto.AnalyticsEventType.ToggleInstrumentsSolo.__enum__ = U.model.dto.AnalyticsEventType;
    U.model.dto.AnalyticsEventType.ToggleInstrumentAdvancedSettings = ["ToggleInstrumentAdvancedSettings", 40];
    U.model.dto.AnalyticsEventType.ToggleInstrumentAdvancedSettings.toString = l;
    U.model.dto.AnalyticsEventType.ToggleInstrumentAdvancedSettings.__enum__ = U.model.dto.AnalyticsEventType;
    U.model.dto.AnalyticsEventType.InstrumentMeasureCellClick = ["InstrumentMeasureCellClick", 41];
    U.model.dto.AnalyticsEventType.InstrumentMeasureCellClick.toString = l;
    U.model.dto.AnalyticsEventType.InstrumentMeasureCellClick.__enum__ = U.model.dto.AnalyticsEventType;
    U.model.dto.AnalyticsEventType.InstrumentInstrumentChange = ["InstrumentInstrumentChange", 42];
    U.model.dto.AnalyticsEventType.InstrumentInstrumentChange.toString = l;
    U.model.dto.AnalyticsEventType.InstrumentInstrumentChange.__enum__ = U.model.dto.AnalyticsEventType;
    U.model.dto.AnalyticsEventType.TimelineSliderChange = ["TimelineSliderChange", 43];
    U.model.dto.AnalyticsEventType.TimelineSliderChange.toString = l;
    U.model.dto.AnalyticsEventType.TimelineSliderChange.__enum__ = U.model.dto.AnalyticsEventType;
    U.model.dto.AnalyticsEventType.TimelineClick = ["TimelineClick", 44];
    U.model.dto.AnalyticsEventType.TimelineClick.toString = l;
    U.model.dto.AnalyticsEventType.TimelineClick.__enum__ = U.model.dto.AnalyticsEventType;
    U.model.dto.AnalyticsEventType.InstrumentsTracklistResizeTipsOn = ["InstrumentsTracklistResizeTipsOn", 45];
    U.model.dto.AnalyticsEventType.InstrumentsTracklistResizeTipsOn.toString = l;
    U.model.dto.AnalyticsEventType.InstrumentsTracklistResizeTipsOn.__enum__ = U.model.dto.AnalyticsEventType;
    U.model.dto.AnalyticsEventType.InstrumentsTracklistResizeTipsOff = ["InstrumentsTracklistResizeTipsOff", 46];
    U.model.dto.AnalyticsEventType.InstrumentsTracklistResizeTipsOff.toString = l;
    U.model.dto.AnalyticsEventType.InstrumentsTracklistResizeTipsOff.__enum__ = U.model.dto.AnalyticsEventType;
    U.model.dto.AnalyticsEventType.InstrumentsTracklistResizeTipsForeverOff = ["InstrumentsTracklistResizeTipsForeverOff", 47];
    U.model.dto.AnalyticsEventType.InstrumentsTracklistResizeTipsForeverOff.toString = l;
    U.model.dto.AnalyticsEventType.InstrumentsTracklistResizeTipsForeverOff.__enum__ = U.model.dto.AnalyticsEventType;
    U.model.dto.AnalyticsEventType.Scroll = ["Scroll", 48];
    U.model.dto.AnalyticsEventType.Scroll.toString = l;
    U.model.dto.AnalyticsEventType.Scroll.__enum__ = U.model.dto.AnalyticsEventType;
    U.model.dto.AnalyticsEventType.PositionChange = ["PositionChange", 49];
    U.model.dto.AnalyticsEventType.PositionChange.toString = l;
    U.model.dto.AnalyticsEventType.PositionChange.__enum__ = U.model.dto.AnalyticsEventType;
    U.model.dto.AnalyticsEventType.ChordRender = ["ChordRender", 50];
    U.model.dto.AnalyticsEventType.ChordRender.toString = l;
    U.model.dto.AnalyticsEventType.ChordRender.__enum__ = U.model.dto.AnalyticsEventType;
    U.model.dto.AnalyticsEventType.ChordShow = ["ChordShow", 51];
    U.model.dto.AnalyticsEventType.ChordShow.toString = l;
    U.model.dto.AnalyticsEventType.ChordShow.__enum__ = U.model.dto.AnalyticsEventType;
    U.model.dto.EqualizerMode = {
        __ename__: true,
        __constructs__: ["off", "soft", "hard"]
    };
    U.model.dto.EqualizerMode.off = ["off", 0];
    U.model.dto.EqualizerMode.off.toString = l;
    U.model.dto.EqualizerMode.off.__enum__ = U.model.dto.EqualizerMode;
    U.model.dto.EqualizerMode.soft = ["soft", 1];
    U.model.dto.EqualizerMode.soft.toString = l;
    U.model.dto.EqualizerMode.soft.__enum__ = U.model.dto.EqualizerMode;
    U.model.dto.EqualizerMode.hard = ["hard", 2];
    U.model.dto.EqualizerMode.hard.toString = l;
    U.model.dto.EqualizerMode.hard.__enum__ = U.model.dto.EqualizerMode;
    U.model.dto.KeyAction = {
        __ename__: true,
        __constructs__: ["UP", "DOWN", "PRESS"]
    };
    U.model.dto.KeyAction.UP = ["UP", 0];
    U.model.dto.KeyAction.UP.toString = l;
    U.model.dto.KeyAction.UP.__enum__ = U.model.dto.KeyAction;
    U.model.dto.KeyAction.DOWN = ["DOWN", 1];
    U.model.dto.KeyAction.DOWN.toString = l;
    U.model.dto.KeyAction.DOWN.__enum__ = U.model.dto.KeyAction;
    U.model.dto.KeyAction.PRESS = ["PRESS", 2];
    U.model.dto.KeyAction.PRESS.toString = l;
    U.model.dto.KeyAction.PRESS.__enum__ = U.model.dto.KeyAction;
    U.model.dto.NotesPlayerState = function(W, q) {
        if (q == null) {
            q = ""
        }
        this.stateCode = W;
        this.message = q
    };
    p["tabPro.model.dto.NotesPlayerState"] = U.model.dto.NotesPlayerState;
    U.model.dto.NotesPlayerState.__name__ = ["tabPro", "model", "dto", "NotesPlayerState"];
    U.model.dto.NotesPlayerState.prototype = {
        __class__: U.model.dto.NotesPlayerState
    };
    U.model.dto.NotesPlayerType = {
        __ename__: true,
        __constructs__: ["html5", "flash"]
    };
    U.model.dto.NotesPlayerType.html5 = ["html5", 0];
    U.model.dto.NotesPlayerType.html5.toString = l;
    U.model.dto.NotesPlayerType.html5.__enum__ = U.model.dto.NotesPlayerType;
    U.model.dto.NotesPlayerType.flash = ["flash", 1];
    U.model.dto.NotesPlayerType.flash.toString = l;
    U.model.dto.NotesPlayerType.flash.__enum__ = U.model.dto.NotesPlayerType;
    U.model.dto.PresetDto = function(W, q) {
        this.id = W;
        this.name = q
    };
    p["tabPro.model.dto.PresetDto"] = U.model.dto.PresetDto;
    U.model.dto.PresetDto.__name__ = ["tabPro", "model", "dto", "PresetDto"];
    U.model.dto.PresetDto.prototype = {
        __class__: U.model.dto.PresetDto
    };
    U.model.dto.Stage = {
        __ename__: true,
        __constructs__: ["Application", "TabLoading", "TabParsing", "FlashNotesPlayerLoading", "Html5NotesPlayerLoading", "SoundsLoading"]
    };
    U.model.dto.Stage.Application = ["Application", 0];
    U.model.dto.Stage.Application.toString = l;
    U.model.dto.Stage.Application.__enum__ = U.model.dto.Stage;
    U.model.dto.Stage.TabLoading = ["TabLoading", 1];
    U.model.dto.Stage.TabLoading.toString = l;
    U.model.dto.Stage.TabLoading.__enum__ = U.model.dto.Stage;
    U.model.dto.Stage.TabParsing = ["TabParsing", 2];
    U.model.dto.Stage.TabParsing.toString = l;
    U.model.dto.Stage.TabParsing.__enum__ = U.model.dto.Stage;
    U.model.dto.Stage.FlashNotesPlayerLoading = ["FlashNotesPlayerLoading", 3];
    U.model.dto.Stage.FlashNotesPlayerLoading.toString = l;
    U.model.dto.Stage.FlashNotesPlayerLoading.__enum__ = U.model.dto.Stage;
    U.model.dto.Stage.Html5NotesPlayerLoading = ["Html5NotesPlayerLoading", 4];
    U.model.dto.Stage.Html5NotesPlayerLoading.toString = l;
    U.model.dto.Stage.Html5NotesPlayerLoading.__enum__ = U.model.dto.Stage;
    U.model.dto.Stage.SoundsLoading = ["SoundsLoading", 5];
    U.model.dto.Stage.SoundsLoading.toString = l;
    U.model.dto.Stage.SoundsLoading.__enum__ = U.model.dto.Stage;
    U.model.dto.StagePhase = {
        __ename__: true,
        __constructs__: ["START", "END"]
    };
    U.model.dto.StagePhase.START = ["START", 0];
    U.model.dto.StagePhase.START.toString = l;
    U.model.dto.StagePhase.START.__enum__ = U.model.dto.StagePhase;
    U.model.dto.StagePhase.END = ["END", 1];
    U.model.dto.StagePhase.END.toString = l;
    U.model.dto.StagePhase.END.__enum__ = U.model.dto.StagePhase;
    U.model.dto.ToggleAnimationPhase = {
        __ename__: true,
        __constructs__: ["START", "END"]
    };
    U.model.dto.ToggleAnimationPhase.START = ["START", 0];
    U.model.dto.ToggleAnimationPhase.START.toString = l;
    U.model.dto.ToggleAnimationPhase.START.__enum__ = U.model.dto.ToggleAnimationPhase;
    U.model.dto.ToggleAnimationPhase.END = ["END", 1];
    U.model.dto.ToggleAnimationPhase.END.toString = l;
    U.model.dto.ToggleAnimationPhase.END.__enum__ = U.model.dto.ToggleAnimationPhase;
    U.model.settings = {};
    U.model.settings.SettingsOption = {
        __ename__: true,
        __constructs__: ["showSyncHelp", "animate", "fretboard", "scale", "colorNotes", "expandRepeats", "lineBreaks", "ghostMeasures", "highlight", "highlightMeasures", "autoScroll", "promptScroll", "showChords", "scalableTabOffsets", "drawDurations", "volume", "countIn", "countDown", "metronome", "loop", "showParts", "autoExpandParts", "promptSync", "sfBuffer"]
    };
    U.model.settings.SettingsOption.showSyncHelp = ["showSyncHelp", 0];
    U.model.settings.SettingsOption.showSyncHelp.toString = l;
    U.model.settings.SettingsOption.showSyncHelp.__enum__ = U.model.settings.SettingsOption;
    U.model.settings.SettingsOption.animate = ["animate", 1];
    U.model.settings.SettingsOption.animate.toString = l;
    U.model.settings.SettingsOption.animate.__enum__ = U.model.settings.SettingsOption;
    U.model.settings.SettingsOption.fretboard = ["fretboard", 2];
    U.model.settings.SettingsOption.fretboard.toString = l;
    U.model.settings.SettingsOption.fretboard.__enum__ = U.model.settings.SettingsOption;
    U.model.settings.SettingsOption.scale = ["scale", 3];
    U.model.settings.SettingsOption.scale.toString = l;
    U.model.settings.SettingsOption.scale.__enum__ = U.model.settings.SettingsOption;
    U.model.settings.SettingsOption.colorNotes = ["colorNotes", 4];
    U.model.settings.SettingsOption.colorNotes.toString = l;
    U.model.settings.SettingsOption.colorNotes.__enum__ = U.model.settings.SettingsOption;
    U.model.settings.SettingsOption.expandRepeats = ["expandRepeats", 5];
    U.model.settings.SettingsOption.expandRepeats.toString = l;
    U.model.settings.SettingsOption.expandRepeats.__enum__ = U.model.settings.SettingsOption;
    U.model.settings.SettingsOption.lineBreaks = ["lineBreaks", 6];
    U.model.settings.SettingsOption.lineBreaks.toString = l;
    U.model.settings.SettingsOption.lineBreaks.__enum__ = U.model.settings.SettingsOption;
    U.model.settings.SettingsOption.ghostMeasures = ["ghostMeasures", 7];
    U.model.settings.SettingsOption.ghostMeasures.toString = l;
    U.model.settings.SettingsOption.ghostMeasures.__enum__ = U.model.settings.SettingsOption;
    U.model.settings.SettingsOption.highlight = ["highlight", 8];
    U.model.settings.SettingsOption.highlight.toString = l;
    U.model.settings.SettingsOption.highlight.__enum__ = U.model.settings.SettingsOption;
    U.model.settings.SettingsOption.highlightMeasures = ["highlightMeasures", 9];
    U.model.settings.SettingsOption.highlightMeasures.toString = l;
    U.model.settings.SettingsOption.highlightMeasures.__enum__ = U.model.settings.SettingsOption;
    U.model.settings.SettingsOption.autoScroll = ["autoScroll", 10];
    U.model.settings.SettingsOption.autoScroll.toString = l;
    U.model.settings.SettingsOption.autoScroll.__enum__ = U.model.settings.SettingsOption;
    U.model.settings.SettingsOption.promptScroll = ["promptScroll", 11];
    U.model.settings.SettingsOption.promptScroll.toString = l;
    U.model.settings.SettingsOption.promptScroll.__enum__ = U.model.settings.SettingsOption;
    U.model.settings.SettingsOption.showChords = ["showChords", 12];
    U.model.settings.SettingsOption.showChords.toString = l;
    U.model.settings.SettingsOption.showChords.__enum__ = U.model.settings.SettingsOption;
    U.model.settings.SettingsOption.scalableTabOffsets = ["scalableTabOffsets", 13];
    U.model.settings.SettingsOption.scalableTabOffsets.toString = l;
    U.model.settings.SettingsOption.scalableTabOffsets.__enum__ = U.model.settings.SettingsOption;
    U.model.settings.SettingsOption.drawDurations = ["drawDurations", 14];
    U.model.settings.SettingsOption.drawDurations.toString = l;
    U.model.settings.SettingsOption.drawDurations.__enum__ = U.model.settings.SettingsOption;
    U.model.settings.SettingsOption.volume = ["volume", 15];
    U.model.settings.SettingsOption.volume.toString = l;
    U.model.settings.SettingsOption.volume.__enum__ = U.model.settings.SettingsOption;
    U.model.settings.SettingsOption.countIn = ["countIn", 16];
    U.model.settings.SettingsOption.countIn.toString = l;
    U.model.settings.SettingsOption.countIn.__enum__ = U.model.settings.SettingsOption;
    U.model.settings.SettingsOption.countDown = ["countDown", 17];
    U.model.settings.SettingsOption.countDown.toString = l;
    U.model.settings.SettingsOption.countDown.__enum__ = U.model.settings.SettingsOption;
    U.model.settings.SettingsOption.metronome = ["metronome", 18];
    U.model.settings.SettingsOption.metronome.toString = l;
    U.model.settings.SettingsOption.metronome.__enum__ = U.model.settings.SettingsOption;
    U.model.settings.SettingsOption.loop = ["loop", 19];
    U.model.settings.SettingsOption.loop.toString = l;
    U.model.settings.SettingsOption.loop.__enum__ = U.model.settings.SettingsOption;
    U.model.settings.SettingsOption.showParts = ["showParts", 20];
    U.model.settings.SettingsOption.showParts.toString = l;
    U.model.settings.SettingsOption.showParts.__enum__ = U.model.settings.SettingsOption;
    U.model.settings.SettingsOption.autoExpandParts = ["autoExpandParts", 21];
    U.model.settings.SettingsOption.autoExpandParts.toString = l;
    U.model.settings.SettingsOption.autoExpandParts.__enum__ = U.model.settings.SettingsOption;
    U.model.settings.SettingsOption.promptSync = ["promptSync", 22];
    U.model.settings.SettingsOption.promptSync.toString = l;
    U.model.settings.SettingsOption.promptSync.__enum__ = U.model.settings.SettingsOption;
    U.model.settings.SettingsOption.sfBuffer = ["sfBuffer", 23];
    U.model.settings.SettingsOption.sfBuffer.toString = l;
    U.model.settings.SettingsOption.sfBuffer.__enum__ = U.model.settings.SettingsOption;
    U.model.settings.Settings = function() {};
    p["tabPro.model.settings.Settings"] = U.model.settings.Settings;
    U.model.settings.Settings.__name__ = ["tabPro", "model", "settings", "Settings"];
    U.model.settings.Settings.leadScaleFromFlashToHtml5 = function(q, W) {
        return Math.round(q * 10) / 10
    };
    U.model.settings.Settings.checkScale = function(q) {
        if (q < U.model.settings.Settings.MIN_SCALE) {
            q = U.model.settings.Settings.MIN_SCALE
        } else {
            if (q > U.model.settings.Settings.MAX_SCALE) {
                q = U.model.settings.Settings.MAX_SCALE
            } else {
                q = q
            }
        }
        q = Math.round(q * 10) / 10;
        return q
    };
    U.model.settings.Settings.checkVolume = function(q) {
        if (q < U.model.settings.Settings.MIN_VOLUME) {
            q = U.model.settings.Settings.MIN_VOLUME
        } else {
            if (q > U.model.settings.Settings.MAX_VOLUME) {
                q = U.model.settings.Settings.MAX_VOLUME
            } else {
                q = q
            }
        }
        q = Math.round(q / U.model.settings.Settings.MAX_VOLUME * 100) / 100;
        return q
    };
    U.model.settings.Settings.prototype = {
        __class__: U.model.settings.Settings
    };
    U.model.settings.SettingsCategory = {
        __ename__: true,
        __constructs__: ["appSettings", "scoreSettings", "playbackSettings"]
    };
    U.model.settings.SettingsCategory.appSettings = ["appSettings", 0];
    U.model.settings.SettingsCategory.appSettings.toString = l;
    U.model.settings.SettingsCategory.appSettings.__enum__ = U.model.settings.SettingsCategory;
    U.model.settings.SettingsCategory.scoreSettings = ["scoreSettings", 1];
    U.model.settings.SettingsCategory.scoreSettings.toString = l;
    U.model.settings.SettingsCategory.scoreSettings.__enum__ = U.model.settings.SettingsCategory;
    U.model.settings.SettingsCategory.playbackSettings = ["playbackSettings", 2];
    U.model.settings.SettingsCategory.playbackSettings.toString = l;
    U.model.settings.SettingsCategory.playbackSettings.__enum__ = U.model.settings.SettingsCategory;
    U.model.settings.SettingsFlash = function() {
        this._loadSettings()
    };
    p["tabPro.model.settings.SettingsFlash"] = U.model.settings.SettingsFlash;
    U.model.settings.SettingsFlash.__name__ = ["tabPro", "model", "settings", "SettingsFlash"];
    U.model.settings.SettingsFlash.compareXmlStructures = function(Z, Y) {
        var X = true;
        var W = Z.get_elements();
        while (W.hasNext()) {
            var q = W.next();
            if (!Y.hasNode.resolve(q.get_name())) {
                X = false;
                break
            } else {
                X = U.model.settings.SettingsFlash.compareXmlStructures(q, Y.node.resolve(q.get_name()))
            }
        }
        return X
    };
    U.model.settings.SettingsFlash.prototype = {
        getOption: function(q) {
            return this._settings.get(q[0]).value
        },
        setOption: function(W, Y, X) {
            if (X == null) {
                X = true
            }
            if (X) {
                this._loadSettings()
            }
            var q = this._settings.get(W[0]);
            q.value = Y;
            this._settings.set(W[0], q);
            if (X) {
                this._saveSettings()
            }
        },
        isOptionDefaultValue: function(q) {
            var W = this._fillSettings(this._defaultSettingsXml());
            return this._settings.get(q[0]).value == W.get(q[0]).value
        },
        _loadSettings: function() {
            var W = h.Cookie.get("settingsXml");
            var q = e.parse(W == null ? "" : W);
            var X = new m.xml.Fast(q);
            if (!U.model.settings.SettingsFlash.compareXmlStructures(this._defaultSettingsXml(), X)) {
                X = this._defaultSettingsXml()
            }
            this._settings = this._fillSettings(X)
        },
        _fillSettings: function(ac) {
            var Y = new m.ds.StringMap();
            var ab = ac.node.resolve("settings").get_elements();
            while (ab.hasNext()) {
                var aa = ab.next();
                var Z = aa.get_elements();
                while (Z.hasNext()) {
                    var X = Z.next();
                    var W = {
                        category: aa.get_name(),
                        value: X.get_innerData().toString() == "false" ? false : X.get_innerData().toString() == "true" ? true : X.get_innerData().toString()
                    };
                    var q = X.get_name();
                    Y.set(q, W)
                }
            }
            return Y
        },
        _saveSettings: function() {
            h.Cookie.set("settingsXml", this.buildXmlSettings().toString(), U.model.settings.SettingsFlash.EXPIRE_DELAY, "/")
        },
        buildXmlSettings: function() {
            var q = e.createElement("settings");
            var Z = this._settings.keys();
            while (Z.hasNext()) {
                var X = Z.next();
                var W = this._settings.get(X);
                if (!new m.xml.Fast(q).hasNode.resolve(W.category)) {
                    q.addChild(e.createElement(W.category))
                }
                var Y = e.createElement(X);
                Y.addChild(e.createPCData(A.string(W.value)));
                q.elementsNamed(W.category).next().addChild(Y)
            }
            return q
        },
        _defaultSettingsXml: function() {
            return new m.xml.Fast(e.parse("\r\n<settings>\r\n  <appSettings>\r\n    <showSyncHelp>true</showSyncHelp>\r\n    <animate>true</animate>\r\n  </appSettings>\r\n  <scoreSettings>\r\n    <scale>1.15</scale>\r\n    <colorNotes>false</colorNotes>\r\n    <expandRepeats>false</expandRepeats>\r\n    <lineBreaks>false</lineBreaks>\r\n    <ghostMeasures>true</ghostMeasures>\r\n    <highlight>true</highlight>\r\n    <autoScroll>true</autoScroll>\r\n    <promptScroll>true</promptScroll>\r\n    <showChords>true</showChords>\r\n  </scoreSettings>\r\n  <playbackSettings>\r\n    <volume>0.75</volume>\r\n    <countIn>false</countIn>\r\n    <metronome>false</metronome>\r\n    <loop>false</loop>\r\n    <showParts>false</showParts>\r\n    <autoExpandParts>true</autoExpandParts>\r\n    <promptSync>true</promptSync>\r\n    <sfBuffer>104857600</sfBuffer>\r\n  </playbackSettings>\r\n</settings>\r\n        "))
        },
        __class__: U.model.settings.SettingsFlash
    };
    U.model.settings.SettingsHtml5 = function(q) {
        this._prepareDefaultSettings(q);
        this._loadSettings()
    };
    p["tabPro.model.settings.SettingsHtml5"] = U.model.settings.SettingsHtml5;
    U.model.settings.SettingsHtml5.__name__ = ["tabPro", "model", "settings", "SettingsHtml5"];
    U.model.settings.SettingsHtml5.prototype = {
        getOption: function(q, ac, X) {
            if (ac == null) {
                ac = true
            }
            var ad = null;
            var Y = 0;
            var ab = [X == null ? this._settings : X, this._defaultSettings];
            while (Y < ab.length) {
                var Z = ab[Y];
                ++Y;
                var aa = 0;
                while (aa < Z.length) {
                    var W = Z[aa];
                    ++aa;
                    if (W.option == q[0]) {
                        if (R.enumEq(q, U.model.settings.SettingsOption.volume) && ac) {
                            ad = 127 * W.value
                        } else {
                            ad = W.value
                        }
                        break
                    }
                }
                if (ad != null) {
                    break
                }
            }
            return ad
        },
        setOption: function(q, Y, W) {
            if (W == null) {
                W = true
            }
            if (this._containsOption(this._settings, q[0])) {
                var aa = 0;
                var X = this._settings;
                while (aa < X.length) {
                    var Z = X[aa];
                    ++aa;
                    if (Z.option == q[0]) {
                        Z.value = Y;
                        break
                    }
                }
            } else {
                this._settings.push({
                    option: q[0],
                    value: Y
                })
            }
            if (W) {
                this._saveSettings()
            }
        },
        isOptionDefaultValue: function(q) {
            return this.getOption(q, U.model.settings.Settings.WITHOUT_MODIFY) == this.getOption(q, U.model.settings.Settings.WITHOUT_MODIFY, this._defaultSettings)
        },
        _prepareDefaultSettings: function(W) {
            var q = '[\r\n            {"option": "fretboard", "value": true},\r\n            {"option": "scale", "value": 1},\r\n            {"option": "expandRepeats", "value": false},\r\n            {"option": "ghostMeasures", "value": false},\r\n            {"option": "highlight", "value": true},\r\n            {"option": "highlightMeasures", "value": false},\r\n            {"option": "volume", "value": 0.75},\r\n            {"option": "countDown", "value": false},\r\n            {"option": "autoScroll", "value": true},\r\n            {"option": "metronome", "value": false},\r\n            {"option": "drawDurations", "value": true}\r\n        ]';
            this._defaultSettings = JSON.parse(q);
            var Z = 0;
            var X = this._defaultSettings;
            while (Z < X.length) {
                var Y = X[Z];
                ++Z;
                if (D.field(W, Y.option) == null) {
                    Y.value = Y.value
                } else {
                    Y.value = D.field(W, Y.option)
                }
            }
        },
        _loadSettings: function() {
            var q = null;
            try {
                q = JSON.parse(h.Browser.getLocalStorage().getItem("settingsHtml5"))
            } catch (W) {
                h.Browser.getLocalStorage().removeItem("settingsHtml5");
                q = this._defaultSettings.slice()
            }
            if (q == null) {
                this._settings = this._defaultSettings.slice()
            } else {
                this._settings = q
            }
        },
        _saveSettings: function() {
            h.Browser.getLocalStorage().setItem("settingsHtml5", JSON.stringify(this._settings))
        },
        _containsOption: function(X, W) {
            var q = false;
            var Z = 0;
            while (Z < X.length) {
                var Y = X[Z];
                ++Z;
                if (Y.option == W) {
                    q = true;
                    break
                }
            }
            return q
        },
        __class__: U.model.settings.SettingsHtml5
    };
    U.view = {};
    U.view.AnalyticsMediator = function(q, W) {
        S.puremvc.haxe.patterns.mediator.Mediator.call(this, q, W);
        this._tabProxy = this.facade.retrieveProxy("TabProxy");
        this._isDetectStarted = false;
        this._isPlayActive = false;
        this._isLoopActive = false
    };
    p["tabPro.view.AnalyticsMediator"] = U.view.AnalyticsMediator;
    U.view.AnalyticsMediator.__name__ = ["tabPro", "view", "AnalyticsMediator"];
    U.view.AnalyticsMediator.__super__ = S.puremvc.haxe.patterns.mediator.Mediator;
    U.view.AnalyticsMediator.prototype = v(S.puremvc.haxe.patterns.mediator.Mediator.prototype, {
        listNotificationInterests: function() {
            return ["AnalyticsEvent", "ToggleFretboard", "ToggleTracklist", "ToggleFitToScreen", "ToggleFullScreen", "LoadTabConfigComplete", "ShowTrack", "ToggleLoop", "TogglePlay", "BeatSoundStart"]
        },
        handleNotification: function(Y) {
            var q = Y.getBody();
            var Z = Y.getName();
            switch (Z) {
                case "AnalyticsEvent":
                    var X = q;
                    this._fire(X.action, X.value, X.keyboard);
                    this._detectPlaybackAfterChangePosition(X.action);
                    break;
                case "ToggleFretboard":
                    var W = q;
                    if (W.animationPhase == U.model.dto.ToggleAnimationPhase.START) {
                        this._fire(U.model.dto.AnalyticsEventType.ToggleFretboard, W.isActive, W.keyboard)
                    }
                    break;
                case "ToggleTracklist":
                    this._fire(U.model.dto.AnalyticsEventType.ToggleInstruments, q, null);
                    break;
                case "ToggleFitToScreen":
                    this._fire(U.model.dto.AnalyticsEventType.ToggleFitToScreen, q, null);
                    break;
                case "ToggleFullScreen":
                    this._fire(U.model.dto.AnalyticsEventType.ToggleFullscreen, q, null);
                    break;
                case "LoadTabConfigComplete":
                    this._resetDetectPlayback();
                    break;
                case "ShowTrack":
                    this._startDetectPlayback();
                    break;
                case "ToggleLoop":
                    this._isLoopActive = q;
                    break;
                case "TogglePlay":
                    this._detectPlayback(q);
                    break;
                case "BeatSoundStart":
                    this._detectPlaybackInLoop(q);
                    break
            }
        },
        _fire: function(X, W, q) {
            var Y = this;
            if (D.isFunction(this.playerEventListener)) {
                m.Timer.delay(function() {
                    if (W != null && typeof(W) == "boolean") {
                        if (W) {
                            W = 1
                        } else {
                            W = 0
                        }
                    }
                    Y.playerEventListener(X[0], W, q)
                }, 25)
            }
        },
        _startDetectPlayback: function() {
            if (!this._isDetectStarted) {
                this._isDetectStarted = true
            } else {
                if (this._isPlayActive) {
                    this._playback(this._lastPosition, this._tmpPosition)
                }
            }
            this._lastPosition = this._tabProxy.getCurrentPosition()
        },
        _resetDetectPlayback: function() {
            if (this._isDetectStarted && this._isPlayActive) {
                this._playback(this._lastPosition, this._tmpPosition)
            }
            this._isDetectStarted = false;
            this._isPlayActive = false;
            this._isLoopActive = false;
            this._lastPosition = null;
            this._tmpPosition = null
        },
        _detectPlayback: function(W) {
            if (!this._isDetectStarted) {
                return
            }
            var q = this._tabProxy.getCurrentPosition();
            if (!W) {
                this._tmpPosition = null
            }
            if (!W && this._isPlayActive) {
                this._playback(this._lastPosition, q)
            }
            this._lastPosition = q;
            this._isPlayActive = W
        },
        _detectPlaybackAfterChangePosition: function(q) {
            var W = this._tabProxy.getCurrentPosition();
            if (B.indexOf([U.model.dto.AnalyticsEventType.PositionChange[0], U.model.dto.AnalyticsEventType.InstrumentMeasureCellClick[0]], q[0], 0) != -1) {
                if (this._isPlayActive) {
                    this._playback(this._lastPosition, this._tmpPosition)
                }
                this._lastPosition = W
            }
        },
        _detectPlaybackInLoop: function(W) {
            if (W == null) {
                return
            }
            var q = null;
            var Y = null;
            var X = new V.TrackPosition(W.measure.track.number, W.measure.getIndex(), W.index);
            if (this._isLoopActive) {
                q = this._tabProxy.getCurrentLoop();
                if (X.measureIndex > q.endMeasure || X.beatIndex > q.endBeat) {
                    return
                }
                Y = new V.TrackPosition(this._tabProxy.getCurrentTrack().number, q.startMeasure, q.startBeat)
            }
            if (this._isLoopActive && this._tmpPosition != null && Y.equal(X)) {
                this._playback(this._lastPosition, this._tmpPosition)
            }
            this._tmpPosition = X
        },
        _playback: function(q, W) {
            this._fire(U.model.dto.AnalyticsEventType.Playback, {
                trackNumber: q.trackNumber,
                measureNumber: q.measureIndex + 1,
                beatNumber: q.beatIndex + 1,
                measureNumber2: W.measureIndex + 1,
                beatNumber2: W.beatIndex + 1
            }, false)
        },
        __class__: U.view.AnalyticsMediator
    });
    u.model.ITablatureListener = function() {};
    p["tabRender.model.ITablatureListener"] = u.model.ITablatureListener;
    u.model.ITablatureListener.__name__ = ["tabRender", "model", "ITablatureListener"];
    u.model.ITablatureListener.prototype = {
        __class__: u.model.ITablatureListener
    };
    U.view.AsciiTabRenderMediator = function(q, W) {
        S.puremvc.typedExt.TypedMediator.call(this, q, W);
        this._tabProxy = this.facade.retrieveProxy("TabProxy");
        this._appProxy = this.facade.retrieveProxy("AppProxy");
        this._tablature = this._tabProxy.getTablature();
        this.initAscii2Writer();
        this.createCanvas()
    };
    p["tabPro.view.AsciiTabRenderMediator"] = U.view.AsciiTabRenderMediator;
    U.view.AsciiTabRenderMediator.__name__ = ["tabPro", "view", "AsciiTabRenderMediator"];
    U.view.AsciiTabRenderMediator.__interfaces__ = [u.model.ITablatureListener, U.interfaces.ITabRenderViewListener];
    U.view.AsciiTabRenderMediator.__super__ = S.puremvc.typedExt.TypedMediator;
    U.view.AsciiTabRenderMediator.prototype = v(S.puremvc.typedExt.TypedMediator.prototype, {
        listNotificationInterests: function() {
            return ["TogglePlay", "MoveToBeat", "BeatSoundStart", "ShowTrack", "FontSizeChanged", "BeatSoundStart"]
        },
        handleNotification: function(W) {
            var q = W.getBody();
            var X = W.getName();
            switch (X) {
                case "MoveToBeat":
                    this.update();
                    break;
                case "BeatSoundStart":
                    this.update();
                    this.viewComponent.animateCursor(this._tabProxy.getTempCoeff(), this._tablature);
                    break;
                case "TogglePlay":
                    if (!q) {
                        this.viewComponent.stopAnimation()
                    }
                    break;
                case "ShowTrack":
                    this.renderTrack(q);
                    this.update();
                    break;
                case "FontSizeChanged":
                    this.setFontSize(q);
                    this.update();
                    break
            }
        },
        createCanvas: function() {
            var q = this.viewComponent.get_width();
            var W = this.viewComponent.get_height()
        },
        onScroll: function(q) {
            var W = q * 0;
            this._tablature.scrollToY(W)
        },
        onMouseScroll: function(q, W) {
            this._tablature.scrollOnDelta(W)
        },
        onCanvasClick: function(q, X, W) {},
        onBeatClick: function(q, W) {
            this._tabProxy.moveToBeatIndex(q, W)
        },
        onDragStart: function(q, W) {},
        onDrag: function(W, q, Y, X) {},
        onDragStop: function() {},
        onMouseMove: function(q, W) {},
        onKeyPress: function(q) {
            this.sendNotification("KeyAction", q)
        },
        onScrollDelta: function(q, X, W) {
            if (W) {} else {
                this._tablature.scrollOnDelta(X)
            }
        },
        update: function() {
            this.viewComponent.update(this._tabProxy, this._tablature)
        },
        initAscii2Writer: function() {
            var q = 80;
            this._ascii2Writer = new N.Ascii2Writer(this._tabProxy.getSong(), q)
        },
        renderTrack: function(q) {
            var X = q - 1;
            var W = this._ascii2Writer.write(X);
            this.viewComponent.renderTrack(W, this._tablature)
        },
        setFontSize: function(q) {
            this.viewComponent.setFontSize(q)
        },
        __class__: U.view.AsciiTabRenderMediator
    });
    U.view.ControlPanelMediator = function(q, W) {
        S.puremvc.typedExt.TypedMediator.call(this, q, W);
        this._settingsProxy = this.facade.retrieveProxy("SettingsProxy");
        this._appProxy = this.facade.retrieveProxy("AppProxy");
        this._tabProxy = this.facade.retrieveProxy("TabProxy")
    };
    p["tabPro.view.ControlPanelMediator"] = U.view.ControlPanelMediator;
    U.view.ControlPanelMediator.__name__ = ["tabPro", "view", "ControlPanelMediator"];
    U.view.ControlPanelMediator.__interfaces__ = [U.interfaces.IControlPanelViewListener];
    U.view.ControlPanelMediator.__super__ = S.puremvc.typedExt.TypedMediator;
    U.view.ControlPanelMediator.prototype = v(S.puremvc.typedExt.TypedMediator.prototype, {
        listNotificationInterests: function() {
            return ["LoadTabConfigComplete", "ShowPitchNotification", "CountDownStart", "CountDownBreak", "TogglePlay", "PresetsProgressLoad", "PlayerAcceptSong", "EqualizerSwitched", "ToggleLoop", "IntentChangeTemp", "TempChanged", "IntentToggleSettings", "IntentChangePitch", "PitchChanged", "ToggleFretboard", "IntentToggleMetronome"]
        },
        handleNotification: function(X) {
            var Y = X.getName();
            switch (Y) {
                case "LoadTabConfigComplete":
                    this.viewComponent.reset();
                    var W = {
                        controlPanelStyle: this._appProxy.controlPanelStyle,
                        temp: this._tabProxy.getTempCoeff(),
                        volume: this._settingsProxy.getOption(U.model.settings.SettingsOption.volume),
                        metronome: this._settingsProxy.getOption(U.model.settings.SettingsOption.metronome),
                        countDown: this._settingsProxy.getOption(U.model.settings.SettingsOption.countDown),
                        autoScroll: this._settingsProxy.getOption(U.model.settings.SettingsOption.autoScroll),
                        fretboard: this._settingsProxy.getOption(U.model.settings.SettingsOption.fretboard),
                        drawDurations: this._settingsProxy.getOption(U.model.settings.SettingsOption.drawDurations)
                    };
                    this.viewComponent.configure(W);
                    break;
                case "PlayerAcceptSong":
                    this.viewComponent.enablePlayOption();
                    break;
                case "PresetsProgressLoad":
                    this.viewComponent.updatePresetsProgressLoad(X.getBody());
                    break;
                case "ShowPitchNotification":
                    this.viewComponent.showPitchNotification(X.getBody(), this._tabProxy.getCurrentTrack());
                    break;
                case "IntentChangeTemp":
                    this.onIntentTempChange(X.getBody());
                    break;
                case "TempChanged":
                    this.viewComponent.setTemp(X.getBody());
                    break;
                case "IntentToggleSettings":
                    this.viewComponent.toggleSettings(X.getBody());
                    break;
                case "IntentChangePitch":
                    this._tabProxy.changePitch(X.getBody());
                    break;
                case "PitchChanged":
                    this.viewComponent.setPitch(X.getBody());
                    break;
                case "TogglePlay":
                    this.viewComponent.togglePlay(X.getBody());
                    break;
                case "EqualizerSwitched":
                    this.viewComponent.switchEqualizerOption(X.getBody());
                    break;
                case "ToggleLoop":
                    this.viewComponent.toggleLoopMode(X.getBody());
                    break;
                case "CountDownStart":
                    this.viewComponent.togglePlay(true);
                    break;
                case "CountDownBreak":
                    this.viewComponent.togglePlay(false);
                    break;
                case "ToggleFretboard":
                    var q = X.getBody();
                    if (q.animationPhase == U.model.dto.ToggleAnimationPhase.START) {
                        this.viewComponent.toggleFretBoard(q.isActive)
                    }
                    break;
                case "IntentToggleMetronome":
                    this.onToggleMetronome(null, true);
                    break
            }
        },
        onIntentTogglePlay: function(q) {
            if (q) {
                this.sendNotification("IntentTogglePlay", false)
            } else {
                var W = {
                    action: U.model.dto.AnalyticsEventType.DisabledPlay,
                    value: null,
                    keyboard: false
                };
                this.sendNotification("AnalyticsEvent", W)
            }
        },
        onRewind: function() {
            this._tabProxy.rewind()
        },
        onVolumeChange: function(q) {
            this._settingsProxy.setOption(U.model.settings.SettingsOption.volume, q)
        },
        analyticsLogChangeVolume: function(W) {
            var q = {
                action: U.model.dto.AnalyticsEventType.VolumeChange,
                value: W / 100,
                keyboard: false
            };
            this.sendNotification("AnalyticsEvent", q)
        },
        onIntentTempChange: function(q) {
            this._tabProxy.setTempCoeff(q)
        },
        analyticsLogChangeTemp: function(q) {
            var W = {
                action: U.model.dto.AnalyticsEventType.TempoChange,
                value: q,
                keyboard: false
            };
            this.sendNotification("AnalyticsEvent", W)
        },
        onIntentEqualizerSwitch: function() {
            this._tabProxy.switchEqualizer()
        },
        onIntentToggleLoop: function() {
            this._tabProxy.toggleLoop()
        },
        onFontSizeChange: function(q) {
            this.sendNotification("FontSizeChanged", q)
        },
        onPitchChange: function(W) {
            this._tabProxy.changePitch(W);
            var q = {
                action: U.model.dto.AnalyticsEventType.PitchChange,
                value: W,
                keyboard: false
            };
            this.sendNotification("AnalyticsEvent", q)
        },
        onTransposeChange: function(W) {
            this._tabProxy.transposeSong(W);
            var q = {
                action: U.model.dto.AnalyticsEventType.TransposeChange,
                value: W,
                keyboard: false
            };
            this.sendNotification("AnalyticsEvent", q)
        },
        onTogglePitchTransposeControl: function(W) {
            var q = {
                action: U.model.dto.AnalyticsEventType.TogglePitchTransposeControl,
                value: W,
                keyboard: false
            };
            this.sendNotification("AnalyticsEvent", q)
        },
        onToggleMetronome: function(X, q) {
            if (q == null) {
                q = false
            }
            this._settingsProxy.setOption(U.model.settings.SettingsOption.metronome, !this._settingsProxy.getOption(U.model.settings.SettingsOption.metronome));
            this.viewComponent.toggleMetronomeOption(this._settingsProxy.getOption(U.model.settings.SettingsOption.metronome));
            var W = {
                action: U.model.dto.AnalyticsEventType.ToggleMetronome,
                value: this._settingsProxy.getOption(U.model.settings.SettingsOption.metronome),
                keyboard: q
            };
            this.sendNotification("AnalyticsEvent", W)
        },
        onToggleCountDown: function() {
            this._settingsProxy.setOption(U.model.settings.SettingsOption.countDown, !this._settingsProxy.getOption(U.model.settings.SettingsOption.countDown));
            this.sendNotification("SaveSettings");
            var q = {
                action: U.model.dto.AnalyticsEventType.ToggleCountDown,
                value: this._settingsProxy.getOption(U.model.settings.SettingsOption.countDown),
                keyboard: false
            };
            this.sendNotification("AnalyticsEvent", q)
        },
        onToggleAutoScroll: function() {
            this._settingsProxy.setOption(U.model.settings.SettingsOption.autoScroll, !this._settingsProxy.getOption(U.model.settings.SettingsOption.autoScroll));
            this.sendNotification("SaveSettings");
            var q = {
                action: U.model.dto.AnalyticsEventType.ToggleAutoScroll,
                value: this._settingsProxy.getOption(U.model.settings.SettingsOption.autoScroll),
                keyboard: false
            };
            this.sendNotification("AnalyticsEvent", q)
        },
        onToggleDrawDurations: function() {
            this._settingsProxy.setOption(U.model.settings.SettingsOption.drawDurations, !this._settingsProxy.getOption(U.model.settings.SettingsOption.drawDurations));
            this.sendNotification("SaveSettings");
            this.sendNotification("ToggleDrawDurations");
            var q = {
                action: U.model.dto.AnalyticsEventType.ToggleDrawDurations,
                value: this._settingsProxy.getOption(U.model.settings.SettingsOption.drawDurations),
                keyboard: false
            };
            this.sendNotification("AnalyticsEvent", q)
        },
        onIntentToggleFretBoard: function() {
            this.sendNotification("IntentToggleFretboard");
            this.sendNotification("SaveSettings")
        },
        onIntentToggleAdvControl: function() {
            this.sendNotification("IntentToggleAdvancedControl")
        },
        onToggleSettings: function(W) {
            var q = {
                action: U.model.dto.AnalyticsEventType.ToggleSettings,
                value: W,
                keyboard: false
            };
            this.sendNotification("AnalyticsEvent", q)
        },
        __class__: U.view.ControlPanelMediator
    });
    U.view.CountDownMediator = function(q, W) {
        S.puremvc.typedExt.TypedMediator.call(this, q, W);
        this._tabProxy = this.facade.retrieveProxy("TabProxy");
        this.startCount()
    };
    p["tabPro.view.CountDownMediator"] = U.view.CountDownMediator;
    U.view.CountDownMediator.__name__ = ["tabPro", "view", "CountDownMediator"];
    U.view.CountDownMediator.__interfaces__ = [U.interfaces.ICountDownViewListener];
    U.view.CountDownMediator.__super__ = S.puremvc.typedExt.TypedMediator;
    U.view.CountDownMediator.prototype = v(S.puremvc.typedExt.TypedMediator.prototype, {
        listNotificationInterests: function() {
            return ["TogglePlay", "CountDownBreak"]
        },
        handleNotification: function(q) {
            var W = q.getName();
            switch (W) {
                case "TogglePlay":
                    if (!q.getBody()) {
                        this._active = false;
                        this.finishCount()
                    }
                    break;
                case "CountDownBreak":
                    this.breakCount();
                    break
            }
        },
        startCount: function() {
            var Z = this._tabProxy.getSong().tracks[0].measures[0].header;
            var W = Z.tempo.value;
            var X = Z.timeSignature.numerator;
            var Y = Z.timeSignature.denominator.value;
            var q = Math.round(60 / W * 1000 * 4 / Y / this._tabProxy.getTempCoeff());
            this._currentCount = X;
            this.viewComponent.show();
            this.viewComponent.start();
            this._active = true;
            this._timer = new m.Timer(q);
            this._timer.run = s(this, this.next);
            this._tabProxy.startPlayCountDown();
            this.next()
        },
        next: function() {
            if (this._currentCount == 0 || !this._active) {
                this.finishCount()
            } else {
                this.viewComponent.next(this._currentCount);
                this._currentCount--;
                this._tabProxy.playCountDown()
            }
        },
        breakCount: function() {
            this._timer.stop();
            this.viewComponent.hide();
            this.sendNotification("CountDownEnd")
        },
        finishCount: function() {
            this._timer.stop();
            this.viewComponent.hide();
            this.sendNotification("CountDownEnd");
            if (this._active) {
                this._tabProxy.play()
            }
        },
        __class__: U.view.CountDownMediator
    });
    U.view.EqualizerMediator = function(q, W) {
        S.puremvc.typedExt.TypedMediator.call(this, q, W);
        this._tabProxy = this.facade.retrieveProxy("TabProxy")
    };
    p["tabPro.view.EqualizerMediator"] = U.view.EqualizerMediator;
    U.view.EqualizerMediator.__name__ = ["tabPro", "view", "EqualizerMediator"];
    U.view.EqualizerMediator.__interfaces__ = [U.interfaces.IEqualizerListener];
    U.view.EqualizerMediator.__super__ = S.puremvc.typedExt.TypedMediator;
    U.view.EqualizerMediator.prototype = v(S.puremvc.typedExt.TypedMediator.prototype, {
        listNotificationInterests: function() {
            return ["ToggleEqualizer", "LoadTabComplete"]
        },
        handleNotification: function(q) {
            var W = q.getName();
            switch (W) {
                case "LoadTabComplete":
                    this.viewComponent.configure(null);
                    break;
                case "ToggleEqualizer":
                    this.viewComponent.toggle(q.getBody());
                    break
            }
        },
        onChangeEqualizerParameters: function(q) {
            q.noise = 14000;
            this._tabProxy.setEqualizerParameters(q)
        },
        __class__: U.view.EqualizerMediator
    });
    U.view.FretBoardMediator = function(q, W) {
        this._isViewComponentVisible = false;
        S.puremvc.typedExt.TypedMediator.call(this, q, W);
        this._settingsProxy = this.facade.retrieveProxy("SettingsProxy");
        this._tabProxy = this.facade.retrieveProxy("TabProxy");
        this._appProxy = this.facade.retrieveProxy("AppProxy");
        this._isViewComponentVisible = this._settingsProxy.getOption(U.model.settings.SettingsOption.fretboard)
    };
    p["tabPro.view.FretBoardMediator"] = U.view.FretBoardMediator;
    U.view.FretBoardMediator.__name__ = ["tabPro", "view", "FretBoardMediator"];
    U.view.FretBoardMediator.__super__ = S.puremvc.typedExt.TypedMediator;
    U.view.FretBoardMediator.prototype = v(S.puremvc.typedExt.TypedMediator.prototype, {
        listNotificationInterests: function() {
            return ["ShowTrack", "MoveToBeat", "BeatSoundStart", "IntentToggleFretboard", "TogglePlay"]
        },
        handleNotification: function(q) {
            S.puremvc.typedExt.TypedMediator.prototype.handleNotification.call(this, q);
            var W = q.getName();
            switch (W) {
                case "ShowTrack":
                    this.viewComponent.setStringCount(this._tabProxy.getCurrentTrack().stringCount());
                    this._update(U.view.FretBoardMediator.FORCE_UPDATE);
                    break;
                case "MoveToBeat":
                    this._update();
                    break;
                case "BeatSoundStart":
                    this._update(!U.view.FretBoardMediator.FORCE_UPDATE, U.view.FretBoardMediator.WITH_ANIMATION);
                    break;
                case "IntentToggleFretboard":
                    this._toggleViewComponent(q.getBody() != null ? q.getBody().active : null, q.getBody() != null ? q.getBody().withAnimation : true, q.getBody() != null ? q.getBody().keyboard : false);
                    this._settingsProxy.setOption(U.model.settings.SettingsOption.fretboard, this._isViewComponentVisible);
                    break;
                case "TogglePlay":
                    if (q.getBody()) {
                        this._wasPlayed = true
                    }
                    if (this._wasPlayed && !q.getBody()) {
                        this._update()
                    }
                    break
            }
        },
        _toggleViewComponent: function(Y, X, q) {
            if (Y == null) {
                this._isViewComponentVisible = !this._isViewComponentVisible
            } else {
                this._isViewComponentVisible = Y
            }
            var W = {
                isActive: this._isViewComponentVisible,
                withAnimation: X == null ? false : X,
                animationPhase: U.model.dto.ToggleAnimationPhase.START,
                keyboard: q
            };
            if (this._isViewComponentVisible) {
                this.viewComponent.show()
            } else {
                this.viewComponent.hide()
            }
            this.sendNotification("ToggleFretboard", W)
        },
        onStopAnimation: function(W) {
            var q = {
                isActive: W,
                withAnimation: null,
                animationPhase: U.model.dto.ToggleAnimationPhase.END,
                keyboard: null
            };
            this.sendNotification("ToggleFretboard", q)
        },
        _update: function(Z, ab) {
            if (ab == null) {
                ab = false
            }
            if (Z == null) {
                Z = false
            }
            if (Z || this._isViewComponentVisible) {
                var Y = new Array();
                var W = this._tabProxy.getCurrentTrack();
                var q = this._tabProxy.getCurrentPosition();
                this.viewComponent.setCapo(W.offset);
                Y.push(W.getBeat(q.measureIndex, q.beatIndex));
                var aa = W.getNextBeat(q.measureIndex, q.beatIndex);
                Y.push(aa);
                var ac = 0;
                while (ac < 2) {
                    var X = ac++;
                    if (aa == null) {
                        Y.pop();
                        break
                    }
                    aa = W.getNextBeat(aa.measure.getIndex(), aa.index);
                    Y.push(aa)
                }
                this.viewComponent.update(Y, ab, ab ? Math.floor(Y[0].getRealDurationInMilliSeconds() / this._tabProxy.getTempCoeff()) : 0)
            }
        },
        getFretboard: function() {
            return h.Boot.__cast(this.viewComponent.getFretboard(), C.FretBoard)
        },
        onViewLoadComplete: function() {
            this._appProxy.onFretboardReady()
        },
        configureView: function(q) {
            this.viewComponent.configure(q)
        },
        __class__: U.view.FretBoardMediator
    });
    U.view.InstrumentSwitcherMediator = function(q, W) {
        S.puremvc.typedExt.TypedMediator.call(this, q, W);
        this._tabProxy = this.facade.retrieveProxy("TabProxy")
    };
    p["tabPro.view.InstrumentSwitcherMediator"] = U.view.InstrumentSwitcherMediator;
    U.view.InstrumentSwitcherMediator.__name__ = ["tabPro", "view", "InstrumentSwitcherMediator"];
    U.view.InstrumentSwitcherMediator.__super__ = S.puremvc.typedExt.TypedMediator;
    U.view.InstrumentSwitcherMediator.prototype = v(S.puremvc.typedExt.TypedMediator.prototype, {
        listNotificationInterests: function() {
            return ["IntentSwitchInstrument"]
        },
        handleNotification: function(q) {
            var W = q.getName();
            switch (W) {
                case "IntentSwitchInstrument":
                    this.viewComponent.show();
                    this._selectedTrack = this._tabProxy.getTracks()[A["int"](q.getBody()) - 1];
                    this.viewComponent.setTrackLabelText(this._selectedTrack.name);
                    this.viewComponent.updateForTrack(this._selectedTrack.channel.instrument());
                    break
            }
        },
        restoreDefaulInstrument: function() {
            this._tabProxy.restoreDefaulPreset(this._selectedTrack.number)
        },
        applySelectedInstrument: function(q) {
            this._tabProxy.changePreset(this._selectedTrack.number, q)
        },
        __class__: U.view.InstrumentSwitcherMediator
    });
    U.view.InstrumentsColorMediator = function(q, W) {
        S.puremvc.haxe.patterns.mediator.Mediator.call(this, q, W)
    };
    p["tabPro.view.InstrumentsColorMediator"] = U.view.InstrumentsColorMediator;
    U.view.InstrumentsColorMediator.__name__ = ["tabPro", "view", "InstrumentsColorMediator"];
    U.view.InstrumentsColorMediator.__super__ = S.puremvc.haxe.patterns.mediator.Mediator;
    U.view.InstrumentsColorMediator.prototype = v(S.puremvc.haxe.patterns.mediator.Mediator.prototype, {
        listNotificationInterests: function() {
            return []
        },
        handleNotification: function(q) {},
        __class__: U.view.InstrumentsColorMediator
    });
    U.view.LoadingPresetsMediator = function(q, W, X) {
        S.puremvc.typedExt.TypedMediator.call(this, q, W);
        W.show()
    };
    p["tabPro.view.LoadingPresetsMediator"] = U.view.LoadingPresetsMediator;
    U.view.LoadingPresetsMediator.__name__ = ["tabPro", "view", "LoadingPresetsMediator"];
    U.view.LoadingPresetsMediator.__interfaces__ = [U.interfaces.ILoadingPresetsViewListener];
    U.view.LoadingPresetsMediator.__super__ = S.puremvc.typedExt.TypedMediator;
    U.view.LoadingPresetsMediator.prototype = v(S.puremvc.typedExt.TypedMediator.prototype, {
        listNotificationInterests: function() {
            return ["PresetLoaded", "PresetsProgressLoad", "PlayerAcceptSong"]
        },
        handleNotification: function(W) {
            var q = this;
            var X = W.getName();
            switch (X) {
                case "PresetLoaded":
                    break;
                case "PresetsProgressLoad":
                    this.viewComponent.setState(W.getBody());
                    break;
                case "PlayerAcceptSong":
                    this.viewComponent.setTotal(function() {
                        q.viewComponent.hide();
                        q.facade.removeMediator("LoadingPresetsMediator")
                    });
                    break
            }
        },
        __class__: U.view.LoadingPresetsMediator
    });
    U.view.RootMediator = function(q, W) {
        S.puremvc.typedExt.TypedMediator.call(this, q, W);
        this._settingsProxy = this.facade.retrieveProxy("SettingsProxy");
        this._appProxy = this.facade.retrieveProxy("AppProxy");
        this._tabProxy = this.facade.retrieveProxy("TabProxy");
        var Y = S.puremvc.typedExt.js.UiComponentService.create(U.view.js.InstrumentsColorView);
        var X = new U.view.InstrumentsColorMediator("InstrumentsColorMediator", Y);
        this.facade.registerMediator(X);
        this._configureViewComponent()
    };
    p["tabPro.view.RootMediator"] = U.view.RootMediator;
    U.view.RootMediator.__name__ = ["tabPro", "view", "RootMediator"];
    U.view.RootMediator.__interfaces__ = [U.interfaces.IRootViewListener];
    U.view.RootMediator.__super__ = S.puremvc.typedExt.TypedMediator;
    U.view.RootMediator.prototype = v(S.puremvc.typedExt.TypedMediator.prototype, {
        listNotificationInterests: function() {
            return ["LoadTabError", "StartLoadingPresets", "ToggleFretboard", "ToggleFitToScreen", "ToggleFullScreen"]
        },
        handleNotification: function(q) {
            var W = q.getName();
            switch (W) {
                case "LoadTabError":
                    h.Lib.alert(U.Errors.CAN_NOT_LOAD_TAB.message + "\n system error: " + A.string(q.getBody().message));
                    break;
                case "StartLoadingPresets":
                    this.viewComponent.show();
                    break;
                case "ToggleFretboard":
                    this.toggleFretboard(q.getBody());
                    break;
                case "ToggleFitToScreen":
                    this.viewComponent.toggleFitToScreen(q.getBody());
                    break;
                case "ToggleFullScreen":
                    this.viewComponent.toggleFullscreenMode(q.getBody());
                    break
            }
        },
        _configureViewComponent: function() {
            var q = {
                fretboard: this._settingsProxy.getOption(U.model.settings.SettingsOption.fretboard),
                fitToScreen: this._appProxy.fitToScreen,
                offsetTop: this._appProxy.offsetTop,
                minHeight: this._appProxy.minHeight,
                maxHeight: this._appProxy.maxHeight
            };
            this.viewComponent.configure(q)
        },
        onResizeWindow: function() {
            this.sendNotification("ResizeWindow")
        },
        toggleFretboard: function(q) {
            if (q.animationPhase == U.model.dto.ToggleAnimationPhase.START) {
                this.viewComponent.toggleFretboard(q.isActive, q.withAnimation)
            }
        },
        onKeyAction: function(Y) {
            var Z = Y.keyCode;
            var X = null;
            if (Y.type == "keydown") {
                X = U.model.dto.KeyAction.DOWN
            } else {
                if (Y.type == "keyup") {
                    X = U.model.dto.KeyAction.UP
                } else {
                    if (Y.type == "keypress") {
                        X = U.model.dto.KeyAction.PRESS
                    }
                }
            }
            var q = Y.ctrlKey || Y.metaKey;
            if (!U.model.KeyboardProcessor.isCapturedKey(Y) || Z == 32 && this._tabProxy.instanceId > 0) {
                return true
            }
            var W = {
                keyCode: Z,
                keyAction: X,
                ctrlPressed: q
            };
            if (this._appProxy.canvasType != "flash") {
                this.sendNotification("KeyAction", W)
            }
            return false
        },
        __class__: U.view.RootMediator
    });
    U.view.SplashMediator = function(q, W) {
        S.puremvc.typedExt.TypedMediator.call(this, q, W);
        W.show()
    };
    p["tabPro.view.SplashMediator"] = U.view.SplashMediator;
    U.view.SplashMediator.__name__ = ["tabPro", "view", "SplashMediator"];
    U.view.SplashMediator.__interfaces__ = [U.interfaces.ISplashViewListener];
    U.view.SplashMediator.__super__ = S.puremvc.typedExt.TypedMediator;
    U.view.SplashMediator.prototype = v(S.puremvc.typedExt.TypedMediator.prototype, {
        listNotificationInterests: function() {
            return ["LoadTabConfigComplete", "LoadTabComplete"]
        },
        handleNotification: function(q) {
            var W = q.getName();
            switch (W) {
                case "LoadTabConfigComplete":
                    this.viewComponent.show();
                    break;
                case "LoadTabComplete":
                    this.viewComponent.hide();
                    break
            }
        },
        __class__: U.view.SplashMediator
    });
    U.view.TabRenderMediator = function(q, W) {
        S.puremvc.typedExt.TypedMediator.call(this, q, W);
        this._settingsProxy = this.facade.retrieveProxy("SettingsProxy");
        this._tabProxy = this.facade.retrieveProxy("TabProxy");
        this._appProxy = this.facade.retrieveProxy("AppProxy");
        this._hitMapTabProxy = this.facade.retrieveProxy("HitMapTabProxy");
        this._tablature = null;
        var X = {
            instanceId: this._tabProxy.instanceId
        };
        W.configure(X);
        W.createCanvas();
        this._autoScrollTimer = new m.Timer(600);
        this._tracklistExpanded = false
    };
    p["tabPro.view.TabRenderMediator"] = U.view.TabRenderMediator;
    U.view.TabRenderMediator.__name__ = ["tabPro", "view", "TabRenderMediator"];
    U.view.TabRenderMediator.__interfaces__ = [u.model.ITablatureListener, U.interfaces.ITabRenderViewListener];
    U.view.TabRenderMediator.__super__ = S.puremvc.typedExt.TypedMediator;
    U.view.TabRenderMediator.prototype = v(S.puremvc.typedExt.TypedMediator.prototype, {
        listNotificationInterests: function() {
            return ["LoadTabComplete", "SongTransposed", "ScaleChanged", "MoveToBeat", "TogglePlay", "BeatSoundStart", "TablatureScroll", "ShowTrack", "ToggleTracklist", "ToggleFitToScreen", "ToggleFullScreen", "ToggleFretboard", "TrackistResized", "ResizeWindow", "IntentPrint", "SetBeginnerMode", "TrasklistMeasureCellMouseover", "TrasklistMeasureCellMouseout", "ToggleDrawDurations", "HitMapTabOn", "HitMapTabOff"]
        },
        handleNotification: function(q) {
            var Z = this;
            var W = q.getName();
            switch (W) {
                case "LoadTabComplete":
                    this._setTablatureCanvas();
                    this._tabProxy.setBestInstrument();
                    break;
                case "SongTransposed":
                    this._update();
                    break;
                case "ScaleChanged":
                    this._tablature.setScale(q.getBody());
                    this._tablature.doLayout();
                    this._tablature.scrollToCurrentBeat(false);
                    this._tablature.render();
                    this._update();
                    break;
                case "MoveToBeat":
                    var Y = q.getBody();
                    var ad;
                    if (Y.measure.getIndex() == 0 && Y.index == 0) {
                        ad = 0
                    } else {
                        ad = null
                    }
                    this._update(ad);
                    if (this._tabProxy.get_loopMode()) {
                        var X = this._tabProxy.getCurrentLoop();
                        if (Y.measure.getIndex() < X.startMeasure || Y.measure.getIndex() == X.startMeasure && Y.index < X.startBeat || (Y.measure.getIndex() > X.endMeasure || Y.measure.getIndex() == X.endMeasure && Y.index > X.endBeat)) {
                            this._tabProxy.toggleLoop()
                        }
                    }
                    break;
                case "TogglePlay":
                    break;
                case "BeatSoundStart":
                    this._update();
                    this.viewComponent.animateCursor(this._tabProxy.getTempCoeff(), this._tablature);
                    break;
                case "TablatureScroll":
                    this._update();
                    break;
                case "ShowTrack":
                    this._update();
                    break;
                case "ToggleTracklist":
                    this._defaultViewComponentWidth += (q.getBody() ? -1 : 1) * 256;
                    this._resize();
                    this._update();
                    break;
                case "ToggleFitToScreen":
                    this._resize();
                    this._update();
                    break;
                case "ToggleFullScreen":
                    this._previousViewComponentHeight = this.viewComponent.get_height();
                    var ac = q.getBody();
                    this._resize(null, ac ? null : this._defaultViewComponentWidth);
                    this._update();
                    this._checkSize();
                    break;
                case "ToggleFretboard":
                    var aa = q.getBody();
                    if (aa.isActive && aa.animationPhase == U.model.dto.ToggleAnimationPhase.END) {
                        this._resize()
                    } else {
                        if (!aa.isActive && aa.animationPhase == U.model.dto.ToggleAnimationPhase.START) {
                            var ab;
                            ab = this.viewComponent.get_height() + this._appProxy.fretBoardHeight * (aa.isActive ? -1 : 1);
                            this._resize(ab)
                        }
                    }
                    if (aa.animationPhase == U.model.dto.ToggleAnimationPhase.END) {
                        this._update()
                    }
                    break;
                case "TrackistResized":
                    this._resize();
                    this._update();
                    break;
                case "ResizeWindow":
                    this._resize();
                    this._update();
                    break;
                case "IntentPrint":
                    m.Timer.delay(function() {
                        Z._initPrint()
                    }, 25);
                    break;
                case "SetBeginnerMode":
                    this._tablature.setBeginnerMode(q.getBody());
                    break;
                case "TrasklistMeasureCellMouseover":
                    if (this._settingsProxy.getOption(U.model.settings.SettingsOption.highlightMeasures)) {
                        if (this._tabProxy.getCurrentTrack().number == A.parseInt(q.getBody().trackNumber)) {
                            this._tablature.highlightPositionByIndexes(A.parseInt(q.getBody().trackNumber) - 1, A.parseInt(q.getBody().measureNumber) - 1)
                        } else {
                            this._tablature.highlightPositionByIndexes(-1, -1)
                        }
                    }
                    break;
                case "TrasklistMeasureCellMouseout":
                    if (this._settingsProxy.getOption(U.model.settings.SettingsOption.highlightMeasures)) {
                        this._tablature.highlightPositionByIndexes(-1, -1)
                    }
                    break;
                case "ToggleDrawDurations":
                    (h.Boot.__cast(this._tablature, u.model.Tablature)).toggleDrawDurations(this._settingsProxy.getOption(U.model.settings.SettingsOption.drawDurations));
                    break;
                case "HitMapTabOn":
                    this._hitMapTabOn(q.getBody());
                    break;
                case "HitMapTabOff":
                    this._hitMapTabOff();
                    break
            }
        },
        _setTablatureCanvas: function() {
            var W = this;
            this._tablature = this._tabProxy.getTablature();
            if (h.Boot.__instanceof(this._tablature, U.model.FlashTablature)) {
                var q = this._tablature;
                q.setListener(this)
            }
            this._defaultViewComponentWidth = this.viewComponent.get_width();
            this._tablature.set_width(this.viewComponent.get_width());
            this._tablature.set_height(this.viewComponent.get_height());
            this._tablature.setCanvas(this.viewComponent.getCanvas());
            this._tablature.setCursorCanvas(this.viewComponent.getCursorCanvas());
            (h.Boot.__cast(this._tablature, u.model.Tablature)).listenChordPainter(function() {
                var X = {
                    action: U.model.dto.AnalyticsEventType.ChordRender,
                    value: null,
                    keyboard: false
                };
                W.sendNotification("AnalyticsEvent", X)
            })
        },
        _resize: function(q, X) {
            this.viewComponent.resize();
            var W = this._tablature.getViewportY() / this._tablature.getRealHeight();
            this._tablature.set_height(q == null ? this.viewComponent.get_height() : q);
            this._tablature.set_width(X == null ? this.viewComponent.get_width() : X);
            this._tablature.resetLayout();
            this._tablature.doLayout();
            this._tablature.render();
            if (this._tablature.getRealHeight() > this._tablature.height) {
                W = W
            } else {
                W = 0
            }
            this._tablature.scrollToY(W * this._tablature.getRealHeight(), false)
        },
        _checkSize: function() {
            var q = this;
            m.Timer.delay(function() {
                if (q._previousViewComponentHeight != q.viewComponent.get_height()) {
                    q._previousViewComponentHeight = q.viewComponent.get_height();
                    q._resize();
                    q._update()
                }
            }, 600)
        },
        _hitMapTabOn: function(Y) {
            var X;
            X = h.Boot.__cast(this._tablature, u.model.Tablature);
            var q = Y.trackNumber;
            var W = 1621148;
            if (q == 0) {
                W = 5592405;
                q = this._hitMapTabProxy.getTrackNumberBeforeOn()
            }
            if (this._trackNumberTmp != q) {
                this._trackNumberTmp = q;
                X.showTrack(q);
                X.doLayout();
                X.render()
            }
            X.scrollToIndex(Y.measureNumber - 1, 0, false);
            X.highlightPositionByIndexes(q - 1, Y.measureNumber - 1, W)
        },
        _hitMapTabOff: function() {
            var W;
            W = h.Boot.__cast(this._tablature, u.model.Tablature);
            W.highlightPositionByIndexes(-1, -1);
            var q = this._hitMapTabProxy.getTrackNumberBeforeOn();
            var X = this._tabProxy.getCurrentPosition();
            if (q == null) {
                q = X.trackNumber
            }
            if (this._trackNumberTmp != q) {
                W.showTrack(q);
                W.setCursorToCurrentBeat();
                W.render()
            }
            W.scrollToCurrentBeat(false);
            this._trackNumberTmp = null
        },
        onScroll: function(q) {
            var W = q * (this._tablature.getRealHeight() - this._tablature.height);
            this._scrollToY(W, 0);
            this._detectEndCustomScroll("mousedrag")
        },
        _detectEndCustomScroll: function(q) {
            var W = this;
            if (this._customScrollTimer != null) {
                this._customScrollTimer.stop()
            }
            this._customScrollTimer = new m.Timer(1500);
            this._customScrollTimer.run = function() {
                W._endCustomScroll(q);
                W._customScrollTimer.stop()
            }
        },
        _endCustomScroll: function(X) {
            var W = (h.Boot.__cast(this._tablature, u.model.Tablature)).getTopVisibleMeasure();
            var q = {
                action: U.model.dto.AnalyticsEventType.Scroll,
                value: {
                    trackNumber: this._tabProxy.getCurrentTrack().number,
                    measureNumber: W.number(),
                    fullscreen: this._appProxy.isFullScreen ? true : false,
                    scale: this._settingsProxy.getOption(U.model.settings.SettingsOption.scale),
                    type: X
                },
                keyboard: false
            };
            this.sendNotification("AnalyticsEvent", q)
        },
        onScrollDelta: function(q, Z, W) {
            if (W) {
                this._settingsProxy.setOption(U.model.settings.SettingsOption.scale, this._settingsProxy.getOption(U.model.settings.SettingsOption.scale) + q * 0.1);
                var X = {
                    action: U.model.dto.AnalyticsEventType.ZoomChange,
                    value: this._settingsProxy.getOption(U.model.settings.SettingsOption.scale),
                    keyboard: true
                };
                this.sendNotification("AnalyticsEvent", X)
            } else {
                if (this._tablature.height < this._tablature.getRealHeight()) {
                    var Y = this._tablature.getViewportY() + Z;
                    this._scrollToY(Y, 0);
                    this._detectEndCustomScroll("mousewheel")
                }
            }
        },
        onCanvasClick: function(q, Z, X) {
            if (X && this._tabProxy.get_loopMode()) {
                this._tabProxy.editLoopXY(q, Z)
            } else {
                this._lastPosition = this._tabProxy.getCurrentPosition().clone();
                this._tabProxy.moveToPosition(q, Z, true, u.autoScroll.AutoScrollStrategy.NOT_APPLY_AUTO_SCROLL_STRATEGY);
                var Y = this._tabProxy.getCurrentPosition();
                if (!this._lastPosition.equal(Y)) {
                    var W = {
                        action: U.model.dto.AnalyticsEventType.PositionChange,
                        value: {
                            trackNumber: Y.trackNumber,
                            measureNumber: Y.measureIndex + 1,
                            beatNumber: Y.beatIndex + 1
                        },
                        keyboard: false
                    };
                    this.sendNotification("AnalyticsEvent", W)
                }
            }
        },
        onDragStart: function(q, W) {
            this._draggingPossibleLoopAreaSelection = true;
            if (this._tabProxy.get_loopMode()) {
                if (this._tablature.isPositionOnLeftMarker(q, W) || this._tablature.isPositionOnRightMarker(q, W)) {
                    this._dragging = true;
                    this._loop = this._tabProxy.getCurrentLoop().clone()
                }
            }
        },
        onDrag: function(W, q, Y, X) {
            if (this._tabProxy.get_loopMode()) {
                if (this._dragging) {
                    this._tabProxy.setLoopXY(W, q, Y, X)
                }
            }
            if (!this._dragging && this._draggingPossibleLoopAreaSelection && this._distance(W, q, Y, X) >= 10) {
                (h.Boot.__cast(this._tablature, u.model.Tablature)).selectPossibleLoopArea(W, q, Y, X)
            }
        },
        onDragStop: function() {
            var W = null;
            if (!this._dragging && this._draggingPossibleLoopAreaSelection) {
                var q = (h.Boot.__cast(this._tablature, u.model.Tablature)).getPossibleLoopSelectionRange();
                if (q != null) {
                    this._tabProxy.setLoopRange(q);
                    (h.Boot.__cast(this._tablature, u.model.Tablature)).clearPossibleLoopArea();
                    W = {
                        action: U.model.dto.AnalyticsEventType.LoopSet,
                        value: this._tabProxy.getCurrentLoop(),
                        keyboard: false
                    }
                }
            } else {
                if (this._tabProxy.get_loopMode() && this._loop != null && !this._loop.equal(this._tabProxy.getCurrentLoop())) {
                    W = {
                        action: U.model.dto.AnalyticsEventType.LoopChange,
                        value: this._tabProxy.getCurrentLoop(),
                        keyboard: false
                    }
                }
            }
            if (W != null) {
                this.sendNotification("AnalyticsEvent", W)
            }
            this._dragging = false;
            this._draggingPossibleLoopAreaSelection = false
        },
        onMouseMove: function(q, ac) {
            if (this._tablature != null && this._settingsProxy.getOption(U.model.settings.SettingsOption.highlightMeasures)) {
                this._tablature.highlightPositionByCoords(q, ac)
            }
            var aa = false;
            if (this._tabProxy.get_loopMode() && !this._dragging) {
                var ab = this._tablature.isPositionOnLeftMarker(q, ac);
                var W = false;
                (h.Boot.__cast(this._tablature, u.model.Tablature)).highlightLeftMarker(ab ? true : false);
                if (!ab) {
                    W = this._tablature.isPositionOnRightMarker(q, ac);
                    (h.Boot.__cast(this._tablature, u.model.Tablature)).highlightRightMarker(W ? true : false)
                }
                this.viewComponent.setCursor(ab || W ? "ew-resize" : "default");
                var Y = this._tablature.getTrackPositionXY(q, ac);
                (h.Boot.__cast(this._tablature, u.model.Tablature)).highlightLoop(Y != null && (this._tabProxy.getCurrentLoop().isPositionInRange(Y.measureIndex, Y.beatIndex) || ab || W) ? true : false);
                if (!ab && !W) {
                    aa = true
                }
            } else {
                aa = true
            }
            if (aa && this._tablature != null) {
                var Z = this._tablature.checkChordClick(q, ac);
                if (Z != null) {
                    if (this._lastRenderedChord != Z) {
                        var X = {
                            action: U.model.dto.AnalyticsEventType.ChordShow,
                            value: null,
                            keyboard: false
                        };
                        this.sendNotification("AnalyticsEvent", X);
                        this._lastRenderedChord = Z;
                        this.viewComponent.setCursor("pointer");
                        (h.Boot.__cast(this.viewComponent, U.view.js.TabRenderView)).drawChord(q, ac, Z)
                    }
                } else {
                    if (this._lastRenderedChord != null) {
                        this._lastRenderedChord = null;
                        this.viewComponent.setCursor("default");
                        (h.Boot.__cast(this.viewComponent, U.view.js.TabRenderView)).clearChordContainer()
                    }
                }
            }
        },
        onKeyPress: function(q) {
            this.sendNotification("KeyAction", q)
        },
        _scrollToY: function(X, q) {
            if (q == null) {
                q = 0
            }
            var W = this;
            if (this._tabProxy.isPlay()) {
                if (this._autoScroll == null) {
                    this._autoScroll = this._settingsProxy.getOption(U.model.settings.SettingsOption.autoScroll)
                }
                this._settingsProxy.setOption(U.model.settings.SettingsOption.autoScroll, false, false, U.model.settings.Settings.NO_CACHE);
                this._autoScrollTimer.stop();
                this._autoScrollTimer = new m.Timer(600);
                this._autoScrollTimer.run = function() {
                    if (!W.viewComponent.isScrollerDragActive()) {
                        if (W._autoScroll) {
                            W._settingsProxy.setOption(U.model.settings.SettingsOption.autoScroll, true, false, U.model.settings.Settings.NO_CACHE)
                        }
                        W._autoScroll = null;
                        W._update();
                        W._autoScrollTimer.stop()
                    }
                }
            }
            this._tablature.scrollToY(X, false);
            this._update()
        },
        _update: function(q) {
            var W;
            if (q == null) {
                W = this._tablature.getViewportY() / (this._tablature.getRealHeight() - this._tablature.height)
            } else {
                W = q
            }
            this.viewComponent.updateScroll(W, this._tablature.height < this._tablature.getRealHeight())
        },
        _initPrint: function() {
            if (this._appProxy.canvasType == "ascii") {} else {
                if (this._appProxy.canvasType == "canvas") {
                    new h.JQuery("body").append('<div id="canvasPrintMode" style="position: absolute; top: 0; left: 0; width: 1px; height: 1px; display: block; opacity: 0;"></div>');
                    new h.JQuery("#tablatureWindow").remove();
                    new h.JQuery("body").append('<iframe id="tablatureWindow" style="width: 100%; height: 100%; position: absolute; top: 0; left: 0; display: none; text-align: center; z-index: 9999;"></iframe>');
                    var q = new h.JQuery("#tablatureWindow");
                    var X = q[0];
                    X.contentWindow.document.open();
                    var W = this._renderPrintMode();
                    X.contentWindow.document.write('<html><style>@media print {div{page-break-inside: avoid;}}</style><body style="background: #fff; margin: 0; padding: 0;">' + W.html() + "</body></html>");
                    X.contentWindow.document.close();
                    new h.JQuery("#canvasPrintMode").remove();
                    if (!X.contentWindow.document.execCommand("print", false, null)) {
                        X.contentWindow.print()
                    }
                }
            }
            $("body").css("cursor", "auto")
            $("#btn-print").css("cursor", "auto")
            $("#btn-print").removeProp("disabled")
        },
        _renderPrintMode: function() {
            var q = (h.Boot.__cast(this._tablature, u.model.Tablature)).getStaves()[0].width - 150;
            var ag = "haxeLib.graphics.SvgCanvas";
            var Y = 1;
            var ac;
            var ae = new h.JQuery("<div></div>");
            var ak = new u.model.Tablature();
            ak.artistName = (h.Boot.__cast(this._tablature, u.model.Tablature)).artistName;
            ak.songName = (h.Boot.__cast(this._tablature, u.model.Tablature)).songName;
            ak.set_width(q * Y);
            ak.set_height(this.viewComponent.get_height() * Y);
            var ad = {
                beginnerMode: this._appProxy.beginnerMode,
                scalableTabOffsets: this._settingsProxy.getOption(U.model.settings.SettingsOption.scalableTabOffsets),
                drawDurations: this._settingsProxy.getOption(U.model.settings.SettingsOption.drawDurations),
                multipleInstance: false
            };
            ak.configure(ad);
            var W = R.createInstance(R.resolveClass(ag), ["canvasPrintMode"]);
            W.setWidth(q * Y);
            W.setHeight(this.viewComponent.get_height() * Y);
            ak.setCanvas(W);
            ak.borderSpace = 0;
            ak.ghostSpace = 0;
            ak.lineColor = 0;
            ak.lineThickness = Y;
            ak.effectsLineColor = 0;
            var X = new P.graphics.TextFormat();
            X.size = 12;
            X.color = 0;
            ak.defaultTextFormat = X;
            X = new P.graphics.TextFormat();
            X.size = 12;
            X.bold = true;
            X.fontName = "Roboto, Sans-serif";
            X.leading = 0;
            X.leftMargin = 0;
            X.color = 0;
            X.background = true;
            X.backgroundColor = 16777215;
            X.backgroundOffset = 2;
            ak.tabTextFormat = X;
            X = new P.graphics.TextFormat();
            X.size = 9;
            X.color = 5592405;
            ak.measureNumberTextFormat = X;
            X = new P.graphics.TextFormat();
            X.size = 12;
            X.fontName = "Roboto";
            X.color = 0;
            ak.artistTextFormat = X;
            X = new P.graphics.TextFormat();
            X.size = 22;
            X.fontName = "Roboto";
            X.color = 0;
            ak.titleTextFormat = X;
            ak.addTitles();
            ak.setSong(this._tabProxy.getSong());
            ak.showTrack(this._tabProxy.getCurrentTrack().number);
            ak.setScale(this._settingsProxy.getOption(U.model.settings.SettingsOption.scale) * Y);
            ak.doLayout();
            ak.render();
            ae.append('<div id="headerContainer" style="text-align: center;"><span style="font-size: 50px;">' + $(".tab-title").text() + '</span><br><span style="font-size: 14px;">' + $(".tab-artists").text() + "</span></div>");
            if (!this._tabProxy.getCurrentTrack().isPercussionTrack) {
                var aj = this._tabProxy.getCurrentTrack().strings;
                var ai = V.Tuning.toString(aj);
                if (this._tabProxy.getCurrentTrack().offset > 0) {
                    ai += ", Capo on fret " + this._tabProxy.getCurrentTrack().offset
                }
                ae.append('<div id="tuningContainer" style="width: ' + q + "px; position: relative; left: 50%; margin-left: -" + q / 2 + 'px"><span style="font: normal 12px Roboto, Sans-serif;">Tuning: ' + ai + "</span></div>")
            }
            var ah = new u.painters.StavePainter();
            var Z = 0;
            var ab = 0;
            var af = ak.getStaves();
            while (ab < af.length) {
                var aa = af[ab];
                ++ab;
                ak.viewPort.x = 0;
                ak.viewPort.y = aa.y;
                ak.viewPort.height = aa.height;
                ak.set_height(aa.height);
                W.clear();
                ak.render();
                ac = '<div id="staveContainer' + Z + '" style="text-align: center;">';
                if (h.Boot.__instanceof(W, P.graphics.HtmlCanvas)) {
                    ac += '<img src="' + (h.Boot.__cast(aa.cacheCanvas, P.graphics.HtmlCanvas)).toDataURL() + '" width="' + aa.width + '" height="' + Math.round(aa.height / Y) + '">'
                } else {
                    if (h.Boot.__instanceof(W, P.graphics.SvgCanvas)) {
                        ac += (h.Boot.__cast(aa.cacheCanvas, P.graphics.SvgCanvas)).getHtml()
                    }
                }
                ac += "</div>";
                ae.append(ac);
                Z++
            }
            ae.append("<div style='font-size: 14px; text-align: center'>© 2016 Tab Player - http://tab-player.com</div>");
            return ae
        },
        getTablature: function() {
            return h.Boot.__cast(this._tablature, u.model.Tablature)
        },
        _distance: function(W, q, Y, X) {
            return Math.sqrt(Math.pow(W - Y, 2) + Math.pow(q - X, 2))
        },
        __class__: U.view.TabRenderMediator
    });
    U.view.TimelineMediator = function(q, W) {
        S.puremvc.typedExt.TypedMediator.call(this, q, W);
        this._settingsProxy = this.facade.retrieveProxy("SettingsProxy");
        this._tabProxy = this.facade.retrieveProxy("TabProxy");
        this._appProxy = this.facade.retrieveProxy("AppProxy");
        this._hitMapTabProxy = this.facade.retrieveProxy("HitMapTabProxy")
    };
    p["tabPro.view.TimelineMediator"] = U.view.TimelineMediator;
    U.view.TimelineMediator.__name__ = ["tabPro", "view", "TimelineMediator"];
    U.view.TimelineMediator.__interfaces__ = [U.interfaces.ITimelineViewListener];
    U.view.TimelineMediator.__super__ = S.puremvc.typedExt.TypedMediator;
    U.view.TimelineMediator.prototype = v(S.puremvc.typedExt.TypedMediator.prototype, {
        listNotificationInterests: function() {
            return ["LoadTabComplete", "MoveToBeat", "BeatSoundStart", "ToggleLoop", "LoopChanged", "ToggleFullScreen"]
        },
        handleNotification: function(W) {
            var X = W.getName();
            switch (X) {
                case "LoadTabComplete":
                    this._init();
                    break;
                case "MoveToBeat":
                    this._changePosition(W.getBody());
                    break;
                case "BeatSoundStart":
                    var q = W.getBody();
                    if (q == null) {
                        return
                    }
                    this._changePosition(q);
                    break;
                case "ToggleLoop":
                    break;
                case "LoopChanged":
                    break;
                case "ToggleFullScreen":
                    this._init();
                    break
            }
        },
        _init: function() {
            var W = {
                isDemo: this._tabProxy.isDemoMode(),
                song: this._tabProxy.getSong(),
                fullSong: this._tabProxy.getFullSong(),
                instanceId: this._tabProxy.instanceId
            };
            this.viewComponent.configure(W);
            this._fillTimeStarMeasuretList();
            this.viewComponent.reset();
            this._firstBeatTime = this._tabProxy.getTracks()[0].measures[0].beats[0].getStartInMilliSeconds();
            this._totalTime = this._timeLimit = this._tabProxy.getTotalTime();
            var Y = P.utils.Time.fromMilliSeconds(this._totalTime);
            this.viewComponent.setTotalTime(Y);
            if (this._tabProxy.isDemoMode()) {
                this._timeLimit = this._tabProxy.getDemoTime();
                var X = 100 * this._tabProxy.getSong().measureCount() / this._tabProxy.getFullSong().measureCount();
                this.viewComponent.setTimeLimit(this._timeLimit);
                this.viewComponent.addSegment(X, "&nbsp;");
                this.viewComponent.addSegment(100 - X, "not available in demo mode", true)
            } else {
                var q = this._tabProxy.getMarkers();
                if (q.length > 0) {
                    this.viewComponent.setPartable();
                    this.fillWithTextLabels(q)
                } else {
                    this.viewComponent.setTimeable();
                    this.fillWithTimeLabels()
                }
            }
            this._hitMapTabData = this._hitMapTabProxy.getMergedData();
            this.viewComponent.renderHitMap(this._tabProxy.getTracklistTitles(), this._tabProxy.getTracks()[0].measures.length, this._hitMapTabData)
        },
        toggleLoop: function(X) {
            if (X) {
                var Y = this._tabProxy.getLoopStartInMs();
                var q = this._tabProxy.getLoopEndInMs();
                var Z = Y / this._totalTime;
                var W = q / this._totalTime;
                this.viewComponent.showLoop(Z, W)
            } else {
                this.viewComponent.hideLoop()
            }
        },
        onPositionChange: function(ad, aa) {
            var q = this._tabProxy.getCurrentTrack().number;
            this._hitMapTabProxy.setTrackNumberBeforeOn(q);
            var X = this._findNearestTime(ad);
            var Y = this._tabProxy.getSong();
            var Z = Y.findBeatForTime(q, X);
            if (Z == null) {
                return
            }
            var ab = Z.measure.getIndex();
            var ac;
            if (R.enumEq(aa, U.interfaces.ChangePositionType.Click)) {
                ac = 0
            } else {
                ac = Z.index
            }
            var W = Math.ceil(this._tabProxy.getFullSong().measureCount() / 100 * ad);
            if (ab != W - 1 && R.enumEq(aa, U.interfaces.ChangePositionType.Click)) {
                ab = W - 1;
                ac = 0
            }
            this._tabProxy.moveToBeatIndex(ab, ac, R.enumEq(aa, U.interfaces.ChangePositionType.Click) ? true : false)
        },
        _changePosition: function(W) {
            var q = this._tabProxy.getPositionInMilliSeconds();
            var X = this._tabProxy.getCurrentPosition();
            this.viewComponent.changePosition(W, P.utils.Time.fromMilliSeconds(q - this._firstBeatTime))
        },
        onTimeLineClick: function(W) {
            var q = {
                action: U.model.dto.AnalyticsEventType.TimelineClick,
                value: W,
                keyboard: false
            };
            this.sendNotification("AnalyticsEvent", q)
        },
        onTimeLineSliderStopDrag: function() {
            var q = {
                action: U.model.dto.AnalyticsEventType.TimelineSliderChange,
                value: null,
                keyboard: false
            };
            this.sendNotification("AnalyticsEvent", q)
        },
        hitMapOn: function(q) {
            this._hitMapTabProxy.on(q);
            if (this._tabProxy.isPlay()) {
                if (this._autoScroll == null) {
                    this._autoScroll = this._settingsProxy.getOption(U.model.settings.SettingsOption.autoScroll);
                    this._settingsProxy.setOption(U.model.settings.SettingsOption.autoScroll, false, false, U.model.settings.Settings.NO_CACHE)
                }
            }
        },
        hitMapOff: function() {
            this._hitMapTabProxy.off();
            this._settingsProxy.setOption(U.model.settings.SettingsOption.autoScroll, true, false, U.model.settings.Settings.NO_CACHE);
            this._autoScroll = null
        },
        getCurrentTrackNumber: function() {
            return this._tabProxy.getCurrentTrack().number
        },
        computeSegmentLength: function() {
            var X = Math.floor(this._totalTime / 1000);
            var Z = Math.floor(this.viewComponent.getTimeLineWidth() / 60);
            var aa = [1, 5, 10, 15, 20, 30, 60];
            var W = 0;
            var Y = 0;
            var q = 100;
            while (q > Z) {
                if (W < aa.length) {
                    Y = aa[W];
                    W++
                } else {
                    Y <<= 1
                }
                q = Math.floor(X / Y)
            }
            this._segmentCount = q;
            this._segmentTimeQuant = Y
        },
        fillWithTimeLabels: function() {
            this.computeSegmentLength();
            var X = P.utils.Time.zero();
            var W = 0;
            var Y = this._segmentCount;
            while (W < Y) {
                var q = W++;
                X = X.addSeconds(this._segmentTimeQuant);
                this.viewComponent.addSegment(100000 * this._segmentTimeQuant / this._totalTime, X.toString())
            }
        },
        fillWithTextLabels: function(W) {
            var q = this._tabProxy.getSong().tracks[0].measureCount();
            var aa = 0;
            var ab = 0;
            var ac = W.length;
            while (ab < ac) {
                var Z = ab++;
                var X = W[Z];
                if (Z == 0 && X.measureHeader.number > 1) {
                    this.viewComponent.addSegment(100 * (X.measureHeader.number - 1) / q, "&nbsp;");
                    aa += X.measureHeader.number - 1
                }
                var Y = 0;
                if (Z < W.length - 1) {
                    Y = W[Z + 1].measureHeader.number - X.measureHeader.number
                } else {
                    Y = q - aa
                }
                this.viewComponent.addSegment(100 * Y / q, X.title);
                aa += Y
            }
        },
        _fillTimeStarMeasuretList: function() {
            this._timeStarMeasuretList = new Array();
            var X = 0;
            var W = this._tabProxy.getFullSong().tracks[0].measures;
            while (X < W.length) {
                var q = W[X];
                ++X;
                this._timeStarMeasuretList.push(q.header.startInMilliSeconds)
            }
        },
        _findNearestTime: function(W) {
            var q = this._tabProxy.getFullSong().measureCount();
            var Y = Math.ceil(q / 100 * W);
            var X = 1 - Y + q / 100 * W;
            var Z = this._timeStarMeasuretList[Y - 1];
            Z += Math.round(X * (Y == q ? this._totalTime - this._timeStarMeasuretList[Y - 1] : this._timeStarMeasuretList[Y] - this._timeStarMeasuretList[Y - 1]));
            return Z
        },
        _calcPercentage: function(ab) {
            var W = 0;
            var q = this._tabProxy.getSong().tracks[0].measures.length;
            var X = -1;
            var Y = 0;
            var ac = 0;
            var Z = this._timeStarMeasuretList;
            while (ac < Z.length) {
                var aa = Z[ac];
                ++ac;
                if (ab < aa) {
                    W = Y / q * 100;
                    W += (ab - X) / (aa - X);
                    break
                }
                Y++;
                X = aa
            }
            return W
        },
        __class__: U.view.TimelineMediator
    });
    U.view.TopControlPanelMediator = function(q, W) {
        S.puremvc.typedExt.TypedMediator.call(this, q, W);
        this._settingsProxy = this.facade.retrieveProxy("SettingsProxy");
        this._appProxy = this.facade.retrieveProxy("AppProxy");
        this._tabProxy = this.facade.retrieveProxy("TabProxy")
    };
    p["tabPro.view.TopControlPanelMediator"] = U.view.TopControlPanelMediator;
    U.view.TopControlPanelMediator.__name__ = ["tabPro", "view", "TopControlPanelMediator"];
    U.view.TopControlPanelMediator.__interfaces__ = [U.interfaces.ITopControlPanelViewListener];
    U.view.TopControlPanelMediator.__super__ = S.puremvc.typedExt.TypedMediator;
    U.view.TopControlPanelMediator.prototype = v(S.puremvc.typedExt.TypedMediator.prototype, {
        listNotificationInterests: function() {
            return ["LoadTabConfigComplete", "ShowTrack", "ScaleChanged", "ToggleFullScreen"]
        },
        handleNotification: function(W) {
            var X = W.getName();
            switch (X) {
                case "LoadTabConfigComplete":
                    var q = {
                        author: this._tabProxy.author,
                        title: this._appProxy.showNames ? this._tabProxy.artistName + " - " + this._tabProxy.songName : "",
                        isDemo: this._tabProxy.isDemoMode(),
                        scale: this._settingsProxy.getOption(U.model.settings.SettingsOption.scale)
                    };
                    this.viewComponent.configure(q);
                    break;
                case "ShowTrack":
                    this.setTuning();
                    break;
                case "ScaleChanged":
                    this.viewComponent.setScale(W.getBody());
                    break;
                case "ToggleFullScreen":
                    this.viewComponent.toggleFullScreen(W.getBody());
                    break
            }
        },
        setTuning: function() {
            var q = this._tabProxy.getCurrentTrack().strings;
            var W = V.Tuning.toString(q);
            if (this._tabProxy.getCurrentTrack().offset > 0) {
                W += ", Capo on fret " + this._tabProxy.getCurrentTrack().offset
            }
            this.viewComponent.setTuning(this._tabProxy.getCurrentTrack().isPercussionTrack ? null : W)
        },
        onIntentScaleChange: function(W) {
            this._settingsProxy.setOption(U.model.settings.SettingsOption.scale, W);
            var q = {
                action: U.model.dto.AnalyticsEventType.ZoomChange,
                value: W,
                keyboard: false
            };
            this.sendNotification("AnalyticsEvent", q)
        },
        onToggleZoomControl: function(W) {
            var q = {
                action: U.model.dto.AnalyticsEventType.ToggleZoomControl,
                value: W,
                keyboard: false
            };
            this.sendNotification("AnalyticsEvent", q)
        },
        onFontSizeChange: function(q) {
            this.sendNotification("FontSizeChanged", q)
        },
        onToggleFitToScreen: function(q) {
            this.sendNotification("ToggleFitToScreen", q)
        },
        onIntentToggleFullScreen: function() {
            this.sendNotification("IntentToggleFullScreen")
        },
        __class__: U.view.TopControlPanelMediator
    });
    U.view.TracklistMediator = function(q, W) {
        S.puremvc.typedExt.TypedMediator.call(this, q, W);
        this._appProxy = this.facade.retrieveProxy("AppProxy");
        this._tabProxy = this.facade.retrieveProxy("TabProxy");
        this._hitMapTabProxy = this.facade.retrieveProxy("HitMapTabProxy");
        this._tracklistStyle = U.interfaces.TracklistStyle.Default
    };
    p["tabPro.view.TracklistMediator"] = U.view.TracklistMediator;
    U.view.TracklistMediator.__name__ = ["tabPro", "view", "TracklistMediator"];
    U.view.TracklistMediator.__interfaces__ = [U.interfaces.ITracklistViewListener];
    U.view.TracklistMediator.__super__ = S.puremvc.typedExt.TypedMediator;
    U.view.TracklistMediator.prototype = v(S.puremvc.typedExt.TypedMediator.prototype, {
        listNotificationInterests: function() {
            return ["LoadTabComplete", "ShowTrack", "TrackSoloChanged", "PlayerAcceptSong", "MoveToBeat", "BeatSoundStart", "ToggleFretboard", "ToggleFullScreen", "InstrumentSwitched", "HitMapTabOn", "HitMapTabOff"]
        },
        handleNotification: function(aa) {
            var ab = aa.getName();
            switch (ab) {
                case "LoadTabComplete":
                    this._currentBeat = null;
                    var Y = {
                        tracklistStyle: this._tracklistStyle,
                        isDemo: this._tabProxy.isDemoMode(),
                        song: this._tabProxy.getSong(),
                        fullSong: this._tabProxy.getFullSong(),
                        longTitleStyle: this._isLongTitleStyle()
                    };
                    this.viewComponent.configure(Y);
                    this.viewComponent.prepareTips();
                    this._appProxy.applicationReady();
                    break;
                case "ShowTrack":
                    this.viewComponent.markAsActive(aa.getBody());
                    if (!R.enumEq(this._tracklistStyle, U.interfaces.TracklistStyle.Smekhov_0929)) {
                        var q = this._tabProxy.getCurrentPosition();
                        var Z = this._tabProxy.getCurrentTrack().measures[q.measureIndex].beats[q.beatIndex];
                        this._actualizeActiveState(Z)
                    } else {
                        this.viewComponent.highlightTracks(this._tabProxy.getActiveTracks())
                    }
                    break;
                case "TrackSoloChanged":
                    this.viewComponent.toggleSolo(aa.getBody());
                    break;
                case "PlayerAcceptSong":
                    break;
                case "MoveToBeat":
                    var X = aa.getBody();
                    if (!R.enumEq(this._tracklistStyle, U.interfaces.TracklistStyle.Smekhov_0929)) {
                        this._actualizeActiveState(X)
                    } else {
                        this.viewComponent.highlightTracks(this._tabProxy.getActiveTracks());
                        this.viewComponent.markAsHasNoHotPartsAllTracks();
                        if (this._hitMapTabProxy.isPopularMeasure(X.measure.track.number, X.measure.number())) {
                            this.viewComponent.markAsHasHotParts(X.measure.track.number)
                        }
                    }
                    break;
                case "BeatSoundStart":
                    var W = aa.getBody();
                    if (W == null) {
                        return
                    }
                    if (!R.enumEq(this._tracklistStyle, U.interfaces.TracklistStyle.Smekhov_0929)) {
                        this._actualizeActiveState(W)
                    } else {
                        this.viewComponent.highlightTracks(this._tabProxy.getActiveTracks());
                        this.viewComponent.markAsHasNoHotPartsAllTracks();
                        if (this._hitMapTabProxy.isPopularMeasure(W.measure.track.number, W.measure.number())) {
                            this.viewComponent.markAsHasHotParts(W.measure.track.number)
                        }
                    }
                    break;
                case "ToggleFretboard":
                    this.viewComponent.updateScroll();
                    break;
                case "ToggleFullScreen":
                    this.viewComponent.updateScroll();
                    break;
                case "InstrumentSwitched":
                    this.viewComponent.updateInstrumentIconForTrack(this._tabProxy.getTracks()[A["int"](aa.getBody()) - 1]);
                    break;
                case "HitMapTabOn":
                    this._hitMapTabOn(aa.getBody());
                    break;
                case "HitMapTabOff":
                    this._hitMapTabOff();
                    break
            }
        },
        setTracklistStyle: function(W) {
            var Y = 0;
            var X = R.getEnumConstructs(U.interfaces.TracklistStyle);
            while (Y < X.length) {
                var q = X[Y];
                ++Y;
                if (W == q) {
                    this._tracklistStyle = R.createEnum(U.interfaces.TracklistStyle, q, null)
                }
            }
        },
        _hitMapTabOn: function(W) {
            var q = W.trackNumber;
            if (q == 0) {
                q = this._hitMapTabProxy.getTrackNumberBeforeOn()
            }
            this.viewComponent.markAsActive(q);
            this.viewComponent.markAsHasNoHotPartsAllTracks();
            if (this._hitMapTabProxy.isPopularMeasure(q, W.measureNumber)) {
                this._tabProxy.monitorTrack(q);
                this.viewComponent.markAsHasHotParts(W.trackNumber)
            }
        },
        _hitMapTabOff: function() {
            var q = this._hitMapTabProxy.getTrackNumberBeforeOn();
            var W = this._tabProxy.getCurrentPosition();
            if (q == -1) {
                q = W.trackNumber
            }
            this._tabProxy.monitorTrack(q);
            this.viewComponent.markAsActive(q);
            this.viewComponent.markAsHasNoHotPartsAllTracks();
            if (this._hitMapTabProxy.isPopularMeasure(q, W.measureIndex + 1)) {
                this.viewComponent.markAsHasHotParts(q)
            }
        },
        onSoloChanged: function(q, aa, Z) {
            if (Z == null) {
                Z = true
            }
            var W = this._tabProxy.getTracks()[q - 1];
            var Y = {
                trackNumber: q,
                value: aa
            };
            this.sendNotification("SetTrackSolo", Y);
            if (Z) {
                var X = {
                    action: U.model.dto.AnalyticsEventType.ToggleInstrumentsSolo,
                    value: Y,
                    keyboard: false
                };
                this.sendNotification("AnalyticsEvent", X)
            }
        },
        onMuteChanged: function(q, Z, aa) {
            if (aa == null) {
                aa = true
            }
            this._tabProxy.setTrackMute(q, Z);
            if (aa) {
                var W = this._tabProxy.getTracks()[q - 1];
                var Y = {
                    trackNumber: q,
                    value: Z
                };
                var X = {
                    action: U.model.dto.AnalyticsEventType.ToggleInstrumentMute,
                    value: Y,
                    keyboard: false
                };
                this.sendNotification("AnalyticsEvent", X)
            }
        },
        onTrackVolumeChange: function(q, W) {
            this._tabProxy.setTrackVolume(q, W)
        },
        onTrackVolumeSliderStopDrag: function(q, X) {
            var W = {
                action: U.model.dto.AnalyticsEventType.InstrumentVolumeChange,
                value: {
                    trackNumber: q,
                    value: X / 100
                },
                keyboard: false
            };
            this.sendNotification("AnalyticsEvent", W)
        },
        onTrackPanChange: function(q, W) {
            this._tabProxy.setTrackPan(q, W)
        },
        onTrackPanSliderStopDrag: function(q, X) {
            var W = {
                action: U.model.dto.AnalyticsEventType.InstrumentPanningChange,
                value: {
                    trackNumber: q,
                    value: X / 100
                },
                keyboard: false
            };
            this.sendNotification("AnalyticsEvent", W)
        },
        onTrackChorusChange: function(q, W) {
            this._tabProxy.setTrackChorus(q, W)
        },
        onTrackSelect: function(q) {
            if (this._tabProxy.getTracks().length > 1 && q != this._tabProxy.getCurrentTrack().number) {
                this.viewComponent.markAsInactive(this._tabProxy.getCurrentTrack().number);
                this._tabProxy.setCurrentTrack(q)
            }
        },
        onPresetChange: function(q, W) {
            this._tabProxy.changePreset(q, W)
        },
        onMeasureCellClick: function(q, X) {
            if (this._tabProxy.getCurrentTrack().number != q) {
                this._tabProxy.moveToBeatIndex(X - 1, 0, false);
                this._tabProxy.setCurrentTrack(q)
            } else {
                this._tabProxy.moveToBeatIndex(X - 1, 0)
            }
            var W = {
                action: U.model.dto.AnalyticsEventType.InstrumentMeasureCellClick,
                value: {
                    trackNumber: q,
                    measureNumber: X
                },
                keyboard: false
            };
            this.sendNotification("AnalyticsEvent", W)
        },
        onMeasureCellMouseover: function(q, W) {
            this.sendNotification("TrasklistMeasureCellMouseover", {
                trackNumber: q,
                measureNumber: W
            })
        },
        onMeasureCellMouseout: function(q, W) {
            this.sendNotification("TrasklistMeasureCellMouseout", {
                trackNumber: q,
                measureNumber: W
            })
        },
        onVolumeSliderStopDrag: function(W) {
            var q = {
                action: U.model.dto.AnalyticsEventType.VolumeChange,
                value: W / 100,
                keyboard: false
            };
            this.sendNotification("AnalyticsEvent", q)
        },
        _actualizeActiveState: function(q) {
            if (q != this._currentBeat) {
                if (this._currentBeat != null && (this._currentBeat.measure.track.number != q.measure.track.number || this._currentBeat.measure.number() != q.measure.number())) {
                    this.viewComponent.markMeasureCellAsInactive(this._currentBeat.measure.track.number, this._currentBeat.measure.number())
                }
                if (this._currentBeat == null || this._currentBeat.measure.track.number != q.measure.track.number || this._currentBeat.measure.number() != q.measure.number()) {
                    this.viewComponent.markMeasureCellAsActive(q.measure.track.number, q.measure.number())
                }
                if (!this.viewComponent.isMeasureCellVisible(q.measure.number())) {
                    this.viewComponent.scrollToMeasureCell(q.measure.number())
                }
                this._currentBeat = q
            }
        },
        onResize: function(q, W) {
            this.sendNotification("TrackistResized")
        },
        onResizeStop: function(q) {
            var W = {
                action: U.model.dto.AnalyticsEventType.TracklistHeightChange,
                value: {
                    visibleTracks: q
                },
                keyboard: false
            };
            this.sendNotification("AnalyticsEvent", W)
        },
        onToggleTracklistView: function(q) {
            this.sendNotification("ToggleTracklist", q)
        },
        onToggleAdvancedSettings: function(W) {
            this.viewComponent.updateScroll();
            var q = {
                action: U.model.dto.AnalyticsEventType.ToggleInstrumentAdvancedSettings,
                value: W,
                keyboard: false
            };
            this.sendNotification("AnalyticsEvent", q)
        },
        onIntentSwitchInstrument: function(q) {
            this.sendNotification("IntentSwitchInstrument", q)
        },
        showTip: function(q) {
            this.sendNotification("ShowTip", q)
        },
        _isLongTitleStyle: function() {
            var q = false;
            var X = R.createEmptyInstance(V.filter.SongFilterTracksRenameByInstruments);
            var Z = 0;
            var Y = this._tabProxy.getSongFilters();
            while (Z < Y.length) {
                var W = Y[Z];
                ++Z;
                if (R.getClass(X) == R.resolveClass("songModel.filter.SongFilter" + W)) {
                    q = true;
                    break
                }
            }
            return q
        },
        __class__: U.view.TracklistMediator
    });
    U.view.js = {};
    U.view.js.AsciiCanvas = function(W) {
        var q = this;
        S.puremvc.typedExt.js.JqueryComponent.call(this, W);
        this._canvasJq = new h.JQuery('<div id="internal-canvas" style="overflow: auto"></div>').appendTo(this._jqNode);
        this._canvasJq.scroll(function(X) {
            q.hxCursor.updateYPosition()
        })
    };
    p["tabPro.view.js.AsciiCanvas"] = U.view.js.AsciiCanvas;
    U.view.js.AsciiCanvas.__name__ = ["tabPro", "view", "js", "AsciiCanvas"];
    U.view.js.AsciiCanvas.__super__ = S.puremvc.typedExt.js.JqueryComponent;
    U.view.js.AsciiCanvas.prototype = v(S.puremvc.typedExt.js.JqueryComponent.prototype, {
        appendTabContent: function(q) {
            this._canvasJq.html(q);
            this._canvasJq.find("." + N.Ascii2Writer.TUNING_HTML_CLASS_NAME).each(function(W, X) {
                new h.JQuery('<span class="' + N.Ascii2Writer.MEASURE_NUMBER_HTML_CLASS_NAME + '">&nbsp;</span>').prependTo("#" + N.Ascii2Writer.TUNING_HTML_CLASS_NAME + "-" + W)
            });
            this._canvasJq.find("." + N.Ascii2Writer.MEASURE_HTML_CLASS_NAME).each(function(W, X) {
                new h.JQuery('<span class="' + N.Ascii2Writer.MEASURE_NUMBER_HTML_CLASS_NAME + '">' + (W + 1) + "</span>").prependTo("#" + N.Ascii2Writer.MEASURE_HTML_CLASS_NAME + "-" + W)
            })
        },
        bindClickEvents: function() {
            var q = this;
            this._canvasJq.find("." + N.Ascii2Writer.MEASURE_HTML_CLASS_NAME).bind("click", function(Z) {
                var ad = Z.pageX;
                var aa = Z.pageY;
                var ac = 100000;
                var X = new h.JQuery(Z.currentTarget);
                var Y = null;
                X.find("." + N.Ascii2Writer.BEAT_HTML_CLASS_NAME).each(function(af, ae) {
                    var ag = q.distanceBetweenPoints(ad, aa, new h.JQuery(ae).offset().left, new h.JQuery(ae).offset().top);
                    if (ac > ag) {
                        Y = new h.JQuery(ae);
                        ac = ag
                    }
                });
                var W = A.parseInt(O.replace(X.attr("id"), N.Ascii2Writer.MEASURE_HTML_CLASS_NAME + "-", ""));
                var ab = A.parseInt(O.replace(Y.attr("id"), N.Ascii2Writer.BEAT_HTML_CLASS_NAME + "-" + W + "-", ""));
                q.listener.onBeatClick(W, ab)
            })
        },
        distanceBetweenPoints: function(W, Y, q, X) {
            return Math.sqrt((q - W) * (q - W) + (X - Y) * (X - Y))
        },
        setWidth: function(q) {
            this._canvasJq.width(q | 0)
        },
        setHeight: function(q) {
            this._canvasJq.height(q | 0)
        },
        renderCursor: function(X) {
            var W = X;
            var ab = W.getTrack().stringCount();
            var aa;
            var Y = "#" + N.Ascii2Writer.MEASURE_HTML_CLASS_NAME + "-" + W.getCurrentMeasureIndex() + " #" + N.Ascii2Writer.STRING_HTML_CLASS_NAME + "-1";
            aa = new h.JQuery(Y);
            this.hxCursor.set_height(aa.height() * ab);
            var q;
            var Z = "#" + N.Ascii2Writer.BEAT_HTML_CLASS_NAME + "-" + W.getCurrentMeasureIndex() + "-" + W.getCurrentBeatIndex();
            q = new h.JQuery(Z);
            this.hxCursor.set_x(q.position().left);
            this.hxCursor.set_y(aa.position().top);
            this.hxCursor.show()
        },
        resizeCursor: function() {
            var q = new h.JQuery("#" + N.Ascii2Writer.MEASURE_HTML_CLASS_NAME + "-0 #" + N.Ascii2Writer.STRING_HTML_CLASS_NAME + "-1");
            this.hxCursor.set_height(q.height() * this._stringCount)
        },
        stopAnimation: function() {
            this.hxCursor.stopAnimation()
        },
        animateCursor: function(W, q) {
            this.hxCursor.startAnimation(W, q);
            this.hxCursor.animate()
        },
        update: function(W, X) {
            var q = X;
            this._stringCount = q.getTrack().stringCount();
            var ab = q.getBeatByIndexes(q.getCurrentMeasureIndex(), q.getCurrentBeatIndex());
            this.hxCursor.setCurrentBeat(ab);
            this.hxCursor.resetAnimation();
            this.unHighlightActiveBeat();
            if (q.highlightNotes && !ab.isRestBeat()) {
                this.highlightActiveBeat(ab)
            }
            if (W.isPlay()) {
                var aa = N.Ascii2Helper.getMeasureJqByIndex(ab.measure.getIndex());
                var Z = this._canvasJq.scrollTop();
                var Y = aa[0].offsetTop - U.view.js.AsciiCanvas.MEASURE_MARGIN_TOP;
                if (Z != Y) {
                    this._canvasJq.animate({
                        scrollTop: Y
                    }, 100)
                }
            }
        },
        unHighlightActiveBeat: function() {
            this._canvasJq.find(".highlight-beat").removeClass("highlight-beat")
        },
        highlightActiveBeat: function(q) {
            N.Ascii2Helper.getBeatJq(q).addClass("highlight-beat")
        },
        setFontSize: function(q) {
            this._canvasJq.find("." + N.Ascii2Writer.TAB_HTML_CLASS_NAME).css({
                "font-size": q
            });
            this.resizeCursor()
        },
        __class__: U.view.js.AsciiCanvas
    });
    U.view.js.AsciiCursor = function(q) {
        S.puremvc.typedExt.js.JqueryComponent.call(this, q)
    };
    p["tabPro.view.js.AsciiCursor"] = U.view.js.AsciiCursor;
    U.view.js.AsciiCursor.__name__ = ["tabPro", "view", "js", "AsciiCursor"];
    U.view.js.AsciiCursor.__super__ = S.puremvc.typedExt.js.JqueryComponent;
    U.view.js.AsciiCursor.prototype = v(S.puremvc.typedExt.js.JqueryComponent.prototype, {
        resetAnimation: function() {
            if (this._animationActive) {
                this.stopAnimation()
            }
            this._animationTime = 0;
            this._elapsedTime = 0;
            this._phase = 0;
            if (this._currentBeat != null) {
                this.set_x(this.getBeatXPosition(this._currentBeat));
                this.set_y(this.getBeatYPosition(this._currentBeat))
            }
            this._cursorJq = this.getJqNode()
        },
        startAnimation: function(Y, W) {
            var q = W;
            this._currentBeat = q.getBeatByIndexes(q.getCurrentMeasureIndex(), q.getCurrentBeatIndex());
            this._nextBeat = q.getTrack().getNextBeat(q.getCurrentMeasureIndex(), q.getCurrentBeatIndex());
            if (this.isAnimationActive()) {
                this.resetAnimation()
            }
            this._animationActive = true;
            this._animationTime = Math.floor((this._nextBeat.getStartInMilliSeconds() - this._currentBeat.getStartInMilliSeconds()) / Y);
            this._totalDistance = this.getBeatXPosition(this._nextBeat) - this.getBeatXPosition(this._currentBeat);
            if (this._totalDistance < 0) {
                var Z = N.Ascii2Helper.getBeatJq(this._currentBeat);
                var X = Z.parent();
                this._totalDistance = X.width() - (Z.offset().left - X.offset().left)
            }
            this._startTime = Math.floor(m.Timer.stamp() * 1000)
        },
        stopAnimation: function() {
            this._cursorJq.stop(true);
            this._animationActive = false
        },
        animate: function() {
            this._cursorJq.stop(true);
            this._cursorJq.animate({
                left: "+=" + A.string(this._totalDistance)
            }, this._animationTime, "linear", function() {})
        },
        updateYPosition: function() {
            this.set_y(this.getBeatYPosition(this._currentBeat))
        },
        getBeatXPosition: function(q) {
            var W = N.Ascii2Helper.getBeatJq(q);
            return W.position().left
        },
        getBeatYPosition: function(X) {
            var q;
            var W = "#" + N.Ascii2Writer.MEASURE_HTML_CLASS_NAME + "-" + X.measure.getIndex() + " #" + N.Ascii2Writer.STRING_HTML_CLASS_NAME + "-1";
            q = new h.JQuery(W);
            return q.position().top
        },
        isAnimationActive: function() {
            return this._animationActive
        },
        setCurrentBeat: function(q) {
            this._currentBeat = q
        },
        __class__: U.view.js.AsciiCursor
    });
    U.view.js.ControlPanelView = function(q) {
        S.puremvc.typedExt.js.TypedJsView.call(this, q);
        this.hxPlayOption.getJqNode().find("svg").css({
            display: "block"
        });
        this._playOptionEnabled = false;
        this.hxVolumeOption.setRange(0, 127);
        this.hxTempOption.setRange(10, 150);
        this.hxTempOption.setStep(10);
        this.hxPitchOption.minValue = -5;
        this.hxPitchOption.maxValue = 5;
        this.hxTransposeOption.minValue = -12;
        this.hxTransposeOption.maxValue = 12;
        this.jqTransposePitchDropDown = this.getJqNode().find("._hxTransposePitchDropDown");
        this.jqSettingsDropDown = this.getJqNode().find("._hxSettingsDropDown");
        this._bindEvents()
    };
    p["tabPro.view.js.ControlPanelView"] = U.view.js.ControlPanelView;
    U.view.js.ControlPanelView.__name__ = ["tabPro", "view", "js", "ControlPanelView"];
    U.view.js.ControlPanelView.__interfaces__ = [U.interfaces.IControlPanelView];
    U.view.js.ControlPanelView.__super__ = S.puremvc.typedExt.js.TypedJsView;
    U.view.js.ControlPanelView.prototype = v(S.puremvc.typedExt.js.TypedJsView.prototype, {
        reset: function() {
            this._playOptionEnabled = false;
            this._isNeedScrollToActiveTempItem = true;
            this._fillCircleBar(1, 0);
            this.hxPlayOption.getJqNode().find("svg .track").css({
                display: "block"
            });
            this.hxPlayOption.getJqNode().find("svg .bar").css({
                display: "none"
            });
            this.hxPlayOption.getJqNode().addClass("has_tooltip");
            this.hxPlayOption.getJqNode().find("svg path").attr("class", "disabled");
            this.hxPlayOption.getJqNode().removeClass("active-play")
        },
        configure: function(q) {
            var W = this;
            this.getJqNode().addClass("tpp-b-controls__" + q.controlPanelStyle[0]);
            this._controlPanelStyle = q.controlPanelStyle;
            this.hxTempOption.setStep(1);
            this.hxTempOption.setStep(1);
            this.hxTempValue.getJqNode().css({
                cursor: "pointer"
            });
            this.hxTempValue.getJqNode().unbind("click");
            this.hxTempValue.getJqNode().bind("click", function(X) {
                W.listener.onIntentTempChange(1)
            });
            this.hxPitchNotification.hide();
            this.hxPlayOption.getJqNode().find("svg .bar").css({
                display: "block"
            });
            this.setTemp(q.temp);
            this._lastVolumeValue = q.volume;
            this.setVolume(q.volume);
            this.setPitch(0);
            this.setTranspose(0);
            this.toggleMetronomeOption(q.metronome);
            this.toggleCountDownOption(q.countDown);
            if (this.hxAutoScrollOption != null) {
                this.toggleAutoScrollOption(q.autoScroll)
            }
            if (this.hxDrawDurationsOption != null) {
                this.toggleDrawDurationsOption(q.drawDurations)
            }
            this.toggleFretBoard(q.fretboard)
        },
        _bindEvents: function() {
            var q = this;
            this.hxVolumeOptionIco.getJqNode().click(function(W) {
                q._toggleMute();
                return false
            });
            this.hxVolumeOption.change(function(X) {
                var W = q.hxVolumeOption.get_value();
                q._decorateVolumeOptionIco(W);
                q.listener.onVolumeChange(W)
            });
            this.hxVolumeOption.stopDrag(function(X) {
                var W = Math.round(100 * q.hxVolumeOption.get_value() / 127);
                (h.Boot.__cast(q.listener, U.view.ControlPanelMediator)).analyticsLogChangeVolume(W)
            });
            this.hxRewindOption.getJqNode().click(function(W) {
                q.listener.onRewind();
                return false
            });
            this.hxPlayOption.getJqNode().click(function(W) {
                q.listener.onIntentTogglePlay(q._playOptionEnabled);
                return false
            });
            this.hxStopOption.getJqNode().click(function(W) {
                q.listener.onIntentTogglePlay(true);
                return false
            });
            this.hxTempOption.change(function(W) {
                q.listener.onIntentTempChange(q.hxTempOption.get_value() / 100)
            });
            this.hxTempOption.stopDrag(function(W) {
                (h.Boot.__cast(q.listener, U.view.ControlPanelMediator)).analyticsLogChangeTemp(q.hxTempOption.get_value() / 100)
            });
            if (this.hxEqualizerOption != null) {
                this.hxEqualizerOption.click(function(W) {
                    q.listener.onIntentEqualizerSwitch()
                })
            }
            this.hxLoopOption.change(function(W) {
                q.listener.onIntentToggleLoop()
            });
            if (this.hxTransposePitchHandler != null) {
                this.hxTransposePitchHandler.getJqNode().click(function(W) {
                    q._togglePitchTranspose();
                    return false
                })
            }
            this.jqTransposePitchDropDown.click(function(W) {
                return false
            });
            this.hxPitchOption.change(function(W) {
                q.listener.onPitchChange(q.hxPitchOption.get_value());
                q._decorateTransposePitchHandler()
            });
            this.hxTransposeOption.change(function(W) {
                q.listener.onTransposeChange(q.hxTransposeOption.get_value());
                q._decorateTransposePitchHandler()
            });
            this.hxMetronomeOption.change(function(W) {
                q.listener.onToggleMetronome()
            });
            this.hxCountDownOption.change(function(W) {
                q.listener.onToggleCountDown()
            });
            if (this.hxAutoScrollOption != null) {
                this.hxAutoScrollOption.change(function(W) {
                    q.listener.onToggleAutoScroll()
                })
            }
            if (this.hxDrawDurationsOption != null) {
                this.hxDrawDurationsOption.change(function(W) {
                    q.listener.onToggleDrawDurations()
                })
            }
            this.hxFretBoardOption.change(function(W) {
                q.listener.onIntentToggleFretBoard()
            });
            if (this.hxSettingsHandler != null) {
                this.hxSettingsHandler.getJqNode().click(function(W) {
                    q.toggleSettings();
                    return false
                });
                this.jqSettingsDropDown.click(function(W) {
                    return false
                })
            }
        },
        showPitchNotification: function(X, q) {
            var Z = this;
            if (X.offset == -12) {
                this.hxPitchNotification.getJqNode().find("._hxContent").html(O.replace(this.__("Track %% tuned 12 semitones down"), "%%", q.number + ". " + q.name));
                this.hxPitchNotification.getJqNode().addClass("tpp-b-pitch-notification__octave-down")
            } else {
                var W = V.Tuning.toString(V.Tuning.createStandard(X.name.split(" ").length));
                this.hxPitchNotification.getJqNode().find("._hxTuningLabel").html(X.name.split(" ")[0] + " (" + A.string(X.name) + ")");
                this.hxPitchNotification.getJqNode().find("._hxStandardTuningLabel").html(W.split(" ")[0] + " (" + W + ")");
                var Y;
                Y = this.__(Math.abs(X.offset) + " semitone" + (Math.abs(X.offset) > 1 ? "s" : "")) + " " + (X.offset > 0 ? this.__("down") : X.offset < 0 ? this.__("up") : "");
                this.hxPitchNotification.getJqNode().find("._hxPitchOffsetLabel").html(Y)
            }
            this.hxPitchNotification.getJqNode().fadeIn(600);
            if (this.hxTransposePitchHandler != null) {
                this.hxTransposePitchHandler.getJqNode().one("click", function(aa) {
                    Z.hxPitchNotification.getJqNode().fadeOut(400);
                    return false
                })
            }
        },
        updatePresetsProgressLoad: function(q) {
            this._fillCircleBar(q.total, q.complete);
            if (q.total == q.complete) {
                this.hxPlayOption.getJqNode().find("svg .track").css({
                    display: "none"
                });
                if (this._controlPanelStyle != null && (R.enumEq(this._controlPanelStyle, U.interfaces.ControlPanelStyle.Bakanovskiy_0624) || R.enumEq(this._controlPanelStyle, U.interfaces.ControlPanelStyle.Smekhov_0701))) {
                    this.hxPlayOption.getJqNode().attr("data-tooltip", this.__("Play / Pause [Space]"))
                } else {
                    this.hxPlayOption.getJqNode().removeClass("has_tooltip")
                }
                this.hxPlayOption.getJqNode().addClass("active-play");
                this.hxPlayOption.getJqNode().find("svg path").attr("class", "enabled")
            }
        },
        _fillCircleBar: function(Z, W) {
            var aa = this.hxPlayOption.getJqNode().find("svg .bar");
            var Y = A.parseFloat(aa.attr("r"));
            var ab = Math.PI * Y * 2;
            var q = W / Z * ab;
            var X = Math.round(q) + "px," + Math.round(ab) + "px";
            aa.css({
                strokeDasharray: X
            });
            this.hxPlayOption.getJqNode().attr("data-tooltip", this.__("Loading sounds") + ": " + Math.round(W / Z * 100) + "%")
        },
        enablePlayOption: function() {
            this._playOptionEnabled = true
        },
        togglePlay: function(q) {
            if (q) {
                this.hxPlayOption.hide();
                this.hxStopOption.show()
            } else {
                this.hxPlayOption.show();
                this.hxStopOption.hide()
            }
        },
        setTemp: function(q) {
            this.hxTempOption.set_value(Math.round(q * 100));
            this.hxTempValue.set_text(q == 1 ? this.__("original") : P.utils.MathUtils.toFixed(q, this.hxTempOption.getStep() == 1 ? 2 : 1))
        },
        _toggleTemp: function() {
            var q = this;
            if (this.hxTempDropDown.getJqNode()["is"](":visible")) {
                this.hxTempOption.getJqNode().removeClass("hover");
                this.hxTempDropDown.hide()
            } else {
                this.hxTempOption.getJqNode().addClass("hover");
                this.hxTempDropDown.show();
                if (this._isNeedScrollToActiveTempItem) {
                    this._scrollToActiveTempItem(0)
                }
                new h.JQuery(window).one("click", function(W) {
                    if (q.hxTempDropDown.getJqNode()["is"](":visible")) {
                        q.hxTempOption.getJqNode().removeClass("hover");
                        q.hxTempDropDown.hide()
                    }
                })
            }
        },
        _scrollToActiveTempItem: function(W) {
            var q = this.hxTempDropDown.getJqNode().find("li.active");
            if (q[0].offsetTop > 0) {
                this._isNeedScrollToActiveTempItem = false;
                this.hxTempDropDown.getJqNode().animate({
                    scrollTop: q[0].offsetTop - 4 - q.height()
                }, W)
            }
        },
        setVolume: function(q) {
            if (this._lastVolumeValue == null) {
                this._lastVolumeValue = q
            }
            this.hxVolumeOption.set_value(q);
            this._decorateVolumeOptionIco(q)
        },
        _decorateVolumeOptionIco: function(q) {
            this.hxVolumeOption.getJqNode().attr("data-tooltip", Math.round(100 * q / 127) + "%");
            var W = "mute";
            if (q > 84) {
                W = ""
            } else {
                if (q > 42) {
                    W = "medium"
                } else {
                    if (q > 0) {
                        W = "low"
                    }
                }
            }
            this.hxVolumeOptionIco.getJqNode().attr("data-volume", W)
        },
        _toggleMute: function() {
            var q = this.hxVolumeOption.get_value();
            if (q > 0) {
                this._lastVolumeValue = q;
                this.setVolume(0);
                this.listener.onVolumeChange(0)
            } else {
                this.setVolume(this._lastVolumeValue);
                this.listener.onVolumeChange(this._lastVolumeValue)
            }
        },
        _togglePitchTranspose: function() {
            var q = this;
            if (this.jqTransposePitchDropDown.is(":visible")) {
                this.hxTransposePitchHandler.getJqNode().removeClass("hover");
                this.jqTransposePitchDropDown.hide();
                this.listener.onTogglePitchTransposeControl(false)
            } else {
                this.hxTransposePitchHandler.getJqNode().addClass("hover");
                this.jqTransposePitchDropDown.show();
                this.listener.onTogglePitchTransposeControl(true);
                new h.JQuery(window).one("click", function(W) {
                    if (q.jqTransposePitchDropDown.is(":visible")) {
                        q.hxTransposePitchHandler.getJqNode().removeClass("hover");
                        q.jqTransposePitchDropDown.hide();
                        q.listener.onTogglePitchTransposeControl(false)
                    }
                })
            }
        },
        setPitch: function(q) {
            this.hxPitchOption.set_value(q);
            this._decorateTransposePitchHandler()
        },
        setTranspose: function(q) {
            this.hxTransposeOption.set_value(q);
            this._decorateTransposePitchHandler()
        },
        _decorateTransposePitchHandler: function() {
            var q = "";
            q += this.__("Pitch") + (this.hxPitchOption.get_value() != 0 ? ": " + (this.hxPitchOption.get_value() > 0 ? "+" : "-") + this.hxPitchOption.get_value() : "") + " / ";
            q += this.__("Transpose") + (this.hxTransposeOption.get_value() != 0 ? ": " + (this.hxTransposeOption.get_value() > 0 ? "+" : "-") + this.hxTransposeOption.get_value() : "");
            if (this.hxTransposePitchHandler != null) {
                this.hxTransposePitchHandler.getJqNode().attr("data-tooltip", q);
                if (this.hxPitchOption.get_value() != 0 || this.hxTransposeOption.get_value() != 0) {
                    this.hxTransposePitchHandler.getJqNode().addClass("active")
                } else {
                    this.hxTransposePitchHandler.getJqNode().removeClass("active")
                }
            }
        },
        switchEqualizerOption: function(q) {
            this.hxEqualizerOption.getJqNode().html("Eq. " + q[0])
        },
        toggleLoopMode: function(q) {
            this.hxLoopOption.set_checked(q)
        },
        toggleMetronomeOption: function(q) {
            this.hxMetronomeOption.set_checked(q == null ? !this.hxMetronomeOption.get_checked() : q)
        },
        toggleCountDownOption: function(q) {
            this.hxCountDownOption.set_checked(q == null ? !this.hxCountDownOption.get_checked() : q)
        },
        toggleAutoScrollOption: function(q) {
            this.hxAutoScrollOption.set_checked(q == null ? !this.hxAutoScrollOption.get_checked() : q)
        },
        toggleDrawDurationsOption: function(q) {
            this.hxDrawDurationsOption.set_checked(q == null ? !this.hxDrawDurationsOption.get_checked() : q)
        },
        toggleFretBoard: function(q) {
            this.hxFretBoardOption.set_checked(q)
        },
        toggleSettings: function(q) {
            var X = this;
            var W;
            if (q == null) {
                W = this.jqSettingsDropDown.is(":visible")
            } else {
                W = !q
            }
            this.listener.onToggleSettings(!W);
            if (W) {
                if (R.enumEq(this._controlPanelStyle, U.interfaces.ControlPanelStyle.Smekhov_0701)) {
                    this.hxSettingsHandler.getJqNode().removeClass("active")
                } else {
                    this.hxSettingsHandler.getJqNode().removeClass("hover")
                }
                this.jqSettingsDropDown.hide()
            } else {
                if (R.enumEq(this._controlPanelStyle, U.interfaces.ControlPanelStyle.Smekhov_0701)) {
                    this.hxSettingsHandler.getJqNode().addClass("active")
                } else {
                    this.hxSettingsHandler.getJqNode().addClass("hover")
                }
                this.jqSettingsDropDown.show();
                new h.JQuery(window).one("click", function(Y) {
                    if (X.jqSettingsDropDown.is(":visible")) {
                        if (R.enumEq(X._controlPanelStyle, U.interfaces.ControlPanelStyle.Smekhov_0701)) {
                            X.hxSettingsHandler.getJqNode().removeClass("active")
                        } else {
                            X.hxSettingsHandler.getJqNode().removeClass("hover")
                        }
                        X.jqSettingsDropDown.hide()
                    }
                })
            }
        },
        __class__: U.view.js.ControlPanelView
    });
    U.view.js.CountDownView = function(q) {
        S.puremvc.typedExt.js.TypedJsView.call(this, q)
    };
    p["tabPro.view.js.CountDownView"] = U.view.js.CountDownView;
    U.view.js.CountDownView.__name__ = ["tabPro", "view", "js", "CountDownView"];
    U.view.js.CountDownView.__interfaces__ = [U.interfaces.ICountDownView];
    U.view.js.CountDownView.__super__ = S.puremvc.typedExt.js.TypedJsView;
    U.view.js.CountDownView.prototype = v(S.puremvc.typedExt.js.TypedJsView.prototype, {
        start: function() {
            this.hxCount.set_text("")
        },
        next: function(q) {
            this.hxCount.set_text(q == null ? "null" : "" + q)
        },
        __class__: U.view.js.CountDownView
    });
    U.view.js.EqualizerView = function(aa) {
        S.puremvc.typedExt.js.TypedJsView.call(this, aa);
        this._initialized = false;
        this._defaultParams = {
            F65: "0",
            F125: "0",
            F250: "0",
            F500: "0",
            F1000: "0",
            F2000: "0",
            F4000: "0",
            F6000: "0",
            F8000: "0",
            F12000: "0",
            volume: 0
        };
        this._modes = ["Default", "Ballad", "Classic", "Metal", "Rock"];
        this._modeListParams = {
            Default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            Ballad: [3, 3, 2, 2, 0, -2, -3, -3, -4, 0],
            Classic: [4, 3, 2, -3, -2, 0, 1, 3, 4, 0],
            Metal: [10, 7, 5, -1, 9, 5, 0, 4, 7, 10],
            Rock: [4, -4, -7, -3, 2, 6, 7, 8, 8, 8]
        };
        this.hxEqualizerMode.getJqNode().find("._hxList").perfectScrollbar({
            useKeyboard: false,
            wheelSpeed: 1,
            minScrollbarLength: 16,
            suppressScrollX: true
        });
        this._frequencySliderList = [this.hxFrequency65, this.hxFrequency125, this.hxFrequency250, this.hxFrequency500, this.hxFrequency1000, this.hxFrequency2000, this.hxFrequency4000, this.hxFrequency6000, this.hxFrequency8000, this.hxFrequency12000];
        this._customParams = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
        try {
            var W = JSON.parse(h.Browser.getLocalStorage().getItem("tpEqualizerParams"));
            if (W == null || W.length < this._frequencySliderList.length) {
                this._customParams = this._customParams
            } else {
                this._customParams = W
            }
            if (this._customParams.length == this._frequencySliderList.length) {
                this._customParams.push(0)
            }
            if (h.Browser.getLocalStorage().getItem("tpEqualizerOn") == "1" || h.Browser.getLocalStorage().getItem("tpEqualizerOn") == null) {
                this.hxEqualizerEnabled.set_checked(true)
            }
        } catch (Y) {}
        if (this.isOldDefaultPreset(this._customParams)) {
            this._customParams = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        }
        var X = 0;
        var Z = this._frequencySliderList.length;
        while (X < Z) {
            var q = X++;
            this._frequencySliderList[q].setRange(-15, 15);
            this._frequencySliderList[q].set_value(this._customParams[q]);
            this._frequencySliderList[q].setOrientation("vertical")
        }
        if (this.hxEcho != null) {
            this.hxEcho.setRange(0, 100);
            this.hxEcho.setStep(1);
            this.hxEcho.set_value(this._customParams[this._frequencySliderList.length]);
            this.hxEcho.setOrientation("vertical")
        }
        this.actualizeMode();
        this.delegate()
    };
    p["tabPro.view.js.EqualizerView"] = U.view.js.EqualizerView;
    U.view.js.EqualizerView.__name__ = ["tabPro", "view", "js", "EqualizerView"];
    U.view.js.EqualizerView.__interfaces__ = [U.interfaces.IEqualizerView];
    U.view.js.EqualizerView.__super__ = S.puremvc.typedExt.js.TypedJsView;
    U.view.js.EqualizerView.prototype = v(S.puremvc.typedExt.js.TypedJsView.prototype, {
        configure: function(q) {
            if (!this._initialized) {
                this._initialized = true;
                this.onChangeEqualizerParameters()
            }
            this.reset()
        },
        toggle: function(W) {
            var q;
            if (W == null) {
                q = !this.isVisible()
            } else {
                q = W
            }
            if (q) {
                this._hasModified = false;
                this.getJqNode().removeClass("hide")
            } else {
                this.getJqNode().addClass("hide")
            }
        },
        isVisible: function() {
            return !this.getJqNode().hasClass("hide")
        },
        delegate: function() {
            var Y = this;
            this.hxClose.getJqNode().on("click", function(Z) {
                Y.toggle(false);
                new h.JQuery(window).trigger("tpEqualizerClosed", [{
                    hasModified: Y._hasModified,
                    preset: O.trim(Y.hxEqualizerMode.getJqNode().find("._hxCurrent").html()),
                    presetParams: Y.getEqualizerParameters(),
                    equalizerEnabled: Y.hxEqualizerEnabled.get_checked()
                }])
            });
            this.hxEqualizerMode.getJqNode().on("click", function(Z) {
                Y.hxEqualizerMode.getJqNode().toggleClass("open")
            });
            this.hxEqualizerMode.getJqNode().find("._hxList").children("._hxModePreset").on("click", function(ab) {
                Y.hxEqualizerMode.getJqNode().find("._hxList .active").removeClass("active");
                ab.target.classList.add("active");
                var aa = Y.hxEqualizerMode.getJqNode().find("._hxCurrent");
                var Z = O.trim(aa.html());
                var ac = O.trim(ab.target.innerHTML);
                if (Z != ac) {
                    Y._hasModified = true;
                    aa.html(ac);
                    Y.hxEqualizerMode.getJqNode().trigger("change");
                    new h.JQuery(window).trigger("tpEqualizerPresetSelected", [{
                        preset: ac
                    }])
                }
            });
            this.hxEqualizerMode.getJqNode().on("change", function(Z) {
                var aa = O.trim(Y.hxEqualizerMode.getJqNode().find("._hxCurrent").html());
                if (Object.prototype.hasOwnProperty.call(Y._modeListParams, aa)) {
                    Y.changeEqualizerParameters(D.getProperty(Y._modeListParams, aa))
                } else {
                    Y.changeEqualizerParameters(Y._customParams)
                }
            });
            var X = 0;
            var q = this._frequencySliderList;
            while (X < q.length) {
                var W = q[X];
                ++X;
                W.change(function(Z) {
                    Y._hasModified = true;
                    Y.actualizeMode();
                    Y.onChangeEqualizerParameters()
                })
            }
            if (this.hxEcho != null) {
                this.hxEcho.change(function(Z) {
                    Y._hasModified = true;
                    Y.onChangeEqualizerParameters()
                })
            }
            this.hxEqualizerEnabled.change(function(Z) {
                h.Browser.getLocalStorage().setItem("tpEqualizerOn", Y.hxEqualizerEnabled.get_checked() ? "1" : "0");
                Y.onChangeEqualizerParameters()
            })
        },
        changeEqualizerParameters: function(Y) {
            var W = 0;
            var X = this._frequencySliderList.length;
            while (W < X) {
                var q = W++;
                this._frequencySliderList[q].set_value(Y[q])
            }
            this.onChangeEqualizerParameters()
        },
        onChangeEqualizerParameters: function() {
            var aa = [];
            var Z = 0;
            var Y = this._frequencySliderList;
            while (Z < Y.length) {
                var X = Y[Z];
                ++Z;
                aa.push(X.get_value())
            }
            var q;
            if (this.hxEcho != null) {
                q = this.hxEcho.get_value()
            } else {
                q = 0
            }
            aa.push(q);
            h.Browser.getLocalStorage().setItem("tpEqualizerParams", JSON.stringify(aa));
            var W;
            if (this.hxEqualizerEnabled.get_checked()) {
                W = this.getEqualizerParameters()
            } else {
                W = this._defaultParams
            }
            W.volume = q / 100;
            this.listener.onChangeEqualizerParameters(W)
        },
        getEqualizerParameters: function() {
            var Y = {};
            var X = 0;
            var W = this._frequencySliderList;
            while (X < W.length) {
                var q = W[X];
                ++X;
                D.setField(Y, q.getJqNode().attr("name"), q.get_value())
            }
            D.setField(Y, "volume", this.hxEcho != null ? this.hxEcho.get_value() : 0);
            return Y
        },
        findMode: function(X) {
            var aa = null;
            var Z = 0;
            var ad = this._modes;
            while (Z < ad.length) {
                var W = ad[Z];
                ++Z;
                var ab = true;
                var q = D.getProperty(this._modeListParams, W);
                var ac = 0;
                while (ac < 10) {
                    var Y = ac++;
                    if (X[Y] != q[Y]) {
                        ab = false;
                        break
                    }
                }
                if (ab) {
                    aa = W;
                    break
                }
            }
            return aa
        },
        actualizeMode: function() {
            var Z = [];
            var Y = 0;
            var W = this._frequencySliderList;
            while (Y < W.length) {
                var q = W[Y];
                ++Y;
                Z.push(q.get_value())
            }
            var X = this.findMode(Z);
            if (X == null) {
                X = "Custom";
                this._customParams = Z
            }
            this.setListValue(X)
        },
        setListValue: function(q) {
            var W = this;
            this.hxEqualizerMode.getJqNode().find("._hxList").children("._hxModePreset").each(function(Y, Z) {
                var X = O.trim(Z.innerHTML);
                if (q == X) {
                    W.hxEqualizerMode.getJqNode().find("._hxCurrent").html(q);
                    Z.classList.add("active")
                } else {
                    Z.classList.remove("active")
                }
            })
        },
        isOldDefaultPreset: function(aa) {
            var q = [11, 6, 3, -4, 0, 4, 8, -4, 4, 9, 0];
            var X = true;
            var Y = 0;
            var Z = this._frequencySliderList.length;
            while (Y < Z) {
                var W = Y++;
                if (q[W] != aa[W]) {
                    X = false;
                    break
                }
            }
            return X
        },
        reset: function() {},
        __class__: U.view.js.EqualizerView
    });
    U.view.js.FretBoardView = function(W) {
        var q = this;
        S.puremvc.typedExt.js.TypedJsView.call(this, W);
        this._timer = new m.Timer(25);
        this.hxFretBoardCanvas.getJqNode().mousemove(function(X) {
            var Y = q.hxFretBoardCanvas.getJqNode().offset();
            q._fretBoard.onMousemove(X.pageX - Y.left, X.pageY - Y.top)
        });
        this._isVisible = false;
        this.getJqNode().on("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd", function(X) {
            q.listener.onStopAnimation(q._isVisible)
        })
    };
    p["tabPro.view.js.FretBoardView"] = U.view.js.FretBoardView;
    U.view.js.FretBoardView.__name__ = ["tabPro", "view", "js", "FretBoardView"];
    U.view.js.FretBoardView.__interfaces__ = [U.interfaces.IFretBoardView];
    U.view.js.FretBoardView.__super__ = S.puremvc.typedExt.js.TypedJsView;
    U.view.js.FretBoardView.prototype = v(S.puremvc.typedExt.js.TypedJsView.prototype, {
        render: function(q, W) {
            if (q == null) {
                q = false
            }
        },
        loadComplete: function(q) {
            this._loadCompleteFlag = true;
            this.pickStrings(this._activeBeat, this._futureBeats);
            this.render();
            this.listener.onViewLoadComplete()
        },
        update: function(q, W, X) {
            if (X == null) {
                X = 1000
            }
            if (W == null) {
                W = false
            }
            this._activeBeat = q.shift();
            this._futureBeats = q;
            if (this._loadCompleteFlag) {
                this.pickStrings(this._activeBeat, q);
                this.render(W, X)
            }
        },
        pickStrings: function(W, af) {
            var ag = new Array();
            var ae = new Array();
            if (W != null) {
                var Z = 0;
                var ac = W.getNotes();
                while (Z < ac.length) {
                    var ad = ac[Z];
                    ++Z;
                    ag.push(ad.value);
                    ae.push(ad.string)
                }
                this._fretBoard.pickStrings(ag, ae)
            }
            ag = new Array();
            ae = new Array();
            if (af != null) {
                var ab = 0;
                while (ab < af.length) {
                    var aa = af[ab];
                    ++ab;
                    if (aa != null) {
                        var Y = 0;
                        var q = aa.getNotes();
                        while (Y < q.length) {
                            var X = q[Y];
                            ++Y;
                            ag.push(X.value);
                            ae.push(X.string)
                        }
                    }
                }
            }
            this._fretBoard.futureStrings(ag, ae)
        },
        setCapo: function(q) {
            this._fretBoard.setCapo(q)
        },
        setStringCount: function(q) {
            this._fretBoard.setStringCount(q)
        },
        set_height: function(q) {
            S.puremvc.typedExt.js.TypedJsView.prototype.set_height.call(this, q);
            this._fretBoard.setHeight(q - 30);
            return q
        },
        show: function() {
            this._isVisible = true
        },
        hide: function() {
            this._isVisible = false
        },
        getFretboard: function() {
            return h.Boot.__cast(this._fretBoard, C.FretBoard)
        },
        configure: function(q) {
            var W = null;
            if (q != null) {
                W = q
            } else {
                W = {
                    primaryColor: 1621148,
                    openStringColor: 1621148,
                    capoImage: "capo.png",
                    noteBorderWidth: 2,
                    drawZeroFretNote: true,
                    styledBackground: true
                }
            }
            this._fretBoard.configure(W);
            if (W.styledBackground) {
                this.getJqNode().addClass("tpp-b-fretboard__styled")
            }
        },
        __class__: U.view.js.FretBoardView
    });
    U.view.js.FretBoardViewCanvas = function(q) {
        U.view.js.FretBoardView.call(this, q);
        this._canvas = new P.graphics.HtmlCanvas(null, this.hxFretBoardCanvas.getJqNode()[0]);
        this._fretBoard = new C.FretBoard(s(this, this.loadComplete), q.parameters.get("assetFretBoardImagesPreUrl"))
    };
    p["tabPro.view.js.FretBoardViewCanvas"] = U.view.js.FretBoardViewCanvas;
    U.view.js.FretBoardViewCanvas.__name__ = ["tabPro", "view", "js", "FretBoardViewCanvas"];
    U.view.js.FretBoardViewCanvas.__super__ = U.view.js.FretBoardView;
    U.view.js.FretBoardViewCanvas.prototype = v(U.view.js.FretBoardView.prototype, {
        render: function(q, W) {
            if (q == null) {
                q = false
            }
            this._fretBoard.render(this._canvas, q, W)
        },
        __class__: U.view.js.FretBoardViewCanvas
    });
    U.view.js.FretBoardViewFlash = function(q) {
        U.view.js.FretBoardView.call(this, q)
    };
    p["tabPro.view.js.FretBoardViewFlash"] = U.view.js.FretBoardViewFlash;
    U.view.js.FretBoardViewFlash.__name__ = ["tabPro", "view", "js", "FretBoardViewFlash"];
    U.view.js.FretBoardViewFlash.__super__ = U.view.js.FretBoardView;
    U.view.js.FretBoardViewFlash.prototype = v(U.view.js.FretBoardView.prototype, {
        createFlashCanvas: function(q, W) {
            this._fretBoard = new U.model.FlashFretBoard(U.view.js.FretBoardView.ID, q, W, s(this, this.loadComplete))
        },
        render: function(q, W) {
            if (q == null) {
                q = false
            }
            this._fretBoard.render(null, q, W)
        },
        __class__: U.view.js.FretBoardViewFlash
    });
    U.view.js.FretBoardViewSvg = function(q) {
        U.view.js.FretBoardView.call(this, q);
        this._canvas = new P.graphics.SvgCanvas("fretboardcanvas");
        this._fretBoard = new C.FretBoard(s(this, this.loadComplete), "/bundles/tabpro/images/fretboard/")
    };
    p["tabPro.view.js.FretBoardViewSvg"] = U.view.js.FretBoardViewSvg;
    U.view.js.FretBoardViewSvg.__name__ = ["tabPro", "view", "js", "FretBoardViewSvg"];
    U.view.js.FretBoardViewSvg.__super__ = U.view.js.FretBoardView;
    U.view.js.FretBoardViewSvg.prototype = v(U.view.js.FretBoardView.prototype, {
        render: function(q, W) {
            if (q == null) {
                q = false
            }
            this._fretBoard.render(this._canvas, q, W)
        },
        __class__: U.view.js.FretBoardViewSvg
    });
    U.view.js.InstrumentSwitcherView = function(W) {
        this._selectedInstrumentIndex = -1;
        this._selectedInstrumentGroupIndex = -1;
        var q = this;
        S.puremvc.typedExt.js.TypedJsView.call(this, W);
        this.buildGroupList();
        this.hxCloseOption.getJqNode().click(function(X) {
            q.getJqNode().fadeOut(100)
        });
        this.hxRestoreDefaulInstrumentOption.getJqNode().click(function(X) {
            q.getJqNode().fadeOut(100);
            q.listener.restoreDefaulInstrument()
        });
        this.hxApplySelectedInstrumentOption.getJqNode().click(function(X) {
            q.getJqNode().fadeOut(100);
            q.listener.applySelectedInstrument(q._instrumentScheme[q._selectedInstrumentGroupIndex].instruments[q._selectedInstrumentIndex].midiIndex)
        })
    };
    p["tabPro.view.js.InstrumentSwitcherView"] = U.view.js.InstrumentSwitcherView;
    U.view.js.InstrumentSwitcherView.__name__ = ["tabPro", "view", "js", "InstrumentSwitcherView"];
    U.view.js.InstrumentSwitcherView.__super__ = S.puremvc.typedExt.js.TypedJsView;
    U.view.js.InstrumentSwitcherView.prototype = v(S.puremvc.typedExt.js.TypedJsView.prototype, {
        show: function() {
            this.getJqNode().fadeIn(100)
        },
        buildGroupList: function() {
            var q = this;
            this._instrumentScheme = Q.MidiInstrumentHelper.getInstrumentScheme();
            var Z = S.puremvc.typedExt.js.UiComponentParams.create(null, this.hxInstrumentGroups).setTemplateId(U.view.js.InstrumentSwitcherView.INSTRUMENT_GROUP_TEMPLATE).useYourself();
            this._instrumentGroups = new Array();
            var Y = 0;
            var W = this._instrumentScheme;
            while (Y < W.length) {
                var aa = [W[Y]];
                ++Y;
                var X = new U.view.js.components.InstrumentGroupView(Z);
                X.listener = this.listener;
                X.buildView(aa[0]);
                X.getJqNode().click((function(ab) {
                    return function(ac) {
                        if (q._selectedInstrumentGroupIndex != ab[0].index) {
                            q.selectGroup(ab[0].index)
                        }
                        return false
                    }
                })(aa));
                this._instrumentGroups.push(X)
            }
            this.hxInstrumentGroups.getJqNode().perfectScrollbar({
                useKeyboard: false,
                suppressScrollX: true,
                wheelSpeed: U.view.js.InstrumentSwitcherView.LINE_HEIGHT,
                includePadding: true
            })
        },
        setTrackLabelText: function(q) {
            this.hxTrackLabel.set_text(q)
        },
        updateForTrack: function(W) {
            var q = Q.MidiInstrumentHelper.getGroupIndexForInstrumentMidiIndex(W);
            this._selectedInstrumentGroupIndex = q;
            this.hxInstrumentGroups.getJqNode().scrollTop(U.view.js.InstrumentSwitcherView.LINE_HEIGHT * this._selectedInstrumentGroupIndex);
            this.hxInstrumentGroups.getJqNode().perfectScrollbar("update");
            this.markInstrumentGroupAsActive(this._selectedInstrumentGroupIndex);
            this.buildInstrumentList(this._selectedInstrumentGroupIndex);
            if (W != -1) {
                this.selectInstrument(Q.MidiInstrumentHelper.getInstrumentIndexForInstrumentMidiIndex(W), true)
            }
            this.hxInstruments.getJqNode().perfectScrollbar("update")
        },
        buildInstrumentList: function(Z) {
            var X = this;
            this.hxInstruments.getJqNode().perfectScrollbar("destroy");
            this.hxInstruments.getJqNode().html("");
            var ab = S.puremvc.typedExt.js.UiComponentParams.create(null, this.hxInstruments).setTemplateId(U.view.js.InstrumentSwitcherView.INSTRUMENT_TEMPLATE).useYourself();
            this._instruments = new Array();
            var aa = 0;
            var Y = this._instrumentScheme[Z].instruments;
            while (aa < Y.length) {
                var q = [Y[aa]];
                ++aa;
                var W = new U.view.js.components.InstrumentView(ab);
                W.listener = this.listener;
                W.buildView(q[0]);
                W.getJqNode().click((function(ac) {
                    return function(ad) {
                        X.selectInstrument(ac[0].index);
                        return false
                    }
                })(q));
                this._instruments.push(W)
            }
            this.hxInstruments.getJqNode().scrollTop(0);
            this.hxInstruments.getJqNode().perfectScrollbar({
                useKeyboard: false,
                suppressScrollX: true,
                wheelSpeed: U.view.js.InstrumentSwitcherView.LINE_HEIGHT,
                includePadding: true
            })
        },
        selectGroup: function(q) {
            this._selectedInstrumentGroupIndex = q;
            this.markInstrumentGroupAsActive(q);
            this.buildInstrumentList(q);
            this.selectInstrument(0, true)
        },
        selectInstrument: function(q, W) {
            if (W == null) {
                W = false
            }
            this._selectedInstrumentIndex = q;
            this.markInstrumentAsActive(this._selectedInstrumentIndex);
            if (W) {
                this.hxInstruments.getJqNode().scrollTop(U.view.js.InstrumentSwitcherView.LINE_HEIGHT * this._selectedInstrumentIndex);
                this.hxInstruments.getJqNode().perfectScrollbar("update")
            }
        },
        markInstrumentGroupAsActive: function(W) {
            var Y = 0;
            var q = this._instrumentGroups;
            while (Y < q.length) {
                var X = q[Y];
                ++Y;
                X.markAsInactive()
            }
            this._instrumentGroups[W].markAsActive()
        },
        markInstrumentAsActive: function(q) {
            var Y = 0;
            var X = this._instruments;
            while (Y < X.length) {
                var W = X[Y];
                ++Y;
                W.markAsInactive()
            }
            this._instruments[q].markAsActive()
        },
        isVisible: function() {
            return true
        },
        __class__: U.view.js.InstrumentSwitcherView
    });
    U.view.js.InstrumentsColorView = function(W) {
        var q = this;
        S.puremvc.typedExt.js.TypedJsView.call(this, W);
        if (this.getJqNode().find("table").length > 0) {
            new h.JQuery(window).keyup(function(X) {
                if (X.keyCode == 67) {
                    if (q.getJqNode().hasClass("hide")) {
                        q.getJqNode().removeClass("hide")
                    } else {
                        q.getJqNode().addClass("hide")
                    }
                }
            });
            this.getJqNode().find("table td, table th").css({
                border: "1px solid #000",
                padding: "2px"
            });
            this.fillColors()
        }
    };
    p["tabPro.view.js.InstrumentsColorView"] = U.view.js.InstrumentsColorView;
    U.view.js.InstrumentsColorView.__name__ = ["tabPro", "view", "js", "InstrumentsColorView"];
    U.view.js.InstrumentsColorView.__super__ = S.puremvc.typedExt.js.TypedJsView;
    U.view.js.InstrumentsColorView.prototype = v(S.puremvc.typedExt.js.TypedJsView.prototype, {
        fillColors: function() {
            this.getJqNode().find("table td").each(function(W, X) {
                var q = new h.JQuery(X);
                var Y = new K("([0-9]+).", "");
                if (Y.match(q.html())) {
                    var Z = A.parseInt(Y.matched(1)) - 1;
                    q.html(Y.replace(q.html(), (Z == null ? "null" : "" + Z) + ". "));
                    q.css({
                        background: Q.MidiInstrumentHelper.getInstrumentColorByMidiIndex(Z)
                    })
                }
            })
        },
        __class__: U.view.js.InstrumentsColorView
    });
    U.view.js.LoadingPresetsView = function(q) {
        S.puremvc.typedExt.js.TypedJsView.call(this, q)
    };
    p["tabPro.view.js.LoadingPresetsView"] = U.view.js.LoadingPresetsView;
    U.view.js.LoadingPresetsView.__name__ = ["tabPro", "view", "js", "LoadingPresetsView"];
    U.view.js.LoadingPresetsView.__interfaces__ = [U.interfaces.ILoadingPresetsView];
    U.view.js.LoadingPresetsView.__super__ = S.puremvc.typedExt.js.TypedJsView;
    U.view.js.LoadingPresetsView.prototype = v(S.puremvc.typedExt.js.TypedJsView.prototype, {
        setState: function(q) {
            this.fillCircle(q.total, q.complete)
        },
        setTotal: function(W) {
            this.fillCircle(1, 1);
            var q = new m.Timer(300);
            q.run = function() {
                q.stop();
                W()
            }
        },
        fillCircle: function(Z, W) {
            var X = Math.round(200 / Z * W);
            var ab = new h.JQuery("#svg #bar");
            var Y = A.parseFloat(ab.attr("r"));
            var aa = Math.PI * (Y * 2);
            var q = W / Z * aa;
            ab.css({
                strokeDashoffset: q
            })
        },
        __class__: U.view.js.LoadingPresetsView
    });
    U.view.js.RootView = function(W) {
        var q = this;
        S.puremvc.typedExt.js.TypedJsView.call(this, W);
        new h.JQuery(window).keydown(function(X) {
            return q.listener.onKeyAction(D.getProperty(X, "originalEvent"))
        });
        new h.JQuery(window).keyup(function(X) {
            return q.listener.onKeyAction(D.getProperty(X, "originalEvent"))
        })
    };
    p["tabPro.view.js.RootView"] = U.view.js.RootView;
    U.view.js.RootView.__name__ = ["tabPro", "view", "js", "RootView"];
    U.view.js.RootView.__interfaces__ = [U.interfaces.IRootView];
    U.view.js.RootView.__super__ = S.puremvc.typedExt.js.TypedJsView;
    U.view.js.RootView.prototype = v(S.puremvc.typedExt.js.TypedJsView.prototype, {
        configure: function(W) {
            var q = W.minHeight;
            var X = new h.JQuery(window).height() - W.offsetTop;
            if (X < W.maxHeight) {
                if (W.fitToScreen) {
                    if (X - 4 - 10 < W.minHeight) {
                        q = W.minHeight
                    } else {
                        q = X - 4 - 10
                    }
                }
            } else {
                if (W.fitToScreen) {
                    q = W.maxHeight
                }
            }
            this._defaultHeight = q;
            this._defaultWidth = A["int"](this.get_width());
            this.toggleFretboard(W.fretboard, false)
        },
        toggleFretboard: function(W, q) {
            if (q == null) {
                q = true
            }
            if (W) {
                this.getJqNode().addClass(q ? "show_fretboard" : "force_show_fretboard")
            } else {
                this.getJqNode().removeClass("force_show_fretboard");
                this.getJqNode().removeClass("show_fretboard")
            }
        },
        toggleFitToScreen: function(q) {
            if (q) {
                this.getJqNode().addClass("fit_to_screen");
                this.getJqNode().css({
                    height: "100vh"
                });
                new h.JQuery("body").css({
                    overflow: "hidden"
                })
            } else {
                this.getJqNode().removeClass("fit_to_screen");
                this.getJqNode().height(this._defaultHeight);
                new h.JQuery("body").css({
                    overflow: "auto"
                })
            }
        },
        toggleFullscreenMode: function(q) {
            if (q) {
                this.getJqNode().addClass("fullscreen")
            } else {
                this.getJqNode().removeClass("fullscreen")
            }
        },
        __class__: U.view.js.RootView
    });
    U.view.js.SplashView = function(q) {
        S.puremvc.typedExt.js.TypedJsView.call(this, q)
    };
    p["tabPro.view.js.SplashView"] = U.view.js.SplashView;
    U.view.js.SplashView.__name__ = ["tabPro", "view", "js", "SplashView"];
    U.view.js.SplashView.__interfaces__ = [U.interfaces.ISplashView];
    U.view.js.SplashView.__super__ = S.puremvc.typedExt.js.TypedJsView;
    U.view.js.SplashView.prototype = v(S.puremvc.typedExt.js.TypedJsView.prototype, {
        setTotal: function(q) {},
        setState: function(q) {},
        __class__: U.view.js.SplashView
    });
    U.view.js.TabRenderView = function(W) {
        var q = this;
        S.puremvc.typedExt.js.TypedJsView.call(this, W);
        this._lastValue = 0;
        this.hxCanvas.getJqNode().mousewheel(function(Y) {
            var X;
            X = (Y.ctrlKey ? 1 : -1) * (Y.deltaY == 0 ? 0 : Math.abs(Y.deltaY) / Y.deltaY);
            var Z = Y.deltaFactor * Y.deltaY * -1;
            q.listener.onScrollDelta(X, Z, Y.ctrlKey);
            return false
        });
        this.hxScroller.setRange(0, 100000);
        this.hxScroller.change(function(X) {
            q.listener.onScroll(q.hxScroller.get_value() / 100000)
        });
        this._dragging = false;
        this.hxCanvas.getJqNode().mousedown(function(X) {
            q._dragging = true;
            q._mouseDownPageX = X.pageX;
            q._mouseDownPageY = X.pageY;
            q._mouseDownHxCanvasX = q._mouseDownPageX - q.get_x();
            q._mouseDownHxCanvasY = q._mouseDownPageY - q.get_y();
            q.listener.onDragStart(q._mouseDownHxCanvasX, q._mouseDownHxCanvasY)
        });
        this.hxCanvas.getJqNode().mouseout(function(X) {
            q.listener.onMouseMove(-1, -1)
        });
        new h.JQuery(window).mouseup(function(X) {
            if (q._dragging) {
                q.listener.onDragStop()
            }
            q._dragging = false;
            if (q._isEventLikeClick(X)) {
                q.listener.onCanvasClick(X.pageX - q.get_x(), X.pageY - q.get_y(), X.shiftKey)
            }
        })
    };
    p["tabPro.view.js.TabRenderView"] = U.view.js.TabRenderView;
    U.view.js.TabRenderView.__name__ = ["tabPro", "view", "js", "TabRenderView"];
    U.view.js.TabRenderView.__interfaces__ = [U.interfaces.ITabRenderView];
    U.view.js.TabRenderView.__super__ = S.puremvc.typedExt.js.TypedJsView;
    U.view.js.TabRenderView.prototype = v(S.puremvc.typedExt.js.TypedJsView.prototype, {
        configure: function(q) {
            this._instanceId = q.instanceId;
            this._hxCanvasElement = window.document.querySelector((this._instanceId > 0 ? ".hxRootWrapper" + this._instanceId + " " : "") + ".hxCanvas");
            this.prepareChordCanvas()
        },
        createCanvas: function() {},
        getCanvas: function() {
            return this._canvas
        },
        getCursorCanvas: function() {
            return this._cursorCanvas
        },
        isScrollerDragActive: function() {
            return this.hxScroller.isDragActive()
        },
        updateScroll: function(W, q) {
            if (this._isVisible == null) {
                if (q) {
                    this.hxScroller.show();
                    this.hxScroller.set_value(Math.floor(100000 * W))
                } else {
                    this.hxScroller.hide()
                }
            } else {
                if (q) {
                    if (this._isVisible != q) {
                        this.hxScroller.show()
                    }
                    var X = Math.floor(100000 * W);
                    if (X != this._lastValue) {
                        this.hxScroller.set_value(X);
                        this._lastValue = X
                    }
                } else {
                    if (this._isVisible != q) {
                        this.hxScroller.hide()
                    }
                }
            }
            if (this._isVisible == null || this._isVisible != q) {
                this._isVisible = q
            }
        },
        animateCursor: function(W, q) {
            q.animateCursor(W, this._cursorCanvas)
        },
        destroy: function() {
            this._canvas.dispose();
            S.puremvc.typedExt.js.TypedJsView.prototype.destroy.call(this)
        },
        _isEventLikeClick: function(q) {
            var W = Math.sqrt((q.pageX - this._mouseDownPageX) * (q.pageX - this._mouseDownPageX) + (q.pageY - this._mouseDownPageY) * (q.pageY - this._mouseDownPageY));
            return W <= U.view.js.TabRenderView.MIN_DISTANCE_FOR_CLICK
        },
        prepareChordCanvas: function() {
            var W = this;
            var q = window.document.querySelector((this._instanceId > 0 ? ".hxRootWrapper" + this._instanceId + " " : "") + ".hxTabRenderView").getClientRects();
            if (q.length > 0) {
                if (this._chordContainer == null) {
                    this._chordContainer = window.document.createElement("div");
                    this._hxCanvasElement.appendChild(this._chordContainer);
                    this._chordContainer.style.position = "absolute";
                    this._chordContainer.style.width = q[0].width + "px";
                    this._chordContainer.style.height = q[0].height + "px";
                    this._chordContainer.style.zIndex = "1";
                    this._chordPainter = new U.view.js.painter.ChordPainter(this._chordContainer);
                    this._chordContainer.addEventListener("mousemove", function(X) {
                        if (W._dragging) {
                            W.listener.onDrag(W._mouseDownHxCanvasX, W._mouseDownHxCanvasY, X.offsetX, X.offsetY)
                        } else {
                            W.listener.onMouseMove(X.offsetX, X.offsetY)
                        }
                    })
                }
            }
        },
        resize: function() {
            var q = window.document.querySelector((this._instanceId > 0 ? ".hxRootWrapper" + this._instanceId + " " : "") + ".hxTabRenderView").getClientRects();
            if (this._chordContainer != null && q.length > 0) {
                this._chordContainer.style.width = q[0].width + "px";
                this._chordContainer.style.height = q[0].height + "px"
            }
        },
        drawChord: function(q, X, W) {
            this._chordPainter.drawChord(q, X, W)
        },
        clearChordContainer: function() {
            this._chordPainter.clearContainer()
        },
        setCursor: function(q) {
            if (this._hxCanvasElement != null) {
                this._hxCanvasElement.style.cursor = q
            }
        },
        __class__: U.view.js.TabRenderView
    });
    U.view.js.TabRenderViewAscii = function(q) {
        S.puremvc.typedExt.js.TypedJsView.call(this, q);
        this.hxCanvas.listener = this
    };
    p["tabPro.view.js.TabRenderViewAscii"] = U.view.js.TabRenderViewAscii;
    U.view.js.TabRenderViewAscii.__name__ = ["tabPro", "view", "js", "TabRenderViewAscii"];
    U.view.js.TabRenderViewAscii.__super__ = S.puremvc.typedExt.js.TypedJsView;
    U.view.js.TabRenderViewAscii.prototype = v(S.puremvc.typedExt.js.TypedJsView.prototype, {
        update: function(q, W) {
            this.hxCanvas.update(q, W)
        },
        stopAnimation: function() {
            this.hxCanvas.stopAnimation()
        },
        animateCursor: function(W, q) {
            this.hxCanvas.animateCursor(W, q)
        },
        renderTrack: function(W, q) {
            this.hxCanvas.appendTabContent(W);
            this.hxCanvas.renderCursor(q);
            this.hxCanvas.bindClickEvents()
        },
        onBeatClick: function(q, X) {
            var W = this.listener;
            W.onBeatClick(q, X)
        },
        onCanvasScroll: function(W) {
            var q = this.listener;
            q.onScroll(W)
        },
        sizeChange: function() {
            var q = this.get_width();
            var W = this.get_height();
            this.hxCanvas.setWidth(this.get_width());
            this.hxCanvas.setHeight(this.get_height())
        },
        setFontSize: function(q) {
            this.hxCanvas.setFontSize(q)
        },
        __class__: U.view.js.TabRenderViewAscii
    });
    U.view.js.TabRenderViewCanvas = function(q) {
        U.view.js.TabRenderView.call(this, q)
    };
    p["tabPro.view.js.TabRenderViewCanvas"] = U.view.js.TabRenderViewCanvas;
    U.view.js.TabRenderViewCanvas.__name__ = ["tabPro", "view", "js", "TabRenderViewCanvas"];
    U.view.js.TabRenderViewCanvas.__super__ = U.view.js.TabRenderView;
    U.view.js.TabRenderViewCanvas.prototype = v(U.view.js.TabRenderView.prototype, {
        createCanvas: function() {
            this._canvas = new P.graphics.HtmlCanvas(null, this.hxCanvas.getJqNode()[0]);
            (h.Boot.__cast(this._canvas, P.graphics.HtmlCanvas)).getElement().style.position = "absolute";
            (h.Boot.__cast(this._canvas, P.graphics.HtmlCanvas)).getElement().style.left = "0";
            this._cursorCanvas = new P.graphics.HtmlCanvas(null, this.hxCanvas.getJqNode()[0]);
            (h.Boot.__cast(this._cursorCanvas, P.graphics.HtmlCanvas)).getElement().style.position = "absolute";
            (h.Boot.__cast(this._cursorCanvas, P.graphics.HtmlCanvas)).getElement().style.left = "0"
        },
        __class__: U.view.js.TabRenderViewCanvas
    });
    U.view.js.TabRenderViewFlash = function(q) {
        U.view.js.TabRenderView.call(this, q)
    };
    p["tabPro.view.js.TabRenderViewFlash"] = U.view.js.TabRenderViewFlash;
    U.view.js.TabRenderViewFlash.__name__ = ["tabPro", "view", "js", "TabRenderViewFlash"];
    U.view.js.TabRenderViewFlash.__super__ = U.view.js.TabRenderView;
    U.view.js.TabRenderViewFlash.prototype = v(U.view.js.TabRenderView.prototype, {
        createCanvas: function() {},
        __class__: U.view.js.TabRenderViewFlash
    });
    U.view.js.TabRenderViewSvg = function(q) {
        U.view.js.TabRenderView.call(this, q)
    };
    p["tabPro.view.js.TabRenderViewSvg"] = U.view.js.TabRenderViewSvg;
    U.view.js.TabRenderViewSvg.__name__ = ["tabPro", "view", "js", "TabRenderViewSvg"];
    U.view.js.TabRenderViewSvg.__super__ = U.view.js.TabRenderView;
    U.view.js.TabRenderViewSvg.prototype = v(U.view.js.TabRenderView.prototype, {
        createCanvas: function() {
            this._canvas = new P.graphics.SvgCanvas("canvas");
            U.view.js.TabRenderView.prototype.createCanvas.call(this)
        },
        __class__: U.view.js.TabRenderViewSvg
    });
    U.view.js.TimelineView = function(W) {
        var q = this;
        S.puremvc.typedExt.js.TypedJsView.call(this, W);
        this._hxTimelineContainer = this.findChildJqNode("_hxTimelineContainer");
        this._hitMapCanvasJqNode = this.findChildJqNode("_hxHitMapCanvas");
        this._timeLineItems = this.findChildJqNode(U.view.js.TimelineView.TIMELINE_ITEMS_ID);
        this._currentTimeLabel = this.getChild(U.view.js.TimelineView.CURRENT_TIME_LABEL_ID);
        this._totalTimeLabel = this.getChild(U.view.js.TimelineView.TOTAL_TIME_LABEL_ID);
        this._jqSelectionMark = this.findChildJqNode(U.view.js.TimelineView.SELECTION_MARK_ID);
        this._jqSelectionMark.click(function(X) {});
        this.hxTimelineSlider.setRange(0, 10000);
        this.hxTimelineSlider.change(function(Z) {
            var Y = q.hxTimelineSlider.get_value();
            var X = 100 * q.hxTimelineSlider.get_value() / 10000;
            q.listener.onPositionChange(X, U.interfaces.ChangePositionType.Slider)
        });
        this.hxTimelineSlider.stopDrag(function(X) {
            (h.Boot.__cast(q.listener, U.view.TimelineMediator)).onTimeLineSliderStopDrag()
        });
        this._hmtSections = new Array();
        this._dragging = false;
        this._hxPointer = this.findChildJqNode("_hxPointer");
        this._hxPointer.on("mousedown", function(X) {
            q._dragging = true;
            q._draggingX = X.pageX
        });
        window.document.addEventListener("mousemove", function(Z) {
            if (q._dragging) {
                var Y = q._hxTimelineContainer.width();
                var X = Z.pageX - q._timeLineItems.offset().left;
                if (X < 0) {
                    X = 0
                } else {
                    if (X > Y) {
                        X = Y
                    }
                }
                q.listener.onPositionChange(100 * X / Y, U.interfaces.ChangePositionType.Slider)
            }
        });
        new h.JQuery(window).on("mouseup", function(X) {
            if (q._dragging) {
                (h.Boot.__cast(q.listener, U.view.TimelineMediator)).onTimeLineSliderStopDrag()
            }
            q._dragging = false
        });
        this._alaClick(this._hxTimelineContainer, function(Y) {
            var X = 100 * (Y.pageX - q._timeLineItems.offset().left) / q._timeLineItems.width();
            q.listener.onPositionChange(X, U.interfaces.ChangePositionType.Click);
            (h.Boot.__cast(q.listener, U.view.TimelineMediator)).onTimeLineClick(q._timeable ? "time" : "chapter")
        });
        this._numberOfMeasures = 0;
        this._measureWidth = 0
    };
    p["tabPro.view.js.TimelineView"] = U.view.js.TimelineView;
    U.view.js.TimelineView.__name__ = ["tabPro", "view", "js", "TimelineView"];
    U.view.js.TimelineView.__interfaces__ = [U.interfaces.ITimelineView];
    U.view.js.TimelineView.__super__ = S.puremvc.typedExt.js.TypedJsView;
    U.view.js.TimelineView.prototype = v(S.puremvc.typedExt.js.TypedJsView.prototype, {
        configure: function(q) {
            this._isDemo = q.isDemo;
            this._songMeasureCount = q.song.measureCount();
            this._fullSongMeasureCount = q.fullSong.measureCount();
            this._instanceId = q.instanceId
        },
        setTotalTime: function(q) {
            this._totalTimeLabel.set_text(q.toString());
            this._totalTime = this._timeLimit = q.toMilliSeconds()
        },
        setTimeLimit: function(q) {
            this._timeLimit = q
        },
        changePosition: function(q, W) {
            this._currentTimeLabel.set_text(W.toString());
            this._updatePointer(q.measure.number())
        },
        addSegment: function(Z, Y, X) {
            if (X == null) {
                X = false
            }
            var W = S.puremvc.typedExt.js.UiComponentService.appendFromTemplate(this, U.view.js.TimelineView.TIMELINE_ITEMS_ID, U.view.js.TimelineView.TIMELINE_ITEM_TEMPLATE);
            var q = this.findChildJqNode(U.view.js.TimelineView.TIMELINE_ITEM_CONTENT_ID, W);
            q.html(Y);
            W.css({
                width: Z + "%"
            });
            if (X) {
                W.addClass("timeline-part__demo");
                q.attr("data-i18n", "player." + O.replace(Y, " ", "_"))
            }
        },
        setTimeable: function() {
            this._timeLineItems.addClass("timeable");
            this._timeable = true
        },
        setPartable: function() {
            this.findChildJqNode(U.view.js.TimelineView.TIMELINE_ITEMS_ID, this.getJqNode()).addClass("partable");
            this._timeable = false
        },
        showLoop: function(W, q) {},
        hideLoop: function() {
            this._jqSelectionMark.hide()
        },
        getCurrentTime: function() {
            return this.hxTimelineSlider.get_value()
        },
        reset: function() {
            this._timeLineItems.html(" ")
        },
        getTimeLineWidth: function() {
            return this.findChildJqNode(U.view.js.TimelineView.TIMELINE_ITEMS_ID).width()
        },
        renderHitMap: function(ah, Y, ag) {
            var aa = this;
            this._hitMapTabData = ag;
            this._numberOfMeasures = Y;
            this._tracklistTitles = ah;
            if (this._hitMapCanvasJqNode.length == 0) {
                return
            }
            this._hitMapCanvasJqNode.html("");
            var ai = this._hitMapCanvasJqNode[0].getClientRects();
            var q;
            if (ai.length > 0) {
                q = ai[0].width
            } else {
                q = 0
            }
            var X = new P.graphics.HtmlCanvas(null, this._hitMapCanvasJqNode[0]);
            X.setWidth(q);
            X.setHeight(28);
            this._canvasHighlight = new P.graphics.HtmlCanvas(null, this._hitMapCanvasJqNode[0]);
            this._canvasHighlight.setWidth(q);
            this._canvasHighlight.setHeight(28);
            this._measureWidth = q / this._fullSongMeasureCount;
            var af = 0;
            this._hmtSections = new Array();
            var ac = null;
            var ae = 1;
            var ad = Y + 1;
            while (ae < ad) {
                var ak = ae++;
                if (af != ag[ak].track) {
                    if (ac != null) {
                        ac.endMeasureNumber = ak - 1;
                        ac.endX = (ak - 1) * this._measureWidth;
                        this._hmtSections.push(ac)
                    }
                    if (ag[ak].value > 0) {
                        ac = {
                            trackNumber: ag[ak].track,
                            startMeasureNumber: ak,
                            endMeasureNumber: null,
                            startX: (ak - 1) * this._measureWidth,
                            endX: 0
                        };
                        af = ag[ak].track
                    } else {
                        ac = null;
                        af = 0
                    }
                }
            }
            if (ac != null) {
                ac.endMeasureNumber = Y;
                ac.endX = Y * this._measureWidth;
                this._hmtSections.push(ac)
            }
            if (this._hmtSections.length > 0) {
                var ab = 0;
                var Z = this._hmtSections;
                while (ab < Z.length) {
                    var aj = Z[ab];
                    ++ab;
                    this._drawHmtSection(X, aj)
                }
            }
            this._hxTimelineContainer.css({
                cursor: "pointer"
            });
            this._hxTimelineContainer.off("mousemove");
            this._hxTimelineContainer.off("mouseleave");
            this._trackTitleElement = window.document.querySelector((this._instanceId > 0 ? ".hxRootWrapper" + this._instanceId + " " : "") + ".hxTimelineView .hxTrackTitle");
            var W = window.document.querySelector((this._instanceId > 0 ? ".hxRootWrapper" + this._instanceId + " " : "") + "._hxTimelineContainer");
            W.addEventListener("mousemove", function(ar) {
                if (aa._dragging) {
                    return
                }
                var aq = W.getClientRects();
                var am = ar.pageX - aq[0].left;
                var ap = ar.pageX - aa._hitMapCanvasJqNode.offset().left;
                if (ap > 0 && ap <= q) {
                    var al = Math.ceil(aa._songMeasureCount * (ar.pageX - aa._timeLineItems.offset().left) / aa._timeLineItems.width());
                    if (!ag[al]) {
                        aa.listener.hitMapOff();
                        aa._canvasHighlight.clear();
                        aa._trackTitleElement.style.display = "none";
                        return
                    }
                    aa.listener.hitMapOn(al);
                    if (ag[al].value > 0) {
                        var ao = aa._findHmtSection(ap);
                        if (ao != null) {
                            aa._canvasHighlight.clear();
                            aa._drawHmtSection(aa._canvasHighlight, ao);
                            aa._highlightMeasure(al, aa._measureWidth, true);
                            aa._trackTitleElement.style.display = "block";
                            aa.hxTrackTitle.set_text(aa._tracklistTitles[aa.listener.getCurrentTrackNumber() - 1]);
                            var an = Math.round(aa._hxTimelineContainer.offset().left - aa.getJqNode().offset().left + (ao.endX + ao.startX - aa.hxTrackTitle.getJqNode().outerWidth()) / 2);
                            aa.hxTrackTitle.getJqNode().css({
                                left: an + "px"
                            })
                        }
                    } else {
                        aa._canvasHighlight.clear();
                        aa._highlightMeasure(al, aa._measureWidth, false);
                        aa._trackTitleElement.style.display = "none"
                    }
                } else {
                    aa.listener.hitMapOff();
                    aa._canvasHighlight.clear();
                    aa._trackTitleElement.style.display = "none"
                }
            });
            this._hxTimelineContainer.on("mouseleave", function(al) {
                aa.listener.hitMapOff();
                aa._canvasHighlight.clear();
                aa._trackTitleElement.style.display = "none"
            });
            this._renderPointer()
        },
        _renderPointer: function() {
            this._canvasPointer = new P.graphics.HtmlCanvas(null, this._hitMapCanvasJqNode[0]);
            this._canvasPointer.setWidth(this._hitMapCanvasJqNode.width());
            this._canvasPointer.setHeight(28);
            this._updatePointer(1)
        },
        _updatePointer: function(q) {
            this._canvasPointer.clear();
            this._canvasPointer.setLineThickness(0);
            this._canvasPointer.beginFill(1621148);
            this._canvasPointer.drawRect((q - 1) * this._measureWidth, 0, this._measureWidth, 28);
            this._canvasPointer.endFill()
        },
        _findHmtSection: function(q) {
            var X = null;
            if (this._hmtSections.length > 0) {
                var Z = 0;
                var Y = this._hmtSections;
                while (Z < Y.length) {
                    var W = Y[Z];
                    ++Z;
                    if (q >= W.startX && q < W.endX) {
                        X = W;
                        break
                    }
                }
            }
            return X
        },
        _highlightMeasure: function(q, W, X) {
            this._canvasHighlight.setLineThickness(0);
            this._canvasHighlight.beginFill(X ? 16200756 : 5592405);
            this._canvasHighlight.drawRect((q - 1) * W, 0, W, 28);
            this._canvasHighlight.endFill()
        },
        _drawHmtSection: function(q, W) {
            q.setLineThickness(0);
            q.beginFill(16200756, 0.5);
            q.drawRect(W.startX, 0, W.endX - W.startX, 28);
            q.endFill()
        },
        _alaClick: function(q, W) {
            var X = this;
            q.on("mousedown", function(Y) {
                X._alaClickX = Y.pageX;
                X._alaClickY = Y.pageY
            });
            q.on("mouseup", function(Y) {
                if (X._isLookedLikeClick(X._alaClickX, X._alaClickY, Y.pageX, Y.pageY)) {
                    W(Y)
                }
            })
        },
        _isLookedLikeClick: function(W, Y, q, X) {
            return Math.sqrt((W - q) * (W - q) + (Y - X) * (Y - X)) < 3
        },
        __class__: U.view.js.TimelineView
    });
    U.view.js.TopControlPanelView = function(q) {
        S.puremvc.typedExt.js.TypedJsView.call(this, q);
        if (this.hxFontSizeOption != null) {
            this.hxFontSizeOption.setRange(11, 15);
            this.setFontSize(13)
        }
        if (this.hxZoomOption != null) {
            this.hxZoomDropDown.getJqNode().perfectScrollbar({
                useKeyboard: false,
                suppressScrollX: true,
                wheelSpeed: 1,
                includePadding: true
            });
            this._isNeedScrollToActiveScaleItem = true
        }
        if (P.net.BrowserTools.isIE()) {
            this.hxFullScreenOption.getJqNode().attr("data-tooltip", "Fit to screen")
        }
        this.bindEvents()
    };
    p["tabPro.view.js.TopControlPanelView"] = U.view.js.TopControlPanelView;
    U.view.js.TopControlPanelView.__name__ = ["tabPro", "view", "js", "TopControlPanelView"];
    U.view.js.TopControlPanelView.__interfaces__ = [U.interfaces.ITopControlPanelView];
    U.view.js.TopControlPanelView.__super__ = S.puremvc.typedExt.js.TypedJsView;
    U.view.js.TopControlPanelView.prototype = v(S.puremvc.typedExt.js.TypedJsView.prototype, {
        configure: function(q) {
            if (q.author.length > 0) {
                this.hxAuthorLabel.set_text('<span data-i18n="player.Tabbed_by">Tabbed by</span> ' + q.author)
            }
            this.hxTitleLabel.set_text(q.title + (q.isDemo ? ' <span class="demo">(<span data-i18n="player.Demo_Version">Demo Version</span>)</span>' : ""));
            this.setScale(q.scale)
        },
        bindEvents: function() {
            var q = this;
            if (this.hxFontSizeOption != null) {
                this.hxFontSizeOption.change(function(X) {
                    var W = q.hxFontSizeOption.get_value();
                    q.hxFontSizeOption.getJqNode().attr("data-tooltip", W == null ? "null" : "" + W);
                    q.listener.onFontSizeChange(W)
                })
            }
            if (this.hxZoomOption != null) {
                this.hxZoomOption.getJqNode().click(function(W) {
                    q._toggleScale();
                    return false
                });
                this.hxZoomDropDown.getJqNode().click(function(W) {
                    return false
                });
                this.hxZoomDropDown.getJqNode().find("li").click(function(X) {
                    var W = A.parseInt(new h.JQuery(X.target).attr("data-value")) / 100;
                    q.listener.onIntentScaleChange(W);
                    q.hxZoomDropDown.hide();
                    return false
                })
            }
        },
        setTuning: function(W) {
            var q = new K("Capo on fret ([0-9]+)", "");
            if (q.match(W)) {
                W = q.replace(W, this.__("Capo on fret %fret%"));
                W = O.replace(W, "%fret%", q.matched(1))
            }
            this.hxTuningLabel.set_text(W == null ? "" : '<span data-i18n="player.Tuning">Tuning</span>: <span class="_hxTuningNotes">' + W + "</span>")
        },
        setScale: function(W) {
            W = Math.round(W * 100);
            this.hxZoomOption.getJqNode().find("._hxZoomLabel").html(W + "%");
            this.hxZoomDropDown.getJqNode().find("li").removeClass("active");
            var q = this.hxZoomDropDown.getJqNode().find('li[data-value="' + W + '"]');
            q.addClass("active");
            this._isNeedScrollToActiveScaleItem = true;
            this._scrollToActiveScaleItem(200)
        },
        _toggleScale: function() {
            var q = this;
            if (this.hxZoomDropDown.getJqNode()["is"](":visible")) {
                this.hxZoomOption.getJqNode().removeClass("hover");
                this.hxZoomDropDown.hide();
                this.listener.onToggleZoomControl(false)
            } else {
                this.hxZoomOption.getJqNode().addClass("hover");
                this.hxZoomDropDown.show();
                this.listener.onToggleZoomControl(true);
                if (this._isNeedScrollToActiveScaleItem) {
                    this._scrollToActiveScaleItem(0)
                }
                new h.JQuery(window).one("click", function(W) {
                    if (q.hxZoomDropDown.getJqNode()["is"](":visible")) {
                        q.hxZoomOption.getJqNode().removeClass("hover");
                        q.hxZoomDropDown.hide();
                        q.listener.onToggleZoomControl(false)
                    }
                })
            }
        },
        _scrollToActiveScaleItem: function(W) {
            var q = this.hxZoomDropDown.getJqNode().find("li.active");
            if (q[0].offsetTop > 0) {
                this._isNeedScrollToActiveScaleItem = false;
                this.hxZoomDropDown.getJqNode().animate({
                    scrollTop: q[0].offsetTop - 4 - q.height()
                }, W)
            }
        },
        setFontSize: function(q) {
            this.hxFontSizeOption.set_value(q);
            this.hxFontSizeOption.getJqNode().attr("data-tooltip", q == null ? "null" : "" + q)
        },
        toggleFullScreen: function(q) {
            if (q) {
                this.hxFullScreenOption.getJqNode().addClass("active")
            } else {
                this.hxFullScreenOption.getJqNode().removeClass("active")
            }
        },
        __class__: U.view.js.TopControlPanelView
    });
    U.view.js.TracklistView = function(W) {
        var q = this;
        S.puremvc.typedExt.js.TypedJsView.call(this, W);
        this._timerMeasuresAutoScrollingToCorrectPosition = new m.Timer(1000);
        this._tracklistStyle = U.interfaces.TracklistStyle.Default;
        if (this.hxAdvansedSettingsSwitcher != null) {
            this.hxChaptersContainer = new S.puremvc.typedExt.js.JqueryComponent(S.puremvc.typedExt.js.UiComponentParams.create(null, this.hxChaptersSection).withTag("div").setAutoCreateTag())
        }
        if (this.hxLinesScroller != null) {
            this.hxLinesScroller.getJqNode().perfectScrollbar({
                useKeyboard: false,
                wheelSpeed: U.view.js.TracklistView.LINE_HEIGHT,
                minScrollbarLength: 16,
                suppressScrollX: true
            })
        }
        if (this.hxMeasuresScroller != null) {
            this.hxMeasuresScroller.getJqNode().html('<div class="_hxContent"></div>');
            this.hxMeasuresScroller.getJqNode().perfectScrollbar({
                useKeyboard: false,
                suppressScrollY: true,
                startScrolling: function() {
                    q._isMeasuresScrollingActive = true;
                    if (q._timerMeasuresAutoScrollingToCorrectPosition != null) {
                        q._timerMeasuresAutoScrollingToCorrectPosition.stop()
                    }
                }
            })
        }
        this._bindEvents()
    };
    p["tabPro.view.js.TracklistView"] = U.view.js.TracklistView;
    U.view.js.TracklistView.__name__ = ["tabPro", "view", "js", "TracklistView"];
    U.view.js.TracklistView.__interfaces__ = [U.interfaces.ITracklistView];
    U.view.js.TracklistView.__super__ = S.puremvc.typedExt.js.TypedJsView;
    U.view.js.TracklistView.prototype = v(S.puremvc.typedExt.js.TypedJsView.prototype, {
        configure: function(q) {
            var X = this;
            this._tracklistStyle = q.tracklistStyle;
            this._numberOfTracks = q.song.tracks.length;
            if (this.hxTracklistResizeHandler != null) {
                if (this._numberOfTracks == 1) {
                    this.hxTracklistResizeHandler.getJqNode().hide()
                } else {
                    this.hxTracklistResizeHandler.getJqNode().show()
                }
            }
            this.getJqNode().addClass("tpp-b-tracklist__" + q.tracklistStyle[0]);
            if (R.enumEq(this._tracklistStyle, U.interfaces.TracklistStyle.Smekhov_0701)) {
                this.getJqNode().find("._hxCountOfInstruments").html(this._numberOfTracks + " INSTRUMENT" + (this._numberOfTracks > 1 ? "S" : ""))
            } else {
                this.getJqNode().find("._hxCountOfInstruments").html('<span style="color: #BCC4C9">' + this._numberOfTracks + "</span> INSTRUMENT" + (this._numberOfTracks > 1 ? "S" : ""))
            }
            this._fillLines(q.isDemo, q.song, q.fullSong);
            if (this.hxMeasureNumbersSection != null) {
                this._fillMeasureNumbers(q.fullSong.tracks[0].measures.length)
            }
            if (this.hxChaptersContainer != null) {
                this._fillChapters(q.fullSong.getMeasureText(), q.fullSong.tracks[0].measures.length)
            }
            if (this.hxMeasuresScroller != null) {
                this.hxMeasuresScroller.getJqNode().find("._hxContent").width(this.hxMeasureNumbersSection.getJqNode()[0].scrollWidth | 0);
                this.hxMeasuresScroller.getJqNode().find("._hxContent").height(1);
                this.hxMeasuresScroller.getJqNode().perfectScrollbar("update")
            }
            if (q.longTitleStyle) {
                this.getJqNode().find(".left-panel").addClass("left-panel__long-title")
            }
            if (R.enumEq(this._tracklistStyle, U.interfaces.TracklistStyle.Smekhov_0701) && this._numberOfTracks > 1) {
                var W = this.getJqNode().find("._hxCountOfInstruments");
                W.css({
                    cursor: "s-resize"
                });
                W.unbind("mousedown");
                W.bind("mousedown", function(Y) {
                    X._isResizable = true;
                    X._startDragY = Y.pageY;
                    X._heightBeforeResize = X.hxTracklistLinesContainer.get_height()
                })
            }
        },
        _fillLines: function(ac, X, aa) {
            this.hxTracklistLinesContainer.getJqNode().html("");
            this._tracklistLines = new Array();
            var W;
            W = S.puremvc.typedExt.js.UiComponentParams.create(null, this.hxTracklistLinesContainer).setTemplateId(U.view.js.TracklistView.LINE_TEMPLATE).useYourself();
            var ad = 0;
            var Z = this._numberOfTracks;
            while (ad < Z) {
                var Y = ad++;
                var ab = new U.view.js.components.TracklistLineView(W);
                ab.listener = this.listener;
                ab.buildView(ac, X.tracks[Y], aa.tracks[Y]);
                this._tracklistLines.push(ab)
            }
            if (this.hxLinesScroller != null) {
                this.hxTracklistLinesContainer.set_height((this._numberOfTracks > U.view.js.TracklistView.NUMBER_OF_VISIBLE_TRACKS_BY_DEFAULT ? U.view.js.TracklistView.NUMBER_OF_VISIBLE_TRACKS_BY_DEFAULT : this._numberOfTracks) * U.view.js.TracklistView.LINE_HEIGHT);
                this.hxLinesScroller.set_height((this._numberOfTracks >= U.view.js.TracklistView.NUMBER_OF_VISIBLE_TRACKS_BY_DEFAULT ? U.view.js.TracklistView.NUMBER_OF_VISIBLE_TRACKS_BY_DEFAULT : this._numberOfTracks) * U.view.js.TracklistView.LINE_HEIGHT);
                this.hxLinesScroller.getJqNode().children().first().height(this._numberOfTracks * U.view.js.TracklistView.LINE_HEIGHT);
                this.hxLinesScroller.getJqNode().perfectScrollbar("update")
            }
            if (R.enumEq(this._tracklistStyle, U.interfaces.TracklistStyle.Smekhov_0929)) {
                var q = this.getJqNode().find("._hxTracklistLinesContainer");
                q.perfectScrollbar({
                    useKeyboard: false,
                    wheelSpeed: 1,
                    minScrollbarLength: 16,
                    suppressScrollX: true
                })
            }
        },
        _fillMeasureNumbers: function(Z) {
            this.hxMeasureNumbersSection.getJqNode().html("");
            var Y = S.puremvc.typedExt.js.UiComponentParams.create(null, this.hxMeasureNumbersSection).setTemplateId(U.view.js.TracklistView.MEASURE_NUMBER_TEMPLATE).useYourself();
            var X = 0;
            while (X < Z) {
                var q = X++;
                var W = new S.puremvc.typedExt.js.JqueryLabel(Y);
                if (q == 0 || Math.floor((q + 1) / 4) == (q + 1) / 4) {
                    W.set_text(A.string(q + 1))
                }
            }
        },
        _fillChapters: function(q, aa) {
            this.hxChaptersContainer.getJqNode().html("");
            this.hxChaptersContainer.getJqNode().width(this.hxMeasureNumbersSection.getJqNode()[0].scrollWidth);
            this.hxChaptersContainer.getJqNode().height(10);
            var Z = S.puremvc.typedExt.js.UiComponentParams.create(null, this.hxChaptersContainer).setTemplateId(U.view.js.TracklistView.CHAPTER_TEMPLATE).useYourself();
            var Y = 0;
            while (Y < q.length) {
                var W = q[Y];
                ++Y;
                var X = new S.puremvc.typedExt.js.JqueryLabel(Z);
                X.set_text(W.title);
                X.getJqNode().addClass("chapter");
                X.getJqNode().css({
                    left: U.view.js.TracklistView.MEASURE_CELL_WIDTH * (W.measureHeader.number - 1)
                })
            }
        },
        _bindEvents: function() {
            var q = this;
            if (this.hxPinTracklistView != null) {
                this.hxPinTracklistView.click(function(X) {
                    q.getJqNode().toggleClass("expanded");
                    var W = q.getJqNode().hasClass("expanded");
                    q.listener.onToggleTracklistView(W);
                    if (!W) {
                        q.getJqNode().removeClass("hover")
                    }
                });
                this.getJqNode().on("mouseenter", function(W) {
                    q.getJqNode().addClass("hover")
                });
                this.getJqNode().on("mouseleave", function(W) {
                    q.getJqNode().removeClass("hover")
                })
            }
            if (this.hxAdvansedSettingsSwitcher != null) {
                this.hxAdvansedSettingsSwitcher.click(function(W) {
                    if (q.getJqNode().hasClass("open_advanced_settings")) {
                        q.getJqNode().removeClass("open_advanced_settings")
                    } else {
                        q.getJqNode().addClass("open_advanced_settings")
                    }
                    q.listener.onToggleAdvancedSettings(q.getJqNode().hasClass("open_advanced_settings"))
                })
            }
            if (this.hxTracklistResizeHandler != null) {
                this.hxTracklistResizeHandler.getJqNode().mousedown(function(W) {
                    q._isResizable = true;
                    q._startDragY = W.pageY;
                    q._heightBeforeResize = q.hxTracklistLinesContainer.get_height()
                })
            }
            if (this.hxMeasuresScroller != null) {
                this.hxMeasuresScroller.getJqNode().mousedown(function(W) {
                    q._isMeasuresScrollingActive = true;
                    if (q._timerMeasuresAutoScrollingToCorrectPosition != null) {
                        q._timerMeasuresAutoScrollingToCorrectPosition.stop()
                    }
                });
                new h.JQuery(window).mouseup(function(W) {
                    if (q._isResizable) {
                        q.listener.onResizeStop(Math.round(q.hxTracklistLinesContainer.get_height() / U.view.js.TracklistView.LINE_HEIGHT));
                        q._isResizable = false
                    }
                    if (q._isMeasuresScrollingActive) {
                        q._timerMeasuresAutoScrollingToCorrectPosition.stop();
                        q._timerMeasuresAutoScrollingToCorrectPosition = new m.Timer(1000);
                        q._timerMeasuresAutoScrollingToCorrectPosition.run = function() {
                            q._isMeasuresScrollingActive = false;
                            q._timerMeasuresAutoScrollingToCorrectPosition.stop()
                        }
                    }
                })
            }
            if (this.hxLinesScroller != null) {
                window.addEventListener("mousemove", function(X) {
                    if (!q._isResizable) {
                        return
                    }
                    var Y = q._startDragY - X.pageY;
                    if (!U.view.js.TracklistView.SMOOTH_LINES_SCROLL) {
                        Y = Math.floor(Y / U.view.js.TracklistView.LINE_HEIGHT) * U.view.js.TracklistView.LINE_HEIGHT
                    }
                    var W = q._heightBeforeResize + Y;
                    if (W > U.view.js.TracklistView.LINE_HEIGHT * q._numberOfTracks) {
                        W = U.view.js.TracklistView.LINE_HEIGHT * q._numberOfTracks
                    } else {
                        if (W < U.view.js.TracklistView.LINE_HEIGHT) {
                            W = U.view.js.TracklistView.LINE_HEIGHT
                        }
                    }
                    var Z = q.hxTracklistLinesContainer.get_height();
                    if (Z != W) {
                        q.hxTracklistLinesContainer.set_height(W);
                        q.hxLinesScroller.set_height(W);
                        q.hxLinesScroller.getJqNode().perfectScrollbar("update");
                        q.listener.onResize(Math.round(Z / U.view.js.TracklistView.LINE_HEIGHT), Math.round(W / U.view.js.TracklistView.LINE_HEIGHT))
                    }
                });
                this.hxTracklistLinesContainer.getJqNode().on("mousewheel", function(X) {
                    var W = Math.round(X.deltaY / Math.abs(X.deltaY));
                    var Y = q.hxTracklistLinesContainer.getJqNode().scrollTop() - W * U.view.js.TracklistView.LINE_HEIGHT;
                    q.hxTracklistLinesContainer.getJqNode().scrollTop(Y);
                    q.hxLinesScroller.getJqNode().scrollTop(Y);
                    q.hxLinesScroller.getJqNode().perfectScrollbar("update");
                    return false
                });
                this.hxLinesScroller.getJqNode().on("scroll", function(W) {
                    var X = q.hxLinesScroller.getJqNode().scrollTop();
                    if (!U.view.js.TracklistView.SMOOTH_LINES_SCROLL) {
                        X = Math.floor(X / U.view.js.TracklistView.LINE_HEIGHT) * U.view.js.TracklistView.LINE_HEIGHT
                    }
                    if (X != q.hxTracklistLinesContainer.getJqNode().scrollTop()) {
                        q.hxTracklistLinesContainer.getJqNode().scrollTop(X)
                    }
                })
            }
            if (this.hxMeasuresScroller != null) {
                this.hxMeasuresScroller.getJqNode().scroll(function(W) {
                    q.getJqNode().find(".hxMeasureNumbersSection").scrollLeft(q.hxMeasuresScroller.getJqNode().scrollLeft());
                    q.getJqNode().find(".hxTracklistMeasureCellsSection").scrollLeft(q.hxMeasuresScroller.getJqNode().scrollLeft());
                    q.getJqNode().find(".hxChaptersSection").css({
                        left: -q.hxMeasuresScroller.getJqNode().scrollLeft() + "px"
                    })
                })
            }
        },
        updateScroll: function() {
            if (R.enumEq(this._tracklistStyle, U.interfaces.TracklistStyle.Smekhov_0929)) {
                this.getJqNode().find("._hxTracklistLinesContainer").perfectScrollbar("update")
            } else {
                this.hxMeasuresScroller.getJqNode().perfectScrollbar("update")
            }
        },
        setPresetList: function(W) {
            var Y = 0;
            var X = this._tracklistLines;
            while (Y < X.length) {
                var q = X[Y];
                ++Y;
                q.setPresetList(W)
            }
        },
        highlightTracks: function(X) {
            var Z = 0;
            var aa = this._tracklistLines.length;
            while (Z < aa) {
                var W = Z++;
                var Y = this._tracklistLines[W];
                var q = X[W];
                if (q != null) {
                    Y.highlight(true)
                } else {
                    Y.highlight(false)
                }
            }
        },
        toggleSolo: function(q) {
            this._tracklistLines[q.trackNumber - 1].toggleSolo(q.value, true)
        },
        markAsActive: function(q) {
            var W = this._isFirstMarkAsActive();
            this.markAsInactiveAllTracks();
            this._tracklistLines[q - 1].markAsActive();
            if (W && q > U.view.js.TracklistView.NUMBER_OF_VISIBLE_TRACKS_BY_DEFAULT) {
                var X = (q - U.view.js.TracklistView.NUMBER_OF_VISIBLE_TRACKS_BY_DEFAULT) * U.view.js.TracklistView.LINE_HEIGHT;
                this.hxTracklistLinesContainer.getJqNode().scrollTop(X);
                this.hxLinesScroller.getJqNode().scrollTop(X);
                this.hxLinesScroller.getJqNode().perfectScrollbar("update")
            }
        },
        markAsInactive: function(q) {
            this._tracklistLines[q - 1].markAsInactive()
        },
        markAsInactiveAllTracks: function() {
            var X = 0;
            var W = this._tracklistLines;
            while (X < W.length) {
                var q = W[X];
                ++X;
                q.markAsInactive()
            }
        },
        _isFirstMarkAsActive: function() {
            var W = true;
            var Y = 0;
            var X = this._tracklistLines;
            while (Y < X.length) {
                var q = X[Y];
                ++Y;
                if (q.isActive()) {
                    W = false;
                    break
                }
            }
            return W
        },
        markMeasureCellAsActive: function(q, W) {
            this._tracklistLines[q - 1].markMeasureCellAsActive(W)
        },
        markMeasureCellAsInactive: function(q, W) {
            this._tracklistLines[q - 1].markMeasureCellAsInactive(W)
        },
        markAsHasHotParts: function(q) {
            this._tracklistLines[q - 1].getJqNode().addClass("has_hot_parts")
        },
        markAsHasNoHotPartsAllTracks: function() {
            var X = 0;
            var W = this._tracklistLines;
            while (X < W.length) {
                var q = W[X];
                ++X;
                q.getJqNode().removeClass("has_hot_parts")
            }
        },
        isMeasureCellVisible: function(q) {
            return this._tracklistLines[0].isMeasureCellVisible(q)
        },
        scrollToMeasureCell: function(q) {
            if (!this._isMeasuresScrollingActive) {
                this.hxMeasuresScroller.getJqNode().scrollLeft(A["int"](U.view.js.TracklistView.MEASURE_CELL_WIDTH * (q - 1) - (this.hxMeasuresScroller.get_width() - U.view.js.TracklistView.MEASURE_CELL_WIDTH) / 2))
            }
        },
        updateInstrumentIconForTrack: function(q) {
            this._tracklistLines[q.number - 1].updateInstrumentIcon(q.channel.instrument())
        },
        prepareTips: function() {},
        __class__: U.view.js.TracklistView
    });
    U.view.js.components = {};
    U.view.js.components.InstrumentGroupView = function(q) {
        S.puremvc.typedExt.js.TypedJsView.call(this, q)
    };
    p["tabPro.view.js.components.InstrumentGroupView"] = U.view.js.components.InstrumentGroupView;
    U.view.js.components.InstrumentGroupView.__name__ = ["tabPro", "view", "js", "components", "InstrumentGroupView"];
    U.view.js.components.InstrumentGroupView.__super__ = S.puremvc.typedExt.js.TypedJsView;
    U.view.js.components.InstrumentGroupView.prototype = v(S.puremvc.typedExt.js.TypedJsView.prototype, {
        buildView: function(q) {
            this.hxInstrumentGroupLabel.set_text(q.name);
            this.hxInstrumentGroupIcon.getJqNode().html(Q.MidiInstrumentHelper.getInstrumentIcoByMidiIndex(q.iconMidiIndex))
        },
        markAsActive: function() {
            this.getJqNode().addClass("active")
        },
        markAsInactive: function() {
            this.getJqNode().removeClass("active")
        },
        __class__: U.view.js.components.InstrumentGroupView
    });
    U.view.js.components.InstrumentView = function(q) {
        S.puremvc.typedExt.js.TypedJsView.call(this, q)
    };
    p["tabPro.view.js.components.InstrumentView"] = U.view.js.components.InstrumentView;
    U.view.js.components.InstrumentView.__name__ = ["tabPro", "view", "js", "components", "InstrumentView"];
    U.view.js.components.InstrumentView.__super__ = S.puremvc.typedExt.js.TypedJsView;
    U.view.js.components.InstrumentView.prototype = v(S.puremvc.typedExt.js.TypedJsView.prototype, {
        buildView: function(q) {
            this.hxInstrumentLabel.set_text(q.name);
            this.getJqNode().attr("data-preset", q.midiIndex == null ? "null" : "" + q.midiIndex)
        },
        markAsActive: function() {
            this.getJqNode().addClass("active")
        },
        markAsInactive: function() {
            this.getJqNode().removeClass("active")
        },
        __class__: U.view.js.components.InstrumentView
    });
    U.view.js.components.TracklistLineView = function(W) {
        var q = this;
        S.puremvc.typedExt.js.TypedJsView.call(this, W);
        this._measureCells = new Array();
        this.hxTrackVolume.setRange(0, 127);
        this.hxTrackVolume.change(function(Y) {
            var X = q.hxTrackVolume.get_value();
            q.setVolume(X);
            q.listener.onTrackVolumeChange(q.trackNumber, X)
        });
        this.hxTrackVolume.stopDrag(function(Y) {
            var X = Math.round(100 * q.hxTrackVolume.get_value() / 127);
            (h.Boot.__cast(q.listener, U.view.TracklistMediator)).onTrackVolumeSliderStopDrag(q.trackNumber, X)
        });
        if (this.hxTrackPan != null) {
            this.hxTrackPan.setRange(0, 127);
            this.hxTrackPan.change(function(Y) {
                var X = q.hxTrackPan.get_value();
                q.listener.onTrackPanChange(q.trackNumber, X)
            });
            this.hxTrackPan.stopDrag(function(Y) {
                var X = Math.round(100 * q.hxTrackPan.get_value() / 127);
                (h.Boot.__cast(q.listener, U.view.TracklistMediator)).onTrackPanSliderStopDrag(q.trackNumber, X)
            })
        }
        if (this.hxTrackPanning != null) {
            this.hxTrackPanning.change(function(X) {
                var Y = Math.round(q.hxTrackPanning.get_value() / 100 * 127);
                q.listener.onTrackPanChange(q.trackNumber, Y)
            });
            this.hxTrackPanning.getJqNode().click(function(X) {
                return false
            })
        }
        this.click(function(X) {
            q.markAsActive();
            q.listener.onTrackSelect(q.trackNumber)
        });
        if (this.hxTrackMute != null) {
            this.hxTrackMute.change(function(X) {
                q.toggleMute(q.hxTrackMute.get_checked());
                return false
            })
        }
        this.hxTrackSolo.change(function(X) {
            q.toggleSolo(q.hxTrackSolo.get_checked());
            return false
        });
        this.hxSwitchInstrumentOption.getJqNode().click(function(X) {
            q.listener.onIntentSwitchInstrument(q.trackNumber);
            return false
        })
    };
    p["tabPro.view.js.components.TracklistLineView"] = U.view.js.components.TracklistLineView;
    U.view.js.components.TracklistLineView.__name__ = ["tabPro", "view", "js", "components", "TracklistLineView"];
    U.view.js.components.TracklistLineView.__interfaces__ = [U.interfaces.ITracklistItemView];
    U.view.js.components.TracklistLineView.__super__ = S.puremvc.typedExt.js.TypedJsView;
    U.view.js.components.TracklistLineView.prototype = v(S.puremvc.typedExt.js.TypedJsView.prototype, {
        buildView: function(Y, q, X) {
            if (this.hxSoloMuteLabel != null) {
                this.hxSoloMuteLabel.hide()
            }
            if (this.hxTracklistMeasureCellsSection != null) {
                var W = Q.MidiInstrumentHelper.getInstrumentColor(q.channel);
                this.hxTracklistMeasureCellsSection.getJqNode().css({
                    color: W,
                    opacity: 1
                })
            }
            this.trackNumber = q.number;
            this.hxTrackTitle.set_text(q.number + ". " + q.name);
            this.hxTrackTitle.getJqNode().attr("title", q.name);
            this.hxTrackVolume.set_value(q.channel.volume);
            this.setVolume(q.channel.volume);
            if (this.hxTrackMute != null) {
                this.hxTrackMute.set_checked(q.isMute)
            }
            this.hxTrackSolo.set_checked(q.isSolo);
            this.trackPresetId = q.channel.instrument();
            this.hxInstrumentIco.getJqNode().html(Q.MidiInstrumentHelper.getInstrumentIco(q.channel));
            if (this.hxTrackPan != null) {
                this.hxTrackPan.set_value(q.channel.balance)
            }
            if (this.hxTrackPanning != null) {
                this.hxTrackPanning.set_value(Math.round(q.channel.balance / 127 * 100))
            }
            if (this.hxTracklistMeasureCellsSection != null) {
                this.fillMeasureCellsSection(Y, q, X)
            }
        },
        fillMeasureCellsSection: function(ab, W, ad) {
            var aa = this;
            var Z = 0;
            var ac = ad.measures;
            while (Z < ac.length) {
                var q = [ac[Z]];
                ++Z;
                var Y = S.puremvc.typedExt.js.UiComponentParams.create(null, this.hxTracklistMeasureCellsSection).setTemplateId("hxTracklistMeasureCellTemplate").useYourself();
                var X = new S.puremvc.typedExt.js.JqueryComponent(Y);
                if (!q[0].isRest()) {
                    X.getJqNode().addClass("has-notes")
                }
                if (ab && q[0].getIndex() > W.measures.length - 1) {
                    X.getJqNode().addClass("disabled");
                    X.getJqNode().attr("title", "Not available in demo");
                    X.getJqNode().tooltip({
                        extraClass: "disabled-measure-cell-tooltip",
                        track: true
                    })
                } else {
                    X.getJqNode().click((function(ae) {
                        return function(af) {
                            aa.listener.onMeasureCellClick(ae[0].track.number, ae[0].number());
                            return false
                        }
                    })(q));
                    X.getJqNode().mouseover((function(ae) {
                        return function(af) {
                            aa.listener.onMeasureCellMouseover(ae[0].track.number, ae[0].number());
                            return false
                        }
                    })(q));
                    X.getJqNode().mouseout((function(ae) {
                        return function(af) {
                            aa.listener.onMeasureCellMouseout(ae[0].track.number, ae[0].number());
                            return false
                        }
                    })(q))
                }
                this._measureCells.push(X)
            }
        },
        setPresetList: function(q) {
            var X = 0;
            while (X < q.length) {
                var W = q[X];
                ++X;
                this.hxTrackPreset.addItem(W.name, W.id == null ? "null" : "" + W.id)
            }
            this.hxTrackPreset.set_value(A.string(this.trackPresetId))
        },
        highlight: function(q) {
            if (q) {
                this.getJqNode().addClass("has_sound")
            } else {
                this.getJqNode().removeClass("has_sound")
            }
        },
        markAsActive: function() {
            this.getJqNode().addClass("active")
        },
        markAsInactive: function() {
            this.getJqNode().removeClass("active")
        },
        isActive: function() {
            return this.getJqNode().hasClass("active")
        },
        isMeasureCellVisible: function(q) {
            return this.hxTracklistMeasureCellsSection.get_width() >= this._measureCells[q - 1].getJqNode().position().left + this._measureCells[q - 1].get_width() && this._measureCells[q - 1].getJqNode().position().left >= 0
        },
        markMeasureCellAsActive: function(q) {
            this._measureCells[q - 1].getJqNode().addClass("active")
        },
        markMeasureCellAsInactive: function(q) {
            this._measureCells[q - 1].getJqNode().removeClass("active")
        },
        setVolume: function(q) {
            if (this._lastVolumeValue == null) {
                this._lastVolumeValue = q
            }
            this.hxTrackVolume.set_value(q);
            this._decorateVolumeOptionIco(q)
        },
        _decorateVolumeOptionIco: function(q) {
            if (this.hxTrackVolumeOptionIco != null) {
                this.hxTrackVolume.getJqNode().attr("data-tooltip", Math.round(100 * q / 127) + "%");
                var W = "mute";
                if (q > 84) {
                    W = ""
                } else {
                    if (q > 42) {
                        W = "medium"
                    } else {
                        if (q > 0) {
                            W = "low"
                        }
                    }
                }
                this.hxTrackVolumeOptionIco.getJqNode().attr("data-volume", W)
            }
        },
        _toggleMute: function() {
            var q = this.hxTrackVolume.get_value();
            if (q > 0) {
                this._lastVolumeValue = q;
                this.setVolume(0);
                this.toggleSolo(false);
                this._decorateSoloMuteLabel(2);
                this.listener.onTrackVolumeChange(this.trackNumber, 0)
            } else {
                this.setVolume(this._lastVolumeValue);
                this._decorateSoloMuteLabel(2, false);
                this.listener.onTrackVolumeChange(this.trackNumber, this._lastVolumeValue)
            }
        },
        toggleSolo: function(W, X, q) {
            if (q == null) {
                q = true
            }
            if (X == null) {
                X = false
            }
            if (W == null) {
                W = !this.hxTrackSolo.get_checked()
            } else {
                W = W
            }
            this.hxTrackSolo.set_checked(W);
            if (W) {
                if (this.hxTrackMute != null) {
                    this.toggleMute(false, X, false)
                }
                this._decorateSoloMuteLabel(1)
            } else {
                this._decorateSoloMuteLabel(1, false)
            }
            if (!X) {
                this.listener.onSoloChanged(this.trackNumber, W, q)
            }
        },
        toggleMute: function(W, X, q) {
            if (q == null) {
                q = true
            }
            if (X == null) {
                X = false
            }
            if (W == null) {
                W = !this.hxTrackMute.get_checked()
            } else {
                W = W
            }
            this.hxTrackMute.set_checked(W);
            if (W) {
                this.toggleSolo(false, X, false);
                this._decorateSoloMuteLabel(2)
            } else {
                this._decorateSoloMuteLabel(2, false)
            }
            if (!X) {
                this.listener.onMuteChanged(this.trackNumber, W, q)
            }
        },
        updateInstrumentIcon: function(q) {
            this.hxInstrumentIco.getJqNode().html(Q.MidiInstrumentHelper.getInstrumentIcoByMidiIndex(q))
        },
        _decorateSoloMuteLabel: function(q, W) {
            if (W == null) {
                W = true
            }
            if (this.hxTrackVolumeOptionIco != null) {
                if (W) {
                    this.hxSoloMuteLabel.getJqNode().removeClass("primary");
                    this.hxSoloMuteLabel.show();
                    this.hxSoloMuteLabel.set_text(this.__(q == 1 ? "SOLO" : "MUTE"));
                    this.hxSoloMuteLabel.getJqNode().addClass(q == 1 ? "primary" : "danger")
                } else {
                    this.hxSoloMuteLabel.hide()
                }
            }
        },
        __class__: U.view.js.components.TracklistLineView
    });
    U.view.js.painter = {};
    U.view.js.painter.ChordPainter = function(q) {
        this._chordContainer = q;
        this._variationElement = window.document.createElement("div");
        this._variationElement.style.position = "absolute";
        this._chordContainer.appendChild(this._variationElement)
    };
    p["tabPro.view.js.painter.ChordPainter"] = U.view.js.painter.ChordPainter;
    U.view.js.painter.ChordPainter.__name__ = ["tabPro", "view", "js", "painter", "ChordPainter"];
    U.view.js.painter.ChordPainter.prototype = {
        drawChord: function(ah, ag, X) {
            var aa = '<div class="b-chord" mode="vertical" strings="' + A.string(X.strings.length) + '"><div class="b-chord--heading"><b>' + A.string(X.name) + '</b></div><div class="b-chord--strings">';
            var q = X.strings;
            var aj = q.slice();
            aj.reverse();
            var ae = 0;
            var Z = aj.length;
            while (ae < Z) {
                var al = ae++;
                var ab = Math.round(X.strings.length - al);
                var ac = aj[al];
                if (ac == -1) {
                    aa += '<div class="string__disabled string__t' + (aj.length - al) + '"></div>'
                } else {
                    if (ac == 0) {
                        aa += '<div class="string__open string__t' + (aj.length - al) + '"></div>'
                    }
                }
            }
            aa += '</div><div class="b-chord--body"><div class="b-chord--lines"></div><div class="b-chord--fingers">';
            var Y = 0;
            var ad = aj.length;
            while (Y < ad) {
                var ai = Y++;
                var af = Math.round(X.strings.length - ai);
                var W = aj[ai];
                if (W > 0) {
                    aa += '<div class="finger finger__l' + W + " finger__t" + (aj.length - ai) + ' finger__n0"></div>'
                }
            }
            aa += '</div><div class="b-chord--fret">' + (X.firstFret > 1 ? A.string(X.firstFret) + " fr" : "") + "</div></div></div>";
            this._variationElement.innerHTML = aa;
            this._variationElement.style.left = ah + 20 + "px";
            var ak = this._variationElement.getClientRects();
            if (ak.length > 0 && ag > ak[0].height) {
                ag -= ak[0].height
            }
            this._variationElement.style.top = ag + "px"
        },
        clearContainer: function() {
            this._variationElement.innerHTML = ""
        },
        __class__: U.view.js.painter.ChordPainter
    };
    u.autoScroll = {};
    u.autoScroll.AutoScrollStrategyType = {
        __ename__: true,
        __constructs__: ["USTINOV_STRATEGY", "NAIDENOV_STRATEGY", "GUITAR_PRO_STRATEGY"]
    };
    u.autoScroll.AutoScrollStrategyType.USTINOV_STRATEGY = ["USTINOV_STRATEGY", 0];
    u.autoScroll.AutoScrollStrategyType.USTINOV_STRATEGY.toString = l;
    u.autoScroll.AutoScrollStrategyType.USTINOV_STRATEGY.__enum__ = u.autoScroll.AutoScrollStrategyType;
    u.autoScroll.AutoScrollStrategyType.NAIDENOV_STRATEGY = ["NAIDENOV_STRATEGY", 1];
    u.autoScroll.AutoScrollStrategyType.NAIDENOV_STRATEGY.toString = l;
    u.autoScroll.AutoScrollStrategyType.NAIDENOV_STRATEGY.__enum__ = u.autoScroll.AutoScrollStrategyType;
    u.autoScroll.AutoScrollStrategyType.GUITAR_PRO_STRATEGY = ["GUITAR_PRO_STRATEGY", 2];
    u.autoScroll.AutoScrollStrategyType.GUITAR_PRO_STRATEGY.toString = l;
    u.autoScroll.AutoScrollStrategyType.GUITAR_PRO_STRATEGY.__enum__ = u.autoScroll.AutoScrollStrategyType;
    u.autoScroll.AutoScrollStrategy = function() {};
    p["tabRender.autoScroll.AutoScrollStrategy"] = u.autoScroll.AutoScrollStrategy;
    u.autoScroll.AutoScrollStrategy.__name__ = ["tabRender", "autoScroll", "AutoScrollStrategy"];
    u.model.VisualElement = function() {
        this.x = 0;
        this.y = 0;
        this._scale = 1;
        this.set_width(0);
        this.set_height(0);
        this.lineThickness = 1;
        this.lineColor = 0;
        this.viewPort = new P.geom.Rectangle()
    };
    p["tabRender.model.VisualElement"] = u.model.VisualElement;
    u.model.VisualElement.__name__ = ["tabRender", "model", "VisualElement"];
    u.model.VisualElement.prototype = {
        set_width: function(q) {
            this.width = q;
            if (this.viewPort != null) {
                this.viewPort.width = q
            }
            return q
        },
        set_height: function(q) {
            this.height = q;
            if (this.viewPort != null) {
                this.viewPort.height = q
            }
            return q
        },
        set_drawCache: function(q) {
            if (q == null && this.drawCache != null) {
                this.drawCache.dispose();
                this.drawCache = null
            }
            this.drawCache = q;
            return q
        },
        estimateWidth: function() {
            return this.width
        },
        estimateHeight: function() {
            return this.height
        },
        doLayout: function() {
            this.set_drawCache(null);
            if (this.width < this.minWidth) {
                this.set_width(this.minWidth)
            }
            if (this.height < this.minHeight) {
                this.set_height(this.minHeight)
            }
            this._needLayout = false;
            this.clearCache()
        },
        isInViewPort: function(q) {
            if (q == null) {
                return true
            }
            var W = new P.geom.Rectangle(this.x, this.y, this.width, this.height);
            return q.intersects(W)
        },
        getRect: function() {
            return new P.geom.Rectangle(this.x, this.y, this.width, this.height)
        },
        isNeedLayout: function() {
            return this._needLayout
        },
        resetLayout: function() {
            this._needLayout = true
        },
        setScale: function(q) {
            this._scale = q;
            return q
        },
        getScale: function() {
            return this._scale
        },
        clearCache: function() {
            if (this.drawCache != null) {
                this.drawCache.dispose();
                this.set_drawCache(null);
                this._needRedraw = true
            }
        },
        __class__: u.model.VisualElement,
        __properties__: {
            set_drawCache: "set_drawCache",
            set_height: "set_height",
            set_width: "set_width"
        }
    };
    u.model.StaveElement = function(q) {
        u.model.VisualElement.call(this);
        this.stave = q
    };
    p["tabRender.model.StaveElement"] = u.model.StaveElement;
    u.model.StaveElement.__name__ = ["tabRender", "model", "StaveElement"];
    u.model.StaveElement.__super__ = u.model.VisualElement;
    u.model.StaveElement.prototype = v(u.model.VisualElement.prototype, {
        estimateWidth: function() {
            return 0
        },
        __class__: u.model.StaveElement
    });
    u.model.BpmMark = function(q) {
        u.model.StaveElement.call(this, q)
    };
    p["tabRender.model.BpmMark"] = u.model.BpmMark;
    u.model.BpmMark.__name__ = ["tabRender", "model", "BpmMark"];
    u.model.BpmMark.__super__ = u.model.StaveElement;
    u.model.BpmMark.prototype = v(u.model.StaveElement.prototype, {
        __class__: u.model.BpmMark
    });
    u.model.MusicFont = function() {};
    p["tabRender.model.MusicFont"] = u.model.MusicFont;
    u.model.MusicFont.__name__ = ["tabRender", "model", "MusicFont"];
    u.model.PossibleLoopAreaSelection = function(q) {
        u.model.VisualElement.call(this);
        this._startX = -1;
        this._startY = -1;
        this._endX = -1;
        this._endY = -1;
        this._startBoundPosition = null;
        this._endBoundPosition = null;
        this._tablature = q;
        this._selectedRange = null;
        this.startStaveBeat = null;
        this.endStaveBeat = null;
        this.staveBeats = []
    };
    p["tabRender.model.PossibleLoopAreaSelection"] = u.model.PossibleLoopAreaSelection;
    u.model.PossibleLoopAreaSelection.__name__ = ["tabRender", "model", "PossibleLoopAreaSelection"];
    u.model.PossibleLoopAreaSelection.__super__ = u.model.VisualElement;
    u.model.PossibleLoopAreaSelection.prototype = v(u.model.VisualElement.prototype, {
        getSelectedRange: function() {
            return this._selectedRange
        },
        refresh: function(X, W, ac, aa) {
            var q = null;
            var ab = null;
            var Z = false;
            if (this._startX != X || this._startY != W) {
                this._startX = X;
                this._startY = W;
                q = this._tablature.getTrackPositionXY(X, W);
                if (q != null) {
                    this._startBoundPosition = q;
                    this.startStaveBeat = this._tablature.getStaveBeatByIndex(q.measureIndex, q.beatIndex)
                }
            }
            if (this._startBoundPosition != null) {
                if (this._endX != ac || this._endY != aa) {
                    this._endX = ac;
                    this._endY = aa;
                    ab = this._tablature.getTrackPositionXY(ac, aa);
                    if (ab != null) {
                        if (this._endBoundPosition == null || !this._endBoundPosition.equal(ab)) {
                            Z = true
                        }
                        this._endBoundPosition = ab;
                        this.endStaveBeat = this._tablature.getStaveBeatByIndex(ab.measureIndex, ab.beatIndex)
                    }
                }
            }
            if (this._startBoundPosition != null && this._endBoundPosition != null) {
                var Y = new V.TrackSelectedRange(this._startBoundPosition.measureIndex, this._endBoundPosition.measureIndex, this._startBoundPosition.beatIndex, this._endBoundPosition.beatIndex);
                this._setSelectedRange(Y)
            }
            return Z
        },
        clear: function() {
            this.staveBeats = [];
            this._selectedRange = null
        },
        _setSelectedRange: function(q) {
            if (q != null && (this._selectedRange == null || this._selectedRange != null && !q.equal(this._selectedRange))) {
                this.staveBeats = new Array();
                if (q.startMeasure == q.endMeasure) {
                    this._addMeasureToSelection(q.startMeasure, q.startBeat, q.endBeat)
                } else {
                    var W = q.startMeasure;
                    this._addMeasureToSelection(W, q.startBeat);
                    W++;
                    while (W < q.endMeasure) {
                        this._addMeasureToSelection(W);
                        W++
                    }
                    if (W == q.endMeasure) {
                        this._addMeasureToSelection(W, 0, q.endBeat)
                    }
                }
            }
            if (q == null) {
                this.staveBeats = []
            }
            this._selectedRange = q;
            return q
        },
        _addMeasureToSelection: function(aa, Z, q) {
            if (Z == null) {
                Z = 0
            }
            var W = this._tablature.getStaveMeasure(aa);
            if (W != null) {
                var ab = W.measure.beatCount();
                if (q == null) {
                    q = ab
                } else {
                    q = A["int"](Math.min(q + 1, ab))
                }
                var ac = Z;
                while (ac < q) {
                    var X = ac++;
                    var Y = W.getStaveBeat(X);
                    this.staveBeats.push(Y)
                }
            }
        },
        __class__: u.model.PossibleLoopAreaSelection
    });
    u.model.SelectionMark = function(q) {
        u.model.VisualElement.call(this);
        this.staveBeats = new Array();
        this.tablature = q;
        this.leftMarker = new P.geom.Rectangle(0, 0, u.model.SelectionMark.DEFAULT_MARKER_RADIUS * 2, u.model.SelectionMark.DEFAULT_MARKER_RADIUS * 2);
        this.rightMarker = new P.geom.Rectangle(0, 0, u.model.SelectionMark.DEFAULT_MARKER_RADIUS * 2, u.model.SelectionMark.DEFAULT_MARKER_RADIUS * 2)
    };
    p["tabRender.model.SelectionMark"] = u.model.SelectionMark;
    u.model.SelectionMark.__name__ = ["tabRender", "model", "SelectionMark"];
    u.model.SelectionMark.__super__ = u.model.VisualElement;
    u.model.SelectionMark.prototype = v(u.model.VisualElement.prototype, {
        get_selectedRange: function() {
            return this.selectedRange
        },
        set_selectedRange: function(q) {
            if (q != null && !q.equal(this.get_selectedRange())) {
                this.staveBeats = new Array();
                if (q.startMeasure == q.endMeasure) {
                    this.addMeasureToSelection(q.startMeasure, q.startBeat, q.endBeat)
                } else {
                    var W = q.startMeasure;
                    this.addMeasureToSelection(W, q.startBeat);
                    W++;
                    while (W < q.endMeasure) {
                        this.addMeasureToSelection(W);
                        W++
                    }
                    if (W == q.endMeasure) {
                        this.addMeasureToSelection(W, 0, q.endBeat)
                    }
                }
                this.selectedRange = q;
                this.positionMarkers(-1);
                this.positionMarkers(1)
            }
            if (q == null) {
                this.staveBeats = new Array()
            }
            this.selectedRange = q;
            return q
        },
        positionMarkers: function(aa) {
            if (this.staveBeats.length == 0) {
                return
            }
            var Y = null;
            var X = 0;
            if (aa < 0) {
                Y = this.staveBeats[0];
                X = this.leftMarker.width / 2
            } else {
                Y = this.staveBeats[this.staveBeats.length - 1];
                X = this.rightMarker.width / 2
            }
            var W = Y.stave;
            var Z = W.tablature.getScale();
            var ab = W.y + W.lineOffset[0] + W.lineHeight / 2 * (W.lineNumber - 1) * Z;
            var q = W.x + Y.x + Z * aa;
            if (aa < 0) {
                q -= (-1 + W.tablature.defaultMeasureLeftSpace) * Z
            } else {
                q += -1 * Z + Y.width
            }
            if (aa < 0) {
                this.leftMarker.x = q;
                this.leftMarker.y = ab
            } else {
                this.rightMarker.x = q;
                this.rightMarker.y = ab
            }
        },
        addMeasureToSelection: function(aa, Z, q) {
            if (Z == null) {
                Z = 0
            }
            var W = this.tablature.getStaveMeasure(aa);
            if (W != null) {
                var ab = W.measure.beatCount();
                if (q == null) {
                    q = ab
                } else {
                    q = A["int"](Math.min(q + 1, ab))
                }
                var ac = Z;
                while (ac < q) {
                    var X = ac++;
                    var Y = W.getStaveBeat(X);
                    this.staveBeats.push(Y)
                }
            }
        },
        reInit: function() {
            var q = this.get_selectedRange();
            this.set_selectedRange(null);
            this.set_selectedRange(q)
        },
        getLeftMarker: function() {
            return this.leftMarker
        },
        getRightMarker: function() {
            return this.rightMarker
        },
        isPositionOnLeftMarker: function(q, X) {
            var W = this.getLeftMarker().clone();
            return W.contains(q + u.model.SelectionMark.DEFAULT_MARKER_RADIUS, X + u.model.SelectionMark.DEFAULT_MARKER_RADIUS)
        },
        isPositionOnRightMarker: function(q, X) {
            var W = this.getRightMarker().clone();
            return W.contains(q + u.model.SelectionMark.DEFAULT_MARKER_RADIUS, X + u.model.SelectionMark.DEFAULT_MARKER_RADIUS)
        },
        __class__: u.model.SelectionMark,
        __properties__: v(u.model.VisualElement.prototype.__properties__, {
            set_selectedRange: "set_selectedRange",
            get_selectedRange: "get_selectedRange"
        })
    });
    u.model.Stave = function(W, q) {
        u.model.VisualElement.call(this);
        this.tablature = W;
        this._markerTextMultiplier = 1;
        this._measureTextMultiplier = 1;
        this._chordTextMultiplier = 1;
        this._effectsTextMultiplier = 1;
        this._beatGroupBarMultiplier = 1;
        this.maxBendValue = 0;
        this.lineHeight = 12;
        this.lineNumber = q;
        this._elements = new Array();
        this.measures = new Array();
        this.measureScale = 1;
        this.lineColor = W.lineColor;
        this.preLinesSpace = 5;
        this.effectsLineCount = 3;
        this.topSpace = 10;
        this.bottomSpace = 15;
        this.effectsLineColor = W.effectsLineColor;
        this.doScale(W.getScale())
    };
    p["tabRender.model.Stave"] = u.model.Stave;
    u.model.Stave.__name__ = ["tabRender", "model", "Stave"];
    u.model.Stave.__super__ = u.model.VisualElement;
    u.model.Stave.prototype = v(u.model.VisualElement.prototype, {
        doScale: function(W) {
            var q = this.tablature.getScale();
            this.markerTextHeight = this._markerTextMultiplier * this.tablature.markerTextFormat.size * 2 * q;
            this.measureTextHeight = this._measureTextMultiplier * this.tablature.measureTextFormat.size * 2 * q;
            this.chordTextHeight = this._chordTextMultiplier * this.tablature.chordTextFormat.size * 2 * q;
            this.effectsLineHeight = this._effectsTextMultiplier * this.tablature.effectTextFormat.size * q;
            this.beatGroupBarHeight = this._beatGroupBarMultiplier * this.lineHeight * 2 * q;
            this.beatTextHeight = this.tablature.effectTextFormat.size * q;
            this.lyricsHeight = this.tablature.effectTextFormat.size * q
        },
        getElements: function() {
            return this._elements
        },
        addMeasure: function(W) {
            var q = new u.model.StaveMeasure(this, W);
            q.stave = this;
            this._elements.push(q);
            this.measures.push(q);
            if (W.header.isTimeSignatureExists()) {
                var X = W.timeSignature();
                var Y = new u.model.StaveTime(this, X.numerator, X.denominator.value);
                q.time = Y;
                this._elements.push(Y)
            }
            return q
        },
        addElement: function(q) {
            this._elements.push(q);
            q.stave = this;
            return this._elements.length - 1
        },
        removeElment: function(q) {
            var Y = 0;
            var W = this._elements;
            while (Y < W.length) {
                var X = W[Y];
                ++Y;
                if (X == q) {
                    B.remove(this._elements, X);
                    if (h.Boot.__instanceof(X, u.model.StaveMeasure)) {
                        B.remove(this.measures, X)
                    }
                    q.stave = null
                }
            }
            return false
        },
        estimateWidth: function() {
            var W = 0;
            var Z = 0;
            var X = this._elements;
            while (Z < X.length) {
                var Y = X[Z];
                ++Z;
                if (h.Boot.__instanceof(Y, u.model.StaveMeasure)) {
                    var q = Y;
                    W += q.estimateWidth()
                }
            }
            return W
        },
        estimateHeight: function() {
            var W = this.tablature.getScale();
            var q = this.topSpace * W;
            q += this.getEntitiesAboveStaveHeight() * W;
            q += this.preLinesSpace * W;
            q += this.lineNumber * this.lineHeight * W;
            if (this.hasOnlyRestBeats()) {
                this._beatGroupBarMultiplier = 0
            } else {
                q += this.beatGroupBarHeight
            }
            if (this.hasBeatText()) {}
            if (this.hasLyrics()) {
                q += this.lyricsHeight
            }
            q += this.bottomSpace * W;
            return q
        },
        getEntitiesAboveStaveHeight: function() {
            var X = 0;
            var q = false;
            var Z = false;
            var Y = this._entityMapAboveStave.keys();
            while (Y.hasNext()) {
                var W = Y.next();
                if (this._entityMapAboveStave.get(W)) {
                    if (W == u.model.VisualEntity.FadeIn || W == u.model.VisualEntity.FadeOut) {
                        if (!q) {
                            q = true;
                            X += u.model.VisualEntityHelper.getEntityHeight(W)
                        }
                    } else {
                        if (W == u.model.VisualEntity.LetRing || W == u.model.VisualEntity.PalmMute) {
                            if (!Z) {
                                Z = true;
                                X += u.model.VisualEntityHelper.getEntityHeight(W)
                            }
                        } else {
                            if (W == u.model.VisualEntity.Bend) {
                                X += u.model.VisualEntityHelper.getEntityHeight(W) * (100 + this.maxBendValue) / 100
                            } else {
                                X += u.model.VisualEntityHelper.getEntityHeight(W)
                            }
                        }
                    }
                }
            }
            return X
        },
        getVisualEntityOffset: function(Y) {
            var aa = this.topSpace;
            var q = false;
            var Z = false;
            var X = this._entityMapAboveStave.keys();
            while (X.hasNext()) {
                var W = X.next();
                if (B.indexOf([u.model.VisualEntity.FadeIn, u.model.VisualEntity.FadeOut], Y, 0) != -1 && B.indexOf([u.model.VisualEntity.FadeIn, u.model.VisualEntity.FadeOut], W, 0) != -1) {
                    break
                } else {
                    if (B.indexOf([u.model.VisualEntity.LetRing, u.model.VisualEntity.PalmMute], Y, 0) != -1 && B.indexOf([u.model.VisualEntity.LetRing, u.model.VisualEntity.PalmMute], W, 0) != -1) {
                        break
                    } else {
                        if (Y == W) {
                            break
                        } else {
                            if (this._entityMapAboveStave.get(W)) {
                                if (W == u.model.VisualEntity.FadeIn || W == u.model.VisualEntity.FadeOut) {
                                    if (!q) {
                                        q = true;
                                        aa += u.model.VisualEntityHelper.getEntityHeight(W)
                                    }
                                } else {
                                    if (W == u.model.VisualEntity.LetRing || W == u.model.VisualEntity.PalmMute) {
                                        if (!Z) {
                                            Z = true;
                                            aa += u.model.VisualEntityHelper.getEntityHeight(W)
                                        }
                                    } else {
                                        aa += u.model.VisualEntityHelper.getEntityHeight(W)
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return aa
        },
        doLayout: function() {
            var W = this.tablature.getScale();
            this.doScale(W);
            this.lineOffset = new Array();
            u.model.VisualElement.prototype.doLayout.call(this);
            var ad = 0;
            this.beatTextOffset = 0;
            this.markerTextOffset = this.beatTextOffset + (this.hasBeatText() ? this.beatTextHeight : 0);
            this.measureTextOffset = this.markerTextOffset + this.markerTextHeight;
            this.chordTextOffset = this.measureTextOffset + this.measureTextHeight;
            this.effectsTextOffset = this.chordTextOffset + this.chordTextHeight;
            this.linesOffset = this.topSpace * W + this.preLinesSpace * W + this.getEntitiesAboveStaveHeight() * W;
            var ac = 0;
            var Z = this.lineNumber;
            while (ac < Z) {
                var X = ac++;
                this.lineOffset.push(X * this.lineHeight * W + this.linesOffset)
            }
            this.beatGroupBarOffset = this.lineNumber * this.lineHeight * W + this.linesOffset;
            this.lyricsOffset = this.beatGroupBarOffset + this.beatGroupBarHeight;
            var ab = 0;
            var Y = this._elements;
            while (ab < Y.length) {
                var aa = Y[ab];
                ++ab;
                var q = null;
                if (h.Boot.__instanceof(aa, u.model.StaveMeasure)) {
                    q = aa;
                    q.x = ad;
                    q.y = 0;
                    q.set_height(this.height);
                    q.minWidth = q.estimateWidth();
                    q.set_width(q.minWidth * this.measureScale);
                    q.doLayout();
                    ad += q.width
                }
            }
            this.processEffects()
        },
        isVisible: function() {
            return this.isInViewPort(this.tablature.viewPort)
        },
        isFullVisible: function() {
            return this.y + this.effectsTextOffset >= this.tablature.viewPort.y
        },
        processEffects: function() {
            this.effects = new Array();
            var aj = new Array();
            var q = new Array();
            var ak;
            var ah = null;
            var Y = 0;
            var ag = this.measures;
            while (Y < ag.length) {
                var am = ag[Y];
                ++Y;
                var ae = 0;
                var ad = am.staveBeats;
                while (ae < ad.length) {
                    var al = ad[ae];
                    ++ae;
                    var ab = 0;
                    var ac = al.staveEffects.length;
                    while (ab < ac) {
                        var ai = ab++;
                        if (al.staveEffects[ai]) {
                            if (aj[ai] == null) {
                                var af = u.model.StaveEffects.CreateStaveEffect(this, ai);
                                af.startBeat = al;
                                af.x = al.x;
                                ak = this.getFreeEffectLine(q);
                                af.line = ak;
                                af.y = this.effectsTextOffset + (this.effectsLineCount - ak - 2) * this.effectsLineHeight;
                                this.effects.push(af);
                                aj[ai] = af
                            } else {
                                var X = aj[ai];
                                X.set_width(al.x - X.x)
                            }
                        } else {
                            if (aj[ai] != null) {
                                var W = aj[ai];
                                W.endBeat = al;
                                if (W.width == 0) {
                                    W.set_width(W.startBeat.width)
                                }
                                q[W.line] = false;
                                aj[ai] = null
                            }
                        }
                    }
                    ah = al
                }
            }
            if (ah != null) {
                var aa = 0;
                while (aa < aj.length) {
                    var Z = aj[aa];
                    ++aa;
                    if (Z != null) {
                        Z.endBeat = ah;
                        Z.set_width(ah.x - Z.x + ah.width)
                    }
                }
            }
        },
        getMeasureInPosition: function(q, Z) {
            q -= this.x;
            var Y = 0;
            var X = this.measures;
            while (Y < X.length) {
                var W = X[Y];
                ++Y;
                if (q >= W.x && q <= W.x + W.width) {
                    return W
                }
            }
            return null
        },
        getFreeEffectLine: function(q) {
            var X = 0;
            var Y = q.length;
            while (X < Y) {
                var W = X++;
                if (!q[W]) {
                    q[W] = true;
                    return W
                }
            }
            q.push(true);
            return q.length - 1
        },
        hasBpmMark: function() {
            var W = false;
            var Y = 0;
            var X = this.measures;
            while (Y < X.length) {
                var q = X[Y];
                ++Y;
                if (q.bpm != null) {
                    W = true;
                    break
                }
            }
            return W
        },
        hasMeasureText: function() {
            var W = false;
            var Y = 0;
            var X = this.measures;
            while (Y < X.length) {
                var q = X[Y];
                ++Y;
                if (q.measure.header.text != null && q.measure.header.text.title.length > 0) {
                    W = true;
                    break
                }
            }
            return W
        },
        hasChord: function() {
            var X = false;
            var ab = 0;
            var aa = this.measures;
            while (ab < aa.length) {
                var q = aa[ab];
                ++ab;
                var Z = 0;
                var Y = q.staveBeats;
                while (Z < Y.length) {
                    var W = Y[Z];
                    ++Z;
                    if (W.beat.effect.chord != null) {
                        X = true;
                        break
                    }
                }
                if (X) {
                    break
                }
            }
            return X
        },
        hasAnyEffect: function() {
            var ae = false;
            var X = 0;
            var ad = this.measures;
            while (X < ad.length) {
                var ab = ad[X];
                ++X;
                var ac = 0;
                var aa = ab.staveBeats;
                while (ac < aa.length) {
                    var q = aa[ac];
                    ++ac;
                    var Y = 0;
                    var Z = q.staveEffects.length;
                    while (Y < Z) {
                        var W = Y++;
                        if (q.staveEffects[W]) {
                            var af = u.model.StaveEffects.CreateStaveEffect(this, W);
                            if (af.text != null && af.text.length > 0) {
                                ae = true;
                                break
                            }
                        }
                    }
                    if (ae) {
                        break
                    }
                }
                if (ae) {
                    break
                }
            }
            return ae
        },
        hasOnlyRestBeats: function() {
            var X = true;
            var ab = 0;
            var aa = this.measures;
            while (ab < aa.length) {
                var q = aa[ab];
                ++ab;
                var Z = 0;
                var Y = q.staveBeats;
                while (Z < Y.length) {
                    var W = Y[Z];
                    ++Z;
                    if (!W.beat.isRestBeat()) {
                        X = false;
                        break
                    }
                }
                if (!X) {
                    break
                }
            }
            return X
        },
        hasBeatText: function() {
            var X = false;
            var ab = 0;
            var aa = this.measures;
            while (ab < aa.length) {
                var q = aa[ab];
                ++ab;
                var Z = 0;
                var Y = q.staveBeats;
                while (Z < Y.length) {
                    var W = Y[Z];
                    ++Z;
                    if (W.beat.text != null && W.beat.text.length > 0) {
                        X = true;
                        break
                    }
                }
                if (X) {
                    break
                }
            }
            return X
        },
        hasLyrics: function() {
            var X = false;
            var ab = 0;
            var aa = this.measures;
            while (ab < aa.length) {
                var q = aa[ab];
                ++ab;
                var Z = 0;
                var Y = q.staveBeats;
                while (Z < Y.length) {
                    var W = Y[Z];
                    ++Z;
                    if (W.beat.lyricLines.filter(function(ac) {
                            return ac.length > 0
                        }).length > 0) {
                        X = true;
                        break
                    }
                }
                if (X) {
                    break
                }
            }
            return X
        },
        clearEverything: function() {
            this.onceClearEverything = true;
            this.tablature.render();
            this.onceClearEverything = false
        },
        getContents: function() {
            var q = "";
            if (h.Boot.__instanceof(this.cacheCanvas, P.graphics.HtmlCanvas)) {
                q = (h.Boot.__cast(this.cacheCanvas, P.graphics.HtmlCanvas)).toDataURL()
            }
            return q
        },
        finish: function() {
            this._entityMapAboveStave = u.model.VisualEntityHelper.getEntityMapAboveStave(this)
        },
        getEntityMapAboveStave: function() {
            return this._entityMapAboveStave
        },
        __class__: u.model.Stave
    });
    u.model.StaveBeat = function(ap, af, q) {
        u.model.StaveElement.call(this, ap);
        this.measure = af;
        this.notes = new Array();
        this.staveEffects = new Array();
        var ah = 0;
        var ad = u.model.StaveEffects.count;
        while (ah < ad) {
            var aj = ah++;
            this.staveEffects.push(false)
        }
        this.beat = q;
        this.effectText = "";
        var aa = "";
        var W = "";
        var ae = "";
        var an = "";
        var al = "";
        var ag = 0;
        var ak = q.getNotes();
        while (ag < ak.length) {
            var ab = ak[ag];
            ++ag;
            var X = new u.model.StaveNote(ap, ab, this);
            ap.addElement(X);
            this.notes.push(X);
            if (ab.isTiedNote) {
                var Y = ab.getPrevNote();
                if (Y != null) {
                    var ao = Y.voice.beat;
                    var ai = ao.measure;
                    var am = ai.number();
                    var ar;
                    if (am != this.measure.measure.number()) {
                        ar = this.measure.stave.tablature.getStaveMeasure(am - 1)
                    } else {
                        ar = this.measure
                    }
                    var aq = ar.getStaveBeat(ao.index).getStaveNote(Y);
                    if (aq != null) {
                        X.tiedNotePrev = aq;
                        aq.tiedNoteNext = X
                    }
                    if (Y.effect.letRing) {
                        this.staveEffects[u.model.StaveEffects.letRing] = true
                    }
                }
            }
            if (ab.effect.palmMute) {
                this.staveEffects[u.model.StaveEffects.palmMute] = true
            }
            if (X.note.effect.letRing) {
                this.staveEffects[u.model.StaveEffects.letRing] = true
            }
            if (X.note.effect.vibrato || q.effect.isTremoloBar()) {
                this.staveEffects[u.model.StaveEffects.vibrato] = true
            }
            if (q.effect.fadeIn) {
                this.staveEffects[u.model.StaveEffects.fadeIn] = true
            }
            if (q.effect.fadeOut) {
                this.staveEffects[u.model.StaveEffects.fadeOut] = true
            }
            if (ab.effect.isTrill() || X.note.effect.isTremoloPicking()) {
                W = "   Tr"
            }
            if (ab.effect.hammer) {}
            if (ab.effect.accentuatedNote) {
                an = "   <"
            } else {
                if (ab.effect.heavyAccentuatedNote) {
                    an = "   ^"
                }
            }
            if (ab.effect.harmonic != null && ab.effect.harmonic.type != V.effects.HarmonicType.Natural) {
                var Z = ab.effect.harmonic.type;
                switch (Z) {
                    case V.effects.HarmonicType.Artificial:
                        aa = "   A.H.";
                        break;
                    case V.effects.HarmonicType.Pinch:
                        aa = "   P.H.";
                        break;
                    case V.effects.HarmonicType.Tapped:
                        aa = "   T.H.";
                        break;
                    case V.effects.HarmonicType.Semi:
                        aa = "   S.H.";
                        break;
                    case V.effects.HarmonicType.Feedback:
                        aa = "   Fdbk.";
                        break
                }
            }
            if (this.slide) {}
        }
        this.effectText += aa + an + W + ae + al
    };
    p["tabRender.model.StaveBeat"] = u.model.StaveBeat;
    u.model.StaveBeat.__name__ = ["tabRender", "model", "StaveBeat"];
    u.model.StaveBeat.__super__ = u.model.StaveElement;
    u.model.StaveBeat.prototype = v(u.model.StaveElement.prototype, {
        getStaveNote: function(X) {
            var ab = X.voice.index;
            var W = X.index;
            var aa = 0;
            var Z = this.notes;
            while (aa < Z.length) {
                var q = Z[aa];
                ++aa;
                var Y = q.note.voice;
                if (Y.index == ab && W == q.note.index) {
                    return q
                }
            }
            return null
        },
        doLayout: function() {
            var Z = this.stave.tablature.getScale() / 2;
            var Y = 0;
            var X = this.notes;
            while (Y < X.length) {
                var q = X[Y];
                ++Y;
                q.doLayout();
                q.x = this.x;
                var W = this.stave.lineOffset[q.note.string - 1];
                q.y = this.y + W - q.height * Z
            }
        },
        getNoteTextFormat: function() {
            var q = this.stave.tablature;
            if (this.isSelected && q.highlightNotes) {
                return q.highlithtNoteTextFormat
            } else {
                return q.tabTextFormat
            }
        },
        getPrevStaveBeat: function() {
            var W = null;
            var q = this.beat.getPrevBeat();
            if (q != null) {
                var X;
                if (q.measure.number() != this.measure.measure.number()) {
                    X = this.measure.stave.tablature.getStaveMeasure(q.measure.number() - 1)
                } else {
                    X = this.measure
                }
                W = X.getStaveBeat(q.index)
            }
            return W
        },
        getNextStaveBeat: function() {
            var X = null;
            var q = this.beat.getNextBeat();
            if (q != null) {
                var W;
                if (q.measure.number() != this.measure.measure.number()) {
                    W = this.measure.stave.tablature.getStaveMeasure(q.measure.number() - 1)
                } else {
                    W = this.measure
                }
                X = W.getStaveBeat(q.index)
            }
            return X
        },
        __class__: u.model.StaveBeat
    });
    u.model.StaveEffect = function(q) {
        u.model.StaveElement.call(this, q)
    };
    p["tabRender.model.StaveEffect"] = u.model.StaveEffect;
    u.model.StaveEffect.__name__ = ["tabRender", "model", "StaveEffect"];
    u.model.StaveEffect.__super__ = u.model.StaveElement;
    u.model.StaveEffect.prototype = v(u.model.StaveElement.prototype, {
        __class__: u.model.StaveEffect
    });
    u.model.StaveEffects = function() {};
    p["tabRender.model.StaveEffects"] = u.model.StaveEffects;
    u.model.StaveEffects.__name__ = ["tabRender", "model", "StaveEffects"];
    u.model.StaveEffects.CreateStaveEffect = function(q, X) {
        var W = new u.model.StaveEffect(q);
        W.id = X;
        switch (X) {
            case 0:
                W.text = "let ring";
                break;
            case 1:
                W.text = "P.M.";
                break;
            case 2:
                W.text = "";
                break
        }
        return W
    };
    u.model.StaveMeasure = function(aa, W) {
        u.model.StaveElement.call(this, aa);
        this.measure = W;
        this.staveBeats = new Array();
        var Z = null;
        var Y = 0;
        var ae = W.timeSignature();
        var X = ae.denominator.time();
        var ai = 0;
        var ad = 1;
        var ac = 0;
        var af = W.beats;
        while (ac < af.length) {
            var ah = af[ac];
            ++ac;
            var ag = new u.model.StaveBeat(aa, this, ah);
            ag.measure = this;
            this.staveBeats.push(ag);
            var q = ah.voices[0].duration.time();
            ai += q;
            if (Z != null) {
                if (ai <= X) {
                    ag.prevInGroup = Z;
                    Z.nextInGroup = ag
                } else {
                    ai = q
                }
            }
            var ab = ag.beat.voices[0].duration.tuplet.enters;
            if (Z != null && Z.beat.voices[0].duration.tuplet.enters > 1 && ab > 1 && ab > ad) {
                ag.tupletPrev = Z;
                Z.tupletNext = ag;
                ad++
            } else {
                ad = 1
            }
            Z = ag;
            Y = q
        }
    };
    p["tabRender.model.StaveMeasure"] = u.model.StaveMeasure;
    u.model.StaveMeasure.__name__ = ["tabRender", "model", "StaveMeasure"];
    u.model.StaveMeasure.__super__ = u.model.StaveElement;
    u.model.StaveMeasure.prototype = v(u.model.StaveElement.prototype, {
        estimateWidth: function() {
            var Y = this.stave.tablature;
            var X = Y.defaultMeasureLeftSpace;
            if (this.time != null) {
                X += this.time.estimateWidth()
            }
            var W = X;
            var aa = 0;
            var Z = this.staveBeats;
            while (aa < Z.length) {
                var q = Z[aa];
                ++aa;
                W += this._getBeatWidth(q.beat.voices[0].duration) * Y.getScale()
            }
            if (W < Y.minMeasureWidth) {
                return Y.minMeasureWidth
            } else {
                return W
            }
        },
        doLayout: function() {
            u.model.StaveElement.prototype.doLayout.call(this);
            var q = this.stave.tablature.getScale();
            var aa = this.stave.tablature.defaultMeasureLeftSpace * q;
            var ae = aa;
            if (this.time != null) {
                this.time.x = this.x + ae;
                this.time.y = this.y + 5;
                ae += this.time.estimateWidth()
            }
            var af = 0;
            var Y = 0;
            var ab = this.staveBeats;
            while (Y < ab.length) {
                var ac = ab[Y];
                ++Y;
                af += this._getBeatWidth(ac.beat.voices[0].duration)
            }
            var ag = this.width - ae - af;
            var Z = 0;
            var W = this.staveBeats;
            while (Z < W.length) {
                var ad = W[Z];
                ++Z;
                ad.x = this.x + ae;
                ad.y = this.y;
                var X = this._getBeatWidth(ad.beat.voices[0].duration);
                ad.set_width(X + ag * X / af);
                ad.set_height(this.height);
                ad.doLayout();
                ae += ad.width
            }
            if (this.bpm != null) {
                this.bpm.x = this.getStaveBeat(0).x;
                this.bpm.y = this.stave.markerTextOffset
            }
        },
        _getBeatWidth: function(W) {
            var Y = W.value;
            if (W.isDotted) {
                Y /= 2
            } else {
                if (W.isDoubleDotted) {
                    Y /= 3
                }
            }
            var X = Math.log(Y) / Math.log(2);
            var q = this.stave.tablature.minBeatDuration - X;
            if (q > 0) {
                q = q
            } else {
                q = 0
            }
            if (W.tuplet.enters > 1) {
                q -= 0.6
            }
            return (1 + q * this.stave.tablature.multiplierBeatWidth) * this.stave.tablature.beatWidth * this.stave.tablature.getScale()
        },
        getStaveBeat: function(q) {
            return this.staveBeats[q]
        },
        getBeatInPosition: function(q, ac) {
            q -= this.stave.x;
            var ab = this.stave.tablature.beatWidth / 2;
            var Y = null;
            if (this.staveBeats.length == 0) {
                return null
            }
            var W = this.staveBeats[0];
            if (q <= W.x + ab && q >= W.measure.x) {
                return W
            }
            var Z = 1;
            var aa = this.staveBeats.length;
            while (Z < aa) {
                var X = Z++;
                Y = this.staveBeats[X];
                if (q >= W.x - ab && q <= Y.x - ab) {
                    return W
                }
                W = Y
            }
            Y = this.staveBeats[this.staveBeats.length - 1];
            if (q < this.x + this.width && q >= Y.x - ab) {
                return Y
            }
            return null
        },
        beatDistanse: function(W, q) {
            return q - (W.x + W.width)
        },
        __class__: u.model.StaveMeasure
    });
    u.model.StaveNote = function(q, X, W) {
        u.model.StaveElement.call(this, q);
        this.note = X;
        this.staveBeat = W;
        var Y;
        if (X.effect.deadNote) {
            Y = "X"
        } else {
            if (X.value == null) {
                Y = "null"
            } else {
                Y = "" + X.value
            }
        }
        if (X.effect.ghostNote) {
            Y = "(" + Y + ")"
        }
        this.mainText = Y;
        if (X.effect.slide) {
            this.staveBeat.slide = true
        }
    };
    p["tabRender.model.StaveNote"] = u.model.StaveNote;
    u.model.StaveNote.__name__ = ["tabRender", "model", "StaveNote"];
    u.model.StaveNote.__super__ = u.model.StaveElement;
    u.model.StaveNote.prototype = v(u.model.StaveElement.prototype, {
        doLayout: function() {
            u.model.StaveElement.prototype.doLayout.call(this);
            var q = this.stave.tablature.tabTextFormat;
            this.set_width(q.size * 1.3 * this.mainText.length);
            this.set_height(q.size * 1.1)
        },
        __class__: u.model.StaveNote
    });
    u.model.StaveTime = function(q, W, X) {
        u.model.StaveElement.call(this, q);
        this.numerator = W;
        this.denominator = X
    };
    p["tabRender.model.StaveTime"] = u.model.StaveTime;
    u.model.StaveTime.__name__ = ["tabRender", "model", "StaveTime"];
    u.model.StaveTime.__super__ = u.model.StaveElement;
    u.model.StaveTime.prototype = v(u.model.StaveElement.prototype, {
        estimateWidth: function() {
            return 20 * this.stave.tablature.getScale()
        },
        __class__: u.model.StaveTime
    });
    u.model.TabLayout = {
        __ename__: true,
        __constructs__: ["Page", "HorizontalTape"]
    };
    u.model.TabLayout.Page = ["Page", 0];
    u.model.TabLayout.Page.toString = l;
    u.model.TabLayout.Page.__enum__ = u.model.TabLayout;
    u.model.TabLayout.HorizontalTape = ["HorizontalTape", 1];
    u.model.TabLayout.HorizontalTape.toString = l;
    u.model.TabLayout.HorizontalTape.__enum__ = u.model.TabLayout;
    u.model.VisualContainer = function() {
        u.model.VisualElement.call(this);
        this.children = new Array()
    };
    p["tabRender.model.VisualContainer"] = u.model.VisualContainer;
    u.model.VisualContainer.__name__ = ["tabRender", "model", "VisualContainer"];
    u.model.VisualContainer.__super__ = u.model.VisualElement;
    u.model.VisualContainer.prototype = v(u.model.VisualElement.prototype, {
        doLayout: function() {
            u.model.VisualElement.prototype.doLayout.call(this);
            var W = 0;
            var q = this.children;
            while (W < q.length) {
                var X = q[W];
                ++W;
                if (h.Boot.__instanceof(X, u.model.TextElement)) {
                    X.doLayout()
                }
            }
        },
        setScale: function(X) {
            u.model.VisualElement.prototype.setScale.call(this, X);
            var W = 0;
            var q = this.children;
            while (W < q.length) {
                var Y = q[W];
                ++W;
                Y.setScale(X)
            }
            return X
        },
        __class__: u.model.VisualContainer
    });
    u.model.Tablature = function() {
        this._cursorTimer = 0;
        this._expandRepeats = false;
        u.model.VisualContainer.call(this);
        this._layout = u.model.TabLayout.Page;
        this._tracks = new Array();
        this._painter = new u.painters.TabPainter();
        this._scale = 1;
        this.borderSpace = 80;
        this.ghostSpace = 80;
        this.topSpace = 0;
        this.beatWidth = 23;
        this.multiplierBeatWidth = 0.5;
        this.minMeasureWidth = 60;
        this.defaultMeasureLeftSpace = 15;
        this.headerOffset = 0;
        this.selectionColor = 16728191;
        this.cursorColor = 1621148;
        this.lineColor = 13421772;
        this.effectsLineColor = 7829367;
        this.ghostAlpha = 0.4;
        var q = new P.graphics.TextFormat();
        q.size = 12;
        q.color = 8947848;
        this.defaultTextFormat = q;
        q = new P.graphics.TextFormat();
        q.size = 12;
        q.fontName = "Roboto";
        q.color = 12303291;
        this.artistTextFormat = q;
        q = new P.graphics.TextFormat();
        q.size = 22;
        q.fontName = "Roboto";
        q.color = 8947848;
        this.titleTextFormat = q;
        q = new P.graphics.TextFormat();
        q.size = 12;
        q.bold = true;
        q.fontName = "Times New Roman";
        q.color = 0;
        this.markerTextFormat = q;
        q = new P.graphics.TextFormat();
        q.size = 12;
        q.bold = true;
        q.fontName = "Times New Roman";
        q.color = 0;
        this.measureTextFormat = q;
        q = new P.graphics.TextFormat();
        q.size = 12;
        q.fontName = "Roboto";
        q.color = 430483;
        q.align = "center";
        this.chordTextFormat = q;
        q = new P.graphics.TextFormat();
        q.size = 12;
        q.fontName = "Roboto";
        q.color = 0;
        q.align = "center";
        this.autoChordTextFormat = q;
        q = new P.graphics.TextFormat();
        q.size = 9;
        q.leading = 0;
        q.leftMargin = 0;
        q.color = 0;
        q.align = "center";
        q.background = true;
        q.backgroundColor = 16777215;
        this.effectTextFormat = q;
        q = new P.graphics.TextFormat();
        q.size = 9;
        q.color = 8947848;
        this.measureNumberTextFormat = q;
        q = new P.graphics.TextFormat();
        q.size = 12;
        q.bold = true;
        q.fontName = "Sans-serif";
        q.leading = 0;
        q.leftMargin = 0;
        q.color = 0;
        q.background = true;
        q.backgroundColor = 16777215;
        q.backgroundOffset = 2;
        this.tabTextFormat = q;
        this.lyricsTextFormat = u.model.TextElement.copyFormat(this.effectTextFormat);
        this.lyricsTextFormat.size = 10;
        this.highlithtNoteTextFormat = u.model.TextElement.copyFormat(this.tabTextFormat);
        this.highlithtNoteTextFormat.background = false;
        this.highlithtNoteTextFormat.color = 1621148;
        this.cursor = new u.model.TablatureCursor(this);
        this._scrollTimer = new m.Timer(u.model.Tablature.ANIMATION_TIME_STEP);
        this._autoScrollStrategyType = u.autoScroll.AutoScrollStrategyType.USTINOV_STRATEGY;
        this._highlightPosition = null;
        this.chords = []
    };
    p["tabRender.model.Tablature"] = u.model.Tablature;
    u.model.Tablature.__name__ = ["tabRender", "model", "Tablature"];
    u.model.Tablature.__interfaces__ = [u.model.ITablature];
    u.model.Tablature.__super__ = u.model.VisualContainer;
    u.model.Tablature.prototype = v(u.model.VisualContainer.prototype, {
        configure: function(q) {
            this.beginnerMode = q.beginnerMode;
            this.scalableTabOffsets = q.scalableTabOffsets;
            this.drawDurations = q.drawDurations;
            this.multipleInstance = q.multipleInstance
        },
        setBeginnerMode: function(q) {
            this.beginnerMode = q;
            this.resetLayout();
            this.render()
        },
        toggleDrawDurations: function(q) {
            this.drawDurations = q;
            var W = this.viewPort.y;
            this.resetLayout();
            this.scrollToY(W, false)
        },
        reconstruct: function() {
            if (this.scalableTabOffsets && this.width > 0) {
                if (this.multipleInstance) {
                    this.borderSpace = this.ghostSpace = 20
                } else {
                    var q = (this.width - 1080 * this._scale) / 2;
                    if (q < 80) {
                        this.borderSpace = 80
                    } else {
                        this.borderSpace = q
                    }
                    if (q < 80) {
                        this.ghostSpace = 80
                    } else {
                        this.ghostSpace = q
                    }
                }
            }
        },
        setAutoScrollStrategyType: function(q) {
            this._autoScrollStrategyType = q
        },
        setCanvas: function(q) {
            this._canvas = q
        },
        setCursorCanvas: function(q) {
            this._cursorCanvas = q
        },
        resetLayout: function() {
            this.chords = [];
            this.reconstruct();
            u.model.VisualContainer.prototype.resetLayout.call(this);
            var X = 0;
            var W = this._tracks;
            while (X < W.length) {
                var q = W[X];
                ++X;
                q.setScale(this._scale);
                q.resetLayout()
            }
            this.cursor.clearCache();
            this._needLayout = true
        },
        addTitles: function() {},
        doLayout: function() {
            u.model.VisualContainer.prototype.doLayout.call(this);
            this.viewPort = new P.geom.Rectangle(0, 0, this.width, this.height);
            var X = this.topSpace;
            var W = X;
            var Z = 0;
            var Y = this._tracks;
            while (Z < Y.length) {
                var q = Y[Z];
                ++Z;
                if (q == null) {
                    continue
                }
                q.x = this.borderSpace;
                q.y = W
            }
            if (this._currentTrack != null) {
                this._currentTrack.doLayout()
            }
            this.setCursorToCurrentBeat();
            if (this._selectionMark != null) {
                this._selectionMark.reInit()
            }
            this.cursor.set_height(this.getStaveMeasure(this._currentMeasureIndex).height);
            this._needLayout = false
        },
        setSong: function(q, W) {
            if (W == null) {
                W = false
            }
            if (W) {
                this.demoMode = W
            }
            q.validate();
            this._origSong = q;
            this._expandedSong = V.SongOperations.expandRepeats(q);
            if (this._expandRepeats) {
                this._song = this._expandedSong
            } else {
                this._song = this._origSong
            }
            this.reset();
            this._setMinBeatDuration()
        },
        _setMinBeatDuration: function() {
            var q = this;
            this.minBeatDuration = 1;
            this.getSong().forAllBeats(function(W) {
                var X = Math.round(Math.log(W.voices[0].duration.value) / Math.log(2));
                if (X > q.minBeatDuration) {
                    q.minBeatDuration = X
                }
            });
            if (this.minBeatDuration > 4) {
                this.minBeatDuration = 4
            } else {
                this.minBeatDuration = this.minBeatDuration
            }
        },
        reset: function() {
            this._currentMeasureIndex = 0;
            this._currentBeatIndex = 0;
            this._selectionMark = new u.model.SelectionMark(this);
            this._possibleLoopAreaSelection = new u.model.PossibleLoopAreaSelection(this);
            var X = 0;
            var W = this._song.tracks;
            while (X < W.length) {
                var q = W[X];
                ++X;
                var Y = q.number - 1;
                this._tracks[Y] = new u.model.TablatureTrack(this, Y)
            }
            this.setScale(this._scale)
        },
        getSong: function() {
            return this._song
        },
        expandRepeats: function(Z) {
            if (Z != this._expandRepeats) {
                var q = this._currentTrack._track;
                var W = q.number;
                this._expandRepeats = Z;
                var aa = q.measures[this._currentMeasureIndex].beats[this._currentBeatIndex].getStartInMilliSeconds();
                var X = null;
                if (this._selectionMark != null && this._selectionMark.get_selectedRange() != null) {
                    X = this._selectionMark.get_selectedRange().convertToTimeRange(q)
                }
                if (Z) {
                    this._song = this._expandedSong
                } else {
                    this._song = this._origSong
                }
                this.reset();
                this.showTrack(W);
                var Y = this._song.findBeatForTime(W, aa + 1);
                this.moveToBeatIndex(Y.measure.getIndex(), Y.index);
                this.scrollToCurrentBeat();
                if (X != null) {
                    this._selectionMark = new u.model.SelectionMark(this);
                    this._selectionMark.set_selectedRange(X.convertToTrackSelection(this._song.tracks[W - 1]))
                }
            }
        },
        repeatsExpanded: function() {
            return this._expandRepeats
        },
        showTrack: function(q) {
            if (this._song == null || q < 1 || q > this._song.tracks.length) {
                return
            }
            this._currentTrack = this._tracks[q - 1];
            this.validatePosition();
            this.cursor.clearCache()
        },
        transposeSong: function(Y) {
            Y.validate();
            this._origSong = Y;
            this._expandedSong = V.SongOperations.expandRepeats(Y);
            if (this._expandRepeats) {
                this._song = this._expandedSong
            } else {
                this._song = this._origSong
            }
            this._selectionMark = new u.model.SelectionMark(this);
            var X = 0;
            var W = this._song.tracks;
            while (X < W.length) {
                var q = W[X];
                ++X;
                var Z = q.number - 1;
                this._tracks[Z] = new u.model.TablatureTrack(this, Z)
            }
            this._currentTrack = this._tracks[this.getTrackNumber() - 1];
            this.resetLayout()
        },
        validatePosition: function() {
            var q = this._currentTrack._track.measures[this._currentMeasureIndex];
            if (q == null) {
                this._currentMeasureIndex = 0;
                this._currentBeatIndex = 0
            } else {
                if (q.beatCount() <= this._currentBeatIndex) {
                    this._currentBeatIndex = 0
                }
            }
        },
        getTrack: function() {
            return this._currentTrack._track
        },
        getTrackNumber: function() {
            return this._currentTrack._track.number
        },
        getStaves: function() {
            return this._currentTrack.staves
        },
        getStaveMeasure: function(W) {
            if (this._currentTrack != null) {
                var Y = 0;
                var X = this._currentTrack.staves;
                while (Y < X.length) {
                    var q = X[Y];
                    ++Y;
                    if (W >= q.startMeasureIndex && W <= q.endMeasureIndex) {
                        return q.measures[W - q.startMeasureIndex]
                    }
                }
            }
            return null
        },
        getTopVisibleMeasure: function() {
            var W = null;
            var Y = 0;
            var X = this.getStaves();
            while (Y < X.length) {
                var q = X[Y];
                ++Y;
                if (q.isFullVisible()) {
                    W = q.measures[0].measure;
                    break
                }
            }
            return W
        },
        getTopVisibleStave: function() {
            var q = null;
            var Y = 0;
            var X = this.getStaves();
            while (Y < X.length) {
                var W = X[Y];
                ++Y;
                if (W.isFullVisible()) {
                    q = W;
                    break
                }
            }
            return q
        },
        getStaveBeat: function(X) {
            var q = X.measure;
            var W = this.getStaveMeasure(q.number() - 1);
            if (W != null) {
                return W.getStaveBeat(X.index)
            } else {
                return null
            }
        },
        getStaveBeatByIndex: function(X, Y) {
            var q = this.getStaveMeasure(X);
            if (q != null) {
                var W = q.getStaveBeat(Y);
                return W
            }
            return null
        },
        getStaveNote: function(X) {
            var q = X.voice.beat;
            var W = this.getStaveBeat(q);
            if (W != null) {
                return W.getStaveNote(X)
            }
            return null
        },
        getBeatByIndexes: function(q, X) {
            var W = this.getTrack().measures[q].beats[X];
            return W
        },
        scrollOnDelta: function(W, q) {
            if (q == null) {
                q = true
            }
            var X = this.viewPort.y + W;
            this.scrollToY(X, q)
        },
        _scrollToBeat: function(X, W, Y) {
            if (Y == null) {
                Y = true
            }
            if (W == null) {
                W = true
            }
            if (this.viewPort.height >= this.getRealHeight()) {
                return
            }
            var aa = null;
            var q = X.stave.index == this.getStaves().length - 1;
            if (X.stave.index == 0) {
                aa = 0
            } else {
                if (Y) {
                    var Z = this._autoScrollStrategyType;
                    switch (Z[1]) {
                        case 0:
                            if (X.stave.y < this.viewPort.y || !q && this.getStaves()[X.stave.index + 1].y + this.getStaves()[X.stave.index + 1].beatTextOffset > this.viewPort.get_bottom() || X.stave.y + X.stave.beatTextOffset - this.viewPort.height > this.viewPort.y) {
                                aa = X.stave.y
                            }
                            break;
                        case 1:
                            aa = X.stave.y - (this.viewPort.height - X.stave.height - X.stave.linesOffset) / 2;
                            if (this.viewPort.y + this.viewPort.height / 2 > X.stave.y + X.stave.height / 2) {
                                if (this.viewPort.y > X.stave.y) {
                                    aa = X.stave.y
                                } else {
                                    aa = null
                                }
                            }
                            break;
                        case 2:
                            if (X.stave.y < this.viewPort.y || !q && this.getStaves()[X.stave.index + 1].y + this.getStaves()[X.stave.index + 1].beatTextOffset > this.viewPort.get_bottom() || X.stave.y + X.stave.beatTextOffset - this.viewPort.height > this.viewPort.y) {
                                aa = X.stave.y - this.viewPort.height / 2 + X.stave.height
                            }
                            break
                    }
                } else {
                    if (X.stave.y + X.stave.beatTextOffset > this.viewPort.get_bottom()) {
                        aa = this.viewPort.y + (X.stave.y + X.stave.beatTextOffset - this.viewPort.get_bottom())
                    } else {
                        if (X.stave.y < this.viewPort.y) {
                            aa = X.stave.y
                        }
                    }
                }
            }
            if (aa != null) {
                this.scrollToY(aa, W)
            }
        },
        scrollToIndex: function(Z, aa, Y, q) {
            if (q == null) {
                q = true
            }
            if (Y == null) {
                Y = true
            }
            var W = this.getStaveMeasure(Z);
            if (W != null) {
                var X = W.getStaveBeat(aa);
                if (X == null) {
                    X = W.getStaveBeat(0)
                } else {
                    X = X
                }
                this._scrollToBeat(X, Y, q)
            }
        },
        scrollToY: function(W, q) {
            if (q == null) {
                q = true
            }
            if (W < 0) {
                W = 0
            } else {
                if (W + this.viewPort.height > this._currentTrack.height && this.viewPort.height < this._currentTrack.height) {
                    W = this._currentTrack.height - this.viewPort.height
                }
            }
            this.animationY(this.viewPort, W, q)
        },
        scrollToCurrentBeat: function(W, q) {
            if (q == null) {
                q = true
            }
            if (W == null) {
                W = true
            }
            this.scrollToIndex(this._currentMeasureIndex, this._currentBeatIndex, W, q)
        },
        setCursorToCurrentBeat: function() {
            var q = this.getStaveBeatByIndex(this._currentMeasureIndex, this._currentBeatIndex);
            if (q != null) {
                this.cursor.currentBeat = q;
                this.cursor.resetAnimation()
            }
        },
        render: function() {
            if (this._needLayout) {
                this.doLayout()
            }
            this._painter.draw(this._canvas, this);
            this._canvas.flush()
        },
        renderCursor: function(q) {
            this._painter.renderCursor(q, this.cursor);
            q.flush()
        },
        getTablatureTrack: function() {
            return this._currentTrack
        },
        moveToStaveBeat: function(q) {
            this._moveToBeat(q.beat)
        },
        _moveToBeat: function(W, q) {
            if (q == null) {
                q = true
            }
            this._currentMeasureIndex = W.measure.getIndex();
            this._currentBeatIndex = W.index;
            this.cursor.clearCache();
            this.setCursorToCurrentBeat();
            this.render()
        },
        moveToBeatIndex: function(X, Y, q) {
            if (q == null) {
                q = true
            }
            var W = this.getStaveBeatByIndex(X, Y);
            if (W != null) {
                this._moveToBeat(W.beat, q)
            }
        },
        moveToTime: function(q) {
            var W = this._song.findBeatForTime(this._currentTrack._track.number, q);
            if (W != null) {
                this._moveToBeat(W)
            }
        },
        moveToNextStave: function() {
            var W = this.getStaveBeatByIndex(this._currentMeasureIndex, this._currentBeatIndex);
            if (W != null) {
                var q = W.stave;
                var X = q.index + 1;
                if (X < this._currentTrack.staves.length) {
                    q = this._currentTrack.staves[X];
                    this._moveToStave(q)
                }
            }
        },
        moveToPrevStave: function() {
            var W = this.getStaveBeatByIndex(this._currentMeasureIndex, this._currentBeatIndex);
            if (W != null) {
                var q = W.stave;
                var X = q.index - 1;
                if (X >= 0) {
                    q = this._currentTrack.staves[X];
                    this._moveToStave(q)
                }
            }
        },
        _moveToStave: function(q) {
            if (q.measures.length > 0) {
                this._currentMeasureIndex = q.measures[0].measure.number() - 1;
                this._currentBeatIndex = 0;
                var W = this.getStaveBeatByIndex(this._currentMeasureIndex, this._currentBeatIndex);
                if (W != null) {
                    this._moveToBeat(W.beat)
                }
            }
        },
        moveToPosition: function(q, X) {
            var W = this._currentTrack.getStaveBeatInPosition(q, X);
            if (W != null) {
                this._currentMeasureIndex = W.beat.measure.getIndex();
                this._currentBeatIndex = W.beat.index;
                if (W.stave.index == 0) {
                    X = 0;
                    this.scrollToY(X, true)
                } else {
                    if (W.stave.y < this.viewPort.y) {
                        X = W.stave.y;
                        this.scrollToY(X, true)
                    } else {
                        if (W.stave.y + W.stave.beatTextOffset > this.viewPort.get_bottom()) {
                            X = this.viewPort.y + (W.stave.y + W.stave.beatTextOffset - this.viewPort.get_bottom());
                            this.scrollToY(X, true)
                        }
                    }
                }
                this.setCursorToCurrentBeat();
                this.render()
            }
        },
        getCurrentMeasureIndex: function() {
            return this._currentMeasureIndex
        },
        getCurrentBeatIndex: function() {
            return this._currentBeatIndex
        },
        setSongData: function(q, X) {
            if (X == null) {
                X = false
            }
            var W = V.SongIo.read(q);
            if (W != null) {
                this.setSong(W, X)
            }
        },
        getViewportY: function() {
            return this.viewPort.y
        },
        getViewportX: function() {
            return this.viewPort.x
        },
        getRealHeight: function() {
            if (this._currentTrack != null) {
                return this._currentTrack.height
            } else {
                return 0
            }
        },
        selectRange: function(Z, Y, X, q) {
            var W = new V.TrackSelectedRange(Z, Y, X, q);
            this._selectionMark.set_selectedRange(W)
        },
        selectRangeXY: function(X, W, ac, ab) {
            var Z = this.getStaveBeatInPosition(X, W);
            var Y = this.getStaveBeatInPosition(ac, ab);
            var q = Z.beat.measure.getIndex();
            var ad = Y.beat.measure.getIndex();
            var ae = Z.beat.index;
            var aa = Y.beat.index;
            this._selectionMark.set_selectedRange(new V.TrackSelectedRange(q, ad, ae, aa))
        },
        clearSelection: function() {
            this._selectionMark.set_selectedRange(null)
        },
        getSelectionMark: function() {
            return this._selectionMark
        },
        getStaveBeatInPosition: function(q, W) {
            return this._currentTrack.getStaveBeatInPosition(q, W)
        },
        getTrackPositionXY: function(X, Y) {
            var W = null;
            var q = this.getStaveBeatInPosition(X, Y);
            if (q != null) {
                W = new V.TrackPosition(this.getTrackNumber(), q.beat.measure.getIndex(), q.beat.index)
            }
            return W
        },
        getCurrentTrackPosition: function() {
            return new V.TrackPosition(this._currentTrack._track.number, this._currentMeasureIndex, this._currentBeatIndex)
        },
        setScale: function(q) {
            u.model.VisualContainer.prototype.setScale.call(this, q);
            this.resetLayout();
            return q
        },
        isPositionOnLeftMarker: function(q, W) {
            return this._selectionMark != null && this._selectionMark.isPositionOnLeftMarker(q + this.viewPort.x, W + this.viewPort.y)
        },
        isPositionOnRightMarker: function(q, W) {
            return this._selectionMark != null && this._selectionMark.isPositionOnRightMarker(q + this.viewPort.x, W + this.viewPort.y)
        },
        highlightLeftMarker: function(W) {
            var q = this._painter.highlightLeftMarker(W);
            if (q) {
                this.render()
            }
        },
        highlightRightMarker: function(W) {
            var q = this._painter.highlightRightMarker(W);
            if (q) {
                this.render()
            }
        },
        highlightLoop: function(W) {
            var q = this._painter.highlightLoop(W);
            if (q) {
                this.render()
            }
        },
        clearPossibleLoopArea: function() {
            this._possibleLoopAreaSelection.clear();
            this.render()
        },
        selectPossibleLoopArea: function(W, q, Z, Y) {
            var X = this._possibleLoopAreaSelection.refresh(W, q, Z, Y);
            if (X) {
                this.render()
            }
        },
        getPossibleLoopSelection: function() {
            return this._possibleLoopAreaSelection
        },
        getPossibleLoopSelectionRange: function() {
            return this._possibleLoopAreaSelection.getSelectedRange()
        },
        computeStaveWidth: function() {
            return this.width - this.borderSpace - this.ghostSpace
        },
        showGhostMeasures: function(q) {
            this.ghostMeasuresVisible = q
        },
        highlightPositionByCoords: function(q, Y, W) {
            var X = null;
            if (q > 0 && Y > 0) {
                X = this.getTrackPositionXY(q, Y)
            }
            this._highlightPositionByPosition(X)
        },
        highlightPositionByIndexes: function(Y, W, q) {
            var X;
            if (Y != -1 && W != -1) {
                X = new V.TrackPosition(Y, W)
            } else {
                X = null
            }
            this._highlightPositionByPosition(X, q)
        },
        _highlightPositionByPosition: function(Y, q) {
            this.highlightPositionColor = q;
            var W = false;
            var X = false;
            if (Y != null) {
                if (this._highlightPosition != null) {
                    if (!this._highlightPosition.equal(Y)) {
                        W = true;
                        X = true
                    }
                } else {
                    X = true
                }
            } else {
                if (this._highlightPosition != null) {
                    W = true
                }
            }
            if (W) {
                this._highlightPosition = null
            }
            if (X) {
                this._highlightPosition = Y
            }
            if (W || X) {
                this.render()
            }
        },
        getHighlightStaveElement: function() {
            if (this._highlightPosition == null) {
                return null
            } else {
                if (this._highlightPosition.beatIndex == -1) {
                    return this.getStaveMeasure(this._highlightPosition.measureIndex)
                } else {
                    return this.getStaveBeatByIndex(this._highlightPosition.measureIndex, this._highlightPosition.beatIndex)
                }
            }
        },
        highlightActiveNotes: function(q) {
            this.highlightNotes = q
        },
        animateCursor: function(W, q) {
            if (W == null) {
                W = 1
            }
            this.cursor.startAnimation(W);
            if (this._cursorTimer == 0) {
                this._cursorTimer = window.requestAnimationFrame(s(this, this.animateCursorStep))
            }
        },
        animateCursorStep: function(q) {
            if (this.cursor.animationActive) {
                this._cursorCanvas.clear();
                this.cursor.animStep();
                this.renderCursor(this._cursorCanvas);
                window.requestAnimationFrame(s(this, this.animateCursorStep))
            } else {
                window.cancelAnimationFrame(this._cursorTimer);
                this._cursorTimer = 0
            }
            return true
        },
        stopAnimation: function() {
            this.moveToBeatIndex(this._currentMeasureIndex, this._currentBeatIndex)
        },
        animationY: function(X, q, Y) {
            var aa = this;
            if (Y) {
                this._scrollTimer.stop();
                this._scrollTimer = new m.Timer(u.model.Tablature.ANIMATION_TIME_STEP);
                var Z = X.y;
                var ab = new Date().getTime();
                if (Z == q) {
                    return
                }
                this._scrollTimer.run = function() {
                    var ad = false;
                    var ac = new Date().getTime() - ab;
                    var ae = aa.easeOutQuad(ac, Z, q - Z, u.model.Tablature.SCROLL_ANIMATION_TIME);
                    if (Z < q && ae >= q || Z > q && ae <= q || ac > u.model.Tablature.SCROLL_ANIMATION_TIME) {
                        ae = q;
                        ad = true
                    }
                    X.y = ae;
                    aa.render();
                    if (ad) {
                        aa._scrollTimer.stop()
                    }
                }
            } else {
                var W = X.y;
                X.y = q;
                this.render();
                return
            }
        },
        easeInQuad: function(W, q, Y, X) {
            W = W / X;
            return Y * W * W + q
        },
        easeOutQuad: function(W, q, Y, X) {
            W = W / X;
            return -Y * W * (W - 2) + q
        },
        checkChordClick: function(q, aa) {
            var Y = null;
            aa += this.viewPort.y;
            var X = 0;
            var W = this.chords;
            while (X < W.length) {
                var Z = W[X];
                ++X;
                if (q >= Z.x && q <= Z.x + Z.width && aa >= Z.y && aa <= Z.y + Z.height) {
                    Y = Z;
                    break
                }
            }
            return Y
        },
        addChord: function(q) {
            if (this._listenerChordPainterMethod != null) {
                this._listenerChordPainterMethod()
            }
            this.chords.push(q)
        },
        listenChordPainter: function(q) {
            this._listenerChordPainterMethod = q
        },
        getCursorCanvas: function() {
            return this._cursorCanvas
        },
        __class__: u.model.Tablature
    });
    u.model.TablatureCursor = function(q) {
        u.model.VisualElement.call(this);
        this.stepTime = 20;
        this._tab = q;
        this.set_width(30)
    };
    p["tabRender.model.TablatureCursor"] = u.model.TablatureCursor;
    u.model.TablatureCursor.__name__ = ["tabRender", "model", "TablatureCursor"];
    u.model.TablatureCursor.__super__ = u.model.VisualElement;
    u.model.TablatureCursor.prototype = v(u.model.VisualElement.prototype, {
        resetAnimation: function() {
            this.animationActive = false;
            this.animationTime = 0;
            this.elapsedTime = 0;
            this.phase = 0;
            if (this.currentBeat != null) {
                this.x = this.currentBeat.x;
                this.y = this.currentBeat.stave.lineOffset[0];
                this.set_height(this.currentBeat.stave.height)
            }
        },
        animStep: function() {
            if (this.animationTime <= this.elapsedTime) {
                this.animationActive = false
            }
            if (this.animationActive) {
                this.elapsedTime = Math.floor(m.Timer.stamp() * 1000 - this._startTime);
                this.phase = this.elapsedTime / this.animationTime;
                if (this.phase > 1) {
                    this.phase = 1
                }
                this.x = this.currentBeat.x + this._totalDistance * this.phase
            }
        },
        startAnimation: function(q) {
            this.nextBeat = this.getNextStaveBeat();
            if (this.animationActive) {
                this.resetAnimation()
            }
            if (this.nextBeat != null) {
                this.animationActive = true;
                this.animationTime = A["int"]((this.nextBeat.beat.getStartInMilliSeconds() - this.currentBeat.beat.getStartInMilliSeconds()) / q);
                this._totalDistance = this.nextBeat.x - this.x;
                if (this._totalDistance < 0) {
                    this._totalDistance = this.currentBeat.stave.width - this.x
                }
                this._startTime = Math.floor(m.Timer.stamp() * 1000)
            }
        },
        getNextStaveBeat: function() {
            var q = this.currentBeat.beat.measure.track.getNextBeat(this._tab.getCurrentMeasureIndex(), this._tab.getCurrentBeatIndex());
            if (q != null) {
                var W = this._tab.getStaveBeat(q);
                return W
            }
            return null
        },
        __class__: u.model.TablatureCursor
    });
    u.model.TablatureTrack = function(q, W) {
        u.model.VisualContainer.call(this);
        this.tablature = q;
        this.set_width(this.tablature.width);
        this.set_height(this.tablature.height);
        this._song = this.tablature.getSong();
        this._track = this._song.tracks[W];
        this.staves = new Array();
        this._needLayout = true
    };
    p["tabRender.model.TablatureTrack"] = u.model.TablatureTrack;
    u.model.TablatureTrack.__name__ = ["tabRender", "model", "TablatureTrack"];
    u.model.TablatureTrack.__super__ = u.model.VisualContainer;
    u.model.TablatureTrack.prototype = v(u.model.VisualContainer.prototype, {
        construct: function() {
            var ae = 0;
            var X = this._track;
            var ad = 0;
            var aj = this.staves;
            while (ad < aj.length) {
                var ab = aj[ad];
                ++ad;
                ab.clearCache()
            }
            this.staves = new Array();
            this.ghostStaves = new Array();
            while (ae < X.measures.length) {
                var Z = this.addStave(X.stringCount());
                ae = this.fillStave(Z, X, ae)
            }
            var W = 0;
            var ac = 0;
            var ai = this.staves.length;
            while (ac < ai) {
                var aa = ac++;
                var Y = this.staves[aa];
                var q = 0;
                var ah = Y.measures;
                while (q < ah.length) {
                    var ag = ah[q];
                    ++q;
                    if (ag.measure.tempo().value != W || ag.measure.number() == 1) {
                        W = ag.measure.tempo().value;
                        var al = new u.model.BpmMark(Y);
                        al.value = W;
                        ag.bpm = al;
                        Y.addElement(al)
                    }
                }
                var af = this.addGhostStave(X.stringCount());
                if (aa < this.staves.length - 1 && this.staves[aa + 1].measures.length > 0) {
                    var ak = af.addMeasure(this.staves[aa + 1].measures[0].measure)
                }
                Y.finish()
            }
        },
        addStave: function(W) {
            var q = new u.model.Stave(this.tablature, W);
            this.staves.push(q);
            q.index = this.staves.length - 1;
            q.set_width(this.tablature.computeStaveWidth());
            this._needLayout = true;
            return q
        },
        addGhostStave: function(W) {
            var q = new u.model.Stave(this.tablature, W);
            this.ghostStaves.push(q);
            q.index = this.ghostStaves.length - 1;
            q.set_width(this.tablature.ghostSpace);
            this._needLayout = true;
            return q
        },
        fillStave: function(q, Y, ab) {
            var Z = ab;
            var X = 0;
            var aa;
            var W;
            q.startMeasureIndex = ab;
            do {
                aa = Y.measures[Z];
                q.endMeasureIndex = Z;
                Z++;
                W = q.addMeasure(aa);
                X += W.estimateWidth()
            } while (X < q.width && Z < Y.measures.length);
            if (Z - ab > 1 && X > q.width) {
                q.removeElment(W);
                Z--;
                q.endMeasureIndex--
            }
            return Z
        },
        doLayout: function() {
            if (this._needLayout) {
                u.model.VisualContainer.prototype.doLayout.call(this);
                this.construct();
                var Y = this.tablature.headerOffset;
                var X = this.tablature.computeStaveWidth();
                var Z = 0;
                var ac = this.staves.length;
                while (Z < ac) {
                    var W = Z++;
                    var q = this.staves[W];
                    var aa = this.ghostStaves[W];
                    q.y = Y;
                    aa.y = Y;
                    q.x = this.tablature.borderSpace;
                    aa.x = q.x + X;
                    q.minWidth = q.estimateWidth();
                    if (q.minWidth < X) {
                        q.set_width(X);
                        var ab = q.width / q.minWidth;
                        q.measureScale = ab
                    }
                    q.set_height(q.estimateHeight());
                    aa.set_height(q.height);
                    Y += q.height;
                    q.doLayout()
                }
                this.set_height(Y);
                this._needLayout = false
            }
        },
        getTrack: function() {
            return this._track
        },
        getStaveInPosition: function(W, Z) {
            var Y = 0;
            var X = this.staves;
            while (Y < X.length) {
                var q = X[Y];
                ++Y;
                if (W > q.x && W < q.x + q.width && Z > q.y && Z < q.y + q.height) {
                    return q
                }
            }
            return null
        },
        getStaveBeatInPosition: function(X, Z) {
            Z += this.viewPort.y;
            X += this.viewPort.x;
            var Y = this.getStaveInPosition(X, Z);
            if (Y != null) {
                var W = Y.getMeasureInPosition(X, Z);
                if (W != null) {
                    var q = W.getBeatInPosition(X, Z);
                    if (q == null) {
                        return W.staveBeats[0]
                    } else {
                        return q
                    }
                }
            }
            return null
        },
        __class__: u.model.TablatureTrack
    });
    u.model.TextElement = function(X, q, W) {
        if (W == null) {
            W = 1
        }
        if (X == null) {
            X = ""
        }
        u.model.VisualElement.call(this);
        if (q == null) {
            q = new P.graphics.TextFormat()
        }
        this._originalFormat = q;
        this.format = u.model.TextElement.copyFormat(q);
        this.format.size = q.size * W;
        this.set_text(X)
    };
    p["tabRender.model.TextElement"] = u.model.TextElement;
    u.model.TextElement.__name__ = ["tabRender", "model", "TextElement"];
    u.model.TextElement.copyFormat = function(q) {
        var W = new P.graphics.TextFormat();
        W.color = q.color;
        W.font = q.font;
        W.size = q.size;
        W.bold = q.bold;
        W.italic = q.italic;
        W.fontName = q.fontName;
        W.background = q.background;
        W.backgroundColor = q.backgroundColor;
        W.backgroundOffset = q.backgroundOffset;
        W.leading = q.leading;
        W.leftMargin = q.leftMargin;
        W.align = q.align;
        return W
    };
    u.model.TextElement.drawScaledText = function(X, aa, Y, q, ab, Z) {
        var W = u.model.TextElement.copyFormat(Y);
        W.size *= Z;
        W.backgroundOffset *= Z;
        return X.drawText(aa, W, q, ab)
    };
    u.model.TextElement.__super__ = u.model.VisualElement;
    u.model.TextElement.prototype = v(u.model.VisualElement.prototype, {
        set_text: function(q) {
            this._text = q;
            return q
        },
        doLayout: function() {
            if (this._text != null && this._text.length > 0) {
                this.format.size = this._originalFormat.size * this._scale;
                this.set_width(this.format.size * 1.5);
                this.set_height(this.format.size * 1.1)
            }
            u.model.VisualElement.prototype.doLayout.call(this)
        },
        get_text: function() {
            return this._text
        },
        measure: function(q) {
            return q.getTextBounds(this._text, this.format)
        },
        __class__: u.model.TextElement,
        __properties__: v(u.model.VisualElement.prototype.__properties__, {
            set_text: "set_text",
            get_text: "get_text"
        })
    });
    u.model.VisualEntity = {
        __ename__: true,
        __constructs__: ["HeadBpm", "BeatText", "RegularBpm", "BarText", "AlternativeEnd", "Chord", "LeftHandVibrato", "FadeIn", "FadeOut", "BeatEffectText", "LetRing", "PalmMute", "PreBendSpaceForNonExistingBend", "Bend"]
    };
    u.model.VisualEntity.HeadBpm = ["HeadBpm", 0];
    u.model.VisualEntity.HeadBpm.toString = l;
    u.model.VisualEntity.HeadBpm.__enum__ = u.model.VisualEntity;
    u.model.VisualEntity.BeatText = ["BeatText", 1];
    u.model.VisualEntity.BeatText.toString = l;
    u.model.VisualEntity.BeatText.__enum__ = u.model.VisualEntity;
    u.model.VisualEntity.RegularBpm = ["RegularBpm", 2];
    u.model.VisualEntity.RegularBpm.toString = l;
    u.model.VisualEntity.RegularBpm.__enum__ = u.model.VisualEntity;
    u.model.VisualEntity.BarText = ["BarText", 3];
    u.model.VisualEntity.BarText.toString = l;
    u.model.VisualEntity.BarText.__enum__ = u.model.VisualEntity;
    u.model.VisualEntity.AlternativeEnd = ["AlternativeEnd", 4];
    u.model.VisualEntity.AlternativeEnd.toString = l;
    u.model.VisualEntity.AlternativeEnd.__enum__ = u.model.VisualEntity;
    u.model.VisualEntity.Chord = ["Chord", 5];
    u.model.VisualEntity.Chord.toString = l;
    u.model.VisualEntity.Chord.__enum__ = u.model.VisualEntity;
    u.model.VisualEntity.LeftHandVibrato = ["LeftHandVibrato", 6];
    u.model.VisualEntity.LeftHandVibrato.toString = l;
    u.model.VisualEntity.LeftHandVibrato.__enum__ = u.model.VisualEntity;
    u.model.VisualEntity.FadeIn = ["FadeIn", 7];
    u.model.VisualEntity.FadeIn.toString = l;
    u.model.VisualEntity.FadeIn.__enum__ = u.model.VisualEntity;
    u.model.VisualEntity.FadeOut = ["FadeOut", 8];
    u.model.VisualEntity.FadeOut.toString = l;
    u.model.VisualEntity.FadeOut.__enum__ = u.model.VisualEntity;
    u.model.VisualEntity.BeatEffectText = ["BeatEffectText", 9];
    u.model.VisualEntity.BeatEffectText.toString = l;
    u.model.VisualEntity.BeatEffectText.__enum__ = u.model.VisualEntity;
    u.model.VisualEntity.LetRing = ["LetRing", 10];
    u.model.VisualEntity.LetRing.toString = l;
    u.model.VisualEntity.LetRing.__enum__ = u.model.VisualEntity;
    u.model.VisualEntity.PalmMute = ["PalmMute", 11];
    u.model.VisualEntity.PalmMute.toString = l;
    u.model.VisualEntity.PalmMute.__enum__ = u.model.VisualEntity;
    u.model.VisualEntity.PreBendSpaceForNonExistingBend = ["PreBendSpaceForNonExistingBend", 12];
    u.model.VisualEntity.PreBendSpaceForNonExistingBend.toString = l;
    u.model.VisualEntity.PreBendSpaceForNonExistingBend.__enum__ = u.model.VisualEntity;
    u.model.VisualEntity.Bend = ["Bend", 13];
    u.model.VisualEntity.Bend.toString = l;
    u.model.VisualEntity.Bend.__enum__ = u.model.VisualEntity;
    u.model.VisualEntityHelper = function() {};
    p["tabRender.model.VisualEntityHelper"] = u.model.VisualEntityHelper;
    u.model.VisualEntityHelper.__name__ = ["tabRender", "model", "VisualEntityHelper"];
    u.model.VisualEntityHelper.getEntityHeight = function(W) {
        var q = 0;
        switch (W[1]) {
            case 0:
                q = 20;
                break;
            case 1:
                q = 12;
                break;
            case 2:
                q = 20;
                break;
            case 3:
                q = 16;
                break;
            case 4:
                q = 12;
                break;
            case 5:
                q = 20;
                break;
            case 6:
                q = 12;
                break;
            case 7:
                q = 18;
                break;
            case 8:
                q = 18;
                break;
            case 9:
                q = 14;
                break;
            case 10:
                q = 14;
                break;
            case 11:
                q = 14;
                break;
            case 12:
                q = 5;
                break;
            case 13:
                q = 20;
                break
        }
        return q
    };
    u.model.VisualEntityHelper.getEntityMapAboveStave = function(Y) {
        var q = new m.ds.EnumValueMap();
        q.set(u.model.VisualEntity.HeadBpm, false);
        q.set(u.model.VisualEntity.BeatText, false);
        q.set(u.model.VisualEntity.RegularBpm, false);
        q.set(u.model.VisualEntity.BarText, false);
        q.set(u.model.VisualEntity.AlternativeEnd, false);
        q.set(u.model.VisualEntity.Chord, false);
        q.set(u.model.VisualEntity.LeftHandVibrato, false);
        q.set(u.model.VisualEntity.FadeIn, false);
        q.set(u.model.VisualEntity.FadeOut, false);
        q.set(u.model.VisualEntity.BeatEffectText, false);
        q.set(u.model.VisualEntity.LetRing, false);
        q.set(u.model.VisualEntity.PalmMute, false);
        q.set(u.model.VisualEntity.PreBendSpaceForNonExistingBend, true);
        q.set(u.model.VisualEntity.Bend, false);
        var Z = 0;
        var af = Y.measures;
        while (Z < af.length) {
            var ad = af[Z];
            ++Z;
            if (!q.get(u.model.VisualEntity.HeadBpm) && ad.measure.header.number == 1) {
                q.set(u.model.VisualEntity.HeadBpm, true)
            }
            if (!q.get(u.model.VisualEntity.RegularBpm) && ad.bpm != null && ad.measure.header.number != 1) {
                q.set(u.model.VisualEntity.RegularBpm, true)
            }
            if (!q.get(u.model.VisualEntity.BarText) && ad.measure.header.text != null && ad.measure.header.text.title != null && ad.measure.header.text.title.length > 0) {
                q.set(u.model.VisualEntity.BarText, true)
            }
            if (!q.get(u.model.VisualEntity.AlternativeEnd) && ad.measure.header.alterEndString().length > 0) {
                q.set(u.model.VisualEntity.AlternativeEnd, true)
            }
            var ae = 0;
            var ac = ad.staveBeats;
            while (ae < ac.length) {
                var W = ac[ae];
                ++ae;
                if (!q.get(u.model.VisualEntity.Chord) && W.beat.effect.chord != null) {
                    q.set(u.model.VisualEntity.Chord, true)
                }
                if (!q.get(u.model.VisualEntity.BeatText) && W.beat.text != null && W.beat.text.length > 0) {
                    q.set(u.model.VisualEntity.BeatText, true)
                }
                if (!q.get(u.model.VisualEntity.FadeIn) && W.beat.effect.fadeIn) {
                    q.set(u.model.VisualEntity.FadeIn, true)
                }
                if (!q.get(u.model.VisualEntity.FadeOut) && W.beat.effect.fadeOut) {
                    q.set(u.model.VisualEntity.FadeOut, true)
                }
                if (!q.get(u.model.VisualEntity.BeatEffectText) && W.effectText != null && W.effectText.length > 0) {
                    q.set(u.model.VisualEntity.BeatEffectText, true)
                }
                var ab = 0;
                var aa = W.notes;
                while (ab < aa.length) {
                    var X = aa[ab];
                    ++ab;
                    if (!q.get(u.model.VisualEntity.LeftHandVibrato) && X.note.effect.vibrato) {
                        q.set(u.model.VisualEntity.LeftHandVibrato, true)
                    }
                    if (!q.get(u.model.VisualEntity.LetRing) && X.note.effect.letRing) {
                        q.set(u.model.VisualEntity.LetRing, true)
                    }
                    if (!q.get(u.model.VisualEntity.PalmMute) && X.note.effect.palmMute) {
                        q.set(u.model.VisualEntity.PalmMute, true)
                    }
                    if (X.note.effect.bend != null) {
                        q.set(u.model.VisualEntity.Bend, true);
                        if (Y.maxBendValue < X.note.effect.bend.value) {
                            Y.maxBendValue = X.note.effect.bend.value
                        }
                    }
                }
            }
        }
        if (q.get(u.model.VisualEntity.Bend)) {
            q.set(u.model.VisualEntity.PreBendSpaceForNonExistingBend, false)
        }
        return q
    };
    u.model.VisualEntityHelper.prototype = {
        __class__: u.model.VisualEntityHelper
    };
    u.painters = {};
    u.painters.BasePainter = function() {};
    p["tabRender.painters.BasePainter"] = u.painters.BasePainter;
    u.painters.BasePainter.__name__ = ["tabRender", "painters", "BasePainter"];
    u.painters.BasePainter.prototype = {
        draw: function(Y, ac, Z) {
            if (Z == null) {
                Z = false
            }
            Y.setLineColor(ac.lineColor);
            if (h.Boot.__instanceof(ac, u.model.VisualContainer)) {
                var W = ac;
                var ad = 0;
                var ae = W.children;
                while (ad < ae.length) {
                    var X = ae[ad];
                    ++ad;
                    if (h.Boot.__instanceof(X, u.model.TextElement)) {
                        var q = W.viewPort;
                        if (X.isInViewPort(q)) {
                            var ab = X.x;
                            var aa = X.y;
                            if (q != null) {
                                ab -= q.x;
                                aa -= q.y
                            }
                            this.drawTextField(Y, X, ab, aa)
                        }
                    }
                }
            }
            return true
        },
        drawTextField: function(W, X, q, Y) {
            W.drawText(X.get_text(), X.format, q, Y)
        },
        __class__: u.painters.BasePainter
    };
    u.painters.BeatPainter = function() {
        u.painters.BasePainter.call(this);
        this._notePainter = new u.painters.NotePainter()
    };
    p["tabRender.painters.BeatPainter"] = u.painters.BeatPainter;
    u.painters.BeatPainter.__name__ = ["tabRender", "painters", "BeatPainter"];
    u.painters.BeatPainter.__super__ = u.painters.BasePainter;
    u.painters.BeatPainter.prototype = v(u.painters.BasePainter.prototype, {
        draw: function(W, ad, Z) {
            if (Z == null) {
                Z = false
            }
            u.painters.BasePainter.prototype.draw.call(this, W, ad);
            var q = ad;
            if (q == null) {
                return true
            }
            var aj = q.stave;
            var Y = aj.tablature;
            var ab = Y.getScale();
            var af = true;
            this._beatGroupBarHeight = aj.beatGroupBarHeight * 0.6;
            var ae = 0;
            var ah = q.notes;
            while (ae < ah.length) {
                var X = ah[ae];
                ++ae;
                if (X.note.isTiedNote) {
                    af = false;
                    break
                }
            }
            if (q.beat.isRestBeat() && af && !Y.beginnerMode) {
                this.drawPause(W, q, ab)
            } else {
                var ag = 0;
                var ac = q.notes;
                while (ag < ac.length) {
                    var aa = ac[ag];
                    ++ag;
                    this._notePainter.draw(W, aa, Z)
                }
                W.setLineColor(q.stave.effectsLineColor);
                if (!Y.beginnerMode) {
                    if (q.effectText.length > 0) {
                        this.drawEffectText(W, q)
                    }
                    if (Y.drawDurations) {
                        if (q.tupletPrev != null && q.tupletNext == null) {
                            this.drawTuplet(W, q)
                        }
                    }
                }
            }
            W.setLineColor(q.stave.effectsLineColor);
            if (!Y.beginnerMode && Y.drawDurations) {
                var ai = 0;
                if (q.prevInGroup != null && q.nextInGroup == null) {
                    this.drawGroupLine(W, q)
                }
                this.drawBeatStick(W, q)
            }
            if (!Z) {
                if (q.beat.effect.chord != null) {
                    this._drawChord(W, q, ab)
                }
                if (q.beat.text != null && q.beat.text.length > 0) {
                    this._drawBeatText(W, q, ab)
                }
                if (q.beat.get_lyrics() != null && q.beat.get_lyrics().length > 0) {
                    u.model.TextElement.drawScaledText(W, q.beat.get_lyrics(), Y.lyricsTextFormat, q.x, aj.lyricsOffset, ab)
                }
            }
            if (q.beat.effect.stroke.direction != 0) {
                this.drawStroke(W, q, ab)
            }
            return true
        },
        _drawChord: function(X, W, aa) {
            var ac = W.stave.getVisualEntityOffset(u.model.VisualEntity.Chord) * aa;
            u.model.TextElement.drawScaledText(X, W.beat.effect.chord.name, W.beat.effect.chord.auto || W.beat.effect.chord.noteCount() == 0 ? W.stave.tablature.autoChordTextFormat : W.stave.tablature.chordTextFormat, W.x, ac, aa);
            if (!W.beat.effect.chord.auto && W.beat.effect.chord.noteCount() > 0) {
                var Y = new u.model.TextElement(W.beat.effect.chord.name, W.stave.tablature.chordTextFormat);
                var Z = Y.measure(X);
                var q = W.beat.measure.track.strings.map(function(ad) {
                    return ad.value
                });
                q.reverse();
                var ab = {
                    name: W.beat.effect.chord.name,
                    firstFret: W.beat.effect.chord.firstFret,
                    strings: W.beat.effect.chord.strings,
                    trackStrings: q,
                    x: W.x + W.stave.x - Z.width / 2,
                    y: ac * aa + W.stave.y,
                    width: Z.width * aa,
                    height: Z.height * aa
                };
                W.stave.tablature.addChord(ab)
            }
        },
        _drawBeatText: function(W, q, X) {
            u.model.TextElement.drawScaledText(W, q.beat.text, q.stave.tablature.effectTextFormat, q.x, q.stave.getVisualEntityOffset(u.model.VisualEntity.BeatText) * X, q.stave.tablature.getScale())
        },
        drawPause: function(X, W, ab) {
            var q = W.stave;
            var Y = W.beat.voices[0].duration.value;
            var aa = "";
            var ac = q.lineOffset[0];
            ac += (q.lineOffset[q.lineNumber - 1] - ac) / 2;
            switch (Y) {
                case 1:
                    aa = "M 0 0 L 10 0 L 10 4 L 0 4 L 0 0 z ";
                    ac = q.lineOffset[2];
                    break;
                case 2:
                    aa = "M 0 0 L 10 0 L 10 4 L 0 4 L 0 0 z ";
                    ac = q.lineOffset[3] - 2.8 * ab;
                    break;
                case 4:
                    aa = "M 2.4 0.04 C 4.3 2.23 6.19 4.42 8.09 6.61 6.57 7.75 5.58 9.43 4.76 11.11 c -0.52 1.6 0.26 3.29 1.29 4.5 0.24 0.66 2.07 1.26 1.03 1.93 -1.31 0.03 -2.84 -0.37 -3.95 0.55 -0.77 0.84 -0.45 2.17 0.21 2.97 0.14 0.66 1.69 1.33 1.09 1.84 C 3.38 22.69 2.74 21.73 1.92 21.12 1.1 20.27 0.05 19.37 0 18.1 0 16.77 1.21 15.64 2.52 15.61 3.61 15.48 4.75 15.77 5.64 16.42 3.91 14.2 2.18 11.98 0.46 9.77 1.95 8.55 2.86 6.78 3.55 5.02 3.88 3.53 2.92 2.2 2.17 1.01 1.62 0.63 1.35 -0.35 2.4 0.04 z";
                    break;
                case 8:
                    aa = "M 2.19 0 C 3.49 -0.03 4.76 1.37 4.32 2.66 4.26 3.18 3.53 3.64 3.47 3.89 4.27 4.3 5.11 3.75 5.7 3.24 6.67 2.38 7.28 1.18 7.97 0.11 8.48 -0.19 8.34 0.36 8.25 0.65 7.15 5.44 6.06 10.22 4.96 15 4.63 15 4.3 15 3.97 15 4.95 11.06 5.93 7.12 6.92 3.18 6.24 4.45 4.71 4.96 3.34 4.89 2.47 4.82 1.53 4.65 0.84 4.09 -0.23 3.23 -0.33 1.4 0.74 0.52 1.14 0.16 1.66 0.01 2.19 0 z";
                    break;
                case 16:
                    aa = "M 4.58 12.12 C 5.95 11.59 6.78 10.24 7.35 8.97 7.83 7.03 8.3 5.09 8.77 3.15 8.07 4.45 6.51 4.93 5.11 4.84 4.52 4.91 3.98 4.62 3.43 4.44 2.32 4.03 1.69 2.76 1.97 1.62 2.28 0.02 4.57 -0.55 5.64 0.63 6.55 1.43 6.51 3.05 5.45 3.71 5.36 4.19 6.59 3.99 6.98 3.66 8.23 2.89 8.83 1.47 9.7 0.35 9.87 -0.15 10.51 0 10.17 0.49 8.42 7.99 6.67 15.5 4.91 23 4.6 23 4.29 23 3.98 23 4.92 19.1 5.86 15.19 6.8 11.29 6.13 12.56 4.62 13.09 3.25 13 2.02 12.96 0.61 12.44 0.14 11.2 -0.3 10.11 0.24 8.69 1.41 8.35 2.54 7.9 3.92 8.55 4.28 9.72 4.57 10.55 4.21 11.58 3.4 11.97 c 0.39 0.12 0.78 0.29 1.18 0.15 z";
                    break;
                case 32:
                    aa = "M 6.47 12.03 C 8.29 11.3 9.21 9.34 9.56 7.51 9.92 6.04 10.27 4.56 10.63 3.08 9.64 4.92 7.15 5.09 5.38 4.46 3.78 3.93 3.21 1.56 4.57 0.49 5.72 -0.52 7.61 0.15 8.07 1.55 8.6 2.43 7.48 3.5 7.35 3.83 8.35 4.33 9.38 3.44 10 2.71 c 0.66 -0.83 1.13 -1.9 1.82 -2.66 0.56 -0.12 0.05 0.61 0.07 0.91 C 9.56 10.97 7.22 20.99 4.89 31 4.57 30.92 3.75 31.23 4.04 30.68 4.95 26.9 5.86 23.12 6.77 19.35 5.77 21.17 3.29 21.4 1.53 20.67 0.07 20.13 -0.56 18.04 0.6 16.92 c 1.08 -1.13 3.22 -0.66 3.66 0.87 0.53 0.87 -0.54 1.99 -0.73 2.28 1.18 0.47 2.29 -0.59 2.93 -1.48 0.66 -0.79 0.95 -1.76 1.15 -2.75 C 7.98 14.32 8.35 12.78 8.72 11.25 7.96 12.7 6.22 13.02 4.72 12.93 3.53 12.75 2.13 12.09 1.95 10.75 1.57 9.33 2.89 7.91 4.33 8.13 5.89 8.21 6.92 10.33 5.77 11.51 c -1.03 0.58 0.16 0.67 0.7 0.52 z";
                    break;
                case 64:
                    aa = "M 6.61 20.61 C 8.85 19.73 9.53 17.2 9.98 15.06 10.25 13.86 10.53 12.67 10.81 11.47 9.73 13.44 6.96 13.6 5.13 12.7 3.51 11.89 3.43 9.15 5.21 8.5 6.88 7.68 9.03 9.67 8.14 11.37 7.48 12.01 7.22 12.47 8.36 12.31 9.96 11.87 11.03 10.26 11.43 8.72 11.89 6.88 12.35 5.04 12.8 3.2 11.95 4.77 9.95 5.12 8.33 4.85 6.95 4.62 5.61 3.49 5.82 1.97 5.87 0.05 8.65 -0.7 9.75 0.8 10.95 1.74 9.66 3.52 9.62 3.97 11.16 4.33 12.19 2.71 12.93 1.6 13.18 1.26 14.26 -0.61 14.24 0.38 11.16 13.59 8.07 26.79 4.99 40 c -0.52 0.01 -1.23 0.16 -0.81 -0.58 0.91 -3.78 1.82 -7.55 2.73 -11.33 -1.12 2.02 -4.06 2.2 -5.86 1.06 -1.46 -0.88 -1.41 -3.42 0.28 -4.01 1.6 -0.79 3.65 0.92 3.01 2.62 -0.29 0.74 -1.37 1.25 -0.01 1.2 1.47 -0.28 2.42 -1.65 3.07 -2.89 C 7.89 23.99 8.41 21.91 8.91 19.82 8.06 21.39 6.06 21.74 4.45 21.47 3.08 21.23 1.74 20.1 1.96 18.59 c 0.05 -1.91 2.83 -2.68 3.93 -1.17 0.83 0.89 0.61 2.48 -0.48 3.06 0.39 0.2 0.78 0.3 1.2 0.13";
                    break
            }
            var Z = W.getNoteTextFormat();
            X.setLineThickness(0);
            X.beginFill(Z.color);
            X.drawSvgPath(aa, W.x, ac, 0.7 * ab, 0.7 * ab);
            X.endFill();
            X.setLineThickness(1);
            if (W.beat.voices[0].duration.isDotted) {
                X.drawCircle(W.x + 10 * ab, ac, 0.5 * ab)
            }
            if (W.beat.voices[0].duration.isDoubleDotted) {
                X.drawCircle(W.x + 10 * ab, ac, 0.5 * ab);
                X.drawCircle(W.x + 14 * ab, ac, 0.5 * ab)
            }
        },
        drawGroupLine: function(X, W) {
            var ab = W.stave;
            var Y = ab.tablature;
            var Z = Y.getScale();
            var ad = this._beatGroupBarHeight;
            var ag = ab.beatGroupBarOffset;
            var ac = W.prevInGroup;
            X.setLineThickness(u.painters.BeatPainter.DURATION_LINE_THICKNESS * Z);
            while (ac != null) {
                var ai;
                if (W.beat.isRestBeat()) {
                    ai = 0
                } else {
                    ai = W.beat.voices[0].duration.value >> 3
                }
                var af;
                if (ac.beat.isRestBeat()) {
                    af = 0
                } else {
                    af = ac.beat.voices[0].duration.value >> 3
                }
                var aa = 0;
                var ah;
                if (af == 0) {
                    ah = W.x
                } else {
                    ah = ac.x
                }
                var q;
                q = W.x + (af == 0 ? u.painters.BeatPainter.SINGLE_BEAT_LINE_DURATION_WIDTH : 0);
                while (ai > 0) {
                    if (af >= ai) {
                        var ae = ag + ad - (ai - 1) * (u.painters.BeatPainter.DURATION_LINE_THICKNESS + u.painters.BeatPainter.DURATION_LINE_SEPARATOR_THICKNESS) * Z;
                        X.moveTo(ah, ae);
                        X.lineTo(q, ae)
                    }
                    ai >>= 1;
                    aa++
                }
                W = ac;
                ac = W.prevInGroup
            }
            X.setLineThickness(1)
        },
        drawBeatStick: function(Y, X) {
            if (X.beat.isRestBeat() || X.beat.voices[0].duration.value == V.Duration.WHOLE) {
                return
            }
            Y.setLineThickness(1);
            Y.setLineColor(X.stave.effectsLineColor);
            var af = X.stave;
            var aa = af.tablature;
            var ad = aa.getScale();
            var ag = this._beatGroupBarHeight + 1;
            var ab = X.beat.voices[0].duration.value >> 2;
            var ai = af.beatGroupBarOffset;
            var aj = X.x;
            if (ab > 0) {
                Y.moveTo(aj, ai);
                Y.lineTo(aj, ai + ag);
                ab >>= 1
            } else {
                Y.moveTo(aj, ai + ag / 2);
                Y.lineTo(aj, ai + ag)
            }
            var ak = 0;
            var Z = 1;
            if (X.nextInGroup != null) {
                ak = X.nextInGroup.beat.voices[0].duration.value >> 3
            }
            if (X.prevInGroup != null) {
                var ac = X.prevInGroup.beat.voices[0].duration.value >> 3;
                if (ac > ak) {
                    ak = ac;
                    Z = -Z
                }
            }
            var ae = ak;
            ab -= ak;
            Y.setLineThickness(u.painters.BeatPainter.DURATION_LINE_THICKNESS * ad);
            while (ab > 0) {
                var ah = ai + ag - ae * (u.painters.BeatPainter.DURATION_LINE_THICKNESS + 2 * u.painters.BeatPainter.DURATION_LINE_SEPARATOR_THICKNESS) * ad;
                Y.moveTo(aj, ah);
                Y.lineTo(aj + Z * u.painters.BeatPainter.SINGLE_BEAT_LINE_DURATION_WIDTH, ah);
                ab >>= 1;
                ae++
            }
            Y.setLineThickness(1);
            if (X.beat.voices[0].duration.isDotted) {
                var W = ai + ag - ae * (u.painters.BeatPainter.DURATION_LINE_THICKNESS + u.painters.BeatPainter.DURATION_LINE_SEPARATOR_THICKNESS) * ad;
                Y.drawCircle(aj + Z * u.painters.BeatPainter.SINGLE_BEAT_LINE_DURATION_WIDTH, W - 1.5, 0.5 * ad)
            }
            if (X.beat.voices[0].duration.isDoubleDotted) {
                var q = ai + ag - ae * 3 * ad;
                Y.drawCircle(aj + Z * u.painters.BeatPainter.SINGLE_BEAT_LINE_DURATION_WIDTH - 6, q - 1.5, 0.5 * ad);
                Y.drawCircle(aj + Z * u.painters.BeatPainter.SINGLE_BEAT_LINE_DURATION_WIDTH - 3, q - 1.5, 0.5 * ad)
            }
        },
        drawTuplet: function(X, W) {
            X.setLineThickness(1);
            X.setLineColor(W.stave.effectsLineColor);
            var ac = W.stave;
            var Y = ac.tablature;
            var aa = Y.getScale();
            var ab = W.tupletPrev;
            var ad = 2;
            while (ab.tupletPrev != null) {
                ab = ab.tupletPrev;
                ad++
            }
            var ae = ac.beatGroupBarOffset + (ac.beatGroupBarHeight - 6) * aa;
            var af = ab.x;
            var q = W.x;
            var Z = 3 * aa;
            X.moveTo(af, ae);
            X.lineTo(af, ae + Z);
            X.lineTo(q, ae + Z);
            X.lineTo(q, ae);
            u.model.TextElement.drawScaledText(X, ad == null ? "null" : "" + ad, Y.effectTextFormat, af + (q - af) / 2, ae + Z - 4.5, aa)
        },
        drawEffectText: function(X, W) {
            var q = W.stave;
            var Y = W.stave.getVisualEntityOffset(u.model.VisualEntity.BeatEffectText) * q.tablature.getScale();
            u.model.TextElement.drawScaledText(X, B.substr(W.effectText, 3, null), W.stave.tablature.effectTextFormat, W.x, Y, q.tablature.getScale())
        },
        drawStroke: function(Y, X, ab) {
            var W = this.getNoteOnMinString(X);
            var ac = this.getNoteOnMaxString(X);
            if (W == null || ac == null) {
                return
            }
            var q = X.x - 3 * ab;
            var aa = X.stave.linesOffset + ((ac.string - 1) * X.stave.lineHeight + X.stave.lineHeight / 2) * ab;
            var Z = X.stave.linesOffset + ((W.string - 1) * X.stave.lineHeight - X.stave.lineHeight / 2) * ab;
            Y.setLineColor(X.getNoteTextFormat().color);
            Y.moveTo(q, aa);
            Y.lineTo(q, Z);
            Y.beginFill(X.getNoteTextFormat().color);
            Y.setLineThickness(0);
            if (X.beat.effect.stroke.direction == u.painters.BeatPainter.STROKE_DIRECTION_DOWN) {
                Y.moveTo(q, Z);
                Y.lineTo(q - 2 * ab, Z + 7 * ab);
                Y.lineTo(q + 2 * ab, Z + 7 * ab);
                Y.lineTo(q, Z);
                Y.endFill()
            } else {
                Y.moveTo(q, aa);
                Y.lineTo(q - 2 * ab, aa - 7 * ab);
                Y.lineTo(q + 2 * ab, aa - 7 * ab);
                Y.lineTo(q, aa);
                Y.endFill()
            }
            Y.setLineThickness(1);
            Y.setLineColor(X.stave.effectsLineColor)
        },
        getNoteOnMinString: function(W) {
            var q = null;
            var X = null;
            var Z = 0;
            var Y = W.beat.voices[0].notes;
            while (Z < Y.length) {
                var aa = Y[Z];
                ++Z;
                if (q == null || aa.string < q) {
                    q = aa.string;
                    X = aa
                }
            }
            return X
        },
        getNoteOnMaxString: function(W) {
            var q = null;
            var X = null;
            var Z = 0;
            var Y = W.beat.voices[0].notes;
            while (Z < Y.length) {
                var aa = Y[Z];
                ++Z;
                if (q == null || aa.string > q) {
                    q = aa.string;
                    X = aa
                }
            }
            return X
        },
        __class__: u.painters.BeatPainter
    });
    u.painters.CursorPainter = function() {
        u.painters.BasePainter.call(this);
        this._beatPainter = new u.painters.BeatPainter()
    };
    p["tabRender.painters.CursorPainter"] = u.painters.CursorPainter;
    u.painters.CursorPainter.__name__ = ["tabRender", "painters", "CursorPainter"];
    u.painters.CursorPainter.__super__ = u.painters.BasePainter;
    u.painters.CursorPainter.prototype = v(u.painters.BasePainter.prototype, {
        draw: function(X, ac, Z) {
            if (Z == null) {
                Z = false
            }
            var ad = ac;
            var W = ad.currentBeat;
            if (W != null) {
                var ab = W.stave;
                var Y = ab.tablature;
                if (this._tmpCanv != null && this._tmpCanv.getType() != X.getType()) {
                    this._tmpCanv.dispose();
                    this._tmpCanv = null;
                    ad.clearCache()
                }
                this.checkCache(X, Y, ab);
                if (ab.isVisible()) {
                    W.isSelected = true;
                    if (this._tmpCanv == null) {
                        this._tmpCanv = X.createChild()
                    } else {
                        this._tmpCanv.clear()
                    }
                    this._tmpCanv.setWidth(ab.width);
                    this._tmpCanv.setHeight(ab.height);
                    var aa = Y.getScale();
                    var q = ad.drawCache;
                    if (ab.tablature.highlightNotes) {
                        this._beatPainter.draw(this._tmpCanv, W, true)
                    }
                    this._tmpCanv.draw(q, ad.x - 6 * aa, 0);
                    X.draw(this._tmpCanv, ab.x, ab.y - Y.viewPort.y);
                    W.isSelected = false
                }
            }
            return true
        },
        checkCache: function(W, X, Z) {
            var ad = X.cursor;
            var Y = X.getScale();
            if (ad.drawCache == null) {
                var q = W.createChild();
                ad.set_drawCache(q);
                q.setWidth(ad.width);
                q.setHeight(ad.height);
                q.setLineThickness(0);
                if (h.Boot.__instanceof(q, P.graphics.HtmlCanvas)) {
                    var aa = 4;
                    var ab = q;
                    ab.beginFill(X.cursorColor);
                    var ac;
                    ac = Z.getVisualEntityOffset(u.model.VisualEntity.Bend) - ((function(ag) {
                        var af;
                        var ae = Z.getEntityMapAboveStave();
                        af = ae.get(u.model.VisualEntity.Bend);
                        return af
                    }(this)) ? 0 : u.model.VisualEntityHelper.getEntityHeight(u.model.VisualEntity.PreBendSpaceForNonExistingBend) * Y);
                    ab.drawRect(aa * Y, ac * Y, 1.5 * Y, Z.height - ac * Y)
                }
                q.endFill()
            }
        },
        __class__: u.painters.CursorPainter
    });
    u.painters.HighlightPositionPainter = function() {
        u.painters.BasePainter.call(this)
    };
    p["tabRender.painters.HighlightPositionPainter"] = u.painters.HighlightPositionPainter;
    u.painters.HighlightPositionPainter.__name__ = ["tabRender", "painters", "HighlightPositionPainter"];
    u.painters.HighlightPositionPainter.__super__ = u.painters.BasePainter;
    u.painters.HighlightPositionPainter.prototype = v(u.painters.BasePainter.prototype, {
        draw: function(W, Y, q) {
            if (q == null) {
                q = false
            }
            if (h.Boot.__instanceof(Y, u.model.StaveBeat)) {
                var aa = Y;
                var Z = aa.measure;
                this.highlightMeasure(W, Z);
                this.highlightBeat(W, aa)
            } else {
                if (h.Boot.__instanceof(Y, u.model.StaveMeasure)) {
                    var X = Y;
                    this.highlightMeasure(W, X, X.stave.tablature.highlightPositionColor)
                }
            }
            return true
        },
        highlightMeasure: function(W, X, q) {
            if (q == null) {
                q = 0
            }
            W.setLineThickness(0);
            W.beginFill(q, q == 0 ? 0.1 : 0.2);
            W.drawRect(X.x + X.stave.x, X.y + X.stave.y - X.stave.tablature.viewPort.y, X.width, X.height);
            W.endFill();
            W.flush()
        },
        highlightBeat: function(q, W) {
            var X = W.stave.tablature.getScale();
            q.setLineThickness(0);
            q.beginFill(0, 0.1);
            q.drawRect(W.x + W.stave.x - 2 * X, W.measure.y + W.stave.y - W.stave.tablature.viewPort.y, 12 * X, W.measure.height);
            q.endFill();
            q.flush()
        },
        drawSelectionSegment: function(W, aa, q, Z) {
            var Y = aa.tablature.getScale();
            var ad = 5;
            var ab = Y * (aa.lineHeight * aa.lineNumber + ad) + aa.beatGroupBarHeight;
            W.setLineColor(aa.tablature.selectionColor);
            W.beginFill(aa.tablature.selectionColor, 1);
            var ac = aa.y + aa.linesOffset - aa.tablature.viewPort.y - ad;
            var ae = aa.x + q;
            var X = aa.tablature.defaultMeasureLeftSpace * Y;
            W.drawRect(ae - X, ac, Z - q + X, ab);
            W.endFill()
        },
        drawDragMarker: function(Y, X, Z) {
            Y.beginFill(Z.selectionColor, 1);
            Y.setLineColor(Z.selectionColor);
            var W = X.width / 2;
            var aa = X.y - Z.viewPort.y + W;
            var q = X.x + W;
            Y.drawCircle(q, aa, W);
            Y.endFill();
            Y.setLineThickness(1);
            Y.flush()
        },
        __class__: u.painters.HighlightPositionPainter
    });
    u.painters.MeasurePainter = function() {
        u.painters.BasePainter.call(this);
        this._beatPainter = new u.painters.BeatPainter()
    };
    p["tabRender.painters.MeasurePainter"] = u.painters.MeasurePainter;
    u.painters.MeasurePainter.__name__ = ["tabRender", "painters", "MeasurePainter"];
    u.painters.MeasurePainter.__super__ = u.painters.BasePainter;
    u.painters.MeasurePainter.prototype = v(u.painters.BasePainter.prototype, {
        draw: function(q, Y, X) {
            if (X == null) {
                X = false
            }
            var ad = Y;
            var W = ad.stave.tablature;
            u.painters.BasePainter.prototype.draw.call(this, q, Y);
            if (ad == null) {
                return false
            }
            var ac = 0;
            this.drawTime(q, ad);
            var Z = 0;
            var aa = ad.staveBeats;
            while (Z < aa.length) {
                var ab = aa[Z];
                ++Z;
                this._beatPainter.draw(q, ab)
            }
            if (ad.bpm != null) {
                this.drawBpm(q, ad)
            }
            if (ad.measure.header.text != null) {
                this.drawText(q, ad)
            }
            return true
        },
        drawText: function(X, W) {
            var q = W.stave;
            var Y = q.getVisualEntityOffset(u.model.VisualEntity.BarText) * q.tablature.getScale();
            u.model.TextElement.drawScaledText(X, W.measure.header.text.title, q.tablature.measureTextFormat, W.x, Y, q.tablature.getScale())
        },
        drawTime: function(Y, X) {
            var aa = X.time;
            var Z = X.stave.tablature;
            if (aa != null) {
                var W = X.stave.lineNumber;
                var q = Math.floor(W / 2);
                var ac = X.stave.lineOffset[q];
                var ab = Z.getScale();
                this.drawNum(Y, aa.numerator, aa.x, aa.y + X.stave.lineOffset[0], ab);
                this.drawNum(Y, aa.denominator, aa.x, ac, ab)
            }
        },
        drawNum: function(q, aa, af, ae, W) {
            q.setLineThickness(0);
            var ag;
            if (aa == null) {
                ag = "null"
            } else {
                ag = "" + aa
            }
            var Y = 0;
            var ac = 0;
            var Z = ag.length;
            while (ac < Z) {
                var ab = ac++;
                var ad = A.parseInt(ag.charAt(ab));
                var X = this.getTimeSignatureSymbol(ad);
                q.beginFill(2236962);
                q.drawSvgPath(X, af + Y, ae, W, W);
                q.endFill();
                Y += 10
            }
            q.setLineThickness(1)
        },
        drawBpm: function(q, Z) {
            var ac = Z.bpm;
            var Y = Z.stave;
            var W = Y.tablature.markerTextFormat;
            var X = Y.tablature.getScale();
            var ad = 3 * X;
            var ae = 10 * X;
            var aa;
            aa = (Z.measure.header.number == 1 ? Y.getVisualEntityOffset(u.model.VisualEntity.HeadBpm) : Y.getVisualEntityOffset(u.model.VisualEntity.RegularBpm)) * X;
            var ab;
            if (Z.measure.header.number == 1) {
                ab = 0
            } else {
                ab = ac.x
            }
            q.setLineThickness(0);
            q.beginFill(W.color);
            q.drawSvgPath("M 4.59128 11.4226 C 4.19028 11.1906 4.40455 11.1526 3.58629 11.0147 C 3.0595 10.9259 2.06808 11.4558 1.53125 11.9063 C 1.03394 12.3235 0.639089 12.812 0.375 13.3125 C -0.0364817 14.0924 -0.137838 14.9046 0.1875 15.4375 C 0.506244 15.9596 1.16304 16.1243 1.90625 15.9375 C 2.40848 15.8113 2.95574 15.5242 3.46875 15.0938 C 3.9364 14.7014 4.29963 14.2198 4.5625 13.75 C 4.92428 13.1034 5.06644 12.5875 5.10237 12.1523 C 5.23953 11.9179 5.18046 9.86449 5.22973 7.48788 C 5.25316 5.23822 5.35206 0.41262 5.37256 0.13467 C 5.38276 -0.00356832 5.06149 1.04731 5.01682 0.998391 C 4.84902 0.814642 4.99346 6.98832 4.94711 9.88276 C 4.89519 10.7164 5.11487 12.1346 4.59128 11.4226 Z", ab, aa - ad, X, X);
            q.endFill();
            u.model.TextElement.drawScaledText(q, "= " + (ac.value == null ? "null" : "" + ac.value), W, ab + ae, aa, X);
            q.setLineThickness(1)
        },
        getTimeSignatureSymbol: function(q) {
            switch (q) {
                case 0:
                    return "M 0.00 7.99 C -0.00 10.44 0.57 13.08 2.37 14.84 4.18 16.54 7.44 16.36 8.93 14.32 10.61 12.22 10.97 9.39 10.78 6.78 10.62 4.66 9.96 2.42 8.31 0.97 6.53 -0.48 3.60 -0.29 2.11 1.49 0.53 3.25 -0.00 5.69 0.00 7.99 z M 5.46 15.13 C 4.46 15.17 3.80 14.18 3.64 13.29 3.03 10.66 3.00 7.93 3.19 5.25 3.32 3.95 3.53 2.57 4.31 1.48 4.74 0.87 5.67 0.62 6.26 1.14 c 0.83 0.69 1.03 1.84 1.25 2.84 0.43 2.46 0.39 4.99 0.13 7.47 -0.15 1.22 -0.44 2.57 -1.43 3.40 -0.21 0.15 -0.48 0.25 -0.75 0.26 z";
                case 1:
                    return "m 2.36 14.48 c 0 -3.87 0 -7.74 0 -11.61 C 1.69 4.15 1.01 5.42 0.34 6.7 0.23 6.54 -0.11 6.44 0.06 6.22 0.83 4.14 1.59 2.07 2.36 -8.04e-8 c 1.09 0 2.18 0 3.26 0 0 4.81 0 9.62 0 14.43 0.11 0.73 1 0.75 1.57 0.86 0 0.24 0 0.47 0 0.71 -2.13 0 -4.25 0 -6.38 0 0 -0.22 0 -0.44 0 -0.66 C 1.34 15.22 1.98 15.2 2.31 14.7 l 0.04 -0.11 0.01 -0.11 0 0 z";
                case 2:
                    return "M 3.85 1.11 C 3.32 1.21 2.1 1.37 2.27 2.07 2.67 2.48 3.62 2.08 4.03 2.69 4.75 3.6 4.54 5.13 3.54 5.77 2.47 6.55 0.7 5.98 0.42 4.65 0.08 3.16 0.99 1.68 2.2 0.89 3.47 -0.05 5.13 -0.15 6.63 0.14 8.35 0.44 10.17 1.45 10.71 3.21 11.09 4.36 10.77 5.67 9.91 6.52 8.88 7.62 7.45 8.16 6.21 8.97 5.29 9.48 4.4 10.07 3.69 10.86 3.15 11.41 2.75 12.06 2.32 12.69 3.58 11.96 5.15 11.47 6.56 12.08 c 0.95 0.31 1.61 1.07 2.42 1.6 0.8 0.43 1.88 -0.18 2.04 -1.06 0.14 -0.38 -0.08 -1.05 0.51 -0.88 0 1.34 -0.22 2.91 -1.38 3.76 -1.28 0.84 -2.98 0.49 -4.21 -0.25 -1.07 -0.69 -2.23 -1.52 -3.58 -1.31 -0.7 0.04 -1.55 0.4 -1.55 1.21 0.03 0.51 -0.25 0.64 -0.69 0.57 C -0.13 15.35 0.24 14.47 0.46 13.97 1.46 11.79 3.35 10.24 4.96 8.53 6.02 7.37 7.19 6.26 7.94 4.87 8.18 4.24 7.99 3.53 7.75 2.92 7.1 1.44 5.3 1.1 3.85 1.11 z";
                case 3:
                    return "M 3.22 8.29 C 3.23 8.01 3.1 7.62 3.54 7.72 4.49 7.43 5.46 7.06 6.26 6.45 7.1 5.78 7.29 4.61 7.05 3.61 6.73 2.07 5.23 0.71 3.6 0.92 2.89 0.97 2.15 1.23 1.72 1.82 1.74 2.68 3.01 2.05 3.3 2.84 3.67 3.53 3.69 4.51 3.15 5.12 2.55 5.68 1.58 5.71 0.85 5.42 0.01 5.03 -0.06 3.95 0.03 3.15 0.13 1.84 1.12 0.72 2.37 0.37 3.58 0.02 4.88 -0.09 6.13 0.08 8.23 0.48 10.01 2.41 9.97 4.59 9.99 5.54 9.71 6.56 8.9 7.13 8.55 7.51 7.7 7.79 7.51 8.03 8.58 8.44 9.59 9.24 9.84 10.4 10.24 11.96 9.69 13.7 8.45 14.73 7.42 15.7 5.97 16.12 4.57 15.99 3.13 15.92 1.48 15.62 0.59 14.37 -0.04 13.45 -0.17 12.21 0.2 11.17 0.58 10.38 1.62 10.33 2.38 10.46 c 0.72 0.1 1.21 0.8 1.18 1.51 0.05 0.67 -0.18 1.54 -0.95 1.67 -0.44 0.08 -1.01 -0.03 -0.69 0.57 0.43 0.7 1.47 0.83 2.25 0.83 C 5.8 14.9 7.14 13.37 7.18 11.75 7.33 10.64 6.6 9.62 5.64 9.14 4.9 8.75 4.13 8.36 3.29 8.31 c -0.03 0 -0.05 -0.01 -0.08 -0.01 z";
                case 4:
                    return "M 5.3972329,-0.050066074 C 6.1359341,0.21052905 6.1255782,0.005170667 5.943457,0.80706307 C 5.711726,1.7137767 5.4631946,2.5742226 5.2062495,3.2572994 C 4.96103,3.9092042 4.7746978,4.5708004 4.233566,5.4479104 C 3.8743321,6.2621457 3.1936233,7.1664801 2.2510097,8.5283757 C 1.65577,9.465758 0.7303882,10.575609 0,11.558041 L 7.3588536,11.578563 C 7.3750199,12.80269 7.3593314,13.979035 7.3754977,15.203163 C 7.2998257,15.484702 6.4277834,15.845879 6.0494907,16 L 11.162049,15.992451 C 10.522813,15.799463 10.010996,15.590547 9.7858707,15.254212 C 9.7907387,14.537948 9.7478237,12.69084 9.7526917,11.40119 L 11.527864,11.40119 L 12.019273,10.466332 L 9.7526917,10.474797 L 9.7031507,4.3060655 L 7.3928582,6.6051741 L 7.3369434,10.564566 L 2.5995067,10.601309 C 2.1916772,10.620098 3.2119877,9.2701893 3.5552783,8.661602 C 3.9606501,7.9429568 4.2030939,7.5810945 4.6338131,6.7903129 C 5.0905926,5.951686 5.5185573,5.195172 5.8515844,4.419281 C 6.2841791,3.3007078 6.7379724,2.2656363 6.9642542,1.6689972 C 7.4739242,0.73680435 7.6910467,0.07553143 8.2585729,-0.056935597 L 5.3972329,-0.050066074 z";
                case 5:
                    return "M 0.66 0 C 1.76 0.32 2.92 0.45 4.06 0.55 5.57 0.61 7.1 0.43 8.57 0.05 8.59 0.92 8.37 1.88 7.62 2.41 7 2.88 6.18 2.89 5.45 3 4.24 3.07 3.01 2.97 1.83 2.7 1.48 2.4 1.68 3.01 1.62 3.22 c 0 1.27 0 2.53 0 3.8 0.82 -0.93 2.05 -1.53 3.31 -1.39 1.75 0.04 3.55 1 4.22 2.68 C 9.94 10.33 9.22 12.72 7.73 14.23 6.61 15.47 4.92 16.14 3.26 15.99 2.03 15.88 0.67 15.28 0.25 14.04 -0.02 13.19 -0.16 12.2 0.25 11.37 0.73 10.53 1.87 10.47 2.71 10.7 3.53 10.9 3.87 11.82 3.79 12.59 3.8 13.31 3.33 14.07 2.56 14.13 2.18 14.28 1.61 14.49 2.22 14.78 3.24 15.48 4.8 15.51 5.7 14.58 6.89 13.39 7.07 11.57 7 9.96 6.89 8.75 6.37 7.41 5.22 6.84 3.97 6.29 2.37 6.8 1.68 7.98 1.53 8.17 1.19 8.03 0.96 8.07 0.62 8.17 0.64 7.92 0.66 7.66 c 0 -2.55 0 -5.11 0 -7.66 z";
                case 6:
                    return "M 7.93 1.53 C 7.56 0.85 6.71 0.49 5.94 0.52 4.82 0.56 4.18 1.66 3.88 2.62 3.35 4.32 3.15 6.16 3.49 7.93 3.54 8.37 3.92 8.63 4.13 8.12 5.06 7.07 6.65 6.72 7.97 7.14 9.42 7.71 10.23 9.29 10.37 10.77 10.53 12.37 9.98 14.11 8.63 15.06 6.81 16.44 3.96 16.31 2.39 14.6 0.9 12.97 0.19 10.75 0.04 8.58 -0.18 6.28 0.56 3.93 2.03 2.15 3.04 0.86 4.6 -0.11 6.28 0.01 7.59 0.02 8.97 0.64 9.54 1.88 9.98 2.82 10.18 4.13 9.38 4.95 8.96 5.48 8.26 5.69 7.61 5.5 6.9 5.4 6.31 4.82 6.25 4.1 6.08 3.28 6.33 2.33 7.09 1.89 7.34 1.71 7.62 1.57 7.93 1.53 z M 7.71 11.72 C 7.67 10.66 7.76 9.51 7.19 8.56 6.59 7.5 4.72 7.59 4.31 8.78 3.84 10.14 3.82 11.61 3.98 13.03 c 0.14 0.82 0.31 1.87 1.2 2.2 0.72 0.29 1.63 -0.01 1.94 -0.74 0.41 -0.86 0.57 -1.82 0.59 -2.77 z";
                case 7:
                    return "M 2.97 16 C 3.15 14.66 3.24 13.27 3.84 12.02 4.33 10.82 5.19 9.83 6.14 8.96 7.36 7.69 8.64 6.4 9.38 4.79 9.59 4.25 9.66 3.67 9.79 3.12 8.69 3.83 7.34 4.39 6.02 3.99 4.95 3.75 4.06 3.09 3.08 2.65 2.38 2.35 1.34 2.38 0.98 3.17 0.78 3.58 0.62 3.96 0.12 3.83 -0.13 3.85 0.06 3.43 0 3.26 0 2.34 0 1.43 0 0.52 0.38 0.45 0.63 0.56 0.69 0.97 0.88 1.7 1.76 1.48 2.19 1.12 2.92 0.67 3.64 0.1 4.52 0 5.48 -0.03 6.3 0.52 7.07 1.02 7.73 1.37 8.7 1.7 9.31 1.08 9.75 0.84 9.47 -0.08 10.01 0 10.28 -0.03 10.5 -0.03 10.4 0.31 10.38 1.58 10.46 2.86 10.34 4.13 10.24 5.12 9.88 6.06 9.33 6.89 8.72 7.98 8.01 9.02 7.45 10.13 6.91 11.48 6.76 12.95 6.73 14.38 6.68 14.88 7.04 15.76 6.69 16 5.45 16 4.21 16 2.97 16 z";
                case 8:
                    return "M 6.97 7.18 C 7.96 7.59 8.61 8.51 9.23 9.34 9.71 9.98 9.88 10.8 9.76 11.58 9.66 13.11 8.81 14.58 7.46 15.33 5.48 16.48 2.64 16.15 1.15 14.34 0.26 13.3 -0.1 11.87 0.02 10.52 0.3 9.39 1.21 8.5 2.2 7.94 2.89 7.75 1.76 7.47 1.61 7.13 0.1 5.63 -0.1 2.86 1.5 1.35 3.29 -0.4 6.51 -0.5 8.27 1.36 9.09 2.23 9.43 3.49 9.31 4.67 9.04 5.65 8.25 6.4 7.43 6.95 7.29 7.04 7.13 7.12 6.97 7.18 z M 6.16 6.54 C 7.34 6 8.09 4.61 7.81 3.32 7.66 2.1 6.72 0.95 5.45 0.81 4.37 0.6 3.18 1.02 2.61 1.99 2.22 2.58 2.07 3.48 2.66 4 3.69 5.04 5.13 5.51 6.16 6.54 z M 3.17 8.44 C 2.19 8.9 1.31 9.78 1.26 10.92 1.11 12.72 2.32 14.69 4.17 15.01 5.32 15.21 6.73 15.01 7.4 13.94 7.83 13.37 7.9 12.54 7.43 11.97 6.35 10.42 4.51 9.72 3.17 8.44 z";
                case 9:
                    return "m 2.46 14.47 c 0.29 0.65 1.09 0.94 1.76 1.01 1.1 0.1 1.93 -0.87 2.24 -1.83 0.55 -1.74 0.69 -3.61 0.43 -5.41 C 6.87 7.79 6.47 7.26 6.22 7.88 5.24 8.98 3.53 9.34 2.18 8.77 0.99 8.19 0.32 6.88 0.07 5.62 -0.22 3.91 0.3 1.97 1.76 0.94 3.55 -0.42 6.33 -0.31 7.93 1.3 9.74 3.09 10.4 5.74 10.39 8.22 10.41 10.83 9.17 13.42 7.12 15.04 5.69 16.16 3.56 16.33 1.99 15.41 0.83 14.66 0.19 13.12 0.55 11.77 0.85 10.85 1.86 10.24 2.82 10.48 c 0.72 0.09 1.28 0.71 1.33 1.42 0.19 0.86 -0.16 1.8 -0.92 2.27 -0.23 0.16 -0.49 0.27 -0.76 0.3 z M 2.68 4.28 C 2.73 5.38 2.62 6.6 3.28 7.56 3.94 8.53 5.67 8.32 6.03 7.18 6.54 5.72 6.61 4.13 6.36 2.61 6.23 1.73 5.67 0.71 4.67 0.67 3.84 0.55 3.14 1.22 2.98 1.99 2.76 2.73 2.68 3.51 2.68 4.28 z"
            }
            return null
        },
        __class__: u.painters.MeasurePainter
    });
    u.painters.NotePainter = function() {
        u.painters.BasePainter.call(this)
    };
    p["tabRender.painters.NotePainter"] = u.painters.NotePainter;
    u.painters.NotePainter.__name__ = ["tabRender", "painters", "NotePainter"];
    u.painters.NotePainter.__super__ = u.painters.BasePainter;
    u.painters.NotePainter.prototype = v(u.painters.BasePainter.prototype, {
        draw: function(Y, Z, X) {
            if (X == null) {
                X = false
            }
            u.painters.BasePainter.prototype.draw.call(this, Y, Z);
            var W = Z;
            var ac = W.stave.tablature.getScale();
            if (W == null) {
                return false
            }
            var ab = W.note;
            if (W.tiedNoteNext != null && W.tiedNotePrev != null) {
                return false
            }
            var aa = W.stave.tablature;
            if (ab.effect.grace != null) {
                this.drawGrace(Y, W)
            }
            if (!X) {
                Y.setLineColor(W.stave.effectsLineColor);
                if (!aa.beginnerMode) {
                    if (W.tiedNotePrev != null && W.tiedNoteNext == null) {
                        this.drawTied(Y, W, ac)
                    }
                    if (ab.effect.slide) {
                        this.drawSlide(Y, W)
                    }
                    if (ab.effect.bend != null) {
                        this.drawBend(Y, W, ac)
                    }
                    if (ab.effect.hammer) {
                        this.drawHammerOnPullOff(Y, W, ac)
                    }
                    if (W.slideDestinationScheme != null) {
                        this.drawEndOfSlide(Y, W, ac)
                    }
                }
            }
            if (!W.note.isTiedNote) {
                var q = W.mainText;
                if (W.note.effect.harmonic != null && W.note.effect.harmonic.type == V.effects.HarmonicType.Natural) {
                    q = "<" + q + ">"
                }
                u.model.TextElement.drawScaledText(Y, q, W.staveBeat.getNoteTextFormat(), W.x, W.y, ac)
            }
            return true
        },
        drawGrace: function(W, q) {
            var X = q.stave.tablature.getScale();
            u.model.TextElement.drawScaledText(W, A.string(q.note.effect.grace.fret), q.staveBeat.getNoteTextFormat(), q.x - 12 * X, q.y + 2 * X, 0.7 * X)
        },
        drawSlide: function(X, Z) {
            var af = 0;
            var W = 0;
            var ac = 0;
            var ae = 0;
            var aa = Z.stave.tablature.getScale();
            var Y = Z.note.effect.slideType;
            if (B.indexOf([V.effects.SlideType.FastSlideTo, V.effects.SlideType.SlowSlideTo], Y, 0) != -1) {
                var ad = Z.note.getNextNote();
                if (ad != null) {
                    var ab = Z.stave.tablature.getStaveNote(ad);
                    if (ab != null) {
                        var ag;
                        if (Z.note.value - ab.note.value > 0) {
                            ag = 1
                        } else {
                            ag = -1
                        }
                        af = Z.x + Z.width / 2 * aa;
                        ac = Z.y + Z.height * aa * (3 - 2 * ag) / 6;
                        W = ab.x;
                        ae = Z.y + Z.height * aa * (3 + 2 * ag) / 6;
                        if (Z.stave != ab.stave) {
                            W = Z.stave.width;
                            ab.slideDestinationScheme = {
                                v: ag
                            }
                        } else {
                            ab.slideDestinationScheme = null
                        }
                        if (Y == V.effects.SlideType.SlowSlideTo) {
                            var ah = Math.min(ac, ae) - 2 * aa;
                            var q = af + (W - af) / 2;
                            var ai = W;
                            var aj = ah - Z.stave.lineHeight * 0.8 * aa;
                            X.moveTo(af, ah);
                            X.curveTo(q, aj, ai, ah)
                        }
                    }
                }
            }
            if (B.indexOf([V.effects.SlideType.OutDownWards, V.effects.SlideType.OutUpWards], Y, 0) != -1) {
                af = Z.x + Z.width / 2 * aa;
                W = af + 15 * aa
            }
            if (B.indexOf([V.effects.SlideType.IntoFromBelow, V.effects.SlideType.IntoFromAbove], Y, 0) != -1) {
                W = Z.x;
                af = W - 15 * aa
            }
            if (B.indexOf([V.effects.SlideType.OutDownWards, V.effects.SlideType.IntoFromAbove], Y, 0) != -1) {
                ac = Z.y + Z.height * aa / 6;
                ae = Z.y + Z.height * aa * 5 / 6
            }
            if (B.indexOf([V.effects.SlideType.OutUpWards, V.effects.SlideType.IntoFromBelow], Y, 0) != -1) {
                ac = Z.y + Z.height * aa * 5 / 6;
                ae = Z.y + Z.height * aa / 6
            }
            X.moveTo(af, ac);
            X.lineTo(W, ae)
        },
        drawEndOfSlide: function(W, q, aa) {
            var Y = 0;
            var Z = q.x;
            var ab = q.y + q.height * aa * (3 - 2 * q.slideDestinationScheme.v) / 6;
            var X = q.y + q.height * aa * (3 + 2 * q.slideDestinationScheme.v) / 6;
            W.moveTo(Y, ab);
            W.lineTo(Z, X)
        },
        drawTied: function(Z, ab, ac) {
            Z.setLineThickness(0.5);
            Z.setLineColor(0);
            var ad = ab.tiedNotePrev;
            while (ad.tiedNotePrev != null) {
                ad = ad.tiedNotePrev
            }
            if (ab.stave == ad.stave) {
                var ah = ad.x + (ad.width / 2 + 2) * ac;
                var af = ad.y + (ad.height / 2 + 2) * ac;
                var Y = ab.x + (ab.width / 2 - 2) * ac;
                var ag = ab.y + (ab.height / 2 + 2) * ac;
                var q = ah + (Y - ah) / 2;
                var ak = af + (ag - af) + ab.stave.lineHeight * 0.8 * ac;
                Z.moveTo(ah, af);
                Z.curveTo(q, ak, Y, ag)
            } else {
                if (ad.stave.cacheCanvas != null) {
                    ad.stave.cacheCanvas.setLineThickness(0.5);
                    ad.stave.cacheCanvas.setLineColor(ab.staveBeat.getNoteTextFormat().color);
                    var W = ad.x + (ad.width / 2 + 2) * ac;
                    var ae = ad.y + (ad.height / 2 + 2) * ac;
                    var aj = ad.stave.width;
                    var X = ae;
                    var aa = W + (aj - W) / 2;
                    var ai = ae + (X - ae) + ad.stave.lineHeight * 0.8 * ac;
                    ad.stave.cacheCanvas.moveTo(W, ae);
                    ad.stave.cacheCanvas.curveTo(aa, ai, aj, X);
                    ad.stave.cacheCanvas.flush();
                    W = 0;
                    ae = ab.y + (ab.height / 2 + 2) * ac;
                    aj = ab.x + (ab.width / 2 - 2) * ac;
                    X = ae;
                    aa = W + (aj - W) / 2;
                    ai = ae + (X - ae) + ab.stave.lineHeight * 0.8 * ac;
                    Z.moveTo(W, ae);
                    Z.curveTo(aa, ai, aj, X)
                }
            }
        },
        drawBend: function(W, X, Y) {
            var Z = X.stave;
            var ae = W.getTextBounds(X.mainText, X.staveBeat.getNoteTextFormat());
            var ag = X.staveBeat.width - 3 * Y;
            var af = X.x + ae.width * Y;
            ag -= ae.width * Y;
            var ac = af;
            var ad = X.y + X.height / 2 * Y;
            var ab = Z.getVisualEntityOffset(u.model.VisualEntity.Bend) * Y + u.model.VisualEntityHelper.getEntityHeight(u.model.VisualEntity.Bend) * (Z.maxBendValue - X.note.effect.bend.value) / 100 + 15 * Y;
            W.moveTo(af, ad);
            var q = true;
            var aa = X.note.effect.bend.type;
            switch (aa) {
                case V.effects.BendTypes.Bend:
                    this.drawCurveBend(X, W, af, ad, ag, ab, Y, X.stave.tablature.effectTextFormat.color);
                    ac = af + ag;
                    break;
                case V.effects.BendTypes.BendRelease:
                    this.drawCurveBendRelease(X, W, af, ad, ag, ab, Y, X.stave.tablature.effectTextFormat.color);
                    ac = af + ag / 2;
                    break;
                case V.effects.BendTypes.Prebend:
                    this.drawCurvePrebend(X, W, af, ad, ag, ab, Y, X.stave.tablature.effectTextFormat.color);
                    ac += 2 * Y;
                    q = false;
                    break;
                case V.effects.BendTypes.PrebendRelease:
                    this.drawCurvePrebendRelease(X, W, af, ad, ag, ab, Y, X.stave.tablature.effectTextFormat.color);
                    break
            }
            if (q) {
                u.model.TextElement.drawScaledText(W, this.getBendTextByValue(X.note.effect.bend.value), X.stave.tablature.effectTextFormat, ac, ab - 15 * Y, Y)
            }
        },
        getBendTextByValue: function(W) {
            var Z = "";
            var X = Math.floor(W / 100);
            var Y = W - X * 100;
            var q = "";
            if (X == 1 && Y == 0) {
                q = "full"
            } else {
                if (Y == 25) {
                    q = "1/4"
                } else {
                    if (Y == 50) {
                        q = "1/2"
                    } else {
                        if (Y == 75) {
                            q = "3/4"
                        }
                    }
                }
            }
            if (W > 100) {
                q = A.string(W / 100)
            }
            return q
        },
        drawCurveBend: function(W, q, ac, ab, ad, Z, X, Y) {
            var aa = W.note.effect.bend;
            q.curveTo(ac + ad * 1.1, ab, ac + ad, Z);
            q.setLineThickness(0);
            q.beginFill(Y);
            q.moveTo(ac + ad - 2 * X, Z + 5 * X);
            q.lineTo(ac + ad + 2 * X, Z + 5 * X);
            q.lineTo(ac + ad, Z);
            q.lineTo(ac + ad - 2 * X, Z + 5 * X);
            q.endFill();
            q.setLineThickness(1)
        },
        drawCurveBendRelease: function(Y, Z, q, ac, W, aa, ab, X) {
            Z.curveTo(q + W / 2, ac, q + W / 2, aa);
            Z.curveTo(q + W * 1.05, aa, q + W, ac);
            Z.setLineThickness(0);
            Z.beginFill(X);
            Z.moveTo(q + W / 2 - 2 * ab, aa + 5 * ab);
            Z.lineTo(q + W / 2 + 2 * ab, aa + 5 * ab);
            Z.lineTo(q + W / 2, aa);
            Z.lineTo(q + W / 2 - 2 * ab, aa + 5 * ab);
            Z.endFill();
            Z.setLineThickness(1);
            Z.setLineThickness(0);
            Z.beginFill(X);
            Z.moveTo(q + W - 2 * ab, ac - 5 * ab);
            Z.lineTo(q + W + 2 * ab, ac - 5 * ab);
            Z.lineTo(q + W, ac);
            Z.lineTo(q + W - 2 * ab, ac - 5 * ab);
            Z.endFill();
            Z.setLineThickness(1)
        },
        drawCurvePrebend: function(W, q, ac, ab, ad, Z, X, Y) {
            var aa = Z;
            Z += (W.note.effect.bend.value - W.note.effect.bend.points[0].value * 25) / 100 * u.model.VisualEntityHelper.getEntityHeight(u.model.VisualEntity.Bend) * X;
            q.moveTo(ac, ab);
            q.lineTo(ac, Z);
            u.model.TextElement.drawScaledText(q, this.getBendTextByValue(W.note.effect.bend.points[0].value * 25), W.stave.tablature.effectTextFormat, ac, Z - 15 * X, X);
            q.setLineThickness(0);
            q.beginFill(Y);
            q.moveTo(ac - 2 * X, Z + 5 * X);
            q.lineTo(ac + 2 * X, Z + 5 * X);
            q.lineTo(ac, Z);
            q.lineTo(ac - 2 * X, Z + 5 * X);
            q.endFill();
            q.setLineThickness(1);
            if (W.note.effect.bend.points[0].value != W.note.effect.bend.points[W.note.effect.bend.points.length - 1].value) {
                Z += (W.note.effect.bend.value - W.note.effect.bend.points[W.note.effect.bend.points.length - 1].value * 25) / 100 * u.model.VisualEntityHelper.getEntityHeight(u.model.VisualEntity.Bend) * X;
                q.moveTo(ac, Z);
                q.curveTo(ac + ad * 1.1, Z, ac + ad, aa);
                q.setLineThickness(0);
                q.beginFill(Y);
                q.moveTo(ac + ad - 2 * X, aa + 5 * X);
                q.lineTo(ac + ad + 2 * X, aa + 5 * X);
                q.lineTo(ac + ad, aa);
                q.lineTo(ac + ad - 2 * X, aa + 5 * X);
                q.endFill();
                q.setLineThickness(1);
                u.model.TextElement.drawScaledText(q, this.getBendTextByValue(W.note.effect.bend.points[W.note.effect.bend.points.length - 1].value * 25), W.stave.tablature.effectTextFormat, ac + ad, aa - 15 * X, X)
            }
        },
        drawCurvePrebendRelease: function(Y, Z, q, ac, W, aa, ab, X) {
            Z.moveTo(q, ac);
            Z.lineTo(q, aa);
            Z.curveTo(q + W * 1.05, aa, q + W, ac);
            Z.setLineThickness(0);
            Z.beginFill(X);
            Z.moveTo(q - 2 * ab, aa + 5 * ab);
            Z.lineTo(q + 2 * ab, aa + 5 * ab);
            Z.lineTo(q, aa);
            Z.lineTo(q - 2 * ab, aa + 5 * ab);
            Z.endFill();
            Z.setLineThickness(1);
            Z.setLineThickness(0);
            Z.beginFill(X);
            Z.moveTo(q + W - 2 * ab, ac - 5 * ab);
            Z.lineTo(q + W + 2 * ab, ac - 5 * ab);
            Z.lineTo(q + W, ac);
            Z.lineTo(q + W - 2 * ab, ac - 5 * ab);
            Z.endFill();
            Z.setLineThickness(1)
        },
        drawHammerOnPullOff: function(X, Y, Z) {
            var ad = Y.x + Y.width / 2 * Z;
            var ab = Y.y;
            var aa = Y.staveBeat.getNextStaveBeat();
            var W = 0;
            if (aa == null || aa != null && aa.stave != Y.staveBeat.stave) {
                W = Y.stave.width
            } else {
                if (aa != null && aa.stave == Y.staveBeat.stave) {
                    W = aa.x
                }
            }
            var ac = ab;
            var q = ad + (W - ad) / 2;
            var ae = ab + (ac - ab) - Y.stave.lineHeight * 0.8 * Z;
            X.moveTo(ad, ab);
            X.curveTo(q, ae, W, ac)
        },
        __class__: u.painters.NotePainter
    });
    u.painters.PossibleLoopAreaSelectionPainter = function() {
        u.painters.BasePainter.call(this)
    };
    p["tabRender.painters.PossibleLoopAreaSelectionPainter"] = u.painters.PossibleLoopAreaSelectionPainter;
    u.painters.PossibleLoopAreaSelectionPainter.__name__ = ["tabRender", "painters", "PossibleLoopAreaSelectionPainter"];
    u.painters.PossibleLoopAreaSelectionPainter.__super__ = u.painters.BasePainter;
    u.painters.PossibleLoopAreaSelectionPainter.prototype = v(u.painters.BasePainter.prototype, {
        draw: function(X, ad, Y) {
            if (Y == null) {
                Y = false
            }
            var ag = ad;
            if (ag.staveBeats.length > 0) {
                var ac = ag.staveBeats[0];
                var W = ac.x;
                var aa = W + ac.width;
                var ah = ac.stave;
                var q = null;
                var af = 1;
                var ae = ag.staveBeats.length;
                while (af < ae) {
                    var Z = af++;
                    q = ag.staveBeats[Z];
                    var ab = q.stave;
                    if (ah != ab) {
                        if (ah.isVisible()) {
                            this.drawSelectionSegment(X, ah, W, aa)
                        }
                        ah = q.stave;
                        W = q.x
                    }
                    aa = q.x + q.width
                }
                if (ah.isVisible()) {
                    this.drawSelectionSegment(X, ah, W, aa)
                }
            }
            return true
        },
        drawSelectionSegment: function(W, aa, q, Z) {
            var Y = aa.tablature.getScale();
            var ad = 5;
            var ab = Y * (aa.lineHeight * aa.lineNumber + ad) + aa.beatGroupBarHeight;
            W.setLineThickness(0);
            W.beginFill(16728191, 0.1);
            var ac = aa.y - aa.tablature.viewPort.y;
            var ae = aa.x + q;
            var X = aa.tablature.defaultMeasureLeftSpace * Y;
            W.drawRect(ae - X, ac, Z - q + X, aa.height);
            W.endFill()
        },
        __class__: u.painters.PossibleLoopAreaSelectionPainter
    });
    u.painters.SelectionMarkPainter = function() {
        u.painters.BasePainter.call(this);
        this._markerHighlightState = [false, false]
    };
    p["tabRender.painters.SelectionMarkPainter"] = u.painters.SelectionMarkPainter;
    u.painters.SelectionMarkPainter.__name__ = ["tabRender", "painters", "SelectionMarkPainter"];
    u.painters.SelectionMarkPainter.__super__ = u.painters.BasePainter;
    u.painters.SelectionMarkPainter.prototype = v(u.painters.BasePainter.prototype, {
        draw: function(X, ad, Y) {
            if (Y == null) {
                Y = false
            }
            var ag = ad;
            if (ag.staveBeats.length > 0) {
                var ac = ag.staveBeats[0];
                var W = ac.x;
                var aa = W + ac.width;
                var ai = ac.stave;
                var q = null;
                var af = 1;
                var ae = ag.staveBeats.length;
                while (af < ae) {
                    var Z = af++;
                    q = ag.staveBeats[Z];
                    var ab = q.stave;
                    if (ai != ab) {
                        if (ai.isVisible()) {
                            this.drawSelectionSegment(X, ai, W, aa)
                        }
                        ai = q.stave;
                        W = q.x
                    }
                    aa = q.x + q.width
                }
                if (ai.isVisible()) {
                    this.drawSelectionSegment(X, ai, W, aa)
                }
                this.drawDragMarker(X, ag.leftMarker, ai.tablature, u.painters.SelectionMarkPainter.LEFT);
                var ah = ag.staveBeats[ag.staveBeats.length - 1];
                this.drawDragMarker(X, ag.rightMarker, ai.tablature, u.painters.SelectionMarkPainter.RIGHT)
            }
            return true
        },
        drawSelectionSegment: function(W, aa, q, Z) {
            var Y = aa.tablature.getScale();
            var ad = 5;
            var ab = Y * (aa.lineHeight * aa.lineNumber + ad) + aa.beatGroupBarHeight;
            W.setLineThickness(0);
            
            W.beginFill(1621148, this._loopHighlightState ? u.painters.SelectionMarkPainter.HIGHLIGHT_ALPHA : u.painters.SelectionMarkPainter.DEFAULT_ALPHA);
            var ac = aa.y - aa.tablature.viewPort.y;
            var ae = aa.x + q;
            var X = aa.tablature.defaultMeasureLeftSpace * Y;
            W.drawRect(ae - X, ac, Z - q + X, aa.height);
            W.endFill()
        },
        drawDragMarker: function(Z, Y, aa, X) {
            Z.setLineThickness(0);
            Z.beginFill(1621148, 1);
            var W = Math.round(Y.width / 2 * (this._markerHighlightState[X] ? 1.2 : 1));
            var ab = Y.y - aa.viewPort.y;
            var q = Y.x;
            Z.drawCircle(q, ab, W);
            Z.endFill();
            Z.setLineThickness(1);
            Z.setLineColor(this._markerHighlightState[X] ? 16777215 : 15658734);
            Z.moveTo(q - Math.round(W / 4), ab - Math.round(W / 3));
            Z.lineTo(q - Math.round(W / 2), ab);
            Z.lineTo(q - Math.round(W / 4), ab + Math.round(W / 3));
            Z.moveTo(q + Math.round(W / 4), ab - Math.round(W / 3));
            Z.lineTo(q + Math.round(W / 2), ab);
            Z.lineTo(q + Math.round(W / 4), ab + Math.round(W / 3));
            Z.flush()
        },
        highlightLoop: function(W) {
            var q = false;
            if (W && !this._loopHighlightState) {
                this._loopHighlightState = true;
                q = true
            } else {
                if (!W && this._loopHighlightState) {
                    this._loopHighlightState = false;
                    q = true
                }
            }
            return q
        },
        highlightLeftMarker: function(q) {
            return this._highlightMarker(u.painters.SelectionMarkPainter.LEFT, q)
        },
        highlightRightMarker: function(q) {
            return this._highlightMarker(u.painters.SelectionMarkPainter.RIGHT, q)
        },
        _highlightMarker: function(q, X) {
            var W = false;
            if (X && !this._markerHighlightState[q]) {
                this._markerHighlightState[q] = true;
                W = true
            } else {
                if (!X && this._markerHighlightState[q]) {
                    this._markerHighlightState[q] = false;
                    W = true
                }
            }
            return W
        },
        __class__: u.painters.SelectionMarkPainter
    });
    u.painters.StavePainter = function() {
        u.painters.BasePainter.call(this);
        this.fillThicknessMap()
    };
    p["tabRender.painters.StavePainter"] = u.painters.StavePainter;
    u.painters.StavePainter.__name__ = ["tabRender", "painters", "StavePainter"];
    u.painters.StavePainter.__super__ = u.painters.BasePainter;
    u.painters.StavePainter.prototype = v(u.painters.BasePainter.prototype, {
        draw: function(W, ad, Y) {
            if (Y == null) {
                Y = false
            }
            var ab = ad;
            var Z = ab.tablature.getScale();
            var ak = ab.tablature.viewPort;
            if (ab.onceClearEverything) {
                ad.set_drawCache(null)
            }
            if (ad.drawCache == null) {
                var ai = ab.cacheCanvas;
                if (ai != null && ai.getType() != W.getType()) {
                    ai.dispose();
                    ai = null
                }
                if (ai == null) {
                    ai = W.createChild();
                    ai.setWidth(ad.width);
                    ai.setHeight(ad.height);
                    ab.cacheCanvas = ai
                } else {
                    ai.clear()
                }
                u.painters.BasePainter.prototype.draw.call(this, ai, ad);
                if (ab == null) {
                    return false
                }
                this._drawStrings(ai, ab);
                var aj = (ab.lineNumber - 1) * ab.lineHeight * Z;
                var al = ab.lineOffset[0];
                ai.setLineColor(ab.lineColor);
                this._drawBar(ai, 0, al, aj, 1);
                this._drawBar(ai, ab.width - 1, al, aj, 1);
                if (!ab.onceClearEverything) {
                    var aa = new u.painters.MeasurePainter();
                    var ae = 0;
                    var ah = ab.getElements();
                    while (ae < ah.length) {
                        var af = ah[ae];
                        ++ae;
                        if (h.Boot.__instanceof(af, u.model.StaveMeasure)) {
                            var X;
                            X = h.Boot.__cast(af, u.model.StaveMeasure);
                            aa.draw(ai, X);
                            ai.setLineColor(ab.lineColor);
                            if (X.measure.header.repeatAlternative > 0) {
                                this._drawAlternativeEnd(ai, X)
                            }
                            if (X.measure.isRepeatOpen()) {
                                this._drawRepeatBar(ai, X)
                            }
                            if (X.measure.repeatClose() > 0) {
                                this._drawRepeatBar(ai, X, false, X.measure.repeatClose())
                            } else {
                                ai.setLineColor(ab.lineColor);
                                this._drawBar(ai, X.x + X.width, al, aj)
                            }
                        }
                    }
                    if (!ab.tablature.beginnerMode) {
                        var ag = 0;
                        var ac = ab.effects;
                        while (ag < ac.length) {
                            var q = ac[ag];
                            ++ag;
                            if (q.id == u.model.StaveEffects.vibrato) {
                                this._drawVibrato(ai, q, ab, Z)
                            } else {
                                if (q.id == u.model.StaveEffects.fadeIn || q.id == u.model.StaveEffects.fadeOut) {
                                    this._drawFadeInOut(ai, q, Z)
                                } else {
                                    this._drawStaveEffect(ai, q)
                                }
                            }
                        }
                    }
                    this._drawMeasureNum(ai, ab)
                }
                ad.set_drawCache(ai)
            }
            W.draw(ad.drawCache, ad.x, ad.y - ak.y);
            return true
        },
        fillThicknessMap: function() {
            this._thicknessMap = new m.ds.IntMap();
            this._thicknessMap.set(4, [2, 3, 4, 4]);
            this._thicknessMap.set(5, [1, 2, 3, 4, 4]);
            this._thicknessMap.set(6, [1, 1, 2, 3, 4, 4]);
            this._thicknessMap.set(7, [1, 1, 2, 3, 4, 4, 5]);
            this._thicknessMap.set(8, [1, 1, 2, 3, 4, 4, 5, 5])
        },
        _debugDrawAreas: function(ad, Y) {
            var X = Y.tablature.getScale();
            ad.beginFill(65535);
            ad.drawRect(0, 0, Y.width, Y.topSpace);
            ad.endFill();
            var ab = Y.topSpace;
            var aa = 6684672;
            var af = false;
            var W = false;
            var ae = (function(ai) {
                var ah;
                var ag = Y.getEntityMapAboveStave();
                ah = ag.keys();
                return ah
            }(this));
            while (ae.hasNext()) {
                var ac = ae.next();
                if ((function(ai) {
                        var ah;
                        var ag = Y.getEntityMapAboveStave();
                        ah = ag.get(ac);
                        return ah
                    }(this))) {
                    var Z = 0;
                    if (ac == u.model.VisualEntity.FadeIn || ac == u.model.VisualEntity.FadeOut) {
                        if (!af) {
                            af = true;
                            Z = u.model.VisualEntityHelper.getEntityHeight(ac)
                        }
                    } else {
                        if (ac == u.model.VisualEntity.LetRing || ac == u.model.VisualEntity.PalmMute) {
                            if (!W) {
                                W = true;
                                Z = u.model.VisualEntityHelper.getEntityHeight(ac)
                            }
                        } else {
                            if (ac == u.model.VisualEntity.Bend) {
                                Z += u.model.VisualEntityHelper.getEntityHeight(ac) * (100 + Y.maxBendValue) / 100
                            } else {
                                Z = u.model.VisualEntityHelper.getEntityHeight(ac)
                            }
                        }
                    }
                    if (Z > 0) {
                        ad.beginFill(aa, 0.5);
                        ad.drawRect(0, ab * X, Y.width, Z * X);
                        ad.endFill();
                        ab += Z;
                        aa += 20
                    }
                }
            }
            var q = new P.graphics.TextFormat();
            q.size = 9;
            q.color = 0;
            ad.beginFill(65535, 0.1);
            ad.drawRect(0, 0, Y.width, Y.markerTextOffset);
            ad.endFill();
            ad.beginFill(255, 0.1);
            ad.drawRect(0, Y.markerTextOffset, Y.width, Y.markerTextHeight);
            ad.endFill();
            ad.beginFill(16711935, 0.1);
            ad.drawRect(0, Y.chordTextOffset, Y.width, Y.chordTextHeight);
            ad.endFill();
            ad.beginFill(1621148, 0.1);
            ad.drawRect(0, Y.effectsTextOffset, Y.width, Y.effectsLineHeight * Y.effectsLineCount);
            ad.endFill();
            ad.beginFill(255, 0.1);
            ad.drawRect(0, Y.beatGroupBarOffset, Y.width, Y.beatGroupBarHeight);
            ad.endFill();
            ad.drawText("Beat duration", q, 0, Y.beatGroupBarOffset);
            if (Y.hasBeatText()) {
                ad.beginFill(65280, 0.1);
                ad.drawRect(0, Y.beatTextOffset, Y.width, Y.beatTextHeight);
                ad.endFill();
                ad.drawText("Beat text", q, 0, Y.beatTextOffset)
            }
            if (Y.hasLyrics()) {
                ad.beginFill(16711782, 0.3);
                ad.drawRect(0, Y.lyricsOffset, Y.width, Y.lyricsHeight);
                ad.endFill();
                ad.drawText("Lyrics", q, 0, Y.lyricsOffset)
            }
        },
        _drawStrings: function(X, q) {
            var Z = 0;
            var aa = q.lineNumber;
            while (Z < aa) {
                var W = Z++;
                var Y;
                if (q.tablature.beginnerMode) {
                    Y = this._thicknessMap.get(q.lineNumber)[W]
                } else {
                    Y = q.tablature.lineThickness
                }
                X.setLineThickness(Y);
                X.moveTo(0, q.lineOffset[W]);
                X.lineTo(q.width, q.lineOffset[W])
            }
        },
        _drawAlternativeEnd: function(q, Z) {
            var X = Z.stave;
            var W = X.tablature.getScale();
            var ac = Z.x;
            var ab = X.getVisualEntityOffset(u.model.VisualEntity.AlternativeEnd) * W;
            var ad = u.model.TextElement.copyFormat(X.tablature.effectTextFormat);
            ad.size *= W;
            ad.align = "left";
            var Y = ad.size + 2 * W;
            q.setLineColor(X.tablature.lineColor);
            q.moveTo(ac, ab + Y);
            q.lineTo(ac, ab);
            q.lineTo(ac + Z.width, ab);
            var aa = Z.measure.header.alterEndString();
            q.drawText(aa, ad, ac + 2 * W, ab + W);
            q.setLineColor(0)
        },
        _drawRepeatBar: function(W, ac, q, ab) {
            if (ab == null) {
                ab = 1
            }
            if (q == null) {
                q = true
            }
            var Z = ac.stave;
            var af = ac.x;
            var ad = af;
            var aa = ad + 3;
            var ae = Z.lineOffset[0];
            var ag = (Z.lineNumber - 1) * Z.lineHeight * Z.tablature.getScale();
            var Y = af + 6;
            if (!q) {
                af += ac.width;
                ad = af + 3;
                aa = af;
                Y = af - 2
            }
            W.setLineColor(Z.lineColor);
            this._drawBar(W, aa, ae, ag);
            this._drawBar(W, ad, ae, ag, 3);
            W.drawCircle(Y, ae + ag / 4, 1.5);
            W.drawCircle(Y, ae + 3 * ag / 4, 1.5);
            if (ab > 1) {
                var X = Z.tablature.markerTextFormat;
                W.drawText("x" + (ab == null ? "null" : "" + ab), X, af, ae - X.size - 5)
            }
        },
        _drawMeasureNum: function(Y, W) {
            if (W.measures.length > 0) {
                var X = W.measures[0].measure.number();
                var q = 0;
                var Z = W.linesOffset - (W.tablature.measureNumberTextFormat.size + 3) * W.tablature.getScale();
                u.model.TextElement.drawScaledText(Y, X == null ? "null" : "" + X, W.tablature.measureNumberTextFormat, q, Z, W.tablature.getScale())
            }
        },
        _drawFadeInOut: function(X, Z, aa) {
            var Y = 7 * aa;
            var W = 16 * aa;
            var ab = Z.stave.getVisualEntityOffset(u.model.StaveEffects.fadeIn == Z.id ? u.model.VisualEntity.FadeIn : u.model.VisualEntity.FadeOut) * aa + Y;
            var q = Z.x;
            X.setLineThickness(aa);
            if (Z.id == u.model.StaveEffects.fadeIn) {
                X.moveTo(q, ab);
                X.curveTo(q + W / 2, ab - 1, q + W, ab - Y);
                X.moveTo(q, ab);
                X.curveTo(q + W / 2, ab + 1, q + W, ab + Y)
            } else {
                X.moveTo(q + W, ab);
                X.curveTo(q + W / 2, ab - 1, q, ab - Y);
                X.moveTo(q + W, ab);
                X.curveTo(q + W / 2, ab + 1, q, ab + Y)
            }
            X.setLineThickness(0)
        },
        _drawVibrato: function(q, af, Y, X) {
            var ae = 14 * X;
            var ad = af.stave.tablature.tabTextFormat;
            q.setLineThickness(0);
            q.setLineColor(ad.color);
            q.beginFill(ad.color);
            var ac = af.x;
            var ab = Y.getVisualEntityOffset(u.model.VisualEntity.LeftHandVibrato) * X;
            var W = Math.floor(af.width / 14 / X);
            if (W == 0) {
                W = 1
            } else {
                W = W
            }
            var aa = 0;
            while (aa < W) {
                var Z = aa++;
                q.drawSvgPath("M 11.19 5.58 C 10.1 6.65 9.09 7.81 7.93 8.81 7.35 9.3 6.98 8.26 6.55 7.93 5.36 6.62 4.18 5.31 2.98 4 2.41 4.23 2 4.73 1.53 5.13 1.02 5.62 0.51 6.1 0 6.59 0.02 6.16 -0.05 5.69 0.03 5.29 1.79 3.63 3.51 1.94 5.28 0.3 5.93 -0.41 6.4 0.74 6.92 1.1 7.99 2.21 8.99 3.4 10.14 4.44 11.34 3.53 12.36 2.39 13.47 1.36 13.89 0.9 14.4 0.54 14.88 0.14 c 0.54 0.23 0.81 0.82 1.22 1.23 0.81 0.91 1.56 1.88 2.41 2.74 0.45 0.72 1.08 0.87 1.61 0.14 0.59 -0.63 1.15 -1.28 1.73 -1.92 -0.02 0.45 0.04 0.93 -0.03 1.35 C 20.28 5.23 18.76 6.8 17.21 8.32 16.78 8.86 16.09 9.29 15.65 8.51 14.46 7.28 13.39 5.93 12.16 4.75 11.73 4.87 11.54 5.35 11.19 5.58 z", ac, ab, 0.8 * X, 0.8 * X);
                ac += ae
            }
            q.endFill();
            q.flush()
        },
        _drawStaveEffect: function(X, ae) {
            var ab = ae.y;
            var Y = ae.stave.tablature.getScale();
            var Z = ae.stave.tablature.effectTextFormat;
            if (ae.id == u.model.StaveEffects.letRing) {
                ab = ae.stave.getVisualEntityOffset(u.model.VisualEntity.LetRing) * Y;
                Z.italic = true
            } else {
                if (ae.id == u.model.StaveEffects.palmMute) {
                    ab = ae.stave.getVisualEntityOffset(u.model.VisualEntity.PalmMute) * Y
                }
            }
            var ac = u.model.TextElement.drawScaledText(X, ae.text, Z, ae.x, ab, ae.stave.tablature.getScale());
            var aa = ae.width - ac.width / 2 - 4 + 8 * Y;
            if (aa > 20 * Y) {
                var q = ab + ac.height / 2;
                var W = ae.x + ac.width / 2 + 4;
                X.setLineColor(ae.stave.effectsLineColor);
                X.setLineThickness(Y);
                X.moveTo(W, q);
                var ad = W + aa;
                if (ad > ae.stave.width) {
                    ad = ae.stave.width
                } else {
                    ad = ad
                }
                this._drawDashed(X, ae, W, ad, q, ae.stave.tablature.getScale())
            }
            X.flush();
            Z.italic = false
        },
        _drawDashed: function(q, ad, Z, ac, aa, X) {
            var Y = ac;
            var W = 4 * X;
            var ab = true;
            while (Z < ac - 5 * X) {
                q.moveTo(Z, aa);
                Z += W;
                if (ab) {
                    q.lineTo(Z, aa)
                }
                ab = !ab
            }
            q.moveTo(ac - 1, aa - 3 * X);
            q.lineTo(ac - 1, aa + 3 * X)
        },
        _drawBar: function(Y, W, Z, q, X) {
            if (X == null) {
                X = 1
            }
            Y.setLineThickness(X);
            Y.moveTo(W, Z);
            Y.lineTo(W, Z + q);
            Y.setLineThickness(1)
        },
        __class__: u.painters.StavePainter
    });
    u.painters.TabPainter = function() {
        u.painters.BasePainter.call(this);
        this._trackPainter = new u.painters.TrackPainter();
        this._selectionPainter = new u.painters.SelectionMarkPainter();
        this._cursorPainter = new u.painters.CursorPainter();
        this._highlightPositionPainter = new u.painters.HighlightPositionPainter();
        this._possibleLoopAreaSelectionPainter = new u.painters.PossibleLoopAreaSelectionPainter()
    };
    p["tabRender.painters.TabPainter"] = u.painters.TabPainter;
    u.painters.TabPainter.__name__ = ["tabRender", "painters", "TabPainter"];
    u.painters.TabPainter.__super__ = u.painters.BasePainter;
    u.painters.TabPainter.prototype = v(u.painters.BasePainter.prototype, {
        draw: function(X, Y, W) {
            if (W == null) {
                W = false
            }
            X.clear();
            var Z = Y;
            if (Z == null) {
                return false
            }
            if (Z.getCursorCanvas() != null) {
                Z.getCursorCanvas().clear()
            }
            X.setWidth(Z.width);
            X.setHeight(Z.height);
            if (Z.getCursorCanvas() != null) {
                Z.getCursorCanvas().setWidth(Z.width);
                Z.getCursorCanvas().setHeight(Z.height)
            }
            u.painters.BasePainter.prototype.draw.call(this, X, Y);
            var q = Z.getTablatureTrack();
            if (q != null) {
                q.viewPort = Z.viewPort;
                this._trackPainter.draw(X, q)
            }
            this._selectionPainter.draw(X, Z.getSelectionMark());
            this._highlightPositionPainter.draw(X, Z.getHighlightStaveElement());
            this._possibleLoopAreaSelectionPainter.draw(X, Z.getPossibleLoopSelection());
            if (Z.getCursorCanvas() != null) {
                this.renderCursor(Z.getCursorCanvas(), Z.cursor)
            }
            return true
        },
        renderCursor: function(q, W) {
            this._cursorPainter.draw(q, W)
        },
        highlightLeftMarker: function(q) {
            return this._selectionPainter.highlightLeftMarker(q)
        },
        highlightRightMarker: function(q) {
            return this._selectionPainter.highlightRightMarker(q)
        },
        highlightLoop: function(q) {
            return this._selectionPainter.highlightLoop(q)
        },
        __class__: u.painters.TabPainter
    });
    u.painters.TrackPainter = function() {
        u.painters.BasePainter.call(this);
        this._stavePainter = new u.painters.StavePainter()
    };
    p["tabRender.painters.TrackPainter"] = u.painters.TrackPainter;
    u.painters.TrackPainter.__name__ = ["tabRender", "painters", "TrackPainter"];
    u.painters.TrackPainter.__super__ = u.painters.BasePainter;
    u.painters.TrackPainter.prototype = v(u.painters.BasePainter.prototype, {
        draw: function(W, ac, Z) {
            if (Z == null) {
                Z = false
            }
            var X = ac;
            var Y = X.tablature;
            u.painters.BasePainter.prototype.draw.call(this, W, ac);
            var q = X.viewPort;
            var af = 0;
            var ad = X.staves.length;
            while (af < ad) {
                var aa = af++;
                var ab = X.staves[aa];
                var ag = X.ghostStaves[aa];
                var ae = ab.y;
                if (ae + ab.height >= q.y && ae <= q.get_bottom()) {
                    this._stavePainter.draw(W, ab);
                    if (Y.ghostMeasuresVisible && ag.measures.length > 0) {
                        W.setAlpha(Y.ghostAlpha);
                        this._stavePainter.draw(W, ag);
                        W.setAlpha(1)
                    }
                }
            }
            return true
        },
        __class__: u.painters.TrackPainter
    });

    function I(q) {
        if (q instanceof Array) {
            return function() {
                return B.iter(q)
            }
        }
        return typeof(q.iterator) == "function" ? s(q, q.iterator) : q.iterator
    }
    var o, G = 0;

    function s(X, q) {
        if (q == null) {
            return null
        }
        if (q.__id__ == null) {
            q.__id__ = G++
        }
        var W;
        if (X.hx__closures__ == null) {
            X.hx__closures__ = {}
        } else {
            W = X.hx__closures__[q.__id__]
        }
        if (W == null) {
            W = function() {
                return W.method.apply(W.scope, arguments)
            };
            W.scope = X;
            W.method = q;
            X.hx__closures__[q.__id__] = W
        }
        return W
    }
    if (Array.prototype.indexOf) {
        B.indexOf = function(q, X, W) {
            return Array.prototype.indexOf.call(q, X, W)
        }
    }
    Math.NaN = Number.NaN;
    Math.NEGATIVE_INFINITY = Number.NEGATIVE_INFINITY;
    Math.POSITIVE_INFINITY = Number.POSITIVE_INFINITY;
    p.Math = Math;
    Math.isFinite = function(q) {
        return isFinite(q)
    };
    Math.isNaN = function(q) {
        return isNaN(q)
    };
    String.prototype.__class__ = p.String = String;
    String.__name__ = ["String"];
    p.Array = Array;
    Array.__name__ = ["Array"];
    Date.prototype.__class__ = p.Date = Date;
    Date.__name__ = ["Date"];
    var x = p.Int = {
        __name__: ["Int"]
    };
    var w = p.Dynamic = {
        __name__: ["Dynamic"]
    };
    var z = p.Float = Number;
    z.__name__ = ["Float"];
    var T = Boolean;
    T.__ename__ = ["Bool"];
    var a = p.Class = {
        __name__: ["Class"]
    };
    var r = {};
    if (Array.prototype.map == null) {
        Array.prototype.map = function(Y) {
            var q = [];
            var X = 0;
            var Z = this.length;
            while (X < Z) {
                var W = X++;
                q[W] = Y(this[W])
            }
            return q
        }
    }
    if (Array.prototype.filter == null) {
        Array.prototype.filter = function(W) {
            var X = [];
            var q = 0;
            var Z = this.length;
            while (q < Z) {
                var Y = q++;
                var aa = this[Y];
                if (W(aa)) {
                    X.push(aa)
                }
            }
            return X
        }
    }
    e.Element = "element";
    e.PCData = "pcdata";
    e.CData = "cdata";
    e.Comment = "comment";
    e.DocType = "doctype";
    e.ProcessingInstruction = "processingInstruction";
    e.Document = "document";
    var L = window.jQuery;
    h.JQuery = L;
    h.SWFObject = deconcept.SWFObject;
    F.CURRENT_VERSION = "1.12.3";
    b.AlphaTexParser.EOL = String.fromCharCode(0);
    N.Ascii2Writer.HTML_CLASS_NAME_PREFFIX = "ascii2-";
    N.Ascii2Writer.TAB_HTML_CLASS_NAME = N.Ascii2Writer.HTML_CLASS_NAME_PREFFIX + "tab";
    N.Ascii2Writer.SCORE_HTML_CLASS_NAME = N.Ascii2Writer.HTML_CLASS_NAME_PREFFIX + "score";
    N.Ascii2Writer.TUNING_HTML_CLASS_NAME = N.Ascii2Writer.HTML_CLASS_NAME_PREFFIX + "tuning";
    N.Ascii2Writer.MEASURE_HTML_CLASS_NAME = N.Ascii2Writer.HTML_CLASS_NAME_PREFFIX + "measure";
    N.Ascii2Writer.MEASURE_NUMBER_HTML_CLASS_NAME = N.Ascii2Writer.HTML_CLASS_NAME_PREFFIX + "measure-number";
    N.Ascii2Writer.STRING_HTML_CLASS_NAME = N.Ascii2Writer.HTML_CLASS_NAME_PREFFIX + "string";
    N.Ascii2Writer.BEAT_HTML_CLASS_NAME = N.Ascii2Writer.HTML_CLASS_NAME_PREFFIX + "beat";
    N.Ascii2Writer.LINE_WRAP = "\r\n";
    N.Ascii2Writer.MIN_COUNT_SYMBOLS_PER_MEASURE = 6;
    N.Ascii2Writer.MIN_COUNT_SYMBOLS_PER_BEAT = 3;
    N.Ascii2Writer.MEASURE_OFFSET_LEFT = 2;
    N.Ascii2Writer.SINGLE_SYMBOL = "-";
    N.Ascii2Writer.MEASURE_END_SYMBOL = "|";
    N.Ascii2Writer.PRIMARY_INDEX_OF_VOICE = 0;
    C.FretBoard.OFFSET = 30;
    C.FretBoard.FRETBOARD_IMG = "fretboard_base.jpg";
    C.FretBoard.FRET_NUT_IMG = "fretboard_fret.png";
    C.FretBoard.STRING_IMG = "fret-string";
    C.FretBoard.IMG_COUNT = 3;
    C.FretBoard.DOT_COLOR = 7371655;
    C.FretBoard.DOT_RADIUS = 5;
    C.FretBoard.NOTE_RADIUS = 7;
    C.FretBoard.DISPLAY_FUTURE_NOTES = false;
    C.FretBoard.CURRENT_NOTES = "currentNotes";
    C.FretBoard.FUTURE_NOTES = "futureNotes";
    C.FretBoard.WITH_GLOW = true;
    C.FretBoard.PLAYING_STRINGS_DEFAULT_ALPHA = 0.3;
    C.FretBoard.NOTES_DEFAULT_ALPHA = 1;
    C.FretBoard.MAX_STRING_COUNT = 8;
    C.FretBoard.STRING_IMG_COUNT = 6;
    C.FretBoard.FRETBOARD_TOP_DOT = 1;
    C.FretBoard.FRETBOARD_BOTTOM_DOT = 2;
    c.GpReaderBase.DEFAULT_CHARSET = "UTF-8";
    c.GpReaderBase.BEND_POSITION = 60;
    c.GpReaderBase.BEND_SEMITONE = 25;
    c.HeaderFooterElements.NONE = 0;
    c.HeaderFooterElements.TITLE = 1;
    c.HeaderFooterElements.SUBTITLE = 2;
    c.HeaderFooterElements.ARTIST = 4;
    c.HeaderFooterElements.ALBUM = 8;
    c.HeaderFooterElements.WORDS = 16;
    c.HeaderFooterElements.MUSIC = 32;
    c.HeaderFooterElements.WORDS_AND_MUSIC = 64;
    c.HeaderFooterElements.COPYRIGHT = 128;
    c.HeaderFooterElements.PAGE_NUMBER = 256;
    c.HeaderFooterElements.ALL = 511;
    c.gpx.DocumentReader.BendPointPositionFactor = 0.6;
    c.gpx.DocumentReader.BendPointValueFactor = 0.04;
    c.gpx.FileSystem.HEADER_BCFS = 1397113666;
    c.gpx.FileSystem.HEADER_BCFZ = 1514554178;
    m.xml.Parser.escapes = (function(X) {
        var q;
        var W = new m.ds.StringMap();
        W.set("lt", "<");
        W.set("gt", ">");
        W.set("amp", "&");
        W.set("quot", '"');
        W.set("apos", "'");
        W.set("nbsp", String.fromCharCode(160));
        q = W;
        return q
    }(this));
    P.graphics.HtmlCanvas.HTML_CANVAS = "HtmlCanvas";
    P.graphics.HtmlCanvas.ANTI_ALIASING_OFFSET = 0.5;
    P.graphics.SvgCanvas.SVG_CANVAS = "SvgCanvas";
    P.net.LoaderStatus.OK = 200;
    P.net.LoaderStatus.OFFLINE = 0;
    P.net.LoaderStatus.NOT_FOUND = 404;
    P.net.LoaderStatus.SERVER_ERROR = 500;
    P.net.LoaderStatus.PARSE_ERROR = -3;
    P.net.LoaderStatus.TIMEOUT = -2;
    P.net.LoaderStatus.UNKNOWN = -1;
    P.utils.Logger.defaultLogger = new P.utils.TraceLogger();
    E.BitInputStream.BYTE_SIZE = 8;
    M.EffectFlag.EFFECT_DEAD = 1;
    M.EffectFlag.EFFECT_GHOST = 2;
    M.EffectFlag.EFFECT_BEND = 4;
    M.EffectFlag.EFFECT_FUTURE_NOTE_EFFECT_2 = 8;
    M.EffectFlag.EFFECT_FUTURE_NOTE_EFFECT_1 = 16;
    M.EffectFlag.EFFECT_PALM_MUTE = 32;
    M.EffectFlag.EFFECT_POP_SLAP_TAP_1 = 64;
    M.EffectFlag.EFFECT_POP_SLAP_TAP_2 = 128;
    M.EffectFlag.EFFECT_POP_SLAP_TAP_3 = 256;
    M.EffectFlag.EFFECT_TIE = 512;
    M.EffectFlag.EFFECT_TRILL = 1024;
    M.EffectFlag.EFFECT_VIBRATO = 2048;
    M.EffectFlag.EFFECT_ACCENTUATED_1 = 4096;
    M.EffectFlag.EFFECT_ACCENTUATED_2 = 8192;
    M.EffectFlag.EFFECT_FADE_IN = 16384;
    M.EffectFlag.EFFECT_TREMOLO_PICKING = 32768;
    M.EffectFlag.EFFECT_TREMOLO_BAR = 65536;
    Q.MidiInstrumentHelper._instrumentSchemeString = '[\r\n        {\r\n            "index": 0,\r\n            "name": "Piano",\r\n            "iconMidiIndex" : 0,\r\n            "instruments": [\r\n                {"index": 0, "midiIndex": 0, "name": "Acoustic Grand Piano"},\r\n                {"index": 1, "midiIndex": 1, "name": "Bright Piano"},\r\n                {"index": 2, "midiIndex": 2, "name": "Electric Grand Piano"},\r\n                {"index": 3, "midiIndex": 3, "name": "Honky-tonk Piano"},\r\n                {"index": 4, "midiIndex": 4, "name": "Electric Piano 1"},\r\n                {"index": 5, "midiIndex": 5, "name": "Electric Piano 2"},\r\n                {"index": 6, "midiIndex": 6, "name": "Harpsichord"},\r\n                {"index": 7, "midiIndex": 7, "name": "Clav"}\r\n            ]\r\n        },\r\n        {\r\n            "index": 1,\r\n            "name": "Chromatic Percussion",\r\n            "iconMidiIndex" : 8,\r\n            "instruments": [\r\n                {"index": 0, "midiIndex": 8, "name": "Celesta"},\r\n                {"index": 1, "midiIndex": 9, "name": "Glockenspiel"},\r\n                {"index": 2, "midiIndex": 10, "name": "Music Box"},\r\n                {"index": 3, "midiIndex": 11, "name": "Vibraphone"},\r\n                {"index": 4, "midiIndex": 12, "name": "Marimba"},\r\n                {"index": 5, "midiIndex": 13, "name": "Xylophone"},\r\n                {"index": 6, "midiIndex": 14, "name": "Tubular Bells"},\r\n                {"index": 7, "midiIndex": 15, "name": "Dulcimer"}\r\n            ]\r\n        },\r\n        {\r\n            "index": 2,\r\n            "name": "Organ",\r\n            "iconMidiIndex" : 16,\r\n            "instruments": [\r\n                {"index": 0, "midiIndex": 16, "name": "Drawbar Organ"},\r\n                {"index": 1, "midiIndex": 17, "name": "Percussive Organ"},\r\n                {"index": 2, "midiIndex": 18, "name": "Rock Organ"},\r\n                {"index": 3, "midiIndex": 19, "name": "Church Organ"},\r\n                {"index": 4, "midiIndex": 20, "name": "Reed Organ"},\r\n                {"index": 5, "midiIndex": 21, "name": "Accordian"},\r\n                {"index": 6, "midiIndex": 22, "name": "Harmonica" },\r\n                {"index": 7, "midiIndex": 23, "name": "Tango Accordian"}\r\n            ]\r\n        },\r\n        {\r\n            "index": 3,\r\n            "name": "Guitar",\r\n            "iconMidiIndex" : 24,\r\n            "instruments": [\r\n                {"index": 0, "midiIndex": 24, "name": "Nylon String Guitar"},\r\n                {"index": 1, "midiIndex": 25, "name": "Steel String Guitar"},\r\n                {"index": 2, "midiIndex": 26, "name": "Jazz Guitar"},\r\n                {"index": 3, "midiIndex": 27, "name": "Clean Electric Guitar"},\r\n                {"index": 4, "midiIndex": 28, "name": "Muted Electric Guitar"},\r\n                {"index": 5, "midiIndex": 29, "name": "Overdrive Guitar"},\r\n                {"index": 6, "midiIndex": 30, "name": "Distortion Guitar"},\r\n                {"index": 7, "midiIndex": 31, "name": "Guitar Harmonics"}\r\n            ]\r\n        },\r\n        {\r\n            "index": 4,\r\n            "name": "Bass",\r\n            "iconMidiIndex" : 32,\r\n            "instruments": [\r\n                {"index": 0, "midiIndex": 32, "name": "Acoustic Bass"},\r\n                {"index": 1, "midiIndex": 33, "name": "Fingered Bass"},\r\n                {"index": 2, "midiIndex": 34, "name": "Picked Bass"},\r\n                {"index": 3, "midiIndex": 35, "name": "Fretless Bass"},\r\n                {"index": 4, "midiIndex": 36, "name": "Slap Bass 1"},\r\n                {"index": 5, "midiIndex": 37, "name": "Slap Bass 2"},\r\n                {"index": 6, "midiIndex": 38, "name": "Synth Bass 1"},\r\n                {"index": 7, "midiIndex": 39, "name": "Synth Bass 2"}\r\n            ]\r\n        },\r\n        {\r\n            "index": 5,\r\n            "name": "Strings",\r\n            "iconMidiIndex" : 40,\r\n            "instruments": [\r\n                {"index": 0, "midiIndex": 40, "name": "Violin"},\r\n                {"index": 1, "midiIndex": 41, "name": "Viola"},\r\n                {"index": 2, "midiIndex": 42, "name": "Cello"},\r\n                {"index": 3, "midiIndex": 43, "name": "Contrabass"},\r\n                {"index": 4, "midiIndex": 44, "name": "Tremolo Strings"},\r\n                {"index": 5, "midiIndex": 45, "name": "Pizzicato Strings"},\r\n                {"index": 6, "midiIndex": 46, "name": "Orchestral Harp"},\r\n                {"index": 7, "midiIndex": 47, "name": "Timpani"}\r\n            ]\r\n        },\r\n        {\r\n            "index": 6,\r\n            "name": "Ensemble",\r\n            "iconMidiIndex" : 48,\r\n            "instruments": [\r\n                {"index": 0, "midiIndex": 48, "name": "String Ensemble 1"},\r\n                {"index": 1, "midiIndex": 49, "name": "String Ensemble 2"},\r\n                {"index": 2, "midiIndex": 50, "name": "Synth Strings 1"},\r\n                {"index": 3, "midiIndex": 51, "name": "Synth Strings 2"},\r\n                {"index": 4, "midiIndex": 52, "name": "Choir Ahh"},\r\n                {"index": 5, "midiIndex": 53, "name": "Choir Oohh"},\r\n                {"index": 6, "midiIndex": 54, "name": "Synth Voice"},\r\n                {"index": 7, "midiIndex": 55, "name": "Orchestral Hit"}\r\n            ]\r\n        },\r\n        {\r\n            "index": 7,\r\n            "name": "Brass",\r\n            "iconMidiIndex" : 56,\r\n            "instruments": [\r\n                {"index": 0, "midiIndex": 56, "name": "Trumpet"},\r\n                {"index": 1, "midiIndex": 57, "name": "Trombone"},\r\n                {"index": 2, "midiIndex": 58, "name": "Tuba"},\r\n                {"index": 3, "midiIndex": 59, "name": "Muted Trumpet"},\r\n                {"index": 4, "midiIndex": 60, "name": "French Horn"},\r\n                {"index": 5, "midiIndex": 61, "name": "Brass Section"},\r\n                {"index": 6, "midiIndex": 62, "name": "Synth Brass 1"},\r\n                {"index": 7, "midiIndex": 63, "name": "Synth Brass 2"}\r\n            ]\r\n        },\r\n        {\r\n            "index": 8,\r\n            "name": "Reed",\r\n            "iconMidiIndex" : 64,\r\n            "instruments": [\r\n                {"index": 0, "midiIndex": 64, "name": "Soprano Sax"},\r\n                {"index": 1, "midiIndex": 65, "name": "Alto Sax"},\r\n                {"index": 2, "midiIndex": 66, "name": "Tenor Sax"},\r\n                {"index": 3, "midiIndex": 67, "name": "Baritone Sax"},\r\n                {"index": 4, "midiIndex": 68, "name": "Oboe"},\r\n                {"index": 5, "midiIndex": 69, "name": "English Horn"},\r\n                {"index": 6, "midiIndex": 70, "name": "Bassoon"},\r\n                {"index": 7, "midiIndex": 71, "name": "Clarinet"}\r\n            ]\r\n        },\r\n        {\r\n            "index": 9,\r\n            "name": "Pipe",\r\n            "iconMidiIndex" : 72,\r\n            "instruments": [\r\n                {"index": 0, "midiIndex": 72, "name": "Piccolo"},\r\n                {"index": 1, "midiIndex": 73, "name": "Flute"},\r\n                {"index": 2, "midiIndex": 74, "name": "Nhạc Cụ" },\r\n                {"index": 3, "midiIndex": 75, "name": "Pan Flute"},\r\n                {"index": 4, "midiIndex": 76, "name": "Blown Bottle"},\r\n                {"index": 5, "midiIndex": 77, "name": "Shakuhachi"},\r\n                {"index": 6, "midiIndex": 78, "name": "Whistle"},\r\n                {"index": 7, "midiIndex": 79, "name": "Ocarina"}\r\n            ]\r\n        },\r\n        {\r\n            "index": 10,\r\n            "name": "Synth Lead",\r\n            "iconMidiIndex" : 80,\r\n            "instruments": [\r\n                {"index": 0, "midiIndex": 80, "name": "Square Wav"},\r\n                {"index": 1, "midiIndex": 81, "name": "Sawtooth Wav"},\r\n                {"index": 2, "midiIndex": 82, "name": "Caliope"},\r\n                {"index": 3, "midiIndex": 83, "name": "Chiff"},\r\n                {"index": 4, "midiIndex": 84, "name": "Charang"},\r\n                {"index": 5, "midiIndex": 85, "name": "Voice"},\r\n                {"index": 6, "midiIndex": 86, "name": "Fifth\'s"},\r\n                {"index": 7, "midiIndex": 87, "name": "Bass&Lead"}\r\n            ]\r\n        },\r\n        {\r\n            "index": 11,\r\n            "name": "Synth Pad",\r\n            "iconMidiIndex" : 88,\r\n            "instruments": [\r\n                {"index": 0, "midiIndex": 88, "name": "New Age"},\r\n                {"index": 1, "midiIndex": 89, "name": "Warm"},\r\n                {"index": 2, "midiIndex": 90, "name": "Polysynth"},\r\n                {"index": 3, "midiIndex": 91, "name": "Choir"},\r\n                {"index": 4, "midiIndex": 92, "name": "Bowed"},\r\n                {"index": 5, "midiIndex": 93, "name": "Metallic"},\r\n                {"index": 6, "midiIndex": 94, "name": "Halo"},\r\n                {"index": 7, "midiIndex": 95, "name": "Sweep"}\r\n            ]\r\n        },\r\n        {\r\n            "index": 12,\r\n            "name": "Synth Effects",\r\n            "iconMidiIndex" : 96,\r\n            "instruments": [\r\n                {"index": 0, "midiIndex": 96, "name": "FX Rain"},\r\n                {"index": 1, "midiIndex": 97, "name": "FX Soundtrack"},\r\n                {"index": 2, "midiIndex": 98, "name": "FX Crystal"},\r\n                {"index": 3, "midiIndex": 99, "name": "FX Atmosphere"},\r\n                {"index": 4, "midiIndex": 100, "name": "FX Brightness"},\r\n                {"index": 5, "midiIndex": 101, "name": "FX Goblins"},\r\n                {"index": 6, "midiIndex": 102, "name": "FX Echo Drops"},\r\n                {"index": 7, "midiIndex": 103, "name": "FX Star Theme"}\r\n            ]\r\n        },\r\n        {\r\n            "index": 13,\r\n            "name": "Ethnic",\r\n            "iconMidiIndex" : 104,\r\n            "instruments": [\r\n                {"index": 0, "midiIndex": 104, "name": "Sitar"},\r\n                {"index": 1, "midiIndex": 105, "name": "Banjo"},\r\n                {"index": 2, "midiIndex": 106, "name": "Shamisen"},\r\n                {"index": 3, "midiIndex": 107, "name": "Koto"},\r\n                {"index": 4, "midiIndex": 108, "name": "Kalimba"},\r\n                {"index": 5, "midiIndex": 109, "name": "Bagpipe"},\r\n                {"index": 6, "midiIndex": 110, "name": "Fiddle"},\r\n                {"index": 7, "midiIndex": 111, "name": "Shanai"}\r\n            ]\r\n        },\r\n        {\r\n            "index": 14,\r\n            "name": "Percussive",\r\n            "iconMidiIndex" : 112,\r\n            "instruments": [\r\n                {"index": 0, "midiIndex": 112, "name": "Tinkle Bell"},\r\n                {"index": 1, "midiIndex": 113, "name": "Agogo"},\r\n                {"index": 2, "midiIndex": 114, "name": "Steel Drums"},\r\n                {"index": 3, "midiIndex": 115, "name": "Woodblock"},\r\n                {"index": 4, "midiIndex": 116, "name": "Taiko Drum"},\r\n                {"index": 5, "midiIndex": 117, "name": "Melodic Tom"},\r\n                {"index": 6, "midiIndex": 118, "name": "Synth Drum"},\r\n                {"index": 7, "midiIndex": 119, "name": "Reverse Cymbal"}\r\n            ]\r\n        },\r\n        {\r\n            "index": 15,\r\n            "name": "Sound Effects",\r\n            "iconMidiIndex" : 120,\r\n            "instruments": [\r\n                {"index": 0, "midiIndex": 120, "name": "Guitar Fret Noise"},\r\n                {"index": 1, "midiIndex": 121, "name": "Breath Noise"},\r\n                {"index": 2, "midiIndex": 122, "name": "Seashore"},\r\n                {"index": 3, "midiIndex": 123, "name": "Bird Tweet"},\r\n                {"index": 4, "midiIndex": 124, "name": "Telephone Ring"},\r\n                {"index": 5, "midiIndex": 125, "name": "Helicopter"},\r\n                {"index": 6, "midiIndex": 126, "name": "Applause"},\r\n                {"index": 7, "midiIndex": 127, "name": "Gunshot"}\r\n            ]\r\n        },\r\n        {\r\n            "index": 16,\r\n            "name": "Drum Kits",\r\n            "iconMidiIndex" : -1,\r\n            "instruments": [\r\n                {"index": 0, "midiIndex": 128, "name": "Standard Drum Kit"}\r\n            ]\r\n        }\r\n    ]';
    Q.MidiInstrumentHelper.instrumentIcons = (function(W) {
        var q;
        var X = new m.ds.StringMap();
        X.set("bass", '<svg viewBox="0 0 48 48"><path d="M5.8 33.9l5.2 5.2 1.7-1.7-5.2-5.2-1.7 1.7zm35.1-20.3c-1-1-2.3-1.4-3.8-1.3-.4 0-.8.1-1.2.2-.1 0-.4.2-.5.2L11.7 23.5c-.8.4-1.3 1.1-1.2 1.9 0 .1 1.2 2.6.2 3.6l-1.5 1.5 5.2 5.2 1.2-1.2.3-.3c.8-.8 3.1-.3 4.3-.2.7 0 1.3.1 2 .2.2 0 .4.1.6.1.5 0 1-.3 1.4-.8 1.4-1.9 6.3-8.1 8.2-10.4l2.6.3c.2 0 .9.1 1.3 0 1.5-.1 2.9-.8 4.1-2 1.1-1.1 1.8-2.6 2-4.1-.1-1.4-.6-2.8-1.5-3.7zM16.4 25.9c-.8.1-1.6-.6-1.6-1.4-.1-.8.6-1.6 1.4-1.6.8-.1 1.6.6 1.6 1.4.1.8-.5 1.5-1.4 1.6zm5.4-2.6c-.8.1-1.6-.6-1.6-1.4-.1-.8.6-1.6 1.4-1.6.8-.1 1.6.6 1.6 1.4 0 .8-.6 1.6-1.4 1.6zm5.3-2.4c-.8.1-1.6-.6-1.6-1.4-.1-.8.6-1.6 1.4-1.6.8-.1 1.6.6 1.6 1.4.1.8-.5 1.5-1.4 1.6zm5.4-2.5c-.8.1-1.6-.6-1.6-1.4-.1-.8.6-1.6 1.4-1.6.8-.1 1.6.6 1.6 1.4.1.8-.5 1.6-1.4 1.6zM12.3 21l1.3.5c.9.3 1.9-.1 2.2-1l.5-1.3c.3-.9-.1-1.9-1-2.2l-1.3-.4c-.9-.3-1.9.1-2.2 1l-.5 1.3c-.3.8.2 1.8 1 2.1zm5.5-2.5l1.3.5c.9.3 1.9-.1 2.2-1l.5-1.3c.3-.9-.1-1.9-1-2.2l-1.3-.5c-.9-.3-1.9.1-2.2 1l-.5 1.3c-.3.9.1 1.9 1 2.2zm5.5-2.5l1.3.5c.9.3 1.9-.1 2.2-1l.5-1.3c.3-.9-.1-1.9-1-2.2l-1.3-.5c-.9-.3-1.9.1-2.2 1l-.5 1.3c-.3.9.1 1.9 1 2.2zm5.5-2.5l1.3.5c.9.3 1.9-.1 2.2-1l.5-1.3c.3-.9-.1-1.9-1-2.2L30.4 9c-.9-.3-1.9.1-2.2 1l-.5 1.3c-.2.9.2 1.9 1.1 2.2z"/></svg>');
        X.set("brass", '<svg viewBox="0 0 48 48"><path d="M13.6 26.6c.1.1.3.2.5.2s.3 0 .4-.1l1.2 1.2c.2-.3.5-.7.8-1l.4-.4-1.2-1.2c.2-.3.2-.6-.1-.9l-.3-.3c-.3-.3-.7-.3-.9 0l-1.2 1.2c-.1.1-.2.3-.2.5s.1.3.2.5l.4.3zm2.7-2.7c.1.1.3.2.5.2s.3-.1.4-.2l1.2 1.2 1.3-1.3-1.2-1.2c.2-.3.2-.6-.1-.9l-.3-.3c-.3-.3-.7-.3-.9 0L16 22.6c-.3.3-.3.7 0 .9l.3.4zm2.8-2.8c.2.2.6.3.9.1l1.2 1.2 1.3-1.3-1.2-1.2c.2-.3.2-.7 0-.9l-.3-.4c-.3-.3-.7-.2-1 0l-1.2 1.2c-.3.3-.2.7 0 .9l.3.4zm-4.6 9.8l-3.7 3.7-.2-.2c-.6-.6-1.5-.5-2 0-.6.6-.6 1.5 0 2l3.1 3c.6.6 1.5.5 2 0 .6-.6.6-1.5 0-2l-.3-.3 1.5-1.5c-.6-1.5-.7-3.1-.4-4.7zm25-12.4l-9.9-9.9c-.6-.6-1.4-.6-2 0-.5.5-.3 1.2 0 1.9.4 1 1.5 4.7-2.1 9.4-.3.3-.6.7-.8 1L23.4 22l-1.3 1.3-1.4 1.4-1.3 1.3-1.5 1.5-.4.4c-.3.3-.6.6-.8 1v.1c-.5.7-.8 1.3-.9 2.1-.3 1.2-.3 2.4 0 3.6.3 1.1.9 2.1 1.7 3 2.3 2.3 6 2.6 8.6.8l1.4 1.4c.2.2.7 0 1-.3.3-.3.5-.8.3-1l-1.2-1.2 1.5-1.5 1.2 1.2c.2.2.7 0 1-.4.3-.3.5-.8.3-.9l-1.2-1.2 1.4-1.4 1.2 1.2c.2.2.6 0 1-.4s.5-.7.3-.9L33 31.6c1.9-2.7 1.6-6.3-.8-8.7-.3-.3-.6-.6-.9-.8-1 .5-2.2 1.2-3.4 2.3.7.1 1.4.4 1.9 1 1 1 1.3 2.4.7 3.7L26 24.6c1.4-1.4 2.7-2.4 4-3.1.5-.3 1-.5 1.5-.7 3.1-1.2 5.3-.5 6.1-.2.7.3 1.4.5 2 0 .4-.7.4-1.6-.1-2.1zM20 35.1c-1-1-1.2-2.4-.7-3.6l4.3 4.3c-1.2.5-2.6.2-3.6-.7zm5.1-.4L20.4 30l1.5-1.5 4.7 4.7-1.5 1.5zm4.2-4.2l-1.4 1.4-4.7-4.7.3-.3.9-.9.2-.2 4.7 4.7z"/></svg>');
        X.set("chroma", '<svg viewBox="0 0 48 48"><path d="M41.5 16.7L31.3 6.5c-1.2-1.2-3.3-1.2-4.5 0-1.2 1.2-1.2 3.3 0 4.5L37 21.2c1.2 1.2 3.3 1.2 4.5 0 1.2-1.2 1.2-3.3 0-4.5zm-10.7-6.2c-.4.4-1.1.4-1.5 0-.4-.4-.4-1.1 0-1.5.4-.4 1.1-.4 1.5 0 .4.5.4 1.1 0 1.5zm8.2 8.2c-.4.4-1.1.4-1.5 0-.4-.4-.4-1.1 0-1.5.4-.4 1.1-.4 1.5 0 .4.4.4 1.1 0 1.5zm-28 1.5c-1.2-1.2-3.3-1.2-4.5 0-1.2 1.2-1.2 3.3 0 4.5l16.8 16.8c1.2 1.2 3.3 1.2 4.5 0 1.2-1.2 1.2-3.3 0-4.5L11 20.2zm2.9 7.3c-.4.4-1.1.4-1.5 0-.4-.4-.4-1.1 0-1.5.4-.4 1.1-.4 1.5 0 .4.4.4 1.1 0 1.5zm8.1 8.2c-.4.4-1.1.4-1.5 0-.4-.4-.4-1.1 0-1.5.4-.4 1.1-.4 1.5 0 .5.4.5 1 0 1.5zm-4.2-20.1c-1.2-1.2-3.3-1.2-4.5 0-1.2 1.2-1.2 3.3 0 4.5l14.6 14.6c.9.9 2.3 1.2 3.4.7l-2.5-8.8-11-11zm1.7 6.2c-.4.4-1.1.4-1.5 0-.4-.4-.4-1.1 0-1.5.4-.4 1.1-.4 1.5 0 .4.4.5 1.1 0 1.5zm8.2 8.2c-.4.4-1.1.4-1.5 0-.4-.4-.4-1.1 0-1.5.4-.4 1.1-.4 1.5 0 .4.4.4 1.1 0 1.5zm7-8.8c-.1 1.1-.4 2-1.2 3l1.3 4.7c.8 0 1.5-.3 2.1-.9 1.2-1.2 1.2-3.3 0-4.5l-2.2-2.3zm-9.6-.6c.1-1.1.6-2.2 1.4-3.1.6-.6 1.3-1 2.1-1.2.3-.1.7-.2 1-.2l-5-5c-1.2-1.2-3.3-1.2-4.5 0-1.2 1.2-1.2 3.3 0 4.5l5 5zm-1.4-5.9c.4-.4 1.1-.4 1.5 0 .4.4.4 1.1 0 1.5-.4.4-1.1.4-1.5 0-.4-.4-.4-1.1 0-1.5zm9.6 13.9l-1.2-4.4-.1-.4c.1-.1.3-.2.4-.3.2-.2.3-.3.4-.5l.1-.1.1-.1c.4-.8.6-1.7.3-2.6 0-.1-.1-.2-.1-.3-.3-.8-.8-1.4-1.6-1.8-.2-.1-.3-.2-.5-.2-.7-.2-1.5-.3-2.2-.1-.6.2-1.1.5-1.5.9-.9.9-1.2 2.2-.9 3.4 0 .1 0 .1.1.2.3 1.1 1.1 1.9 2.2 2.2.2.1.5.1.8.2l.2.8.9 3.2 2.6 9.2c.2.7.9 1.1 1.6.9l.6-.3c.3-.3.5-.8.3-1.3l-2.5-8.6z"/></svg>');
        X.set("drums", '<svg viewBox="0 0 48 48"><path d="M32.8 23.2c-.9-4.1-4.6-7.2-9-7.2s-8.1 3.1-9 7.2c-.5.3-.9.9-.9 1.7v.7c0 .8.4 1.4.9 1.7.5 2.2 1.8 4.2 3.6 5.5l-1 1s-.2.2.2.6l.9.9s.3.2.5 0l1.4-1.4c1 .4 2.1.6 3.3.6 1.2 0 2.3-.2 3.3-.6l1.4 1.4c.2.2.5 0 .5 0l.9-.9c.3-.3.2-.6.2-.6l-1-1c1.8-1.3 3.1-3.2 3.6-5.5.5-.3.9-.9.9-1.7v-.7c.2-.7-.2-1.4-.7-1.7zM23.9 32c-3.7 0-6.7-3-6.7-6.7s3-6.7 6.7-6.7 6.7 3 6.7 6.7c-.1 3.7-3 6.7-6.7 6.7zM16.1 14.5c0 .4-.4.8-.9.7l-9.2-1c-.4 0-.8-.4-.7-.9 0-.4.4-.8.9-.7l9.2 1c.4.1.8.5.7.9zM15.8 17.4c0 .4-.4.8-.9.7l-9.2-1c-.4-.1-.7-.5-.7-.9s.4-.8.9-.7l9.2 1c.5.1.8.5.7.9zM9.5 18.5h2V32h-2zM11.1 30.9l2.7 2.9h-1.7l-1.6-2.3zM9.8 30.9l-2.6 2.9h1.7l1.6-2.3zM31.9 14.5c0 .4.4.8.9.7l9.2-1c.4 0 .8-.4.7-.9 0-.4-.4-.8-.9-.7l-9.2 1c-.4.1-.8.5-.7.9zM32.2 17.4c0 .4.4.8.9.7l9.2-1c.4 0 .8-.4.7-.9 0-.4-.4-.8-.9-.7l-9.2 1c-.5.1-.8.5-.7.9zM36.5 18.5h2V32h-2zM36.9 30.9l-2.7 2.9h1.7l1.6-2.3zM38.2 30.9l2.6 2.9h-1.7l-1.6-2.3z"/><ellipse cx="10.7" cy="13.2" rx=".8" ry=".5"/><ellipse cx="37.3" cy="13.2" rx=".8" ry=".5"/></svg>');
        X.set("fx", '<svg viewBox="0 0 48 48"><path d="M23.1 20c.1-.1.2-.2.3-.4.1-.2.1-.3.2-.5s.1-.4.2-.6c0-.2.1-.4.1-.6v-.4c0-.2 0-.4-.1-.5-.1-.1-.2-.2-.3-.2h-2.6l.2-1.2c.1-.5.2-.9.3-1.2.1-.3.3-.6.5-.8.2-.2.4-.4.7-.5.1-.1.4-.1.7-.1h.5c.2 0 .3.1.4.1.1 0 .2.1.3.1h.3c.1 0 .2-.1.2-.2.1-.1.1-.2.2-.4s.1-.3.2-.5c0-.2.1-.4.1-.6 0-.2 0-.3.1-.5s0-.3 0-.3v-.4c0-.1-.1-.2-.1-.2-.1-.1-.2-.1-.4-.2-.1.1-.3 0-.5 0s-.5-.1-.8-.1H23c-.8 0-1.6.1-2.3.3-.7.2-1.2.6-1.7 1-.5.5-.9 1-1.2 1.7-.3.7-.6 1.5-.8 2.4l-.3 1.6h-1.8c-.1 0-.3.1-.4.2-.1.1-.2.2-.3.4-.1.2-.2.3-.2.5-.1.2-.1.4-.1.6 0 .2-.1.4-.1.6v.4c0 .3 0 .4.1.5.1.1.2.1.3.1H16l-2.4 12.2c-.1.5-.2.9-.3 1.2-.1.3-.3.6-.5.8-.2.2-.4.4-.7.5-.2.2-.5.2-.9.2H10.1c-.1 0-.2.1-.3.2-.1.1-.1.2-.2.4s-.1.3-.2.5c0 .2-.1.4-.1.6 0 .2-.1.3-.1.5v.6c0 .1.1.1.1.2.1.1.4.2.7.3.4.1.8.1 1.4.1.8 0 1.6-.1 2.3-.3.7-.2 1.2-.6 1.7-1 .5-.5.9-1 1.2-1.7.3-.7.6-1.5.8-2.4l2.5-12.7h2.7c.3-.2.4-.2.5-.3zm15.6-2.8c0-.1 0-.2-.2-.3-.1-.1-.4-.1-.7-.1h-2.3c-.3 0-.5.1-.6.1-.2 0-.3.1-.4.2l-.2.2-3.5 4.8-1.7-4.8c0-.1-.1-.2-.1-.3 0-.1-.1-.1-.3-.2-.1 0-.3-.1-.6-.1h-2.2c-.3 0-.5.1-.7.2l-.3.3c0 .1 0 .3.1.5l2.4 6.7-5.5 7.2c-.1.2-.2.3-.2.4 0 .1 0 .2.2.3.1.1.3.1.6.1h2.3c.3 0 .6-.1.7-.1.2 0 .3-.1.4-.2.1-.1.2-.2.2-.3l3.7-5.1 1.7 5.1c0 .1.1.2.1.3 0 .1.1.1.3.2.1 0 .3.1.6.1h2.3c.3 0 .6-.1.7-.2.2-.1.3-.2.3-.3v-.5l-2.6-7.2 5-6.7c.4-.1.5-.2.5-.3z"/></svg>');
        X.set("ac-guitar", '<svg viewBox="0 0 48 48"><path d="M31.1 26.5c3.4-3 9.6-7.7 9.6-7.7l-1.1-1.1c-1.4-1.4-.5-3.5-1.5-4.6-1-1-2.2-.9-2.2-.9S36 11 35 10c-1-1-3.2-.1-4.6-1.5l-1.1-1.1s-4.7 6.2-7.7 9.6c-3 3.4-8 7.6-8 7.6-.3.4-.6.8-.6 1.2-.1.6.1 1.2.4 1.5 0 0 .9 1-.7 2.6L11 31.6l5.5 5.5 1.7-1.7c1.6-1.6 2.6-.7 2.6-.7.4.4 1 .5 1.5.4.4-.1.9-.3 1.2-.6 0 0 4.2-5 7.6-8zm2.3-7.5c.5-.5 1.4-.5 1.9 0s.5 1.4 0 1.9-1.4.5-1.9 0-.5-1.4 0-1.9zm-14.5 6.2c-.5.5-1.4.5-1.9 0s-.5-1.4 0-1.9 1.4-.5 1.9 0c.6.5.6 1.3 0 1.9zm3.5-7c.5-.5 1.4-.5 1.9 0s.5 1.4 0 1.9-1.4.5-1.9 0c-.6-.5-.6-1.4 0-1.9zm2.1 12.6c-.5.5-1.4.5-1.9 0s-.5-1.4 0-1.9 1.4-.5 1.9 0c.6.5.6 1.3 0 1.9zm2.4-18.3c.5-.5 1.4-.5 1.9 0s.5 1.4 0 1.9-1.4.5-1.9 0-.5-1.4 0-1.9zm.8 12.9c-.5-.5-.5-1.4 0-1.9s1.4-.5 1.9 0 .5 1.4 0 1.9c-.5.6-1.4.6-1.9 0zM7.3 34.8l5.9 5.9 1.8-1.8L9.1 33l-1.8 1.8zm15.1-23.1c.9.7 1.6 0 2.3-.9.7-.9 1.2-1.7.3-2.4-1-.8-2.3-.6-3 .3-.7.9-.5 2.3.4 3zm-2.1 4.5c.8-.9 1.3-1.7.4-2.4-.9-.8-2.2-.7-3 .2-.8.9-.7 2.2.2 3 .9.7 1.6.1 2.4-.8zm-5.1 5.3c.8-.8 1.4-1.6.6-2.4-.8-.8-2.2-.8-3 0-.8.8-.8 2.2 0 3 .8.8 1.6.2 2.4-.6zm22 1.8c-.9.7-1.6 1.4-.9 2.3.7.9 2 1.1 2.9.4.9-.7 1.1-2 .4-2.9-.6-1-1.4-.5-2.4.2zm-5.4 4.4c-.9.8-1.5 1.5-.7 2.4.8.9 2.1 1 3 .2.9-.8 1-2.1.2-3-.8-.9-1.6-.4-2.5.4zm-5.3 5.1c-.8.8-1.4 1.6-.6 2.4.8.8 2.2.8 3 0 .8-.8.8-2.2 0-3-.8-.8-1.5-.2-2.4.6z"/></svg>');
        X.set("el-guitar", '<svg viewBox="0 0 48 48"><path d="M39.3 14.5c-1-.9-2.4-1.2-3.9-1l-1.2.3c-.1.1-.4.2-.5.2L11 26.7c-.7.4-1.2 1.2-1 2 0 .1 1.4 2.5.5 3.6l-3.5 4 5.6 4.8 3.2-3.8.2-.3c.7-.8 3-.5 4.3-.6.7 0 1.3 0 2 .1h.6c.5-.1 1-.4 1.3-.9 1.3-2 5.7-8.6 7.3-11l2.6.1c.2 0 .9 0 1.3-.1 1.5-.2 2.9-1 3.9-2.3 1-1.2 1.6-2.7 1.6-4.2s-.6-2.8-1.6-3.6zM8.6 24.9l1.2.3c.8.2 1.6-.2 1.9-1L12 23c.2-.8-.2-1.6-1-1.9l-1.2-.3c-.8-.2-1.6.2-1.9 1L7.5 23c-.2.8.3 1.7 1.1 1.9zm4.6-2.6l1.2.3c.8.2 1.6-.2 1.9-1l.3-1.2c.2-.8-.2-1.6-1-1.9l-1.2-.3c-.8-.2-1.6.2-1.9 1l-.3 1.2c-.2.8.2 1.7 1 1.9zm4.7-2.6l1.2.3c.8.2 1.6-.2 1.9-1l.3-1.2c.2-.8-.2-1.6-1-1.9l-1.2-.3c-.8-.2-1.6.2-1.9 1l-.3 1.2c-.3.9.2 1.7 1 1.9zm4.7-2.6l1.2.3c.8.2 1.6-.2 1.9-1l.3-1.2c.2-.8-.2-1.6-1-1.9l-1.3-.3c-.8-.2-1.6.2-1.9 1l-.3 1.2c-.2.8.3 1.7 1.1 1.9zm4.8-2.6l1.2.3c.8.2 1.6-.2 1.9-1l.3-1.2c.2-.8-.2-1.6-1-1.9l-1.2-.3c-.8-.2-1.6.2-1.9 1l-.3 1.2c-.2.9.2 1.7 1 1.9zm4.7-2.6l1.2.3c.8.2 1.6-.2 1.9-1l.3-1.2c.2-.8-.2-1.6-1-1.9l-1.2-.3c-.8-.2-1.6.2-1.9 1l-.3 1.2c-.3.8.2 1.7 1 1.9z"/></svg>');
        X.set("organ", '<svg viewBox="0 0 48 48"><path d="M37 12.3L35.7 11l-4.8-4.8L28 9l3.9 3.9-1.1 1.1-3.9-3.9-1.2 1.2 3.9 3.9-1.2 1.2-3.9-3.9-3.1 3.1 3.9 3.9-1.2 1.2-3.9-3.9L19 18l3.9 3.9-1.1 1.1-3.9-3.9-1.2 1.2 3.9 3.9-1.2 1.2-3.9-3.9-3.1 3.1 3.9 3.9-1.2 1.2-3.9-3.9L10 27l3.9 3.9-1.2 1.2L9 28l-2.8 2.8 6.4 6.4 24.7-24.7-.3-.2zm4.7 8.1l-5.3-5.3-2.4 2.4 3.4 3.4-1 1-3.4-3.4-1 1 3.4 3.4-1 1-3.4-3.4-2.7 2.7 3.4 3.4-1 1-3.4-3.4-1 1 3.4 3.4-1 1-3.4-3.4-1 1 3.4 3.4-1 1-3.4-3.4-2.7 2.7 3.4 3.4-1 1-3.4-3.4-1 1 3.4 3.4-1 1-3.4-3.4-2.4 2.4 4.2 4.2 1.3 1.3 21.2-21.2-.2-.2z"/></svg>');
        X.set("percussive", '<svg viewBox="0 0 48 48"><path d="M35.3 13.3c-.2-.2-.5-.3-.7-.4-.1.3-.4.6-.6 1-.2.2-.4.4-.7.6-.1.1-.3.2-.4.3-.3.2-.6.4-1 .6-.1.1-.5.2-.6.3-.5.2-1.1.4-1.8.6-.7.2-1.4.4-2.3.5-1 .1-2 .2-3.1.2s-2.2-.1-3.1-.2c-.9-.1-1.6-.3-2.3-.5l-1.8-.6-.6-.3c-.4-.2-.8-.4-1.1-.7-.1-.1-.2-.2-.3-.2-.3-.2-.5-.5-.7-.7-.3-.3-.5-.6-.6-.9-.3.1-.5.2-.7.4-.9.7-.9 1.7-.2 2.4.2.2.4.4.7.6-.3 1.5-.6 3.5-.6 6 .2 9.5 5.6 16.5 5.8 16.8l.3.3c1.5 1.1 4.6 1.2 5 1.2.4 0 3.5 0 5-1.2l.3-.3c.2-.3 5.6-7.3 5.8-16.8.1-2.4-.2-4.5-.6-6 .2-.2.5-.4.7-.7.9-.6.9-1.6.2-2.3zm-8 24.1c-.4.3-1.9.6-3.3.6s-2.9-.3-3.4-.6c-.7-1-5-7.2-5.2-15.1 0-1.7.1-3.3.3-4.5.1 0 .1.1.2.1.8.3 1.7.6 2.7.9v3.8c-.4.4-.6 1.1-.6 1.8 0 1.5.8 2.6 1.7 2.6.9 0 1.7-1.2 1.7-2.6 0-.8-.2-1.4-.5-1.9v-3.4c1 .1 2 .2 3.1.2s2.2-.1 3.1-.2v3.4c-.3.5-.5 1.2-.5 1.9 0 1.5.8 2.6 1.7 2.6.9 0 1.7-1.2 1.7-2.6 0-.8-.1-1.4-.5-1.9v-3.8c1-.2 1.9-.5 2.6-.9h.1c.2 1.2.4 2.7.3 4.5-.2 7.8-4.4 14-5.2 15.1zM16.5 14c.2.1.5.2.7.4.2.1.3.1.5.2.4.2.8.3 1.3.4.5.1 1.1.3 1.6.3 1 .2 2.2.3 3.3.3 1.2 0 2.3-.1 3.3-.3.6-.1 1.1-.2 1.6-.3.5-.1.9-.3 1.3-.4.2-.1.3-.1.5-.2l.6-.3c.6-.3 1-.6 1.4-1 .4-.5.7-1 .7-1.5 0-2.3-4.2-4.1-9.4-4.1s-9.4 1.8-9.4 4.1c0 .5.2 1.1.7 1.5.4.3.8.6 1.3.9z"/></svg>');
        X.set("piano", '<svg viewBox="0 0 48 48"><path fill-rule="evenodd" clip-rule="evenodd" d="M42 13l-7.2-7.3L31.4 9l4.6 4.6-1.3 1.4-4.6-4.6-1.4 1.4 4.6 4.6-1.4 1.3-4.6-4.5-3.6 3.6 4.6 4.6-1.4 1.4-4.6-4.6-1.4 1.3 4.6 4.6-1.4 1.4-4.6-4.6v.1l-1.3 1.3 4.6 4.6-1.4 1.4-4.6-4.6-3.6 3.6 4.5 4.6-1.3 1.4-4.6-4.6-1.4 1.4 4.6 4.6-1.4 1.3L9 31.4l-3.3 3.4 5.7 5.7 1.8 1.8 29.1-29.1z"/></svg>');
        X.set("pipe", '<svg viewBox="0 0 48 48"><path d="M27.8 19.9l-1.9-2c-.2-.1-.5-.2-.7 0-.2.2-.1.2-.2.6-.2.5-13.8 16.4-14.1 16.9-.1.2-.5.6-.9.7-.4.1-.6.1-.9.4-.3.3-.3.9-.3.9 0 .2.1.5 1.6 1.8.3.2.5.4.5.4s0 .1.1.1c0 0 .1 0 .1.1.1.1.2.2.5.4 1.5 1.3 1.9 1.3 2.1 1.3 0 0 .6 0 .8-.4.2-.3.1-.5.2-.9s.4-.8.6-1c.4-.4 13.7-16.5 14.2-16.8.3-.2.4-.1.5-.3.1-.2 0-.5-.1-.7l-2.1-1.5zM16.2 35.6c-.4.5-1.2.6-1.8.2-.5-.4-.6-1.2-.2-1.8.4-.5 1.2-.6 1.8-.2.6.4.7 1.2.2 1.8zm3.2-3.9c-.4.5-1.2.6-1.8.2-.5-.4-.6-1.2-.2-1.8.4-.5 1.2-.6 1.8-.2s.7 1.3.2 1.8zm3.2-3.8c-.4.5-1.2.6-1.8.2-.5-.4-.6-1.2-.2-1.8.4-.5 1.2-.6 1.8-.2.6.5.7 1.3.2 1.8zm3.3-3.8c-.4.5-1.2.6-1.8.2-.5-.4-.6-1.2-.2-1.8.4-.5 1.2-.6 1.8-.2.5.4.6 1.2.2 1.8zM39 9.4c0-.1-.8-1.1-1.3-1.4-.4-.4-1.5-1-1.6-1-1-.5-1.9-.1-2.2.1-2.5 1.3-2.3 3.7-3.4 4.8-.5.5-2.3 1.7-3 2-.7.3-1.1.7-1.2 1-.4.7.3 1.5.7 2.2.9 1.2 1.2 1.5 1.6 1.8.4.3.9.6 2.1 1.3.7.4 1.6.8 2.3.4.3-.2.6-.6.8-1.4.2-.7 1-2.6 1.5-3.3.9-1.3 3.3-1.5 4.1-4.2.1-.5.3-1.4-.4-2.3zm-4.5 4.4L33 15.5c-.4.5-1.2.6-1.8.2-.5-.4-.6-1.2-.2-1.8l1.4-1.7c.4-.5 1.2-.6 1.8-.2.6.5.7 1.3.3 1.8z"/></svg>');
        X.set("reed", '<svg viewBox="0 0 48 48"><path d="M18 9.6c.1.1.1.1.2.1.2.1.4 0 .6-.2l1.4-1.7c.1-.1.1-.3.1-.4 0-.1-.1-.3-.2-.4l-1.8-1.4c-.1-.1-.3-.1-.4-.1l-3.1.4c-.2 0-.4.2-.5.4-.1.2 0 .5.2.6L18 9.6zm18.1 22.7L33 22.7c-.1-.3-.4-.6-.8-.6s-.7.2-.9.5c-1.1 2.3-2 2.8-3.1 3.3-1.2.6-2.7 1.3-4.5 4.3-.7 1.2-1.4 2.3-2 3.2-.3.5-.6 1-.8 1.3-.3.5-.8.7-1.4.5-.1 0-.2-.1-.4-.2-.6-.4-.7-1.2-.4-1.7.1-.1.2-.4.5-.8.6.1 1.3-.1 1.8-.4 1.4-.8 1.8-2.6 1-4 .6 0 1.2-.1 1.7-.4 1.3-.8 1.8-2.6 1-4 .6 0 1.2-.1 1.7-.4 1.4-.8 1.8-2.6 1-4v-.1c1.3-2 2.3-3.8 3-4.9 1-1.7 1.3-3.4.7-4.9-.5-1.2-1.5-2.1-2.8-2.5-.8-.2-1.6-.2-2.4 0-.7.2-1.4.6-1.9.9-.9.5-1.5.8-2.1.6l-.6-.3-.7.9-.5.6-.6.7c.6.4 1.1.7 1.7.9 1.4.4 2.6-.2 3.4-.5.2-.1.4-.2.5-.2.2-.1.3-.1.5 0 .1 0 .3.1.3.3.1.2 0 .6-.3 1-1.5 2.1-11.8 16.9-11.9 17-1.6 2.4-2.3 4.9-1.8 7.3.4 2.1 1.7 3.9 3.6 5.1.9.6 1.9 1 2.8 1.2 3.5.9 6.8-.5 9-3.8l1.7-2.8v-.1c1-2.1 2.8-3 4.8-2.4l.9.3c.1 0 .1 0 .2.1.5.1.9-.2 1.1-.6.2-.5.1-.7.1-.8zm-13.2-12c.3-1.1 1.4-1.7 2.4-1.4 1.1.3 1.7 1.4 1.4 2.4-.3 1.1-1.4 1.7-2.4 1.4-1.1-.2-1.7-1.3-1.4-2.4zm-2.7 4.4c.3-1.1 1.4-1.7 2.4-1.4 1.1.3 1.7 1.4 1.4 2.4-.3 1.1-1.4 1.7-2.4 1.4-1.1-.2-1.7-1.3-1.4-2.4zm-2.7 4.4c.3-1.1 1.4-1.7 2.4-1.4 1.1.3 1.7 1.4 1.4 2.4-.3 1.1-1.4 1.7-2.4 1.4-1.1-.2-1.7-1.3-1.4-2.4zm8.4 7c-.9.4-1.9-.1-2.2-.9-.4-.9.1-1.9.9-2.2.9-.4 1.9.1 2.2.9.4.9 0 1.9-.9 2.2zm2.6-3.9c-.9.4-1.9-.1-2.2-.9-.4-.9.1-1.9.9-2.2.9-.4 1.9.1 2.2.9.4.9 0 1.9-.9 2.2z"/></svg>');
        X.set("strings-c", '<svg viewBox="0 0 48 48"><path d="M20.8 17l-1.6 1.4-2.8 2.6-4 3.4 4.5 4.5 3.4-4 2.6-2.8 1.4-1.6 2.6-2.8 1.6-1.7 2.6.3h.1c.5 0 .9-.3 1.1-.7L33 14l1.5-3.6c.2-.5.1-1-.3-1.3L32.3 7c-.3-.3-.9-.4-1.3-.3l-3.6 1.5-1.6.7c-.5.2-.8.7-.7 1.3l.3 2.6-1.8 1.6-2.8 2.6zm-9.5 8.6L10 27l4.5 4.5 1.3-1.3-4.5-4.6zm18-2.2c1-1.1.9-2.9-.2-3.9s-2.1-.2-3.1.9-1.8 2.2-.6 3.2c1.1 1.1 2.9 1 3.9-.2zm-8.4 2.8c-1 1.1-1.8 2.2-.6 3.2 1.1 1 2.9.9 3.9-.2s.9-2.9-.2-3.9c-1.2-1.1-2.1-.3-3.1.9zm.1-10.7c1.1-1 2-2 .9-3.1-1-1.1-2.8-1.2-3.9-.2s-1.2 2.8-.2 3.9 2.1.4 3.2-.6zm-5.7 5.1c1.1-1 2-2 .9-3.1-1-1.1-2.8-1.2-3.9-.2s-1.2 2.8-.2 3.9 2 .4 3.2-.6zM37.9 27l-1.3-2.2c-.2-.3-.6-.5-1-.5l-3.1.5-1.5.3c-.4.1-.8.4-.8.9l-.2 2.2-1.7.9-2.8 1.5-1.5.9-2.9 1.5-3.8 2 2.7 4.5 3.5-2.5 2.6-1.8 1.5-1 2.6-1.8 1.6-1.1 2 .8h.1c.4.1.8-.1 1-.4l.9-1.2 1.9-2.6c.4-.1.4-.5.2-.9zm-23 9.5l2.7 4.5 1.3-.8-2.7-4.5-1.3.8zM29 34.4c-1 .7-1.8 1.4-1.1 2.4s2.1 1.3 3.2.6c1-.7 1.3-2.1.6-3.2-.8-1-1.7-.5-2.7.2zM23.8 38c-1 .7-1.8 1.4-1.1 2.4s2.1 1.3 3.2.6c1-.7 1.3-2.1.6-3.2-.8-1-1.7-.5-2.7.2z"/></svg>');
        X.set("strings", '<svg viewBox="0 0 48 48"><path d="M39.1 11.7l-2.8-2.8c-.4-.4-1.1-.6-1.6-.3l-4.5 1.9-2 .9c-.6.3-1 .9-.9 1.6l.4 3.3-2.2 2-3.5 3.2-2 1.8-3.5 3.3-5 4.3 5.7 5.7 4.3-5 3.3-3.5 1.8-2 3.3-3.5 2-2.2 3.3.4h.2c.6 0 1.1-.4 1.4-.9l.9-2 1.9-4.5c.1-.7-.1-1.3-.5-1.7zM8.4 33.9l5.7 5.7 1.6-1.6-5.7-5.7-1.6 1.6zm20.1-8.2c-1.3 1.4-2.2 2.7-.8 4 1.4 1.3 3.6 1.2 4.9-.3 1.3-1.4 1.2-3.6-.3-4.9-1.3-1.2-2.5-.2-3.8 1.2zm-6.4 7.2c-1.3 1.4-2.2 2.7-.8 4 1.4 1.3 3.6 1.2 4.9-.3 1.3-1.4 1.2-3.6-.3-4.9-1.3-1.3-2.5-.2-3.8 1.2zm.2-13.4c1.4-1.3 2.5-2.5 1.2-3.9s-3.5-1.5-4.9-.3c-1.4 1.3-1.5 3.5-.3 4.9 1.3 1.5 2.5.6 4-.7zm-7.2 6.4c1.4-1.3 2.5-2.5 1.2-3.9s-3.5-1.5-4.9-.3c-1.4 1.3-1.5 3.5-.3 4.9 1.3 1.5 2.6.6 4-.7z"/></svg>');
        X.set("synth-fx", '<svg viewBox="0 0 48 48"><path d="M41.4 20.8L27.2 6.6c-1.2-1.2-3.1-1.2-4.2 0L6.6 22.9c-1.2 1.2-1.2 3.1 0 4.2l14.2 14.2c1.2 1.2 3.1 1.2 4.2 0L41.3 25c1.3-1.1 1.3-3 .1-4.2zM40 23.6L23.6 40c-.4.4-1 .4-1.4 0L8 25.8c-.4-.4-.4-1 0-1.4L24.4 8c.4-.4 1-.4 1.4 0L40 22.2c.4.4.4 1.1 0 1.4zm-29.9 1.5l12.8 12.8 3.9-3.9-12.7-12.9-4 4zm16.2-9.8c.9-.9.9-2.3 0-3.2-.9-.9-2.3-.9-3.2 0-.9.9-.9 2.3 0 3.2.9.9 2.3.9 3.2 0zm1.6 1.6c-.9.9-.9 2.3 0 3.2s2.3.9 3.2 0c.9-.9.9-2.3 0-3.2-.9-.9-2.3-.9-3.2 0zm4.8 4.8c-.9.9-.9 2.3 0 3.2.9.9 2.3.9 3.2 0 .9-.9.9-2.3 0-3.2s-2.3-.9-3.2 0zm-5.5 5.5c-.9.9-.9 2.3 0 3.2.9.9 2.3.9 3.2 0 .9-.9.9-2.3 0-3.2s-2.3-.9-3.2 0zm-1.6-1.6c.9-.9.9-2.3 0-3.2-.9-.9-2.3-.9-3.2 0-.9.9-.9 2.3 0 3.2s2.3.9 3.2 0zm-4.8-4.8c.9-.9.9-2.3 0-3.2s-2.3-.9-3.2 0c-.9.9-.9 2.3 0 3.2s2.3.9 3.2 0z"/></svg>');
        X.set("synth-lead", '<svg viewBox="0 0 48 48"><path d="M32.1 19.6v5.1c0 3.6-3 6.6-6.6 6.6h-2.9c-3.6 0-6.6-3-6.6-6.6v-5.1h-3v5.1c0 5.2 4.4 9.6 9.6 9.6v5.1h-6.2v2.9h15.4v-2.9h-6.2v-5.1c5.2 0 9.6-4.4 9.6-9.6v-5.1h-3.1zm-9.6 9.5h2.9c2.1 0 4-1.6 4.3-3.7h-4.4V24h4.4v-1.5h-4.4V21h4.4v-1.5h-4.4V18h4.4v-1.5h-4.4V15h4.4v-1.5h-4.4V12h4.4v-1.5h-4.4V9.3h4.4c-.4-2-2.2-3.7-4.3-3.7h-2.9c-2.3 0-4.4 2.1-4.4 4.4v14.7c0 2.4 2.1 4.4 4.4 4.4z"/></svg>');
        X.set("synth-pad", '<svg viewBox="0 0 48 48"><path d="M41.4 20.8L27.2 6.6c-1.2-1.2-3.1-1.2-4.2 0L6.6 22.9c-1.2 1.2-1.2 3.1 0 4.2l14.2 14.2c1.2 1.2 3.1 1.2 4.2 0L41.3 25c1.3-1.1 1.3-3 .1-4.2zM40 23.6L23.6 40c-.4.4-1 .4-1.4 0L8 25.8c-.4-.4-.4-1 0-1.4L24.4 8c.4-.4 1-.4 1.4 0L40 22.2c.4.4.4 1.1 0 1.4zm-10.7-1.4l3.9-3.9-3.6-3.6-3.9 3.9 3.6 3.6zm-9.2 2.2l3.6 3.6 4.3-4.3-3.6-3.6-4.3 4.3zm10.6-.8l3.2 3.2 3.9-3.9-3.2-3.2-3.9 3.9zm-7.8-4.9l-3.2-3.2-4.3 4.3 3.2 3.2 4.3-4.3zm-4.2 7.1l-3.9 3.9 3.6 3.6 3.9-3.9-3.6-3.6zm1 8.9l3.2 3.2 3.9-3.9-3.2-3.2-3.9 3.9zm-5.6-13.6L10.2 25l3.2 3.2 3.9-3.9-3.2-3.2zm11 8.2l3.2 3.2 4.3-4.3-3.2-3.2-4.3 4.3zm3.2-16l-3.2-3.2-3.9 3.9 3.2 3.2 3.9-3.9z"/></svg>');
        X.set("ethnic", '<svg viewBox="0 0 48 48"><path d="M11.7 33.8l2.5 2.5.8-.8-2.5-2.5-.8.8zm17.8-17.1L18.3 27.1c-3.1-1.9-7.2-1.6-9.9 1.1-3.1 3.1-3.1 8.2 0 11.3 3.1 3.1 8.2 3.1 11.3 0 2.7-2.7 3.1-6.8 1.1-9.9l10.4-11.2-1.7-1.7zM18.3 38.1c-1.9 1.9-4.7 2.2-6.9 1l1.5-1.5v-.1l-2.4-2.4h-.1l-1.5 1.5c-1.2-2.2-.8-5 1-6.9 2.3-2.3 6.1-2.3 8.4 0 2.3 2.4 2.3 6.1 0 8.4zM38.5 9.5c-1.4-1.4-3.3-.6-4.2.3-.9.9 0 2.5 0 2.5s-2.1.3-3.2 1.4c-1 1-.8 2.3-.8 2.3l1.8 1.8s1.3.3 2.3-.8c1-1 1.4-3.2 1.4-3.2s1.6.8 2.5 0c.8-1 1.6-2.9.2-4.3zm-3.8-1.4c.8-.4 1.7-.2 1.2-1.1-.5-.8-1.5-1.2-2.3-.8-.8.4-1 1.4-.5 2.2.6.9.9.1 1.6-.3zm-6.2 6.5c.8.6.7-.4 1.2-1.1.5-.8 1.4-1 .5-1.6-.8-.6-1.9-.5-2.4.3-.4.7-.1 1.8.7 2.4zM41 12.1c-.8-.5-.7.4-1.1 1.2-.4.8-1.2 1.1-.4 1.6.8.5 1.8.3 2.2-.5.5-.8.1-1.8-.7-2.3zm-6.5 6.1c-.8.5-1.7.4-1.1 1.2.6.8 1.7 1.1 2.4.6.8-.5.9-1.5.3-2.4-.5-.7-.8.2-1.6.6z"/></svg>');
        q = X;
        return q
    }(this));
    S.puremvc.haxe.patterns.mediator.Mediator.NAME = "Mediator";
    S.puremvc.haxe.patterns.proxy.Proxy.NAME = "Proxy";
    S.puremvc.typedExt.TypedMediator.NAME = "Mediator";
    S.puremvc.typedExt.js.JqueryScroll.SCROLL_BAR_ID = "hxScrollBar";
    S.puremvc.typedExt.js.JqueryTipCard.TEMPLATE = "hxTipCardTemplate";
    S.puremvc.typedExt.js.JqueryTipCard.ARROW_HEIGHT = 8;
    S.puremvc.typedExt.js.JqueryTipCard.ARROW_WIDTH = 16;
    S.puremvc.typedExt.js.JqueryTipCard.ARROW_OFFSET_LEFT = 24;
    S.puremvc.typedExt.js.JqueryTipCard.THROBBER_RADIUS = 25;
    f.PtDirection.DIRECTION_CODA = 0;
    f.PtDirection.DIRECTION_DOUBLE_CODA = 1;
    f.PtDirection.DIRECTION_SEGNO = 2;
    f.PtDirection.DIRECTION_SEGNO_SEGNO = 3;
    f.PtDirection.DIRECTION_FINE = 4;
    f.PtDirection.DIRECTION_DA_CAPO = 5;
    f.PtDirection.DIRECTION_DAL_SEGNO = 6;
    f.PtDirection.DIRECTION_DAL_SEGNO_SEGNO = 7;
    f.PtDirection.DIRECTION_TO_CODA = 8;
    f.PtDirection.DIRECTION_TO_DOUBLE_CODA = 9;
    f.PtDirection.DIRECTION_DA_CAPO_AL_CODA = 10;
    f.PtDirection.DIRECTION_DA_CAPO_AL_DOUBLE_CODA = 11;
    f.PtDirection.DIRECTION_DAL_SEGNO_AL_CODA = 12;
    f.PtDirection.DIRECTION_DAL_SEGNO_AL_DOUBLE_CODA = 13;
    f.PtDirection.DIRECTION_DAL_SEGNO_SEGNO_AL_CODA = 14;
    f.PtDirection.DIRECTION_DAL_SEGNO_SEGNO_AL_DOUBLE_CODA = 15;
    f.PtDirection.DIRECTION_DA_CAPO_AL_FINE = 16;
    f.PtDirection.DIRECTION_DAL_SEGNO_AL_FINE = 17;
    f.PtDirection.DIRECTION_DAL_SEGNO_SEGNO_AL_FINE = 18;
    f.PtDirection.ACTIVE_SYMBOL_DC = 1;
    f.PtDirection.ACTIVE_SYMBOL_DS = 2;
    f.PtDirection.ACTIVE_SYMBOL_DSS = 3;
    f.PtReader.VERSION = "ptab-4";
    k.NetSigs.S = ["717641d4ccdef44d011cd1d525d8f450b9d72c48", "0e7a893ec9178b95891004679b3afca51eb636b3", "991b5bbee5a30d2cefe9a50d2d7d8470a473a5f1", "c9781064ef4b58950cabe15a64b73bd8147dab60", "c4f522b8e638ec8e1432f36216c534c06ab090be", "a091d99f9fffdee91e97c98445b3d762aed76a17", "cd4f6bdb9b43c68fcd2e8fda6c69b45f90b13327", "b235b10ad5e8ed91a273b1dd89d836ba26e23fac", "12d2c0338f8e92f5eef1d6c4e673595814a1c17d", "79d4bc6b36a446bb78b59fb40676075d1e5df075", "57ca313a63b0a1b48d9c3e14420cceb1b048dc96", "bb5d98aad94b15ad1eda6e047065dc917dadeb33", "33422b6d9bfa5092a96e170f2c192b724363c339", "4233823d2205b6486a7f1edd9db882bc09a06061", "058c67879917c49a0974e20312a5936ce4fd7340", "334389048b872a533002b34d73f8c29fd09efc50", "db546baba3acb079f91946f80b9078ffa565e36d", "a256ddaa57c352f11ebc67dbde7a6b842ac318d5", "d46f4a724bd9df428613f738748a1751063d9c8f"];
    V.Beat.MAX_VOICES = 2;
    V.BeatStrokeDirection.None = 0;
    V.BeatStrokeDirection.Up = 1;
    V.BeatStrokeDirection.Down = -1;
    V.ChannelPresets.DEFAULT_PERCUSSION_CHANNEL = 9;
    V.ChannelPresets.DEFAULT_INSTRUMENT = 25;
    V.ChannelPresets.DEFAULT_PERCUSSION_PRESET = 128;
    V.ChannelPresets.DEFAULT_VOLUME = 127;
    V.ChannelPresets.DEFAULT_BALANCE = 64;
    V.ChannelPresets.DEFAULT_CHORUS = 0;
    V.ChannelPresets.DEFAULT_REVERB = 0;
    V.ChannelPresets.DEFAULT_PHASER = 0;
    V.ChannelPresets.DEFAULT_TREMOLO = 0;
    V.Chord.availableChords = [{
        name: "major",
        shortName: "",
        degrees: [0, 4, 7]
    }, {
        name: "minor",
        shortName: "m",
        degrees: [0, 3, 7]
    }, {
        name: "dim",
        degrees: [0, 3, 6]
    }, {
        name: "aug",
        degrees: [0, 4, 8]
    }, {
        name: "2",
        degrees: [0, 2, 4, 7]
    }, {
        name: "7",
        degrees: [0, 4, 7, 10]
    }, {
        name: "m7",
        degrees: [0, 3, 7, 10]
    }, {
        name: "maj7",
        degrees: [0, 4, 7, 11]
    }, {
        name: "dim7",
        degrees: [0, 3, 6, 9]
    }, {
        name: "m/maj7",
        degrees: [0, 3, 7, 11]
    }, {
        name: "7+5",
        degrees: [0, 4, 8, 10]
    }, {
        name: "7sus2",
        degrees: [0, 2, 7, 10]
    }, {
        name: "7sus4",
        degrees: [0, 5, 7, 10]
    }, {
        name: "6",
        degrees: [0, 4, 7, 9]
    }, {
        name: "m6",
        degrees: [0, 3, 7, 9]
    }, {
        name: "9",
        degrees: [0, 4, 7, 10, 2]
    }, {
        name: "9",
        degrees: [0, 4, 10, 2]
    }, {
        name: "-9",
        degrees: [0, 4, 7, 10, 1]
    }, {
        name: "-9",
        degrees: [0, 4, 10, 1]
    }, {
        name: "m9",
        degrees: [0, 3, 7, 10, 2]
    }, {
        name: "m9",
        degrees: [0, 3, 10, 2]
    }, {
        name: "m-9",
        degrees: [0, 3, 7, 10, 1]
    }, {
        name: "m-9",
        degrees: [0, 3, 10, 1]
    }, {
        name: "maj9",
        degrees: [0, 4, 7, 11, 2]
    }, {
        name: "maj9",
        degrees: [0, 4, 11, 2]
    }, {
        name: "sus2",
        degrees: [0, 2, 7]
    }, {
        name: "sus4",
        degrees: [0, 5, 7]
    }, {
        name: "add9",
        degrees: [0, 4, 7, 2]
    }, {
        name: "5",
        degrees: [0, 7]
    }];
    V.Chord.availableChordsWithUnimportantOrder = [{
        name: "dim7",
        degrees: [0, 3, 6, 9]
    }];
    V.Chord.noteNames = ["C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B"];
    V.Chord.tonics = [
        ["C"],
        ["C#", "Db"],
        ["D"],
        ["D#", "Eb"],
        ["E"],
        ["F"],
        ["F#", "Gb"],
        ["G"],
        ["G#", "Ab"],
        ["A"],
        ["A#", "Bb"],
        ["B"]
    ];
    V.Color.Black = V.Color.fromRgb(0, 0, 0);
    V.Color.Red = V.Color.fromRgb(255, 0, 0);
    V.ModelConstants.DEFAULT_DURATION_DEAD = 30;
    V.ModelConstants.DEFAULT_DURATION_PM = 80;
    V.ModelConstants.QUARTER_TIME = 960;
    V.Duration.MIN_TIME = Math.floor(Math.floor(V.ModelConstants.QUARTER_TIME * (4 / V.Duration.SIXTY_FOURTH)) * 2 / 3);
    V.Duration.WHOLE = 1;
    V.Duration.HALF = 2;
    V.Duration.QUARTER = 4;
    V.Duration.EIGHTH = 8;
    V.Duration.SIXTEENTH = 16;
    V.Duration.THIRTY_SECOND = 32;
    V.Duration.SIXTY_FOURTH = 64;
    V.Lyrics.MAX_LINE_COUNT = 5;
    V.MeasureClef.Treble = 0;
    V.MeasureClef.Bass = 1;
    V.MeasureClef.Tenor = 2;
    V.MeasureClef.Alto = 3;
    V.Measure.DEFAULT_CLEF = V.MeasureClef.Treble;
    V.MeasureHeader.DEFAULT_KEY_SIGNATURE = 0;
    V.MeasureText.DEFAULT_COLOR = V.Color.Red;
    V.MeasureText.DEFAULT_TITLE = "Untitled";
    V.NoteNames.SHARP_INTONATION = 1;
    V.NoteNames.FLAT_INTONATION = 0;
    V.NoteNames.notesBySemitones = (function(X) {
        var W;
        var q = new m.ds.StringMap();
        q.set("Cb", 11);
        q.set("C", 0);
        q.set("C#", 1);
        q.set("Db", 1);
        q.set("D", 2);
        q.set("D#", 3);
        q.set("Eb", 3);
        q.set("E", 4);
        q.set("E#", 5);
        q.set("Fb", 4);
        q.set("F", 5);
        q.set("F#", 6);
        q.set("Gb", 6);
        q.set("G", 7);
        q.set("G#", 8);
        q.set("Ab", 8);
        q.set("A", 9);
        q.set("A#", 10);
        q.set("Bb", 10);
        q.set("B", 11);
        q.set("B#", 0);
        W = q;
        return W
    }(this));
    V.NoteNames.noteSemitones = (function(X) {
        var W;
        var q = new Array();
        q = ["C", "Db", "D", "Eb", "E", "F", "Gb", "G", "Ab", "A", "Bb", "B"];
        W = q;
        return W
    }(this));
    V.NoteNames.replacements = (function(X) {
        var q;
        var W = new m.ds.StringMap();
        W.set("Fb", "E");
        W.set("E#", "F");
        W.set("B#", "C");
        W.set("H#", "C");
        W.set("H", "B");
        q = W;
        return q
    }(this));
    V.TripletFeel.None = 0;
    V.TripletFeel.Eighth = 1;
    V.TripletFeel.Sixteenth = 2;
    V.Tuning.TUNING_REGEX = new K("([A-G][#b]?)([0-9]?)", "");
    V.Tuning._eightStrings = (function(X) {
        var W;
        var q = new Array();
        q.push(new V.Tuning("8 strings", [64, 59, 55, 50, 45, 40, 35, 30], true));
        W = q;
        return W
    }(this));
    V.Tuning._sevenStrings = (function(X) {
        var W;
        var q = new Array();
        q.push(new V.Tuning("7 strings", [64, 59, 55, 50, 45, 40, 35], true));
        W = q;
        return W
    }(this));
    V.Tuning._sixStrings = (function(X) {
        var W;
        var q = new Array();
        q.push(new V.Tuning("Standard", [64, 59, 55, 50, 45, 40], true));
        q.push(new V.Tuning("Half-Step Down", [63, 58, 54, 49, 44, 39], false));
        q.push(new V.Tuning("B Tuning", [59, 54, 50, 45, 40, 35], false));
        q.push(new V.Tuning("D Tuning", [62, 57, 53, 48, 43, 38], false));
        q.push(new V.Tuning("C Tuning", [60, 55, 51, 46, 41, 36], false));
        q.push(new V.Tuning("Drop A", [57, 54, 50, 45, 40, 33], false));
        q.push(new V.Tuning("Drop A#", [58, 55, 51, 46, 41, 34], false));
        q.push(new V.Tuning("Drop B", [59, 56, 52, 47, 42, 35], false));
        q.push(new V.Tuning("Drop D", [64, 59, 55, 50, 45, 38], false));
        q.push(new V.Tuning("Double Drop D", [62, 59, 55, 50, 45, 38], false));
        q.push(new V.Tuning("Drop E", [66, 61, 57, 52, 47, 40], false));
        q.push(new V.Tuning("Drop C", [60, 57, 53, 48, 43, 36], false));
        q.push(new V.Tuning("Drop C#", [61, 58, 54, 49, 44, 37], false));
        q.push(new V.Tuning("Open C", [64, 60, 55, 48, 43, 36], false));
        q.push(new V.Tuning("Open Cm Tuning", [63, 60, 55, 48, 43, 36], false));
        q.push(new V.Tuning("Open C6 Tuning", [64, 57, 55, 48, 43, 36], false));
        q.push(new V.Tuning("Open Cmaj7 Tuning", [64, 59, 55, 52, 43, 36], false));
        q.push(new V.Tuning("Open D", [62, 57, 54, 50, 45, 38], false));
        q.push(new V.Tuning("Open Dm Tuning", [62, 57, 53, 50, 45, 38], false));
        q.push(new V.Tuning("Open D5 Tuning", [62, 57, 50, 50, 45, 38], false));
        q.push(new V.Tuning("Open D6 Tuning", [62, 59, 54, 50, 45, 38], false));
        q.push(new V.Tuning("Open Dsus4 Tuning", [62, 57, 55, 50, 45, 38], false));
        q.push(new V.Tuning("Open E", [64, 59, 56, 52, 47, 40], false));
        q.push(new V.Tuning("Open Em Tuning", [64, 59, 55, 52, 47, 40], false));
        q.push(new V.Tuning("Open Esus11 Tuning", [64, 59, 55, 52, 45, 40], false));
        q.push(new V.Tuning("Open F Tuning", [65, 60, 53, 48, 45, 41], false));
        q.push(new V.Tuning("Open G", [62, 59, 55, 50, 43, 38], false));
        q.push(new V.Tuning("Open Gm Tuning", [62, 58, 55, 50, 43, 38], false));
        q.push(new V.Tuning("Open G6 Tuning", [64, 59, 55, 50, 43, 38], false));
        q.push(new V.Tuning("Open Gsus4 Tuning", [62, 60, 55, 50, 43, 38], false));
        q.push(new V.Tuning("Open A Tuning", [64, 61, 57, 52, 45, 40], false));
        q.push(new V.Tuning("Open Am Tuning", [64, 60, 57, 52, 45, 40], false));
        q.push(new V.Tuning("Nashville", [64, 59, 67, 62, 57, 52], false));
        q.push(new V.Tuning("Bass 6 Strings", [48, 43, 38, 33, 28, 23], false));
        q.push(new V.Tuning("Lute or Vihuela", [64, 59, 54, 50, 45, 40], false));
        W = q;
        return W
    }(this));
    V.Tuning._fiveStrings = (function(X) {
        var W;
        var q = new Array();
        q.push(new V.Tuning("Bass 5 Strings", [43, 38, 33, 28, 23], true));
        q.push(new V.Tuning("Banjo Dropped C Tuning", [62, 59, 55, 48, 67], false));
        q.push(new V.Tuning("Banjo Open D Tuning", [62, 57, 54, 50, 69], false));
        q.push(new V.Tuning("Banjo Open G Tuning", [62, 59, 55, 50, 67], false));
        q.push(new V.Tuning("Banjo G Minor Tuning", [62, 58, 55, 50, 67], false));
        q.push(new V.Tuning("Banjo G Modal Tuning", [62, 57, 55, 50, 67], false));
        W = q;
        return W
    }(this));
    V.Tuning._fourStrings = (function(X) {
        var W;
        var q = new Array();
        q.push(new V.Tuning("Bass", [43, 38, 33, 28], true));
        q.push(new V.Tuning("Bass Tune down � step", [42, 37, 32, 27], false));
        q.push(new V.Tuning("Bass Tune down 1 step", [41, 36, 31, 26], false));
        q.push(new V.Tuning("Bass Tune down 2 step", [39, 34, 29, 24], false));
        q.push(new V.Tuning("Bass Dropped D", [43, 38, 33, 26], false));
        q.push(new V.Tuning("Ukulele C Tuning", [45, 40, 36, 43], false));
        q.push(new V.Tuning("Ukulele G Tuning", [52, 47, 43, 38], false));
        q.push(new V.Tuning("Mandolin Standard Tuning", [64, 57, 50, 43], false));
        q.push(new V.Tuning("Mandolin or Violin Tuning", [76, 69, 62, 55], false));
        q.push(new V.Tuning("Viola Tuning", [69, 62, 55, 48], false));
        q.push(new V.Tuning("Cello Tuning", [57, 50, 43, 36], false));
        W = q;
        return W
    }(this));
    V.Tuplet.NORMAL = new V.Tuplet();
    V.Velocities.MIN_VELOCITY = 15;
    V.Velocities.VELOCITY_INCREMENT = 16;
    V.Velocities.PIANO_PIANISSIMO = V.Velocities.MIN_VELOCITY;
    V.Velocities.PIANISSIMO = V.Velocities.MIN_VELOCITY + V.Velocities.VELOCITY_INCREMENT;
    V.Velocities.PIANO = V.Velocities.MIN_VELOCITY + V.Velocities.VELOCITY_INCREMENT * 2;
    V.Velocities.MEZZO_PIANO = V.Velocities.MIN_VELOCITY + V.Velocities.VELOCITY_INCREMENT * 3;
    V.Velocities.MEZZO_FORTE = V.Velocities.MIN_VELOCITY + V.Velocities.VELOCITY_INCREMENT * 4;
    V.Velocities.FORTE = V.Velocities.MIN_VELOCITY + V.Velocities.VELOCITY_INCREMENT * 5;
    V.Velocities.FORTISSIMO = V.Velocities.MIN_VELOCITY + V.Velocities.VELOCITY_INCREMENT * 6;
    V.Velocities.FORTE_FORTISSIMO = V.Velocities.MIN_VELOCITY + V.Velocities.VELOCITY_INCREMENT * 7;
    V.Velocities.DEFAULT = V.Velocities.FORTE;
    V.VoiceDirection.None = 0;
    V.VoiceDirection.Up = 1;
    V.VoiceDirection.Down = 2;
    V.effects.BendEffect.SEMITONE_LENGTH = 1;
    V.effects.BendEffect.MAX_POSITION = 12;
    V.effects.BendEffect.MAX_VALUE = V.effects.BendEffect.SEMITONE_LENGTH * 12;
    V.effects.BendTypes.None = 0;
    V.effects.BendTypes.Bend = 1;
    V.effects.BendTypes.BendRelease = 2;
    V.effects.BendTypes.BendReleaseBend = 3;
    V.effects.BendTypes.Prebend = 4;
    V.effects.BendTypes.PrebendRelease = 5;
    V.effects.BendTypes.Dip = 6;
    V.effects.BendTypes.Dive = 7;
    V.effects.BendTypes.ReleaseUp = 8;
    V.effects.BendTypes.InvertedDip = 9;
    V.effects.BendTypes.Return = 10;
    V.effects.BendTypes.ReleaseDown = 11;
    V.effects.GraceEffectTransition.None = 0;
    V.effects.GraceEffectTransition.Slide = 1;
    V.effects.GraceEffectTransition.Bend = 2;
    V.effects.GraceEffectTransition.Hammer = 3;
    V.effects.GuitarPlayEffects.DEAD = 1;
    V.effects.GuitarPlayEffects.SLIDE = 2;
    V.effects.GuitarPlayEffects.HAMMER = 4;
    V.effects.GuitarPlayEffects.GHOST = 8;
    V.effects.GuitarPlayEffects.ACCENT_NOTE = 16;
    V.effects.GuitarPlayEffects.HEAVY_ACCENT_NOTE = 32;
    V.effects.GuitarPlayEffects.BEND = 64;
    V.effects.GuitarPlayEffects.PALM_MUTE = 128;
    V.effects.GuitarPlayEffects.STACCATO = 256;
    V.effects.GuitarPlayEffects.LET_RING = 512;
    V.effects.GuitarPlayEffects.LEFT_FINGER = 1024;
    V.effects.GuitarPlayEffects.RIGHT_FINGER = 2048;
    V.effects.GuitarPlayEffects.HARMONIC = 4096;
    V.effects.GuitarPlayEffects.TIED = 8192;
    V.effects.GuitarPlayEffects.TRILL = 16384;
    V.effects.GuitarPlayEffects.VIBRATO = 32768;
    V.effects.GuitarPlayEffects.FADE_IN = 65536;
    V.effects.GuitarPlayEffects.TREMOLO_PICKING = 131072;
    V.effects.GuitarPlayEffects.TREMOLO_BAR = 262144;
    V.effects.GuitarPlayEffects.GRACE = 524288;
    V.effects.GuitarPlayEffects.TAPPING = 1048576;
    V.effects.GuitarPlayEffects.SLAPPING = 2097152;
    V.effects.GuitarPlayEffects.POPPING = 4194304;
    V.effects.GuitarPlayEffects.STROKE = 8388608;
    V.effects.GuitarPlayEffects.RASGUEADO = 16777216;
    V.effects.GuitarPlayEffects.FINGERING = 33554432;
    V.effects.HarmonicEffect.NATURAL_FREQUENCIES = [
        [12, 12],
        [9, 28],
        [5, 28],
        [7, 19],
        [4, 28],
        [3, 31]
    ];
    V.effects.HarmonicType.None = -1;
    V.effects.HarmonicType.Natural = 0;
    V.effects.HarmonicType.Artificial = 1;
    V.effects.HarmonicType.Tapped = 2;
    V.effects.HarmonicType.Pinch = 3;
    V.effects.HarmonicType.Semi = 4;
    V.effects.HarmonicType.Feedback = 5;
    V.effects.SlideType.FastSlideTo = 0;
    V.effects.SlideType.SlowSlideTo = 1;
    V.effects.SlideType.OutDownWards = 2;
    V.effects.SlideType.OutUpWards = 3;
    V.effects.SlideType.IntoFromBelow = 4;
    V.effects.SlideType.IntoFromAbove = 5;
    V.filter.SongFilterByInstrumentsAbstract._instrumentGroupSchemeString = '[\r\n        {\r\n            "name": "Acoustic Guitar",\r\n            "instruments": [\r\n                {"name": "Nylon", "midiIndex": 24},\r\n                {"name": "Steel", "midiIndex": 25}\r\n            ]\r\n        },\r\n        {\r\n            "name": "Electric Guitar",\r\n            "instruments": [\r\n                {"name": "Jazz", "midiIndex": 26},\r\n                {"name": "Clean", "midiIndex": 27},\r\n                {"name": "Muted", "midiIndex": 28},\r\n                {"name": "Overdriven", "midiIndex": 29},\r\n                {"name": "Distortion", "midiIndex": 30},\r\n                {"name": "Harmonics", "midiIndex": 31}\r\n            ]\r\n        },\r\n        {\r\n            "name": "Bass",\r\n            "instruments": [\r\n                {"name": "Acoustic", "midiIndex": 32},\r\n                {"name": "Finger", "midiIndex": 33},\r\n                {"name": "Pick", "midiIndex": 34},\r\n                {"name": "Fretless", "midiIndex": 35},\r\n                {"name": "Slap 1", "midiIndex": 36},\r\n                {"name": "Slap 2", "midiIndex": 37},\r\n                {"name": "Synth 1", "midiIndex": 38},\r\n                {"name": "Synth 2", "midiIndex": 39}\r\n            ]\r\n        }\r\n    ]';
    V.filter.SongFilterRecognizeChords.MIN_NOTES = 3;
    U.Errors.CAN_NOT_LOAD_TAB = {
        code: 100,
        message: "error during loading tab. Check connection please"
    };
    U.Errors.INVALID_OR_UNDEFINE_CANVAS_TYPE = {
        code: 101,
        message: "specify canvas type please"
    };
    U.Errors.INVALID_OR_UNDEFINE_FRETBOARD_TYPE = {
        code: 102,
        message: "specify fretboard type please"
    };
    U.Events.LOADING_STATS = "LoadingStats";
    U.Events.STARTUP = "Startup";
    U.Events.INIT_NOTES_PLAYER = "InitNotesPlayer";
    U.Events.LOAD_TAB = "LoadSong";
    U.Events.LOAD_TAB_CONFIG_COMPLETE = "LoadTabConfigComplete";
    U.Events.LOAD_TAB_ERROR = "LoadTabError";
    U.Events.LOAD_TAB_COMPLETE = "LoadTabComplete";
    U.Events.NOTES_PLAYER_READY = "NotesPlayerReady";
    U.Events.SOUND_FONT_LOADED = "SoundFontLoaded";
    U.Events.APPLICATION_VIEW_DID_LOAD = "ApplicationViewDidLoad";
    U.Events.PLAYER_ACCEPT_SONG = "PlayerAcceptSong";
    U.Events.START_LOADING_PRESETS = "StartLoadingPresets";
    U.Events.PRESET_LOADED = "PresetLoaded";
    U.Events.PRESETS_PROGRESS_LOAD = "PresetsProgressLoad";
    U.Events.SHOW_TIP = "ShowTip";
    U.Events.CHANGE_TRACK = "ChangeTrack";
    U.Events.SHOW_TRACK = "ShowTrack";
    U.Events.SET_TRACK_SOLO = "SetTrackSolo";
    U.Events.TRACK_SOLO_CHANGED = "TrackSoloChanged";
    U.Events.MOVE_TO_FIRST_NOT_EMPTY_MEASURE = "MoveToFirstNotEmptyMeasure";
    U.Events.TRACKLIST_MEASURE_CELL_MOUSEOVER = "TrasklistMeasureCellMouseover";
    U.Events.TRACKLIST_MEASURE_CELL_MOUSEOUT = "TrasklistMeasureCellMouseout";
    U.Events.TABLATURE_UPDATE = "TablatureUpdate";
    U.Events.TABLATURE_SCROLL = "TablatureScroll";
    U.Events.MOVE_TO_BEAT = "MoveToBeat";
    U.Events.BEAT_SOUND_START = "BeatSoundStart";
    U.Events.EXPAND_REPEATS = "ExpandRepeats";
    U.Events.SONG_TRANSPOSED = "SongTransposed";
    U.Events.TOGGLE_GHOST_MEASURES = "ToggleGhostMeasures";
    U.Events.TOGGLE_TRACKLIST = "ToggleTracklist";
    U.Events.TRACKLIST_RESIZED = "TrackistResized";
    U.Events.INTENT_TOGGLE_PLAY = "IntentTogglePlay";
    U.Events.TOGGLE_PLAY = "TogglePlay";
    U.Events.COUNT_DOWN_START = "CountDownStart";
    U.Events.COUNT_DOWN_BREAK = "CountDownBreak";
    U.Events.COUNT_DOWN_END = "CountDownEnd";
    U.Events.SHOW_PITCH_NOTIFICATION = "ShowPitchNotification";
    U.Events.EQUALIZER_SWITCHED = "EqualizerSwitched";
    U.Events.TOGGLE_LOOP = "ToggleLoop";
    U.Events.LOOP_CHANGED = "LoopChanged";
    U.Events.INTENT_CHANGE_TEMP = "IntentChangeTemp";
    U.Events.TEMP_CHANGED = "TempChanged";
    U.Events.INTENT_TOGGLE_SETTINGS = "IntentToggleSettings";
    U.Events.TOGGLE_SETTINGS = "ToggleSettings";
    U.Events.TOGGLE_EQUALIZER = "ToggleEqualizer";
    U.Events.INTENT_CHANGE_PITCH = "IntentChangePitch";
    U.Events.PITCH_CHANGED = "PitchChanged";
    U.Events.SCALE_CHANGED = "ScaleChanged";
    U.Events.FONT_SIZE_CHANGED = "FontSizeChanged";
    U.Events.INTENT_TOGGLE_FRETBOARD = "IntentToggleFretboard";
    U.Events.TOGGLE_FRETBOARD = "ToggleFretboard";
    U.Events.INTENT_TOGGLE_METRONOME = "IntentToggleMetronome";
    U.Events.INTENT_TOGGLE_ADVANCED_CONTROL = "IntentToggleAdvancedControl";
    U.Events.INTENT_SWITCH_INSTRUMENT = "IntentSwitchInstrument";
    U.Events.INSTRUMENT_SWITCHED = "InstrumentSwitched";
    U.Events.TOGGLE_FIT_TO_SCREEN = "ToggleFitToScreen";
    U.Events.INTENT_TOGGLE_FULL_SCREEN = "IntentToggleFullScreen";
    U.Events.TOGGLE_FULL_SCREEN = "ToggleFullScreen";
    U.Events.RESIZE_WINDOW = "ResizeWindow";
    U.Events.TOGGLE_AUTO_SCROLL = "ToggleAutoScroll";
    U.Events.KEY_ACTION = "KeyAction";
    U.Events.SAVE_SETTINGS = "SaveSettings";
    U.Events.INTENT_PRINT = "IntentPrint";
    U.Events.ANALYTICS_EVENT = "AnalyticsEvent";
    U.Events.SET_BEGINNER_MODE = "SetBeginnerMode";
    U.Events.TOGGLE_DRAW_DURATIONS = "ToggleDrawDurations";
    U.Events.HIT_MAP_TAB_ON = "HitMapTabOn";
    U.Events.HIT_MAP_TAB_OFF = "HitMapTabOff";
    U.Mediators.ROOT_MEDIATOR = "RootMediator";
    U.Mediators.SPLASH_MEDIATOR = "SplashMediator";
    U.Mediators.TAB_RENDER_MEDIATOR = "TabRenderMediator";
    U.Mediators.ASCII_TAB_RENDER_MEDIATOR = "AsciiTabRenderMediator";
    U.Mediators.TOP_CONTROL_PANEL_MEDIATOR = "TopControlPanelMediator";
    U.Mediators.CONTROL_PANEL_MEDIATOR = "ControlPanelMediator";
    U.Mediators.FRET_BOARD_MEDIATOR = "FretBoardMediator";
    U.Mediators.AUTO_SCROLL_MEDIATOR = "AutoScrollMediator";
    U.Mediators.ADVANCED_CONTROL_MEDIATOR = "AdvancedControlMediator";
    U.Mediators.COUNT_DOWN_MEDIATOR = "CountDownMediator";
    U.Mediators.LOADING_PRESETS_MEDIATOR = "LoadingPresetsMediator";
    U.Mediators.TIMELINE_MEDIATOR = "TimelineMediator";
    U.Mediators.TRACKLIST_MEDIATOR = "TracklistMediator";
    U.Mediators.INSTRUMENT_SWITCHER_MEDIATOR = "InstrumentSwitcherMediator";
    U.controller.ShowTipCommand.COOKIE_TRACKLIST_RESIZE_TIPS_SHOWN = "tracklist_resize_tips_shown";
    U.hepler.js.CanvasHelper.ANTI_ALIASING_OFFSET = 0.5;
    U.model.ApplicationProxy.CANVAS_ID = "hxCanvas";
    U.model.ApplicationProxy.NAME = "AppProxy";
    U.model.HitMapTabProxy.NAME = "HitMapTabProxy";
    U.model.InternationalizationProxy.NAME = "InternationalizationProxy";
    U.model.KeyboardProcessor._shiftPressed = false;
    U.model.LoadingStatsProxy.NAME = "LoadingStatsProxy";
    U.model.LoadingStatsProxy.PHASE_START = "START";
    U.model.SettingsProxy.NAME = "SettingsProxy";
    U.model.TabProxy.DEFAULT_TEMP = 1;
    U.model.TabProxy.DEFAULT_DEMO_DURATION = 30000;
    U.model.TabProxy.NAME = "TabProxy";
    U.model.dto.NotesPlayerState.FLASH_NOT_READY = -2;
    U.model.dto.NotesPlayerState.ERROR = -1;
    U.model.dto.NotesPlayerState.READY = 0;
    U.model.dto.NotesPlayerState.SOUNDFONT_GENERAL_XML_LOADED = 1;
    U.model.dto.NotesPlayerState.SOUNDFONT_PRESETS_LOADED = 2;
    U.model.dto.NotesPlayerState.START_PLAY = 3;
    U.model.dto.NotesPlayerState.END_PLAY = 4;
    U.model.dto.NotesPlayerState.PAUSE = 5;
    U.model.dto.NotesPlayerState.SOUNDFONT_PRESET_LOADED = 6;
    U.model.dto.NotesPlayerState.SOUNDFONT_START_LOADING_PRESETS = 7;
    U.model.dto.NotesPlayerState.SOUNDFONT_PRESETS_PROGRESS_LOAD = 8;
    U.model.dto.NotesPlayerState.TAB_PARSED = 9;
    U.model.settings.Settings.MIN_SCALE = 0.5;
    U.model.settings.Settings.MAX_SCALE = 2;
    U.model.settings.Settings.MIN_VOLUME = 0;
    U.model.settings.Settings.MAX_VOLUME = 127;
    U.model.settings.Settings.NO_NOTIFY = false;
    U.model.settings.Settings.NO_CACHE = false;
    U.model.settings.Settings.WITHOUT_MODIFY = false;
    U.model.settings.SettingsFlash.STORAGE_KEY = "settingsXml";
    U.model.settings.SettingsFlash.EXPIRE_DELAY = 31536000;
    U.model.settings.SettingsHtml5.STORAGE_KEY = "settingsHtml5";
    U.view.AnalyticsMediator.NAME = "AnalyticsMediator";
    U.view.CountDownMediator.COUNT_DOWN_FROM = 4;
    U.view.CountDownMediator.COUNT_DOWN_TIME_STEP = 500;
    U.view.EqualizerMediator.NAME = "EqualizerMediator";
    U.view.FretBoardMediator.FORCE_UPDATE = true;
    U.view.FretBoardMediator.WITH_ANIMATION = true;
    U.view.InstrumentsColorMediator.NAME = "InstrumentsColorMediator";
    U.view.TabRenderMediator.SCALE_STEP = 0.1;
    U.view.TabRenderMediator.MIN_DISTANCE_FOR_POSSIBLE_LOOP_AREA = 10;
    U.view.TabRenderMediator.HIT_MAP_TAB_HIGHLIGHT_COLOR_ACTIVE = 1621148;
    U.view.TabRenderMediator.HIT_MAP_TAB_HIGHLIGHT_COLOR_INACTIVE = 5592405;
    U.view.js.AsciiCanvas.ID = "hxCanvas";
    U.view.js.AsciiCanvas.MEASURE_MARGIN_TOP = 20;
    U.view.js.AsciiCursor.ID = "AsciiCursor";
    U.view.js.ControlPanelView.ID = "hxControlPanelView";
    U.view.js.EqualizerView.ID = "hxEqualizerView";
    U.view.js.EqualizerView.DEFAULT_ECHO = 0;
    U.view.js.FretBoardView.ID = "hxFretBoardView";
    U.view.js.InstrumentSwitcherView.ID = "hxInstrumentSwitcherView";
    U.view.js.InstrumentSwitcherView.INSTRUMENT_GROUP_TEMPLATE = "hxInstrumentGroupTemplate";
    U.view.js.InstrumentSwitcherView.INSTRUMENT_TEMPLATE = "hxInstrumentTemplate";
    U.view.js.InstrumentSwitcherView.INSTRUMENT_CLASS = "hxInstrument";
    U.view.js.InstrumentSwitcherView.LINE_HEIGHT = 32;
    U.view.js.RootView.ID = "hxRootView";
    U.view.js.SplashView.ID = "hxSplashView";
    U.view.js.TabRenderView.ID = "hxTabRenderView";
    U.view.js.TabRenderView.RENDER_MODE_ASCII = "ascii";
    U.view.js.TabRenderView.RENDER_MODE_CANVAS = "canvas";
    U.view.js.TabRenderView.RENDER_MODE_SVG = "svg";
    U.view.js.TabRenderView.RENDER_MODE_FLASH = "flash";
    U.view.js.TabRenderView.MOUSEWHEEL_SCROLL_STEP = 80;
    U.view.js.TabRenderView.MIN_DISTANCE_FOR_CLICK = 5;
    U.view.js.TabRenderViewAscii.ID = "hxTabRenderView";
    U.view.js.TimelineView.ID = "hxTimelineView";
    U.view.js.TimelineView.TIMELINE_ITEM_TEMPLATE = "hxTimelineItemTemplate";
    U.view.js.TimelineView.TIMELINE_ITEMS_ID = "_hxTimelineItems";
    U.view.js.TimelineView.TIMELINE_SCROLL_ITEMS_ID = "hxTimeLineScrollItems";
    U.view.js.TimelineView.TIMELINE_ITEM_ID = "hxTimeLineItem";
    U.view.js.TimelineView.TIMELINE_ITEM_CONTENT_ID = "_hxTimelineItemContent";
    U.view.js.TimelineView.TOTAL_TIME_LABEL_ID = "hxTotalTime";
    U.view.js.TimelineView.CURRENT_TIME_LABEL_ID = "hxCurrentTime";
    U.view.js.TimelineView.SELECTION_MARK_ID = "hxSelectionMark";
    U.view.js.TimelineView.MAX_SLIDER_VALUE = 10000;
    U.view.js.TimelineView.HMT_COLOR = 16200756;
    U.view.js.TimelineView.GREY_COLOR = 5592405;
    U.view.js.TimelineView.MIN_SEGMENT_LENGTH = 60;
    U.view.js.TopControlPanelView.ID = "hxTopControlPanelView";
    U.view.js.TracklistView.ID = "hxTracklistView";
    U.view.js.TracklistView.HEAD_LINE_TEMPLATE = "hxTracklistHeadLineTemplate";
    U.view.js.TracklistView.LINE_TEMPLATE = "hxTracklistLineTemplate";
    U.view.js.TracklistView.MEASURE_NUMBER_TEMPLATE = "hxTracklistMeasureNumberTemplate";
    U.view.js.TracklistView.CHAPTER_TEMPLATE = "hxChapterTemplate";
    U.view.js.TracklistView.SMOOTH_LINES_SCROLL = false;
    U.view.js.TracklistView.NUMBER_OF_VISIBLE_TRACKS_BY_DEFAULT = 4;
    U.view.js.TracklistView.LINE_HEIGHT = 32;
    U.view.js.TracklistView.MEASURE_CELL_WIDTH = 27;
    U.view.js.components.TracklistLineView.TRIGGERED = true;
    U.view.js.components.TracklistLineView.MEASURE_CELL_TEMPLATE = "hxTracklistMeasureCellTemplate";
    U.view.js.components.TracklistLineView.UNFOCUSED = false;
    U.view.js.components.TracklistLineView.SOLO = 1;
    U.view.js.components.TracklistLineView.MUTE = 2;
    u.autoScroll.AutoScrollStrategy.NOT_APPLY_AUTO_SCROLL_STRATEGY = false;
    u.model.MusicFont.Num0 = "M 0.00 7.99 C -0.00 10.44 0.57 13.08 2.37 14.84 4.18 16.54 7.44 16.36 8.93 14.32 10.61 12.22 10.97 9.39 10.78 6.78 10.62 4.66 9.96 2.42 8.31 0.97 6.53 -0.48 3.60 -0.29 2.11 1.49 0.53 3.25 -0.00 5.69 0.00 7.99 z M 5.46 15.13 C 4.46 15.17 3.80 14.18 3.64 13.29 3.03 10.66 3.00 7.93 3.19 5.25 3.32 3.95 3.53 2.57 4.31 1.48 4.74 0.87 5.67 0.62 6.26 1.14 c 0.83 0.69 1.03 1.84 1.25 2.84 0.43 2.46 0.39 4.99 0.13 7.47 -0.15 1.22 -0.44 2.57 -1.43 3.40 -0.21 0.15 -0.48 0.25 -0.75 0.26 z";
    u.model.MusicFont.Num1 = "m 2.36 14.48 c 0 -3.87 0 -7.74 0 -11.61 C 1.69 4.15 1.01 5.42 0.34 6.7 0.23 6.54 -0.11 6.44 0.06 6.22 0.83 4.14 1.59 2.07 2.36 -8.04e-8 c 1.09 0 2.18 0 3.26 0 0 4.81 0 9.62 0 14.43 0.11 0.73 1 0.75 1.57 0.86 0 0.24 0 0.47 0 0.71 -2.13 0 -4.25 0 -6.38 0 0 -0.22 0 -0.44 0 -0.66 C 1.34 15.22 1.98 15.2 2.31 14.7 l 0.04 -0.11 0.01 -0.11 0 0 z";
    u.model.MusicFont.Num2 = "M 3.85 1.11 C 3.32 1.21 2.1 1.37 2.27 2.07 2.67 2.48 3.62 2.08 4.03 2.69 4.75 3.6 4.54 5.13 3.54 5.77 2.47 6.55 0.7 5.98 0.42 4.65 0.08 3.16 0.99 1.68 2.2 0.89 3.47 -0.05 5.13 -0.15 6.63 0.14 8.35 0.44 10.17 1.45 10.71 3.21 11.09 4.36 10.77 5.67 9.91 6.52 8.88 7.62 7.45 8.16 6.21 8.97 5.29 9.48 4.4 10.07 3.69 10.86 3.15 11.41 2.75 12.06 2.32 12.69 3.58 11.96 5.15 11.47 6.56 12.08 c 0.95 0.31 1.61 1.07 2.42 1.6 0.8 0.43 1.88 -0.18 2.04 -1.06 0.14 -0.38 -0.08 -1.05 0.51 -0.88 0 1.34 -0.22 2.91 -1.38 3.76 -1.28 0.84 -2.98 0.49 -4.21 -0.25 -1.07 -0.69 -2.23 -1.52 -3.58 -1.31 -0.7 0.04 -1.55 0.4 -1.55 1.21 0.03 0.51 -0.25 0.64 -0.69 0.57 C -0.13 15.35 0.24 14.47 0.46 13.97 1.46 11.79 3.35 10.24 4.96 8.53 6.02 7.37 7.19 6.26 7.94 4.87 8.18 4.24 7.99 3.53 7.75 2.92 7.1 1.44 5.3 1.1 3.85 1.11 z";
    u.model.MusicFont.Num3 = "M 3.22 8.29 C 3.23 8.01 3.1 7.62 3.54 7.72 4.49 7.43 5.46 7.06 6.26 6.45 7.1 5.78 7.29 4.61 7.05 3.61 6.73 2.07 5.23 0.71 3.6 0.92 2.89 0.97 2.15 1.23 1.72 1.82 1.74 2.68 3.01 2.05 3.3 2.84 3.67 3.53 3.69 4.51 3.15 5.12 2.55 5.68 1.58 5.71 0.85 5.42 0.01 5.03 -0.06 3.95 0.03 3.15 0.13 1.84 1.12 0.72 2.37 0.37 3.58 0.02 4.88 -0.09 6.13 0.08 8.23 0.48 10.01 2.41 9.97 4.59 9.99 5.54 9.71 6.56 8.9 7.13 8.55 7.51 7.7 7.79 7.51 8.03 8.58 8.44 9.59 9.24 9.84 10.4 10.24 11.96 9.69 13.7 8.45 14.73 7.42 15.7 5.97 16.12 4.57 15.99 3.13 15.92 1.48 15.62 0.59 14.37 -0.04 13.45 -0.17 12.21 0.2 11.17 0.58 10.38 1.62 10.33 2.38 10.46 c 0.72 0.1 1.21 0.8 1.18 1.51 0.05 0.67 -0.18 1.54 -0.95 1.67 -0.44 0.08 -1.01 -0.03 -0.69 0.57 0.43 0.7 1.47 0.83 2.25 0.83 C 5.8 14.9 7.14 13.37 7.18 11.75 7.33 10.64 6.6 9.62 5.64 9.14 4.9 8.75 4.13 8.36 3.29 8.31 c -0.03 0 -0.05 -0.01 -0.08 -0.01 z";
    u.model.MusicFont.Num4 = "M 5.3972329,-0.050066074 C 6.1359341,0.21052905 6.1255782,0.005170667 5.943457,0.80706307 C 5.711726,1.7137767 5.4631946,2.5742226 5.2062495,3.2572994 C 4.96103,3.9092042 4.7746978,4.5708004 4.233566,5.4479104 C 3.8743321,6.2621457 3.1936233,7.1664801 2.2510097,8.5283757 C 1.65577,9.465758 0.7303882,10.575609 0,11.558041 L 7.3588536,11.578563 C 7.3750199,12.80269 7.3593314,13.979035 7.3754977,15.203163 C 7.2998257,15.484702 6.4277834,15.845879 6.0494907,16 L 11.162049,15.992451 C 10.522813,15.799463 10.010996,15.590547 9.7858707,15.254212 C 9.7907387,14.537948 9.7478237,12.69084 9.7526917,11.40119 L 11.527864,11.40119 L 12.019273,10.466332 L 9.7526917,10.474797 L 9.7031507,4.3060655 L 7.3928582,6.6051741 L 7.3369434,10.564566 L 2.5995067,10.601309 C 2.1916772,10.620098 3.2119877,9.2701893 3.5552783,8.661602 C 3.9606501,7.9429568 4.2030939,7.5810945 4.6338131,6.7903129 C 5.0905926,5.951686 5.5185573,5.195172 5.8515844,4.419281 C 6.2841791,3.3007078 6.7379724,2.2656363 6.9642542,1.6689972 C 7.4739242,0.73680435 7.6910467,0.07553143 8.2585729,-0.056935597 L 5.3972329,-0.050066074 z";
    u.model.MusicFont.Num5 = "M 0.66 0 C 1.76 0.32 2.92 0.45 4.06 0.55 5.57 0.61 7.1 0.43 8.57 0.05 8.59 0.92 8.37 1.88 7.62 2.41 7 2.88 6.18 2.89 5.45 3 4.24 3.07 3.01 2.97 1.83 2.7 1.48 2.4 1.68 3.01 1.62 3.22 c 0 1.27 0 2.53 0 3.8 0.82 -0.93 2.05 -1.53 3.31 -1.39 1.75 0.04 3.55 1 4.22 2.68 C 9.94 10.33 9.22 12.72 7.73 14.23 6.61 15.47 4.92 16.14 3.26 15.99 2.03 15.88 0.67 15.28 0.25 14.04 -0.02 13.19 -0.16 12.2 0.25 11.37 0.73 10.53 1.87 10.47 2.71 10.7 3.53 10.9 3.87 11.82 3.79 12.59 3.8 13.31 3.33 14.07 2.56 14.13 2.18 14.28 1.61 14.49 2.22 14.78 3.24 15.48 4.8 15.51 5.7 14.58 6.89 13.39 7.07 11.57 7 9.96 6.89 8.75 6.37 7.41 5.22 6.84 3.97 6.29 2.37 6.8 1.68 7.98 1.53 8.17 1.19 8.03 0.96 8.07 0.62 8.17 0.64 7.92 0.66 7.66 c 0 -2.55 0 -5.11 0 -7.66 z";
    u.model.MusicFont.Num6 = "M 7.93 1.53 C 7.56 0.85 6.71 0.49 5.94 0.52 4.82 0.56 4.18 1.66 3.88 2.62 3.35 4.32 3.15 6.16 3.49 7.93 3.54 8.37 3.92 8.63 4.13 8.12 5.06 7.07 6.65 6.72 7.97 7.14 9.42 7.71 10.23 9.29 10.37 10.77 10.53 12.37 9.98 14.11 8.63 15.06 6.81 16.44 3.96 16.31 2.39 14.6 0.9 12.97 0.19 10.75 0.04 8.58 -0.18 6.28 0.56 3.93 2.03 2.15 3.04 0.86 4.6 -0.11 6.28 0.01 7.59 0.02 8.97 0.64 9.54 1.88 9.98 2.82 10.18 4.13 9.38 4.95 8.96 5.48 8.26 5.69 7.61 5.5 6.9 5.4 6.31 4.82 6.25 4.1 6.08 3.28 6.33 2.33 7.09 1.89 7.34 1.71 7.62 1.57 7.93 1.53 z M 7.71 11.72 C 7.67 10.66 7.76 9.51 7.19 8.56 6.59 7.5 4.72 7.59 4.31 8.78 3.84 10.14 3.82 11.61 3.98 13.03 c 0.14 0.82 0.31 1.87 1.2 2.2 0.72 0.29 1.63 -0.01 1.94 -0.74 0.41 -0.86 0.57 -1.82 0.59 -2.77 z";
    u.model.MusicFont.Num7 = "M 2.97 16 C 3.15 14.66 3.24 13.27 3.84 12.02 4.33 10.82 5.19 9.83 6.14 8.96 7.36 7.69 8.64 6.4 9.38 4.79 9.59 4.25 9.66 3.67 9.79 3.12 8.69 3.83 7.34 4.39 6.02 3.99 4.95 3.75 4.06 3.09 3.08 2.65 2.38 2.35 1.34 2.38 0.98 3.17 0.78 3.58 0.62 3.96 0.12 3.83 -0.13 3.85 0.06 3.43 0 3.26 0 2.34 0 1.43 0 0.52 0.38 0.45 0.63 0.56 0.69 0.97 0.88 1.7 1.76 1.48 2.19 1.12 2.92 0.67 3.64 0.1 4.52 0 5.48 -0.03 6.3 0.52 7.07 1.02 7.73 1.37 8.7 1.7 9.31 1.08 9.75 0.84 9.47 -0.08 10.01 0 10.28 -0.03 10.5 -0.03 10.4 0.31 10.38 1.58 10.46 2.86 10.34 4.13 10.24 5.12 9.88 6.06 9.33 6.89 8.72 7.98 8.01 9.02 7.45 10.13 6.91 11.48 6.76 12.95 6.73 14.38 6.68 14.88 7.04 15.76 6.69 16 5.45 16 4.21 16 2.97 16 z";
    u.model.MusicFont.Num8 = "M 6.97 7.18 C 7.96 7.59 8.61 8.51 9.23 9.34 9.71 9.98 9.88 10.8 9.76 11.58 9.66 13.11 8.81 14.58 7.46 15.33 5.48 16.48 2.64 16.15 1.15 14.34 0.26 13.3 -0.1 11.87 0.02 10.52 0.3 9.39 1.21 8.5 2.2 7.94 2.89 7.75 1.76 7.47 1.61 7.13 0.1 5.63 -0.1 2.86 1.5 1.35 3.29 -0.4 6.51 -0.5 8.27 1.36 9.09 2.23 9.43 3.49 9.31 4.67 9.04 5.65 8.25 6.4 7.43 6.95 7.29 7.04 7.13 7.12 6.97 7.18 z M 6.16 6.54 C 7.34 6 8.09 4.61 7.81 3.32 7.66 2.1 6.72 0.95 5.45 0.81 4.37 0.6 3.18 1.02 2.61 1.99 2.22 2.58 2.07 3.48 2.66 4 3.69 5.04 5.13 5.51 6.16 6.54 z M 3.17 8.44 C 2.19 8.9 1.31 9.78 1.26 10.92 1.11 12.72 2.32 14.69 4.17 15.01 5.32 15.21 6.73 15.01 7.4 13.94 7.83 13.37 7.9 12.54 7.43 11.97 6.35 10.42 4.51 9.72 3.17 8.44 z";
    u.model.MusicFont.Num9 = "m 2.46 14.47 c 0.29 0.65 1.09 0.94 1.76 1.01 1.1 0.1 1.93 -0.87 2.24 -1.83 0.55 -1.74 0.69 -3.61 0.43 -5.41 C 6.87 7.79 6.47 7.26 6.22 7.88 5.24 8.98 3.53 9.34 2.18 8.77 0.99 8.19 0.32 6.88 0.07 5.62 -0.22 3.91 0.3 1.97 1.76 0.94 3.55 -0.42 6.33 -0.31 7.93 1.3 9.74 3.09 10.4 5.74 10.39 8.22 10.41 10.83 9.17 13.42 7.12 15.04 5.69 16.16 3.56 16.33 1.99 15.41 0.83 14.66 0.19 13.12 0.55 11.77 0.85 10.85 1.86 10.24 2.82 10.48 c 0.72 0.09 1.28 0.71 1.33 1.42 0.19 0.86 -0.16 1.8 -0.92 2.27 -0.23 0.16 -0.49 0.27 -0.76 0.3 z M 2.68 4.28 C 2.73 5.38 2.62 6.6 3.28 7.56 3.94 8.53 5.67 8.32 6.03 7.18 6.54 5.72 6.61 4.13 6.36 2.61 6.23 1.73 5.67 0.71 4.67 0.67 3.84 0.55 3.14 1.22 2.98 1.99 2.76 2.73 2.68 3.51 2.68 4.28 z";
    u.model.MusicFont.TrebleClef = "m 12.59 0 c 2.7 1.29 2.98 5.15 3.47 7.79 0.22 4.83 -1.46 9.94 -5.32 13.04 0.32 1.61 0.63 3.22 0.95 4.83 3.43 -0.81 7.18 1.04 8.41 4.39 1.63 3.61 0.97 8.6 -2.85 10.54 -2.1 0.44 -2.9 1.25 -2.1 3.23 0.27 2.38 1.27 4.75 0.81 7.14 -1.19 3.63 -6.7 5.59 -9.39 2.39 C 3.23 51.02 5.74 45.06 9.8 46.71 13.45 47.85 11.75 53.84 8.1 53 c 2.3 2.55 6.27 0.67 7.16 -2.21 0.42 -2.48 -0.55 -4.95 -0.84 -7.42 C 14.64 40.51 11.15 42.78 9.42 41.93 2.94 41.14 -2.13 33.51 0.9 27.4 2.85 23.29 5.93 19.8 9.2 16.68 8.1 12.71 7.19 8.36 8.84 4.39 9.55 2.66 10.4 0.17 12.59 0 z M 11 25.71 c -0.28 -1.46 -0.57 -2.93 -0.85 -4.39 -3.08 3.09 -6.5 6.49 -7.28 10.97 -0.78 5 4.52 9.16 9.2 8.84 2.38 0.26 1.53 -1.63 1.24 -3.06 -0.62 -3.07 -1.24 -6.14 -1.86 -9.21 -3.95 0.27 -6.15 6.08 -2.88 8.62 0.75 1.11 5.35 2.82 1.83 1.77 C 6.94 37.88 4.59 33.92 5.95 30.3 6.7 28.02 8.65 26.22 11 25.71 z m 3.78 -19.02 c 0.53 -3.18 -3.29 -3.92 -4 -0.83 -1.76 3.04 -1.8 6.6 -1.05 9.94 0.96 0.42 3.17 -2.31 3.81 -3.67 0.95 -1.63 1.59 -3.55 1.24 -5.45 z m -2.54 22.17 c 0.75 3.81 1.5 7.63 2.24 11.44 3.92 -0.62 5.81 -5.58 3.62 -8.78 -1.23 -1.94 -3.6 -2.98 -5.86 -2.66 z";
    u.model.MusicFont.AltoClef = "M 0 32 C 0 21.38 0 10.77 0 0.15 c 1.33 0 2.66 0 3.99 0 0 10.62 0 21.23 0 31.85 C 2.66 32 1.33 32 0 32 z m 5.35 0 c 0 -10.62 0 -21.23 0 -31.85 0.39 0.09 1.17 -0.19 1.31 0.16 0 10.57 0 21.13 0 31.7 -0.44 0 -0.87 0 -1.31 0 z M 9.34 18.17 C 8.85 17.25 7.32 16.44 7.05 15.9 c 2.11 -1.25 3.59 -3.49 3.95 -5.92 0.15 1.3 0.74 2.78 2.15 3.09 1.39 0.43 3.17 0.18 3.92 -1.22 C 18.24 9.71 18.15 7.13 17.95 4.76 17.78 3.06 16.96 0.96 15.02 0.72 13.91 0.57 11.57 0.97 11.76 2.28 c 1.28 -0.3 2.92 0.73 2.5 2.19 -0.37 1.9 -3.18 2.09 -4.2 0.62 -1.03 -1.34 0.04 -3.16 1.27 -3.94 2.83 -1.99 7.29 -1.4 9.27 1.53 2.17 3.1 1.38 7.77 -1.6 10.08 -1.75 1.45 -4.25 2.14 -6.46 1.5 -1.25 -0.78 -1.4 1.51 -2.65 1.79 1.22 0.33 1.47 2.76 2.71 1.95 1.83 -0.61 3.93 -0.16 5.57 0.79 2.67 1.56 4.19 4.78 3.65 7.83 -0.43 3.08 -3.39 5.43 -6.46 5.38 -2.28 0.13 -4.93 -1.05 -5.57 -3.4 -0.57 -2.02 2.25 -3.54 3.76 -2.24 1.14 0.73 1.13 2.73 -0.26 3.18 -0.66 0.26 -2.36 0.07 -1.07 1.03 1.43 1.1 3.86 1.14 4.88 -0.54 1.23 -2.05 1.09 -4.59 0.9 -6.89 -0.21 -1.71 -0.87 -3.95 -2.84 -4.27 -1.35 -0.16 -3.1 0.14 -3.59 1.62 -0.35 0.58 -0.41 2.41 -0.61 0.83 -0.29 -1.15 -0.86 -2.23 -1.61 -3.14 z";
    u.model.MusicFont.TenorClef = "M 0 32 C 0 21.38 0 10.77 0 0.15 c 1.33 0 2.66 0 3.99 0 0 10.62 0 21.23 0 31.85 C 2.66 32 1.33 32 0 32 z m 5.35 0 c 0 -10.62 0 -21.23 0 -31.85 0.39 0.09 1.17 -0.19 1.31 0.16 0 10.57 0 21.13 0 31.7 -0.44 0 -0.87 0 -1.31 0 z M 9.34 18.17 C 8.85 17.25 7.32 16.44 7.05 15.9 c 2.11 -1.25 3.59 -3.49 3.95 -5.92 0.15 1.3 0.74 2.78 2.15 3.09 1.39 0.43 3.17 0.18 3.92 -1.22 C 18.24 9.71 18.15 7.13 17.95 4.76 17.78 3.06 16.96 0.96 15.02 0.72 13.91 0.57 11.57 0.97 11.76 2.28 c 1.28 -0.3 2.92 0.73 2.5 2.19 -0.37 1.9 -3.18 2.09 -4.2 0.62 -1.03 -1.34 0.04 -3.16 1.27 -3.94 2.83 -1.99 7.29 -1.4 9.27 1.53 2.17 3.1 1.38 7.77 -1.6 10.08 -1.75 1.45 -4.25 2.14 -6.46 1.5 -1.25 -0.78 -1.4 1.51 -2.65 1.79 1.22 0.33 1.47 2.76 2.71 1.95 1.83 -0.61 3.93 -0.16 5.57 0.79 2.67 1.56 4.19 4.78 3.65 7.83 -0.43 3.08 -3.39 5.43 -6.46 5.38 -2.28 0.13 -4.93 -1.05 -5.57 -3.4 -0.57 -2.02 2.25 -3.54 3.76 -2.24 1.14 0.73 1.13 2.73 -0.26 3.18 -0.66 0.26 -2.36 0.07 -1.07 1.03 1.43 1.1 3.86 1.14 4.88 -0.54 1.23 -2.05 1.09 -4.59 0.9 -6.89 -0.21 -1.71 -0.87 -3.95 -2.84 -4.27 -1.35 -0.16 -3.1 0.14 -3.59 1.62 -0.35 0.58 -0.41 2.41 -0.61 0.83 -0.29 -1.15 -0.86 -2.23 -1.61 -3.14 z";
    u.model.MusicFont.BassClef = "M 4.44 2.42 C 3.48 3.2 3.45 5.34 4.96 5.44 6.05 5.76 7.62 5.57 8.09 6.88 8.46 8 8.36 9.52 7.18 10.13 5.64 11.02 3.46 11.09 2.03 9.94 0.65 8.76 0.96 6.72 1.42 5.18 2.1 3.05 3.6 0.9 5.9 0.38 c 3.09 -0.82 6.79 -0.41 9.09 2 2.38 2.38 3.52 6.21 2.02 9.35 -1.51 3.28 -4.31 5.71 -7.08 7.91 -2.66 2.01 -5.53 3.78 -8.59 5.11 -0.49 0.46 -1.68 0.21 -1.19 -0.4 C 3.76 22.94 7.03 20.65 9.63 17.79 11.95 15.13 12.83 11.53 13 8.08 13.12 5.82 12.46 3.29 10.45 2 8.62 0.77 6.09 0.99 4.44 2.42 z M 20.84 2.57 c 1.6 -0.11 2.58 2.03 1.54 3.21 -0.89 1.19 -3.02 0.83 -3.39 -0.64 -0.43 -1.24 0.53 -2.58 1.85 -2.57 z m 0 7.01 c 1.6 -0.11 2.58 2.03 1.54 3.21 -0.89 1.19 -3.02 0.83 -3.39 -0.64 -0.43 -1.23 0.54 -2.59 1.85 -2.57 z";
    u.model.MusicFont.TripletFeel8 = "m 24.36 19.36 c 2.02 0 4.05 0 6.07 0 0.13 -0.91 -1.28 -0.27 -1.87 -0.46 -1.4 0 -2.8 0 -4.2 0 0 0.15 0 0.31 0 0.46 z m 0 1.86 c 2.02 -0.02 4.07 0.04 6.07 -0.03 0.16 -0.94 -1.24 -0.3 -1.8 -0.49 -1.42 0 -2.84 0 -4.26 0 1.4e-5 0.17 -2.7e-5 0.35 1.8e-5 0.52 z M 38.01 5.56 c -0.02 5.52 0.04 11.04 -0.03 16.55 -0.24 2.29 -3.95 4.19 -5.23 1.73 -0.79 -2.65 3.29 -4.74 4.89 -3.15 0 -5.04 0 -10.09 0 -15.13 0.12 1.28e-4 0.25 -3.18e-4 0.37 3.77e-4 z m -16.45 0 c -0.02 5.52 0.04 11.04 -0.03 16.55 -0.23 2.27 -3.95 4.2 -5.21 1.73 -0.75 -2.47 3.01 -4.95 4.87 -3.02 0 -4.4 0 -8.8 0 -13.21 -2.92 0 -5.84 0 -8.76 0 -0.02 4.83 0.04 9.67 -0.03 14.5 -0.23 2.28 -3.96 4.2 -5.22 1.73 -0.81 -2.65 3.28 -4.74 4.88 -3.15 0 -5.04 0 -10.09 0 -15.13 3.17 5.03e-4 6.34 0 9.5 7.55e-4 z M 1.22 18.4 c -0.17 2.26 0.72 4.54 2.62 5.84 C 4.83 25.09 2.04 23.4 1.79 22.77 -0.18 20.74 -0.63 17.36 1.12 15.05 1.67 13.94 3.72 12.2 4.07 12.38 2.04 13.75 1.02 15.97 1.22 18.4 z m 54.61 0 c 0.17 2.26 -0.72 4.54 -2.62 5.84 -0.99 0.85 1.8 -0.84 2.05 -1.47 1.97 -2.04 2.42 -5.41 0.67 -7.73 -0.55 -1.11 -2.61 -2.84 -2.95 -2.66 2.02 1.36 3.04 3.58 2.85 6.01 z M 47.2 5.56 c 0.16 2.22 2.22 3.33 3.46 4.91 2.35 2.49 1.74 6.43 -0.23 8.95 0.24 -1.29 1.6 -3.21 1.07 -4.96 -0.39 -2.26 -2.25 -4.05 -4.36 -4.78 -0.02 4.14 0.04 8.29 -0.03 12.43 -0.21 2.29 -3.95 4.19 -5.21 1.73 -0.75 -2.48 3.02 -4.95 4.88 -3.02 0 -5.09 0 -10.17 0 -15.26 0.14 3.77e-4 0.28 -6.55e-4 0.42 3.77e-4 z M 39.84 2.19 c -0.03 0.75 -1.39 0.18 -1.99 0.36 -0.67 0.08 -1.88 -0.37 -1.52 0.75 0.18 1.15 -0.39 1.34 -0.24 0.09 -0.2 -0.97 0.1 -1.44 1.12 -1.19 0.88 0 1.75 0 2.63 0 z m 9.04 0 C 48.8 2.87 49.06 3.9 48.76 4.37 48.3 4.09 49.03 2.63 48.38 2.54 c -1.08 0 -2.16 0 -3.25 0 0.03 -0.75 1.39 -0.18 1.99 -0.36 0.58 0 1.17 0 1.75 0 z m -7.12 0.15 c 1.28 -0.03 2.54 -2.28 0.38 -2.02 -0.98 0.3 0.97 0.93 -0.44 1.44 -2.45 -0.8 3.03 -3.31 2.65 -0.47 -0.36 1.15 -1.5 0.72 -0.52 1.75 0.03 2.63 -5.38 1.26 -2.65 -0.3 1.73 0.44 -1.53 1.48 0.33 1.58 1.32 -0.08 2.02 -1.92 0.25 -1.98 z";
    u.model.MusicFont.TripletFeel16 = "m 24.36 19.36 c 2.02 0 4.05 0 6.07 0 0.12 -0.89 -1.29 -0.25 -1.87 -0.45 -1.4 0 -2.8 0 -4.2 0 0 0.15 0 0.3 0 0.45 z m 0 1.86 c 2.02 -0.02 4.07 0.04 6.07 -0.03 0.16 -0.94 -1.24 -0.3 -1.8 -0.49 -1.42 0 -2.84 0 -4.26 0 5e-6 0.17 -9e-6 0.35 6e-6 0.52 z M 1.22 18.4 c -0.17 2.26 0.72 4.54 2.62 5.86 0.99 0.86 -1.81 -0.84 -2.05 -1.47 -1.97 -2.04 -2.42 -5.41 -0.67 -7.73 0.55 -1.11 2.61 -2.85 2.95 -2.66 -2.02 1.36 -3.04 3.58 -2.85 6.01 z m 54.61 0 c 0.17 2.26 -0.72 4.54 -2.62 5.86 -0.99 0.86 1.81 -0.84 2.05 -1.47 1.97 -2.04 2.42 -5.41 0.67 -7.73 -0.55 -1.11 -2.61 -2.84 -2.95 -2.66 2.04 1.39 3.03 3.55 2.85 6.01 z M 39.84 2.19 c -0.01 0.77 -1.39 0.19 -1.99 0.37 -0.67 0.08 -1.87 -0.37 -1.5 0.75 0.2 0.99 -0.41 1.5 -0.25 0.21 -0.1 -0.87 -0.1 -1.65 1 -1.33 0.92 0 1.83 0 2.75 0 z m 9.04 0 c -0.09 0.69 0.17 1.72 -0.12 2.2 -0.46 -0.28 0.27 -1.74 -0.38 -1.83 -1.08 0 -2.16 0 -3.25 0 0.01 -0.77 1.39 -0.19 1.99 -0.37 0.58 0 1.17 0 1.75 0 z m -7.12 0.15 c 1.28 -0.03 2.54 -2.28 0.38 -2.02 -0.97 0.31 0.97 0.93 -0.44 1.45 -2.46 -0.81 3.02 -3.33 2.65 -0.49 -0.37 1.14 -1.5 0.73 -0.52 1.77 0.01 2.62 -5.38 1.24 -2.65 -0.31 1.73 0.44 -1.54 1.47 0.33 1.59 1.32 -0.07 2.02 -1.94 0.25 -1.99 z m 0.91 8.6 c 0.09 -0.68 -0.17 -1.71 0.12 -2.19 1.33 0 2.66 0 3.99 0 0.22 -0.97 -0.14 -1.36 -1.12 -1.13 -2.55 0 -5.1 0 -7.65 0 -0.02 4.83 0.04 9.67 -0.03 14.5 -0.24 2.29 -3.95 4.19 -5.23 1.73 -0.79 -2.65 3.3 -4.75 4.89 -3.13 0 -5.04 0 -10.09 0 -15.13 3.17 0 6.34 0 9.5 0 -0.02 5.51 0.04 11.03 -0.03 16.53 -0.21 2.29 -3.95 4.19 -5.21 1.73 -0.75 -2.48 3.04 -4.96 4.88 -3.01 0 -3.3 0 -6.6 0 -9.9 -1.37 10e-7 -2.75 -3e-6 -4.12 2e-6 z M 21.56 5.58 c -0.02 5.51 0.04 11.03 -0.03 16.53 -0.23 2.27 -3.95 4.2 -5.21 1.73 -0.75 -2.47 3.03 -4.96 4.87 -3.01 0 -3.38 0 -6.76 0 -10.14 -2.92 0 -5.84 0 -8.76 0 -0.02 3.81 0.04 7.61 -0.03 11.42 -0.23 2.28 -3.96 4.2 -5.22 1.73 -0.81 -2.65 3.3 -4.75 4.88 -3.13 0 -5.04 0 -10.09 0 -15.13 3.17 0 6.34 0 9.5 0 z M 21.19 8.64 C 21.49 7.58 20.84 7.48 19.95 7.61 c -2.5 0 -5.01 0 -7.51 0 -0.3 1.06 0.35 1.16 1.25 1.03 2.5 0 5.01 0 7.51 0 z";
    u.model.MusicFont.TripletFeelNone8 = "m 25.85 19.36 c 2.02 0 4.05 0 6.07 0 0.13 -0.91 -1.28 -0.27 -1.87 -0.46 -1.4 0 -2.8 0 -4.2 0 0 0.15 0 0.31 0 0.46 z m 0 1.86 c 2.02 -0.02 4.07 0.04 6.07 -0.03 0.16 -0.94 -1.24 -0.31 -1.8 -0.49 -1.42 0 -2.84 0 -4.26 0 5e-5 0.17 -9.1e-5 0.35 6e-5 0.52 z M 48.78 5.56 c -0.02 5.52 0.04 11.04 -0.03 16.55 -0.23 2.27 -3.95 4.2 -5.21 1.73 -0.75 -2.47 3.01 -4.95 4.87 -3.02 0 -4.4 0 -8.8 0 -13.21 -2.92 0 -5.84 0 -8.76 0 -0.02 4.83 0.04 9.67 -0.03 14.5 -0.23 2.28 -3.96 4.2 -5.22 1.73 -0.81 -2.65 3.28 -4.74 4.88 -3.15 0 -5.04 0 -10.09 0 -15.13 3.17 6.67e-4 6.34 0 9.5 10e-4 z M 1.22 18.4 C 1.05 20.65 1.94 22.93 3.84 24.24 4.83 25.09 2.04 23.4 1.79 22.77 -0.18 20.74 -0.63 17.36 1.12 15.05 1.67 13.94 3.72 12.2 4.07 12.38 2.03 13.78 1.04 15.94 1.22 18.4 z m 54.61 0 c 0.17 2.26 -0.72 4.54 -2.62 5.84 -0.99 0.85 1.8 -0.84 2.05 -1.47 1.97 -2.04 2.42 -5.41 0.67 -7.73 -0.55 -1.11 -2.61 -2.84 -2.95 -2.66 2.04 1.39 3.03 3.55 2.85 6.01 z M 12.43 5.56 c -0.02 5.52 0.04 11.04 -0.03 16.55 -0.24 2.29 -3.95 4.19 -5.23 1.73 -0.79 -2.65 3.29 -4.74 4.89 -3.15 0 -5.04 0 -10.09 0 -15.13 0.12 1.7e-4 0.25 -4.21e-4 0.37 5e-4 z m 9.19 0 c 0.16 2.22 2.22 3.33 3.46 4.91 2.35 2.49 1.74 6.43 -0.23 8.95 0.24 -1.29 1.6 -3.21 1.07 -4.96 -0.39 -2.26 -2.25 -4.05 -4.36 -4.78 -0.02 4.14 0.04 8.29 -0.03 12.43 -0.21 2.29 -3.95 4.19 -5.21 1.73 -0.75 -2.48 3.02 -4.95 4.88 -3.02 0 -5.09 0 -10.17 0 -15.26 0.14 5e-4 0.28 -8.68e-4 0.42 5e-4 z m -7.36 -3.38 c -0.03 0.75 -1.39 0.18 -1.99 0.36 -0.67 0.08 -1.87 -0.37 -1.5 0.75 0.2 0.99 -0.41 1.5 -0.25 0.21 -0.1 -0.87 -0.09 -1.63 1 -1.31 0.92 0 1.83 0 2.75 0 z m 9.04 0 c -0.09 0.68 0.17 1.71 -0.12 2.19 -0.46 -0.28 0.27 -1.74 -0.38 -1.83 -1.08 0 -2.16 0 -3.25 0 0.03 -0.75 1.39 -0.18 1.99 -0.36 0.58 0 1.17 0 1.75 0 z m -7.12 0.15 c 1.28 -0.03 2.54 -2.28 0.38 -2.02 -0.98 0.3 0.97 0.93 -0.44 1.44 -2.45 -0.8 3.03 -3.31 2.65 -0.47 -0.36 1.15 -1.5 0.72 -0.52 1.75 0.03 2.63 -5.38 1.26 -2.65 -0.3 1.73 0.44 -1.53 1.48 0.33 1.58 1.32 -0.08 2.02 -1.92 0.25 -1.98 z";
    u.model.MusicFont.TripletFeelNone16 = "m 24.36 19.36 c 2.02 0 4.05 0 6.07 0 0.12 -0.89 -1.29 -0.25 -1.87 -0.45 -1.4 0 -2.8 0 -4.2 0 0 0.15 0 0.3 0 0.45 z m 0 1.86 c 2.02 -0.02 4.07 0.04 6.07 -0.03 0.16 -0.94 -1.24 -0.31 -1.8 -0.49 -1.42 0 -2.84 0 -4.26 0 5e-6 0.17 -9e-6 0.35 6e-6 0.52 z M 1.22 18.4 C 1.05 20.66 1.94 22.94 3.84 24.25 4.83 25.11 2.03 23.41 1.79 22.78 -0.18 20.74 -0.63 17.37 1.12 15.05 1.67 13.94 3.72 12.2 4.07 12.38 2.04 13.75 1.02 15.97 1.22 18.4 z m 54.61 0 c 0.17 2.26 -0.72 4.54 -2.62 5.86 -0.99 0.86 1.81 -0.84 2.05 -1.47 1.97 -2.04 2.42 -5.41 0.67 -7.73 -0.55 -1.11 -2.61 -2.84 -2.95 -2.66 2.02 1.36 3.04 3.58 2.85 6.01 z M 14.26 2.19 c -0.01 0.77 -1.39 0.19 -1.99 0.37 -0.67 0.08 -1.87 -0.37 -1.5 0.75 0.2 0.99 -0.41 1.5 -0.25 0.21 -0.1 -0.87 -0.1 -1.65 1 -1.33 0.92 0 1.83 0 2.75 0 z m 9.04 0 c -0.09 0.69 0.17 1.72 -0.12 2.2 -0.49 -0.25 0.26 -1.75 -0.39 -1.83 -1.08 0 -2.15 0 -3.23 0 0.01 -0.77 1.39 -0.19 1.99 -0.37 0.58 0 1.17 0 1.75 0 z m -7.12 0.15 c 1.28 -0.03 2.54 -2.28 0.38 -2.02 -0.97 0.31 0.97 0.93 -0.44 1.45 -2.46 -0.81 3.02 -3.33 2.65 -0.49 -0.37 1.14 -1.5 0.73 -0.52 1.77 0.01 2.62 -5.38 1.24 -2.65 -0.31 1.73 0.44 -1.54 1.47 0.33 1.59 1.32 -0.07 2.02 -1.94 0.25 -1.99 z M 47.14 5.58 c -0.02 5.51 0.04 11.03 -0.03 16.53 -0.23 2.27 -3.95 4.2 -5.21 1.73 -0.75 -2.47 3.03 -4.96 4.87 -3.01 0 -3.38 0 -6.76 0 -10.14 -2.92 0 -5.84 0 -8.76 0 -0.02 3.81 0.04 7.61 -0.03 11.42 -0.23 2.28 -3.96 4.2 -5.22 1.73 -0.81 -2.65 3.3 -4.75 4.88 -3.13 0 -5.04 0 -10.09 0 -15.13 3.17 3.33e-4 6.34 -6.67e-4 9.5 5e-4 z m -0.37 3.06 c 0.3 -1.06 -0.35 -1.16 -1.25 -1.03 -2.5 0 -5.01 0 -7.51 0 -0.3 1.06 0.35 1.16 1.25 1.03 2.5 0 5.01 0 7.51 0 z M 17.09 10.93 c 0.09 -0.68 -0.17 -1.71 0.12 -2.19 1.33 0 2.66 0 3.99 0 0.22 -0.97 -0.14 -1.36 -1.12 -1.13 -2.55 0 -5.1 0 -7.65 0 -0.02 4.83 0.04 9.67 -0.03 14.5 -0.24 2.29 -3.95 4.19 -5.23 1.73 -0.79 -2.65 3.3 -4.75 4.89 -3.13 0 -5.04 0 -10.09 0 -15.13 3.17 0 6.34 0 9.5 0 -0.02 5.51 0.04 11.03 -0.03 16.53 -0.21 2.29 -3.95 4.19 -5.21 1.73 -0.75 -2.48 3.04 -4.96 4.88 -3.01 0 -3.3 0 -6.6 0 -9.9 -1.37 3.32e-4 -2.75 -6.65e-4 -4.12 5e-4 z";
    u.model.MusicFont.KeySharp = "m 3.11 3.97 c 0 -1.32 0 -2.65 0 -3.97 0.22 0 0.43 0 0.65 0 0 1.24 0 2.48 0 3.73 0.31 -0.13 0.62 -0.27 0.93 -0.4 0 0.79 0 1.57 0 2.36 C 4.38 5.82 4.07 5.95 3.76 6.09 c 0 1.27 0 2.53 0 3.8 0.31 -0.15 0.62 -0.29 0.93 -0.44 0 0.79 0 1.57 0 2.36 -0.31 0.13 -0.62 0.27 -0.93 0.4 0 1.29 0 2.58 0 3.87 -0.22 0 -0.43 0 -0.65 0 0 -1.21 0 -2.41 0 -3.62 -0.51 0.22 -1.03 0.43 -1.54 0.65 0 1.3 0 2.6 0 3.9 -0.22 0 -0.43 0 -0.65 0 0 -1.22 0 -2.44 0 -3.66 C 0.62 13.47 0.31 13.59 0 13.71 0 12.92 0 12.14 0 11.35 c 0.31 -0.12 0.62 -0.24 0.93 -0.37 0 -1.27 0 -2.53 0 -3.8 C 0.62 7.32 0.31 7.46 0 7.59 0 6.79 0 5.99 0 5.19 0.31 5.07 0.62 4.95 0.93 4.83 c 0 -1.29 0 -2.58 0 -3.87 0.22 0 0.43 0 0.65 0 0 1.21 0 2.41 0 3.62 C 2.09 4.38 2.6 4.17 3.11 3.97 z M 1.57 6.94 c 0 1.27 0 2.53 0 3.8 0.51 -0.22 1.03 -0.43 1.54 -0.65 0 -1.25 0 -2.51 0 -3.76 -0.51 0.2 -1.03 0.41 -1.54 0.61 z";
    u.model.MusicFont.KeyNormal = "M 0 12.45 C 0 8.3 0 4.15 0 0 c 0.24 0 0.47 0 0.71 0 0 1.87 0 3.74 0 5.6 C 1.84 5.29 2.97 4.98 4.1 4.67 c 0 4.11 0 8.22 0 12.33 -0.22 0 -0.44 0 -0.67 0 0 -1.83 0 -3.66 0 -5.49 C 2.29 11.82 1.14 12.13 0 12.45 z M 0.71 10.37 C 1.61 10.12 2.52 9.87 3.43 9.62 c 0 -1.01 0 -2.02 0 -3.03 -0.91 0.25 -1.82 0.5 -2.73 0.74 0 1.01 0 2.02 0 3.03 z";
    u.model.MusicFont.KeyFlat = "m 0 2 c 0.21 0 0.42 0 0.63 0 0 2.93 0 5.85 0 8.78 0.88 -0.5 1.91 -1.01 2.95 -0.78 0.91 0.24 1.29 1.34 1.1 2.18 -0.31 1.25 -1.36 2.14 -2.38 2.83 C 1.42 15.52 0.7 16.27 0 17 0 12 0 7 0 2 z m 2.64 8.71 c -0.62 -0.36 -1.3 0.1 -1.8 0.47 -0.31 0.1 -0.19 0.42 -0.21 0.67 0 1.28 0 2.57 0 3.85 C 1.13 15.18 1.67 14.71 2.13 14.17 2.68 13.42 3.31 12.58 3.25 11.6 3.21 11.22 2.97 10.89 2.64 10.71 z";
    u.model.MusicFont.SilenceHalf = "M 0 0 L 10 0 L 10 4 L 0 4 L 0 0 z ";
    u.model.MusicFont.SilenceQuarter = "M 2.4 0.04 C 4.3 2.23 6.19 4.42 8.09 6.61 6.57 7.75 5.58 9.43 4.76 11.11 c -0.52 1.6 0.26 3.29 1.29 4.5 0.24 0.66 2.07 1.26 1.03 1.93 -1.31 0.03 -2.84 -0.37 -3.95 0.55 -0.77 0.84 -0.45 2.17 0.21 2.97 0.14 0.66 1.69 1.33 1.09 1.84 C 3.38 22.69 2.74 21.73 1.92 21.12 1.1 20.27 0.05 19.37 0 18.1 0 16.77 1.21 15.64 2.52 15.61 3.61 15.48 4.75 15.77 5.64 16.42 3.91 14.2 2.18 11.98 0.46 9.77 1.95 8.55 2.86 6.78 3.55 5.02 3.88 3.53 2.92 2.2 2.17 1.01 1.62 0.63 1.35 -0.35 2.4 0.04 z";
    u.model.MusicFont.SilenceEighth = "M 2.19 0 C 3.49 -0.03 4.76 1.37 4.32 2.66 4.26 3.18 3.53 3.64 3.47 3.89 4.27 4.3 5.11 3.75 5.7 3.24 6.67 2.38 7.28 1.18 7.97 0.11 8.48 -0.19 8.34 0.36 8.25 0.65 7.15 5.44 6.06 10.22 4.96 15 4.63 15 4.3 15 3.97 15 4.95 11.06 5.93 7.12 6.92 3.18 6.24 4.45 4.71 4.96 3.34 4.89 2.47 4.82 1.53 4.65 0.84 4.09 -0.23 3.23 -0.33 1.4 0.74 0.52 1.14 0.16 1.66 0.01 2.19 0 z";
    u.model.MusicFont.SilenceSixteenth = "M 4.58 12.12 C 5.95 11.59 6.78 10.24 7.35 8.97 7.83 7.03 8.3 5.09 8.77 3.15 8.07 4.45 6.51 4.93 5.11 4.84 4.52 4.91 3.98 4.62 3.43 4.44 2.32 4.03 1.69 2.76 1.97 1.62 2.28 0.02 4.57 -0.55 5.64 0.63 6.55 1.43 6.51 3.05 5.45 3.71 5.36 4.19 6.59 3.99 6.98 3.66 8.23 2.89 8.83 1.47 9.7 0.35 9.87 -0.15 10.51 0 10.17 0.49 8.42 7.99 6.67 15.5 4.91 23 4.6 23 4.29 23 3.98 23 4.92 19.1 5.86 15.19 6.8 11.29 6.13 12.56 4.62 13.09 3.25 13 2.02 12.96 0.61 12.44 0.14 11.2 -0.3 10.11 0.24 8.69 1.41 8.35 2.54 7.9 3.92 8.55 4.28 9.72 4.57 10.55 4.21 11.58 3.4 11.97 c 0.39 0.12 0.78 0.29 1.18 0.15 z";
    u.model.MusicFont.SilenceThirtySecond = "M 6.47 12.03 C 8.29 11.3 9.21 9.34 9.56 7.51 9.92 6.04 10.27 4.56 10.63 3.08 9.64 4.92 7.15 5.09 5.38 4.46 3.78 3.93 3.21 1.56 4.57 0.49 5.72 -0.52 7.61 0.15 8.07 1.55 8.6 2.43 7.48 3.5 7.35 3.83 8.35 4.33 9.38 3.44 10 2.71 c 0.66 -0.83 1.13 -1.9 1.82 -2.66 0.56 -0.12 0.05 0.61 0.07 0.91 C 9.56 10.97 7.22 20.99 4.89 31 4.57 30.92 3.75 31.23 4.04 30.68 4.95 26.9 5.86 23.12 6.77 19.35 5.77 21.17 3.29 21.4 1.53 20.67 0.07 20.13 -0.56 18.04 0.6 16.92 c 1.08 -1.13 3.22 -0.66 3.66 0.87 0.53 0.87 -0.54 1.99 -0.73 2.28 1.18 0.47 2.29 -0.59 2.93 -1.48 0.66 -0.79 0.95 -1.76 1.15 -2.75 C 7.98 14.32 8.35 12.78 8.72 11.25 7.96 12.7 6.22 13.02 4.72 12.93 3.53 12.75 2.13 12.09 1.95 10.75 1.57 9.33 2.89 7.91 4.33 8.13 5.89 8.21 6.92 10.33 5.77 11.51 c -1.03 0.58 0.16 0.67 0.7 0.52 z";
    u.model.MusicFont.SilenceSixtyFourth = "M 6.61 20.61 C 8.85 19.73 9.53 17.2 9.98 15.06 10.25 13.86 10.53 12.67 10.81 11.47 9.73 13.44 6.96 13.6 5.13 12.7 3.51 11.89 3.43 9.15 5.21 8.5 6.88 7.68 9.03 9.67 8.14 11.37 7.48 12.01 7.22 12.47 8.36 12.31 9.96 11.87 11.03 10.26 11.43 8.72 11.89 6.88 12.35 5.04 12.8 3.2 11.95 4.77 9.95 5.12 8.33 4.85 6.95 4.62 5.61 3.49 5.82 1.97 5.87 0.05 8.65 -0.7 9.75 0.8 10.95 1.74 9.66 3.52 9.62 3.97 11.16 4.33 12.19 2.71 12.93 1.6 13.18 1.26 14.26 -0.61 14.24 0.38 11.16 13.59 8.07 26.79 4.99 40 c -0.52 0.01 -1.23 0.16 -0.81 -0.58 0.91 -3.78 1.82 -7.55 2.73 -11.33 -1.12 2.02 -4.06 2.2 -5.86 1.06 -1.46 -0.88 -1.41 -3.42 0.28 -4.01 1.6 -0.79 3.65 0.92 3.01 2.62 -0.29 0.74 -1.37 1.25 -0.01 1.2 1.47 -0.28 2.42 -1.65 3.07 -2.89 C 7.89 23.99 8.41 21.91 8.91 19.82 8.06 21.39 6.06 21.74 4.45 21.47 3.08 21.23 1.74 20.1 1.96 18.59 c 0.05 -1.91 2.83 -2.68 3.93 -1.17 0.83 0.89 0.61 2.48 -0.48 3.06 0.39 0.2 0.78 0.3 1.2 0.13";
    u.model.MusicFont.NoteHalf = "M 2.84 0.88 C 4.09 0.12 5.69 -0.3 7.1 0.27 8.33 0.78 9.2 2.15 8.95 3.49 8.73 5.19 7.49 6.6 6.01 7.36 4.74 8.13 3.1 8.5 1.71 7.87 0.9 7.54 0.27 6.82 0.07 5.97 -0.18 4.85 0.23 3.69 0.83 2.76 1.35 1.99 2.05 1.35 2.84 0.88 z M 7.91 1.43 C 7.36 0.98 6.59 1.13 5.95 1.23 4.3 1.64 2.8 2.67 1.87 4.1 1.37 4.83 0.95 5.67 0.95 6.57 1.02 7.12 1.71 7.29 2.16 7.12 3.55 6.78 4.87 6.15 6 5.27 6.9 4.47 7.68 3.49 8.05 2.34 8.13 2.04 8.15 1.67 7.91 1.43 z";
    u.model.MusicFont.NoteQuarter = "M 4.59128 11.4226 C 4.19028 11.1906 4.40455 11.1526 3.58629 11.0147 C 3.0595 10.9259 2.06808 11.4558 1.53125 11.9063 C 1.03394 12.3235 0.639089 12.812 0.375 13.3125 C -0.0364817 14.0924 -0.137838 14.9046 0.1875 15.4375 C 0.506244 15.9596 1.16304 16.1243 1.90625 15.9375 C 2.40848 15.8113 2.95574 15.5242 3.46875 15.0938 C 3.9364 14.7014 4.29963 14.2198 4.5625 13.75 C 4.92428 13.1034 5.06644 12.5875 5.10237 12.1523 C 5.23953 11.9179 5.18046 9.86449 5.22973 7.48788 C 5.25316 5.23822 5.35206 0.41262 5.37256 0.13467 C 5.38276 -0.00356832 5.06149 1.04731 5.01682 0.998391 C 4.84902 0.814642 4.99346 6.98832 4.94711 9.88276 C 4.89519 10.7164 5.11487 12.1346 4.59128 11.4226 Z";
    u.model.MusicFont.Harmonic = "M 0 4.58 C 1.47 6.06 2.94 7.53 4.42 9 5.24 8 6.1 7.01 7.18 6.28 7.97 5.66 8.76 5.04 9.55 4.42 8.1 2.94 6.64 1.47 5.19 0 4.4 1 3.39 1.79 2.51 2.7 1.75 3.42 0.9 4.04 0 4.58 z";
    u.model.MusicFont.Sticks = "m 4.23 4.91 l 3.65 3.65 0.62 -0.64 -3.62 -3.62 L 8.44 0.74 7.82 0.12 4.23 3.70 0.63 0.10 0 0.74 3.59 4.34 l -3.59 3.6 0.6 0.6 3.63 -3.63 z";
    u.model.MusicFont.HiHat = "m 9.00 6 q 0 0.70 -0.32 1.41 Q 8.35 8.13 7.75 8.71 7.14 9.30 6.44 9.63 5.74 9.95 5 10.00 q -0.73 0 -1.44 -0.32 Q 2.83 9.35 2.24 8.75 1.66 8.14 1.33 7.44 1.00 6.74 0.99 6 q 0 -0.73 0.32 -1.44 Q 1.64 3.83 2.24 3.24 2.85 2.66 3.55 2.33 4.25 2.00 5 1.99 5.73 2.02 6.44 2.35 7.16 2.67 7.75 3.28 8.33 3.88 8.66 4.58 8.99 5.28 9.00 6 z M 10 6 Q 10 5.10 9.59 4.20 9.18 3.31 8.43 2.56 7.68 1.81 6.80 1.42 5.92 1.03 5 1 4.10 1 3.20 1.40 2.31 1.81 1.56 2.56 0.81 3.31 0.42 4.19 0.03 5.07 0 6.03 0 6.92 0.40 7.82 0.81 8.71 1.56 9.45 2.31 10.18 3.19 10.57 4.07 10.96 5 11 5.94 10.96 6.84 10.56 7.73 10.15 8.45 9.42 9.16 8.68 9.57 7.80 9.98 6.92 10 6 z M 4.93 6.76 L 7.03 8.86 7.83 8.03 5.83 6 7.83 3.96 7.03 3.13 4.93 5.23 2.89 3.19 2.13 3.96 4.16 6 2.13 8.03 2.89 8.80 4.93 6.76 z";
    u.model.MusicFont.ChineseCymbal = "m 4.55 -4.03 l 5.46 5.48 -0.61 0.63 -4.88 -4.86 -4.85 4.85 -0.64 -0.61 5.53 -5.48 z m -0.03 9.94 l 2.99 2.97 1.37 -1.35 L 5.91 4.54 8.90 1.58 7.56 0.23 4.55 3.26 1.54 0.20 0.25 1.49 3.27 4.52 0.18 7.61 1.51 8.94 4.52 5.91 z";
    u.model.MusicFont.RideCymbal = "M 8 7 L 4 11 0 7 4 3 8 7 z m -1.44 0.44 l -3 -3 -2.12 2.12 3 3 2.12 -2.12 z";
    u.model.MusicFont.DeadNote = "M 4.99 5.57 C 5.47 5.71 5.89 6.1 5.92 6.62 6.03 7.41 6 8.21 6.01 9 7.01 9 8 9 9 9 9 7.98 9 6.97 9 5.95 8.15 5.94 7.29 6.01 6.46 5.81 6 5.73 5.63 5.31 5.57 4.86 5.59 4.53 5.49 4.18 5.69 3.88 5.88 3.45 6.34 3.24 6.78 3.22 7.52 3.14 8.26 3.16 9 3.16 9 2.14 9 1.12 9 0.11 c -1 0 -1.99 0 -2.99 0 -0.02 0.85 0.06 1.71 -0.15 2.54 -0.08 0.46 -0.49 0.82 -0.95 0.88 -0.31 0 -0.63 0 -0.94 0 C 3.49 3.39 3.09 2.96 3.07 2.44 2.97 1.67 2.99 0.89 2.99 0.11 c -1 0 -1.99 0 -2.99 0 C 0 1.12 0 2.14 0 3.16 0.85 3.17 1.71 3.1 2.54 3.3 3 3.38 3.37 3.8 3.43 4.25 3.41 4.58 3.51 4.93 3.31 5.23 3.12 5.66 2.66 5.87 2.22 5.89 1.48 5.97 0.74 5.95 0 5.95 0 6.97 0 7.98 0 9 1 9 1.99 9 2.99 9 3.01 8.15 2.93 7.29 3.14 6.46 3.22 6.01 3.61 5.63 4.05 5.57 c 0.31 0 0.63 0 0.94 0 z";
    u.model.MusicFont.FooterUpEighth = "m 0.19 11.86 c 0 -2.27 0 -4.54 0 -6.81 0.48 -0.06 0.88 -0.02 0.83 0.6 0.24 0.91 0.39 1.87 0.97 2.64 0.77 1.2 1.99 2 2.94 3.05 1.54 1.55 2.98 3.28 3.69 5.38 0.9 2.5 0.48 5.26 -0.41 7.69 C 7.72 25.71 7 26.91 6.22 28.04 5.56 27.64 6.21 27.27 6.49 26.8 7.6 25.04 8.1 22.96 8.13 20.89 7.98 18.65 7.01 16.5 5.43 14.9 4.12 13.58 2.53 12.46 0.76 11.86 c -0.19 0 -0.38 0 -0.57 0 z";
    u.model.MusicFont.FooterUpSixteenth = "M 8.07 20.52 C 7.82 17.12 5.48 14.18 2.56 12.58 2.07 12.29 0.91 11.58 1.59 12.64 c 0.77 1.69 2.4 2.7 3.62 4.04 1.09 1.16 2.18 2.39 2.86 3.85 z M 0.77 16.91 c -0.41 0.05 -0.76 0.04 -0.61 -0.47 0 -3.81 0 -7.63 0 -11.44 0.68 -0.18 0.91 0.23 0.95 0.88 0.22 1.17 0.68 2.3 1.52 3.17 2.01 1.94 4.22 3.83 5.48 6.39 1.09 2.1 1.29 4.58 0.65 6.85 0.69 2.06 0.29 4.29 -0.3 6.33 C 7.97 30.2 7.16 31.66 6.2 33 5.34 32.46 6.74 31.89 6.81 31.21 7.72 29.5 8.14 27.55 8.09 25.63 8.07 24.87 7.89 24.71 7.64 25.48 7.22 26.28 6.73 27.27 6.16 27.82 5.36 27.28 6.83 26.67 6.86 25.97 7.2 25.28 7.52 24.57 7.7 23.81 6.9 20.89 4.51 18.65 1.85 17.35 1.5 17.18 1.14 17.04 0.77 16.91 z";
    u.model.MusicFont.FooterUpThirtySecond = "M 8.01 20.36 C 7.74 16.68 5.06 13.56 1.83 12 0.45 11.27 2.17 13.66 2.65 14.1 4.63 15.98 6.8 17.88 8.01 20.36 z M 0 0 c 0.93 -0.29 0.82 0.81 1.05 1.43 0.28 1.77 1.66 3.01 2.91 4.15 2.23 2.1 4.42 4.59 4.92 7.72 0.18 1.25 0.16 2.54 -0.14 3.77 0.47 1.66 0.4 3.44 -0.05 5.09 0.76 2.36 0.23 4.92 -0.58 7.2 C 7.63 30.66 6.93 31.87 6.12 33 5.24 32.32 7.02 31.52 7.01 30.63 7.76 29 8.11 27.16 8.01 25.38 7.92 23.94 7.38 26.08 6.99 26.49 6.78 27.03 5.82 28.32 5.86 27.28 6.73 26.26 7.28 24.99 7.63 23.71 7.37 23.06 7.05 21.19 6.48 22.6 6.31 23.58 5.27 22.84 6.07 22.36 7.31 21.2 5.4 20.07 4.7 19.16 3.49 18.08 2.05 17.14 0.48 16.72 -0.13 16.92 -0.01 16.4 0 15.97 0 10.65 0 5.32 0 0 z M 7.83 14.77 C 7.21 11.4 4.6 8.64 1.52 7.29 2.3 8.95 3.91 9.95 5.11 11.27 6.13 12.34 7.1 13.51 7.83 14.77 z";
    u.model.MusicFont.FooterUpSixtyFourth = "m 8.07 20.53 c -0.29 -3.95 -3.31 -7.22 -6.84 -8.72 0.54 2.1 2.54 3.27 3.92 4.8 1.11 1.19 2.23 2.44 2.92 3.93 z M 7.9 14.89 C 7.27 11.48 4.63 8.71 1.53 7.34 2.35 9.08 4.05 10.11 5.29 11.51 c 0.96 1.04 1.89 2.14 2.6 3.38 z M 0.63 21.56 C -0.04 21.75 -0.08 21.32 0 20.78 0 13.85 0 6.93 0 0 1.28 -0.3 0.81 1.63 1.32 2.36 2.13 4.32 4.02 5.46 5.39 6.99 7.43 9.14 9.15 11.87 9.07 14.93 c -0.18 1.54 -0.19 2.99 0.07 4.53 0.08 1.48 -0.63 2.86 -0.06 4.3 0.31 1.41 -0.31 2.81 -0.15 4.19 C 9.47 31.5 8.2 35.14 6.12 38 5.21 37.29 7.03 36.51 7.01 35.59 7.78 33.88 8.18 31.95 8 30.08 7.46 31 6.83 32.93 6.01 33.09 5.75 32.27 7.34 31.19 7.39 30.1 8.1 29.16 7.42 27.28 6.82 27.01 6.69 27.62 5.8 28.35 5.91 27.5 7.37 26.46 5.84 25.23 5.02 24.33 3.79 23.1 2.27 22.15 0.63 21.56 z m 7.27 3.46 c 0.17 0.54 0.11 -0.4 0 0 z M 6.47 22.86 c 0.4 0.56 1.45 2.23 1.12 0.71 -0.34 -0.71 -0.43 -2.27 -1.12 -0.71 z M 1.38 17.15 c 0.95 2.06 3.03 3.19 4.41 4.92 0.71 1 1.16 -0.97 0.26 -1.33 C 4.84 19.15 3.21 17.92 1.38 17.15 z";
    u.model.MusicFont.FooterDownEighth = "m 0 -9.83 c 0 2.27 0 4.54 0 6.81 0.48 0.06 0.88 0.02 0.83 -0.6 0.24 -0.91 0.39 -1.87 0.97 -2.64 0.77 -1.2 1.99 -2 2.94 -3.05 1.54 -1.55 2.98 -3.28 3.69 -5.38 0.9 -2.5 0.48 -5.26 -0.41 -7.69 -0.49 -1.3 -1.21 -2.49 -2 -3.63 -0.65 0.41 -0.01 0.78 0.27 1.24 1.11 1.76 1.61 3.85 1.64 5.91 -0.15 2.24 -1.12 4.39 -2.7 5.99 -1.31 1.33 -2.89 2.45 -4.67 3.05 -0.19 0 -0.38 0 -0.57 0 z";
    u.model.MusicFont.FooterDownSixteenth = "m 7.94 -15.56 c -0.25 3.4 -2.58 6.34 -5.51 7.94 -0.49 0.29 -1.65 1 -0.97 -0.06 0.77 -1.69 2.4 -2.7 3.62 -4.04 1.09 -1.16 2.18 -2.39 2.86 -3.85 z m -7.29 3.61 c -0.41 -0.05 -0.76 -0.04 -0.61 0.47 0 3.81 0 7.63 0 11.44 0.68 0.18 0.91 -0.23 0.95 -0.88 C 1.2 -2.1 1.67 -3.22 2.5 -4.09 c 2.01 -1.94 4.22 -3.83 5.48 -6.39 1.09 -2.1 1.29 -4.58 0.65 -6.85 0.69 -2.06 0.29 -4.29 -0.3 -6.33 -0.49 -1.58 -1.3 -3.04 -2.26 -4.38 -0.86 0.54 0.54 1.11 0.61 1.79 0.91 1.7 1.33 3.66 1.28 5.58 -0.03 0.76 -0.21 0.92 -0.46 0.15 -0.41 -0.8 -0.9 -1.79 -1.48 -2.34 -0.8 0.55 0.67 1.15 0.7 1.86 0.33 0.69 0.66 1.4 0.84 2.15 -0.8 2.92 -3.19 5.17 -5.85 6.46 -0.35 0.17 -0.71 0.31 -1.08 0.44 z";
    u.model.MusicFont.FooterDownThirtySecond = "m 8.01 -20.41 c -0.27 3.68 -2.94 6.8 -6.18 8.36 -1.38 0.73 0.34 -1.66 0.81 -2.1 1.99 -1.88 4.16 -3.78 5.36 -6.26 z M 0 -0.05 c 0.93 0.29 0.82 -0.81 1.05 -1.43 0.28 -1.77 1.66 -3.01 2.91 -4.15 2.23 -2.1 4.42 -4.59 4.92 -7.72 0.18 -1.25 0.16 -2.54 -0.14 -3.77 0.47 -1.66 0.4 -3.44 -0.05 -5.09 0.76 -2.36 0.23 -4.92 -0.58 -7.2 -0.49 -1.3 -1.2 -2.51 -2.01 -3.64 -0.88 0.68 0.9 1.48 0.89 2.37 0.76 1.63 1.1 3.46 1.01 5.25 -0.09 1.44 -0.63 -0.71 -1.03 -1.11 -0.2 -0.54 -1.16 -1.83 -1.12 -0.8 0.87 1.02 1.41 2.29 1.77 3.58 -0.27 0.65 -0.58 2.52 -1.15 1.11 -0.17 -0.98 -1.21 -0.24 -0.41 0.24 1.25 1.17 -0.67 2.29 -1.37 3.2 -1.21 1.08 -2.64 2.02 -4.21 2.43 -0.61 -0.2 -0.5 0.33 -0.48 0.75 0 5.32 0 10.65 0 15.97 z M 7.83 -14.82 c -0.62 3.37 -3.24 6.13 -6.32 7.48 0.78 -1.66 2.39 -2.66 3.59 -3.99 1.02 -1.06 1.99 -2.23 2.73 -3.5 z";
    u.model.MusicFont.FooterDownSixtyFourth = "m 8.07 -20.56 c -0.29 3.95 -3.31 7.22 -6.84 8.72 0.54 -2.1 2.54 -3.27 3.92 -4.8 1.11 -1.19 2.23 -2.44 2.92 -3.93 z m -0.18 5.64 c -0.63 3.4 -3.26 6.17 -6.37 7.54 0.82 -1.73 2.52 -2.77 3.76 -4.17 0.96 -1.04 1.89 -2.14 2.6 -3.38 z M 0.63 -21.59 C -0.04 -21.78 -0.08 -21.35 0 -20.81 c 0 6.93 0 13.85 0 20.78 1.28 0.3 0.81 -1.63 1.32 -2.36 0.81 -1.96 2.71 -3.1 4.07 -4.63 2.04 -2.14 3.76 -4.87 3.68 -7.94 -0.18 -1.54 -0.19 -2.99 0.07 -4.53 0.08 -1.48 -0.63 -2.86 -0.06 -4.3 0.31 -1.41 -0.31 -2.81 -0.15 -4.19 0.54 -3.56 -0.73 -7.2 -2.82 -10.06 -0.91 0.71 0.92 1.49 0.9 2.41 0.77 1.71 1.17 3.64 0.98 5.51 -0.53 -0.92 -1.16 -2.85 -1.99 -3.01 -0.25 0.82 1.33 1.9 1.38 3 0.71 0.93 0.03 2.82 -0.57 3.08 -0.13 -0.61 -1.02 -1.34 -0.91 -0.49 1.47 1.04 -0.07 2.27 -0.89 3.17 -1.23 1.23 -2.76 2.19 -4.4 2.77 z m 7.27 -3.46 c 0.17 -0.54 0.11 0.4 0 0 z m -1.43 2.16 c 0.4 -0.56 1.45 -2.23 1.12 -0.71 -0.34 0.71 -0.43 2.27 -1.12 0.71 z m -5.09 5.72 c 0.95 -2.06 3.03 -3.19 4.41 -4.92 0.71 -1 1.16 0.97 0.26 1.33 -1.21 1.58 -2.84 2.82 -4.67 3.59 z";
    u.model.MusicFont.GraceNote = "M 5.62 17.02 C 5.29 18.81 3.42 20.24 1.6 19.97 0.55 19.79 -0.23 18.68 0.06 17.64 0.39 16.16 1.83 15.13 3.28 14.9 c 0.74 -0.1 1.55 0.13 2.02 0.73 0 -1.96 0 -3.92 0 -5.87 C 4.9 10.37 4.49 10.98 4.09 11.59 3.8 11.45 3.57 11.3 3.89 11.03 4.36 10.31 4.83 9.59 5.3 8.87 c 0 -2.95 0 -5.91 0 -8.86 C 5.96 -0.19 5.81 0.67 6 1.07 6.28 2.38 7.49 3.11 8.34 4.03 8.54 4.12 8.68 3.59 8.86 3.42 9.23 2.86 9.59 2.3 9.96 1.74 10.25 1.89 10.48 2.04 10.17 2.31 9.7 3.03 9.24 3.75 8.77 4.47 10 5.79 11.01 7.48 10.97 9.33 10.96 11.24 10.21 13.07 9.11 14.6 8.58 14.15 9.69 13.65 9.69 13.08 10.16 12.06 10.38 10.91 10.31 9.79 10.14 8.16 9.25 6.69 7.99 5.67 7.22 6.79 6.45 8 5.68 9.15 c 0 2.62 0 5.25 0 7.87 l -0.05 0 -0.01 0 -9e-7 0 z M 7.6 5.36 C 7.07 5.03 6.11 4.27 5.68 4.46 c 0 1.27 0 2.53 0 3.8 C 6.32 7.29 6.96 6.33 7.6 5.36 z";
    u.model.MusicFont.GraceDeadNote = "M 0.78 8 C 0.52 8 0.26 8 0 8 0 5.33 0 2.67 0 0 c 3.99 0 7.97 0 11.96 0 0 2.67 0 5.33 0 8 -0.25 0 -0.5 0 -0.76 0 0 -1.9 0 -3.79 0 -5.69 -3.48 0 -6.95 0 -10.43 0 0 1.9 0 3.79 0 5.69 z";
    u.model.MusicFont.TrillUpEigth = "M 0 4.77 L 9 0.37 9 2.71 0 7 0 4.77 z";
    u.model.MusicFont.TrillUpSixteenth = "M 0 8.77 L 9 4.37 9 6.71 0 11 0 8.77 z M 0 4.73 L 9 0.33 9 2.67 0 6.96 0 4.73 z";
    u.model.MusicFont.TrillUpThirtySecond = "M 0 5.14 L 9 0.73 9 3.07 0 7.37 0 5.14 z M 0 9.01 L 9 4.61 9 6.95 0 11.24 0 9.01 z M 0 12.77 L 9 8.37 9 10.71 0 15 0 12.77 z";
    u.model.MusicFont.AccentuatedNote = "M 13 3.18 L 0 6 0 5.63 11.13 3.18 0 0.73 0 0.36 13 3.18 z";
    u.model.MusicFont.HeavyAccentuatedNote = "M 11 12 L 7.6 12 4.15 5.61 0.84 12 0 12 5.22 1.7 11 12 z";
    u.model.MusicFont.VibratoLeftRight = "M 11.19 5.58 C 10.1 6.65 9.09 7.81 7.93 8.81 7.35 9.3 6.98 8.26 6.55 7.93 5.36 6.62 4.18 5.31 2.98 4 2.41 4.23 2 4.73 1.53 5.13 1.02 5.62 0.51 6.1 0 6.59 0.02 6.16 -0.05 5.69 0.03 5.29 1.79 3.63 3.51 1.94 5.28 0.3 5.93 -0.41 6.4 0.74 6.92 1.1 7.99 2.21 8.99 3.4 10.14 4.44 11.34 3.53 12.36 2.39 13.47 1.36 13.89 0.9 14.4 0.54 14.88 0.14 c 0.54 0.23 0.81 0.82 1.22 1.23 0.81 0.91 1.56 1.88 2.41 2.74 0.45 0.72 1.08 0.87 1.61 0.14 0.59 -0.63 1.15 -1.28 1.73 -1.92 -0.02 0.45 0.04 0.93 -0.03 1.35 C 20.28 5.23 18.76 6.8 17.21 8.32 16.78 8.86 16.09 9.29 15.65 8.51 14.46 7.28 13.39 5.93 12.16 4.75 11.73 4.87 11.54 5.35 11.19 5.58 z";
    u.model.MusicFont.BeatCursor = "M 14,0 L 19,0 L 19,95, L 14,95 z";
    u.model.SelectionMark.DEFAULT_MARKER_RADIUS = 9;
    u.model.StaveEffects.letRing = 0;
    u.model.StaveEffects.palmMute = 1;
    u.model.StaveEffects.vibrato = 2;
    u.model.StaveEffects.fadeIn = 3;
    u.model.StaveEffects.fadeOut = 4;
    u.model.StaveEffects.count = 5;
    u.model.Tablature.DEFAULT_MAX_STAVE_WIDTH = 1080;
    u.model.Tablature.MIN_TAB_OFFSET = 80;
    u.model.Tablature.SCROLL_ANIMATION_TIME = 500;
    u.model.Tablature.ANIMATION_TIME_STEP = 25;
    u.painters.BeatPainter.DURATION_LINE_THICKNESS = 3;
    u.painters.BeatPainter.DURATION_LINE_SEPARATOR_THICKNESS = 1;
    u.painters.BeatPainter.SINGLE_BEAT_LINE_DURATION_WIDTH = 5;
    u.painters.BeatPainter.STROKE_DIRECTION_UP = 1;
    u.painters.BeatPainter.STROKE_DIRECTION_DOWN = -1;
    u.painters.PossibleLoopAreaSelectionPainter.ALPHA = 0.1;
    u.painters.PossibleLoopAreaSelectionPainter.COLOR = 16728191;
    u.painters.SelectionMarkPainter.DEFAULT_ALPHA = 0.1;
    u.painters.SelectionMarkPainter.HIGHLIGHT_ALPHA = 0.2;
    u.painters.SelectionMarkPainter.LEFT = 0;
    u.painters.SelectionMarkPainter.RIGHT = 1;
    F.main()
})(typeof window != "undefined" ? window : exports);